package Model.APPS.SDMMC_BLOCK.v4_0_26.Templates;

import Model.APPS.SDMMC_BLOCK.v4_0_26.SDMMC_BLOCK

import java.nio.file.*
out.print("""
/**
 * @cond
 ***********************************************************************************************************************
 * Copyright (c) 2016, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2016-01-20:
 *     - Initial version <br>
 *
 * 2016-02-05:
 *     - RTOS support added <br>
 *
 * 2016-04-05:
 *     - Test hooks is added to emulates the hardware failures.<br>
 *     - Bug fixes done for PR.<br>
 *
 * 2016-06-07:
 *     - Fixed code generation error for project folder paths with spaces in between. 
 * @endcond
 */
 
#ifndef SDMMC_BLOCK_EXTERN_H
#define SDMMC_BLOCK_EXTERN_H

/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/

/**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/

/***********************************************************************************************************************
 * EXTERN DECLARATIONS
 ***********************************************************************************************************************/
""");

Integer instance = 0
Integer spi_mode_selected = 0
Integer sd_mode_selected = 0
Integer rtos_mode = 0

for (Object i : appInstancesList) {
    appInst = i.getInstanceLabel();
    
    if (i.gcheck_use_rtos.value) {
        rtos_mode++
    }
    
    if (i.gcombo_sd_mode.value == "SD Mode")
    {
      MappedUri_node = i.hwres_cpu_nvic_interrupt_sdnode.getSolverUri()
    
      if (MappedUri_node != null) {
        out.print("\n")
        out.print("""extern SDMMC_BLOCK_t ${appInst};""")
        out.print("""\n""")
        sd_mode_selected++
      } else {
        out.print("""/* SDMMC_BLOCK APP is not mapped for APP instance: ${instance} */""")
      }
    }
    else if (i.gcombo_sd_mode.value == "SPI Mode")
    {
      out.print("""extern SDMMC_BLOCK_t ${appInst};""")
      out.print("""\n""")
      spi_mode_selected++
    }
    else
    {
        /* None */
    }
    instance++
}

def scriptDir = new File(getClass().protectionDomain.codeSource.location.path.toString().replace("%20", " ")).getParentFile()
def projectDir = scriptDir.getParentFile().getParentFile().getParentFile().getParentFile().getParentFile()

/* For files in non-RTOS mode */
if (rtos_mode == 0) {
    try {
      Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_spi_rtos.h"))
      Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_spi_rtos.c"))
      Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_sd_rtos.h"))
      Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_sd_rtos.c"))
    }
    catch (Exception e) {
      println("file does not exist")
    }
 
    if (sd_mode_selected > 0 && spi_mode_selected == 0) {
       try {
           Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_spi.h"))
           Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_spi.c"))
       }
       catch (Exception e) {
           println("file does not exist")
       }
    }
   
    if (sd_mode_selected == 0 && spi_mode_selected > 0) {
       try {
           Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_sd.h"))
           Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_sd.c"))
       }
       catch (Exception e) {
           println("file does not exist")
       }
    }
}

if (rtos_mode > 0) {
    try {
      Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_spi.h"))
      Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_spi.c"))
      Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_sd.h"))
      Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_sd.c"))
    }
    catch (Exception e) {
      println("file does not exist")
    }
 
    if (sd_mode_selected > 0 && spi_mode_selected == 0) {
       try {
           Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_spi_rtos.h"))
           Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_spi_rtos.c"))
       }
       catch (Exception e) {
           println("file does not exist")
       }
    }
   
    if (sd_mode_selected == 0 && spi_mode_selected > 0) {
       try {
           Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_sd_rtos.h"))
           Files.delete(Paths.get(projectDir.path+"\\Generated\\SDMMC_BLOCK", "sdmmc_block_private_sd_rtos.c"))
       }
       catch (Exception e) {
           println("file does not exist")
       }
    }
}

out.print("""
#ifdef SDMMC_BLOCK_TEST_HOOK_ENABLE
extern uint32_t sdmmc_block_test_hook_expected_command;
#endif
""")

out.print("\n")
out.print("""

#endif  /* ifndef SDMMC_BLOCK_EXTERN_H */""")