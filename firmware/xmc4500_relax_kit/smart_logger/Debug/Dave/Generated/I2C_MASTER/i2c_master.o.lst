   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "i2c_master.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_TXFIFO_IsFull,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_TXFIFO_IsFull:
  25              	.LFB187:
  26              	 .file 1 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc/xmc_usic.h"
   1:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2017-09-08
   4:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
   7:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *                                             
  12:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  18:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  21:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  37:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  38:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  39:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  43:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *      
  46:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  49:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  52:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  56:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  70:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  73:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  76:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  77:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  80:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  81:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  83:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
  84:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
  85:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
  86:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
  87:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  88:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  89:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  90:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  91:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  92:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
  93:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
  94:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
  95:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
  96:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  97:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
  98:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
  99:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 100:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 101:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 102:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 103:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 104:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 105:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 106:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 107:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 108:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 109:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 110:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 111:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 112:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 113:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 114:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 115:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 116:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 117:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 118:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 119:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 120:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 121:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 122:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 123:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 124:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 125:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 126:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 127:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 128:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 129:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 130:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 131:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 132:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 133:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 134:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 135:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 136:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 137:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 138:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 139:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 140:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 141:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 142:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 143:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 144:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 145:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 146:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 147:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 148:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 149:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 150:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 151:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 152:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 153:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 154:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 155:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 156:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 157:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 158:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 159:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 160:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 161:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 162:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 163:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 164:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 165:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 166:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 167:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 168:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 169:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 170:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 171:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 172:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 173:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 174:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 175:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 176:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 177:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 178:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 179:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 180:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 181:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 182:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 183:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 184:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 185:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 186:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 187:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 188:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 189:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 190:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 191:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 192:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 193:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 194:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 195:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 196:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 197:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 198:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 199:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 200:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 201:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 202:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 203:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 204:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 205:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 206:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 207:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 208:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 209:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 210:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 211:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 212:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 213:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 214:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 215:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 216:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 217:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 218:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 219:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 220:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 221:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 222:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 223:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 224:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 225:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 226:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 227:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 228:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 229:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 230:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 231:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 232:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 233:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 234:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 235:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 236:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 237:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 238:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 239:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 240:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 241:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 242:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 243:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 244:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 245:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 246:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 247:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 248:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 249:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 250:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 251:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 252:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 253:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 254:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 255:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 256:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 257:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 258:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 259:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 260:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 261:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 262:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 263:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 264:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 265:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 266:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 267:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 268:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 269:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 270:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 271:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 272:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 273:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 274:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 275:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 276:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 277:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 278:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 279:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 280:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 281:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 282:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 283:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 284:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 285:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 286:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 287:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 288:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 289:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 290:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 291:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 292:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 293:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 294:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 295:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 296:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 297:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 298:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 299:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 300:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 301:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 302:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 303:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 304:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 305:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 306:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 307:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 308:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 309:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 310:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 311:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 312:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 313:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 314:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 315:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 316:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 317:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 318:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 319:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 320:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 321:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 322:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 323:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 324:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 325:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 326:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 327:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 328:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 329:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 330:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 331:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 332:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 333:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 334:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 335:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 336:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 337:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 338:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 339:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 340:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 341:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 342:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 343:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 344:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 345:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 346:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 347:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 348:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 349:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 350:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 351:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 352:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 353:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 354:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 355:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 356:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 357:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 358:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 359:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 360:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 361:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 362:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 363:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 364:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 365:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 366:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 367:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 368:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 369:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 370:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 371:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 372:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 373:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 374:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 375:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 376:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 377:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 378:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 379:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 380:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 381:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 382:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 383:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 384:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 385:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 386:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 387:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 388:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 389:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 390:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 391:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 392:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 393:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 394:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 395:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 396:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 397:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 398:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 399:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 400:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 401:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 402:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 403:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 404:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 405:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 406:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 407:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 408:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 409:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 410:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 411:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 412:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 413:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 414:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 415:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 416:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 417:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 418:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 419:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 420:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 421:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 422:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 423:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 424:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 425:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 426:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 427:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 428:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 429:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 430:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 431:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 432:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 433:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 434:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 435:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 436:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 437:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 438:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 439:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 440:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 441:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 442:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 443:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 444:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 445:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 446:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 447:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 448:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 449:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 450:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 451:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 452:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
 453:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 454:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 455:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 456:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 457:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 458:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 459:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 460:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 461:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 462:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 463:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 464:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 465:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 466:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma push
 467:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 468:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 469:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 470:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 471:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 472:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 473:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 474:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 475:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 476:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 477:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 478:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 479:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 480:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 481:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 482:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 483:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 484:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 485:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 486:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 487:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 488:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 489:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 490:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 491:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 492:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 493:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 494:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 495:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 496:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 497:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 498:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 499:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 500:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 501:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 502:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 503:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   };
 504:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 505:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 506:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 507:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 508:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 509:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 510:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 511:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 512:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 513:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   };
 514:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 515:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 516:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 517:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 518:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 519:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 520:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 521:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 522:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 523:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 524:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 525:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 526:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 527:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 528:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 529:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 530:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 531:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 532:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 533:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 534:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 535:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 536:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 537:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 538:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 539:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 540:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma pop
 541:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 542:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 543:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 544:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 545:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 546:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 547:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 548:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 549:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 550:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 551:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 552:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 553:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 554:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 555:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 556:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 557:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 558:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 559:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 560:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 561:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 562:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 563:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 564:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 565:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 566:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 567:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 568:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 569:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 570:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 571:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 572:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 573:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 574:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 575:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 576:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 577:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 578:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 579:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 581:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 582:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 583:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 584:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 585:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 586:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 587:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 588:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 589:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 590:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 591:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 592:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 593:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 594:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 595:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 596:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 597:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 598:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 599:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 600:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 601:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 602:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 603:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 604:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 605:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 606:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 607:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 608:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 609:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 610:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 611:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 612:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 613:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 614:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 615:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 616:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 617:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 618:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 619:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 620:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 621:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 622:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 623:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 624:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 625:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 626:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 627:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 628:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 629:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 630:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 631:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 632:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 633:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 634:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 635:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 636:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 637:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 638:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 639:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 640:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 641:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 642:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 643:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 644:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 645:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 646:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 647:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 648:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 649:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 650:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 651:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 652:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 653:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 654:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 655:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 656:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 657:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 658:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 659:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 660:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 661:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 662:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 663:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 664:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 665:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 666:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 667:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 668:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 669:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 670:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 671:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 672:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 673:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 674:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 675:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 676:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 677:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 678:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 679:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 680:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 681:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 682:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 683:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 684:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 685:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 686:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 687:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 688:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 689:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 690:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 691:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 692:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 693:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 694:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 695:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 696:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 697:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 698:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 699:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 700:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 701:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 702:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 703:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *  
 704:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 705:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 706:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 707:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 708:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 709:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 710:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 711:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 712:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 713:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 714:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 715:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 716:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 717:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 718:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 719:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 720:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 721:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 722:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 723:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 724:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 726:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 727:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 728:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 729:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 730:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 731:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 732:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 733:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 734:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 735:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 736:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 737:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 738:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 739:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 740:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 741:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 742:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 744:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 745:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 746:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 747:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 748:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 749:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 750:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 751:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 752:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 753:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 754:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 755:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 757:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 758:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 759:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 760:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 761:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 762:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 763:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 764:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 765:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 766:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 767:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 768:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 769:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 770:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 771:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 772:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 773:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 774:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 775:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 776:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 777:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 778:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 779:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 780:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 781:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 782:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 783:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 784:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 785:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 786:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 787:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 788:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 789:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 790:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 791:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 792:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 793:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 794:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 795:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 796:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 797:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 798:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 799:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 800:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 801:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 802:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 803:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 804:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 805:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 806:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 807:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 808:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 809:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 810:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 811:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 812:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 813:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 814:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 815:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 816:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 817:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 818:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 819:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 820:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 821:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 822:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 823:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 824:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 825:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 826:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 831:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 832:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 833:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 834:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 835:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 836:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 838:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 839:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 840:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 841:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 842:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 843:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 844:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 849:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 850:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 851:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 852:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 853:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 854:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 855:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 856:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 857:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 858:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 859:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 860:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 861:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 862:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 863:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 864:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 865:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 866:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 867:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 868:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 869:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 870:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 871:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 872:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 873:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 875:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 876:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 877:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 878:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 879:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 880:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 881:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 886:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 887:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 888:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 889:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 890:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 891:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 893:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 894:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 895:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 896:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 897:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 898:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 899:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 900:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 901:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 902:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 903:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 904:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 905:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 906:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 907:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 908:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 909:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 910:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 911:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 912:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 913:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 914:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 915:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 916:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 917:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 918:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 919:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 920:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 921:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 922:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 923:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 924:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 925:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 926:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 927:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 928:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 929:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 930:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 931:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 932:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 933:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 934:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 935:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 936:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 937:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 938:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 939:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 940:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 941:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 942:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 943:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 944:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 945:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 946:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 947:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 948:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 949:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 950:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 951:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 952:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 953:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 954:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 955:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 956:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 957:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 958:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 959:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 960:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 961:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 962:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
 963:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 964:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 965:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 966:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 967:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 968:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 969:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 970:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 971:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 973:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 974:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 975:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 976:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
 977:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 978:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
 979:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
 980:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 981:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 982:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
 983:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 984:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 985:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 986:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 987:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 988:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 989:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 990:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 991:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
 992:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 993:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 994:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
 995:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 996:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint16_t data,
 997:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
 998:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 999:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1000:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1001:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1002:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1003:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1004:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1005:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1006:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1007:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1008:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1009:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1010:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1011:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1012:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1013:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1014:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1015:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1016:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1017:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1018:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1019:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1020:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1021:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1022:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1023:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1024:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1025:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1026:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1027:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1028:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1029:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1030:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1031:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1032:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1033:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1034:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1035:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1036:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1037:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1038:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1039:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1040:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1041:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1042:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1043:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1044:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1045:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1046:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1047:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value 
1048:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1049:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1050:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1051:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1052:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1053:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1054:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1055:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1056:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1057:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1058:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1059:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1060:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1061:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1062:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1063:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1064:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1065:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1066:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1067:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1068:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1069:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1070:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1071:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1072:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1073:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1074:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1075:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1076:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1077:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1078:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1081:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1082:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1083:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1084:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1085:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1086:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1087:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1088:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1089:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly. 
1090:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1091:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1092:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1093:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1094:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1095:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1096:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1097:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1098:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1099:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1100:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1101:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1102:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1103:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1104:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1105:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1106:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1107:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1108:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1109:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1110:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1111:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1112:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1113:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1114:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1115:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1116:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1117:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1118:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1119:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1120:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1121:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1122:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1123:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1124:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1125:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1126:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1127:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1128:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1129:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1130:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1131:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1132:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1133:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1134:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1135:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1136:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1137:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
1138:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1139:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1140:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1141:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1142:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1143:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1144:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1145:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1146:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1147:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1148:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1149:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1150:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1151:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1152:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1153:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1154:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1155:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1156:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1157:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1158:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1159:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1160:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1161:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1162:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1163:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1164:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                          const uint32_t service_request);
1165:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1166:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1167:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1168:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1169:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1170:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1171:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1172:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1173:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1174:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1175:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1176:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1177:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1178:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1179:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1180:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1181:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1182:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1183:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1184:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1185:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1186:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1187:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1188:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1189:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1190:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1191:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1192:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1193:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1194:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1195:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1196:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1197:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1198:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1199:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1200:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1201:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1202:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1203:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1204:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1205:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1206:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1207:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1208:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1209:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1210:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1211:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1212:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1213:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1216:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1217:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1218:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1219:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *                              
1220:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1221:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1222:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1223:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1224:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1225:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1226:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1228:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1229:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1230:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1231:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1232:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1233:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1234:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1235:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1236:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1237:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1238:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1239:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1240:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1241:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1242:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1243:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1245:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1246:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1247:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1248:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1249:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1250:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1251:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1252:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1253:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1254:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1255:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1256:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1257:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1258:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1259:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1260:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1261:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1262:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1263:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1264:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1265:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1266:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1267:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1268:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1269:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1270:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1271:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1272:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1273:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1274:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1275:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1276:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1277:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1278:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1279:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1280:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1281:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1282:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1283:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1284:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1285:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1286:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1287:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1288:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1289:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1290:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1291:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1292:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1293:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1294:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1295:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1296:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1297:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1298:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1299:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1300:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1301:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1302:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1303:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1304:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1305:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1306:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1307:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1308:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1309:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1310:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1311:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1312:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1313:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1314:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1315:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1316:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1317:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1318:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1319:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1320:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1321:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1322:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1323:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1324:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1325:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1326:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1327:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1328:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1329:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1330:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1331:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1332:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1333:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1334:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1335:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1336:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1337:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1338:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1339:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1340:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1341:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1342:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1343:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled. 
1344:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1345:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1346:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1347:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1348:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1349:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1350:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1351:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1352:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1353:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1354:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1355:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1356:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1357:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1358:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1359:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1360:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1361:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1362:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1363:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1364:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1365:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1366:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1367:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1368:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1369:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1370:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1371:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1372:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1373:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1376:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1377:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1378:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1379:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1380:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1381:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1382:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1383:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1384:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1385:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1386:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1387:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1388:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1389:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1390:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1391:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1392:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1393:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1394:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1395:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1396:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1397:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1398:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1399:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1400:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1401:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1402:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1403:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1404:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1405:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1406:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1407:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1408:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1409:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1410:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1411:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1412:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1413:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1414:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1415:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1416:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1417:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1418:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1419:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1420:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1421:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1422:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1423:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1424:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1425:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1426:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1427:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1428:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1429:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1430:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1431:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1432:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1433:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1434:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1435:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1436:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1437:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1438:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1439:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1440:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1441:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1442:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1443:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1444:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1445:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1446:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1447:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1448:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1449:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1450:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1451:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1452:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1453:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1454:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1455:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1456:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1457:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1458:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1459:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1460:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1461:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1462:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1463:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1464:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1465:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1466:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1467:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1468:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1469:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1470:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1471:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1472:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1473:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1474:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1475:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1476:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1477:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1478:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1479:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1480:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1481:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1482:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1483:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1484:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1485:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1486:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1487:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1488:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1489:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1490:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1491:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1492:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1493:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1494:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1495:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1496:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1497:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1498:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1499:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1500:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1501:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1502:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1503:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1504:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1505:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1506:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1507:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1508:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1509:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1510:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1512:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1513:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1514:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1515:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1516:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1517:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1518:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1519:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1520:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1521:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1522:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1523:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1524:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1525:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1526:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1527:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1528:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1529:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1530:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1531:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1532:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1533:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1534:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1535:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1536:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1537:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1538:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1539:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1540:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1541:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1542:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1543:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1544:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1545:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1546:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1547:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1548:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1549:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1550:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1551:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1552:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1553:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1554:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1555:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1556:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1557:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1558:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1559:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1560:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1561:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1562:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1563:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1564:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1565:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1566:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1567:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1568:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1569:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1570:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1571:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1572:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1573:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1574:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1575:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1576:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1577:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1578:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1579:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1580:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1581:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1582:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1583:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1584:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1585:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1586:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1587:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1588:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1589:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1590:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1591:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1592:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1593:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1594:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1595:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1596:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1597:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1598:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1599:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1600:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1601:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1602:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1603:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1604:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1605:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1606:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1607:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1608:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1609:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1610:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1611:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1612:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1613:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1614:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1615:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1616:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1617:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
  27              	 .loc 1 1617 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1618:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
  43              	 .loc 1 1618 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F81431 	 ldr r3,[r3,#276]
  46 000e 03F48053 	 and r3,r3,#4096
  47 0012 002B     	 cmp r3,#0
  48 0014 14BF     	 ite ne
  49 0016 0123     	 movne r3,#1
  50 0018 0023     	 moveq r3,#0
  51 001a DBB2     	 uxtb r3,r3
1619:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
  52              	 .loc 1 1619 0
  53 001c 1846     	 mov r0,r3
  54 001e 0C37     	 adds r7,r7,#12
  55              	.LCFI3:
  56              	 .cfi_def_cfa_offset 4
  57 0020 BD46     	 mov sp,r7
  58              	.LCFI4:
  59              	 .cfi_def_cfa_register 13
  60              	 
  61 0022 5DF8047B 	 ldr r7,[sp],#4
  62              	.LCFI5:
  63              	 .cfi_restore 7
  64              	 .cfi_def_cfa_offset 0
  65 0026 7047     	 bx lr
  66              	 .cfi_endproc
  67              	.LFE187:
  69              	 .section .text.XMC_USIC_CH_TXFIFO_IsEmpty,"ax",%progbits
  70              	 .align 2
  71              	 .thumb
  72              	 .thumb_func
  74              	XMC_USIC_CH_TXFIFO_IsEmpty:
  75              	.LFB188:
1620:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1621:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1622:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1623:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1624:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1625:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1626:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1627:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1628:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1629:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1630:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1631:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1632:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1633:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1635:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1636:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1637:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
  76              	 .loc 1 1637 0
  77              	 .cfi_startproc
  78              	 
  79              	 
  80              	 
  81 0000 80B4     	 push {r7}
  82              	.LCFI6:
  83              	 .cfi_def_cfa_offset 4
  84              	 .cfi_offset 7,-4
  85 0002 83B0     	 sub sp,sp,#12
  86              	.LCFI7:
  87              	 .cfi_def_cfa_offset 16
  88 0004 00AF     	 add r7,sp,#0
  89              	.LCFI8:
  90              	 .cfi_def_cfa_register 7
  91 0006 7860     	 str r0,[r7,#4]
1638:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
  92              	 .loc 1 1638 0
  93 0008 7B68     	 ldr r3,[r7,#4]
  94 000a D3F81431 	 ldr r3,[r3,#276]
  95 000e 03F40063 	 and r3,r3,#2048
  96 0012 002B     	 cmp r3,#0
  97 0014 14BF     	 ite ne
  98 0016 0123     	 movne r3,#1
  99 0018 0023     	 moveq r3,#0
 100 001a DBB2     	 uxtb r3,r3
1639:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 101              	 .loc 1 1639 0
 102 001c 1846     	 mov r0,r3
 103 001e 0C37     	 adds r7,r7,#12
 104              	.LCFI9:
 105              	 .cfi_def_cfa_offset 4
 106 0020 BD46     	 mov sp,r7
 107              	.LCFI10:
 108              	 .cfi_def_cfa_register 13
 109              	 
 110 0022 5DF8047B 	 ldr r7,[sp],#4
 111              	.LCFI11:
 112              	 .cfi_restore 7
 113              	 .cfi_def_cfa_offset 0
 114 0026 7047     	 bx lr
 115              	 .cfi_endproc
 116              	.LFE188:
 118              	 .section .text.XMC_USIC_CH_RXFIFO_IsEmpty,"ax",%progbits
 119              	 .align 2
 120              	 .thumb
 121              	 .thumb_func
 123              	XMC_USIC_CH_RXFIFO_IsEmpty:
 124              	.LFB197:
1640:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1641:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1642:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1645:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1646:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1647:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1648:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1649:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1650:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1651:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1652:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1653:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1654:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1655:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1656:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1657:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1658:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1659:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1660:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1661:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1662:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1663:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1664:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1665:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1666:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1667:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1668:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1669:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1670:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1671:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1672:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1673:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1674:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1675:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1676:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1677:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1678:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1679:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1680:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1681:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1682:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1683:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1684:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1685:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1686:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1687:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1688:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1689:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1690:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1691:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1692:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1693:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1694:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1695:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1696:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1697:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1698:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1699:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1700:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1701:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1702:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1703:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1704:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1705:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1706:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1707:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1708:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1710:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1711:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1712:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1713:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1714:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1715:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1716:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1717:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1718:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1719:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1720:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1721:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1722:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1723:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1724:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1725:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1726:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1728:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** */
1729:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1730:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1731:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1732:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1733:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1734:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1735:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1738:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1739:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1740:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1741:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1742:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1743:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1744:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1745:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1746:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1747:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1748:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1750:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1751:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1752:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1753:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1754:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1755:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1756:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1759:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1760:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1761:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1762:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1763:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1764:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1765:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1766:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1767:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1768:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1769:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1770:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1771:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1772:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1773:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1774:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1775:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
1776:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1777:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1778:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1779:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1780:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1781:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1782:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1783:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1784:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1785:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1786:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1787:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1788:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1789:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1790:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1791:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1792:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1793:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1794:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1796:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1797:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1798:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1799:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1800:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1801:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1802:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1803:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1804:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1805:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1806:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1807:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1808:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1809:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1810:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1811:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1812:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1813:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1814:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1815:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1816:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1817:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1818:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1819:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1820:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1821:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1822:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1823:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1824:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1825:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1826:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1827:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1828:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1829:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1830:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1831:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1832:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1833:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1834:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1835:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1836:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1837:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1838:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1839:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1840:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1841:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
1842:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1843:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1844:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1845:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1846:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1847:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1848:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1849:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1850:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1851:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1852:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1853:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1854:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1855:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1856:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1857:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1858:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1859:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1860:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1861:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1862:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1863:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1864:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1865:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1866:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1867:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1868:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1869:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1870:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1871:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1872:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1873:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1874:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1875:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1876:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1877:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1878:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1879:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1880:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1881:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1882:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1883:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
1884:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1885:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
1886:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** 
1887:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** /**
1888:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1889:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1890:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1891:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1892:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  *
1893:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1894:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1895:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1896:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1897:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1898:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1899:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1900:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1901:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****  */
1902:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1903:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** {
 125              	 .loc 1 1903 0
 126              	 .cfi_startproc
 127              	 
 128              	 
 129              	 
 130 0000 80B4     	 push {r7}
 131              	.LCFI12:
 132              	 .cfi_def_cfa_offset 4
 133              	 .cfi_offset 7,-4
 134 0002 83B0     	 sub sp,sp,#12
 135              	.LCFI13:
 136              	 .cfi_def_cfa_offset 16
 137 0004 00AF     	 add r7,sp,#0
 138              	.LCFI14:
 139              	 .cfi_def_cfa_register 7
 140 0006 7860     	 str r0,[r7,#4]
1904:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 141              	 .loc 1 1904 0
 142 0008 7B68     	 ldr r3,[r7,#4]
 143 000a D3F81431 	 ldr r3,[r3,#276]
 144 000e 03F00803 	 and r3,r3,#8
 145 0012 002B     	 cmp r3,#0
 146 0014 14BF     	 ite ne
 147 0016 0123     	 movne r3,#1
 148 0018 0023     	 moveq r3,#0
 149 001a DBB2     	 uxtb r3,r3
1905:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_usic.h **** }
 150              	 .loc 1 1905 0
 151 001c 1846     	 mov r0,r3
 152 001e 0C37     	 adds r7,r7,#12
 153              	.LCFI15:
 154              	 .cfi_def_cfa_offset 4
 155 0020 BD46     	 mov sp,r7
 156              	.LCFI16:
 157              	 .cfi_def_cfa_register 13
 158              	 
 159 0022 5DF8047B 	 ldr r7,[sp],#4
 160              	.LCFI17:
 161              	 .cfi_restore 7
 162              	 .cfi_def_cfa_offset 0
 163 0026 7047     	 bx lr
 164              	 .cfi_endproc
 165              	.LFE197:
 167              	 .section .text.XMC_I2C_CH_GetStatusFlag,"ax",%progbits
 168              	 .align 2
 169              	 .thumb
 170              	 .thumb_func
 172              	XMC_I2C_CH_GetStatusFlag:
 173              	.LFB212:
 174              	 .file 2 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc/xmc_i2c.h"
   1:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
   2:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @file xmc_i2c.h
   3:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @date 2017-10-27
   4:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   5:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @cond
   6:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  **************************************************************************************************
   7:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
   9:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * All rights reserved.                        
  11:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                             
  12:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * following conditions are met:   
  14:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  15:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * disclaimer.                        
  17:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  18:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  21:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  24:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *                                                                              
  32:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  **************************************************************************************************
  35:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  36:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Change History
  37:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * --------------
  38:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  39:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-02-20:
  40:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Initial <br>
  41:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *      
  42:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-05-20:
  43:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Description updated <br>
  44:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_TriggerServiceRequest() and XMC_I2C_CH_SelectInterruptNodePointer() <br>
  45:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  46:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-06-20:
  47:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  49:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-08-27:
  50:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for external input for BRG configuration:XMC_I2C_CH_ConfigExternalInputSignalTo
  51:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  52:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-09-01:
  53:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added APIs for enabling or disabling the ACK response to a 0x00 slave address: XMC_I2C_CH_
  54:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *       XMC_I2C_CH_DisableSlaveAcknowledgeTo00(). <br>
  55:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_SetInputSource() API for avoiding complete DXCR register overwriting. 
  56:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Modified XMC_I2C_CH_EVENT_t enum for supporting XMC_I2C_CH_EnableEvent() and XMC_I2C_CH_Di
  57:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *       for supporting multiple events configuration <br>
  58:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  59:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-02:
  60:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix 10bit addressing
  61:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  62:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2015-10-07:
  63:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Fix register access in XMC_I2C_CH_EnableSlaveAcknowledgeTo00() and XMC_I2C_CH_DisableSlave
  64:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Naming of APIs modified: from XMC_I2C_CH_EnableSlaveAcknowledgeTo00() to  XMC_I2C_CH_Enabl
  65:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *       and from XMC_I2C_CH_DisableSlaveAcknowledgeTo00() to XMC_I2C_CH_DisableAcknowledgeAddress0
  66:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  67:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-05-20:
  68:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableDataTransmission() and XMC_I2C_CH_DisableDataTransmission()
  69:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  70:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2016-08-17:
  71:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Improved documentation of slave address passing
  72:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  73:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 2017-10-25:
  74:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *     - Added XMC_I2C_CH_EnableMasterClock() and XMC_I2C_CH_DisableMasterClock()
  75:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  76:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 
  77:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @endcond 
  78:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  79:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
  80:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
  81:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #ifndef XMC_I2C_H
  82:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_H
  83:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
  84:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
  85:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * HEADER FILES
  86:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
  87:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
  88:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #include "xmc_usic.h"
  89:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
  90:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
  91:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup XMClib XMC Peripheral Library
  92:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
  93:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
  94:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
  95:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
  96:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @addtogroup I2C
  97:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief Inter Integrated Circuit(IIC) driver for the XMC microcontroller family. 
  98:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
  99:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * USIC IIC Features: <br>
 100:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *  * Two-wire interface, with one line for shift clock transfer and synchronization (shift clock S
 101:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Communication in standard mode (100 kBit/s) or in fast mode (up to 400 kBit/s) <br>
 102:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Support of 7-bit addressing, as well as 10-bit addressing <br>
 103:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Master mode operation, where the IIC controls the bus transactions and provides the clock sign
 104:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Slave mode operation, where an external master controls the bus transactions and provides the 
 105:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Multi-master mode operation, where several masters can be connected to the bus and bus arbitra
 106:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 	  The master/slave operation of an IIC bus participant can change from frame to frame. <br>
 107:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Efficient frame handling (low software effort), also allowing DMA transfers <br>
 108:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *	* Powerful interrupt handling due to multitude of indication flags <br>
 109:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @{
 110:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 111:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 112:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 113:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * MACROS
 114:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 115:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 116:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC0)
 117:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH0 XMC_USIC0_CH0                   /**< USIC0 channel 0 base address */
 118:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C0_CH1 XMC_USIC0_CH1                   /**< USIC0 channel 1 base address */
 119:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 120:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 121:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC1)
 122:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH0 XMC_USIC1_CH0                   /**< USIC1 channel 0 base address */
 123:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C1_CH1 XMC_USIC1_CH1                   /**< USIC1 channel 1 base address */
 124:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 125:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 126:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #if defined(USIC2)
 127:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH0 XMC_USIC2_CH0                   /**< USIC2 channel 0 base address */
 128:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C2_CH1 XMC_USIC2_CH1                   /**< USIC2 channel 1 base address */
 129:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 130:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 131:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #define XMC_I2C_10BIT_ADDR_GROUP       (0x7800U)	 /**< Value to verify the address is 10-bit or not
 132:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 133:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 134:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * ENUMS
 135:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 136:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 137:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 138:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C Status
 139:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 140:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS
 141:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 142:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_OK,      /**< Status OK */
 143:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_ERROR,   /**< Status ERROR */
 144:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_BUSY     /**< Status BUSY */
 145:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_t;
 146:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 147:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 148:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C status
 149:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 150:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_STATUS_FLAG
 151:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 152:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_SELECT = USIC_CH_PSR_IICMode_SLSEL_Msk,                     /**< Sla
 153:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND = USIC_CH_PSR_IICMode_WTDF_Msk,              /**< Wro
 154:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_SCR_Msk,           /**< Sta
 155:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_RSCR_Msk, /**< Rep
 156:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED = USIC_CH_PSR_IICMode_PCR_Msk,            /**< Sto
 157:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED = USIC_CH_PSR_IICMode_NACK_Msk,                     /**< NAC
 158:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST = USIC_CH_PSR_IICMode_ARL_Msk,                   /**< Arb
 159:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_SLAVE_READ_REQUESTED = USIC_CH_PSR_IICMode_SRR_Msk,               /**< Sla
 160:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ERROR = USIC_CH_PSR_IICMode_ERR_Msk,                              /**< Err
 161:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED = USIC_CH_PSR_IICMode_ACK_Msk,                       /**< ACK
 162:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_IICMode_RSIF_Msk,         /**< Rec
 163:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_IICMode_DLIF_Msk,              /**< Dat
 164:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_IICMode_TSIF_Msk,         /**< Tra
 165:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_IICMode_TBIF_Msk,        /**< Tra
 166:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_RIF_Msk,                 /**< Rec
 167:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_IICMode_AIF_Msk,     /**< Alt
 168:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_IICMode_BRGIF_Msk    /**< Bau
 169:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_STATUS_FLAG_t;
 170:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 171:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 172:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C receiver status. The received data byte is available at the bit
 173:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * positions RBUF[7:0], whereas the additional information is monitored at the bit positions
 174:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** *  RBUF[12:8].
 175:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 176:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_RECEIVER_STATUS_FLAG
 177:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 178:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ACK = 0x1U,      /**< Bit 8:  Value of Received Acknowledgement b
 179:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_FIN = 0x2U,      /**< Bit 9:  A 1 at this bit position indicates 
 180:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 followed by the address reception t
 181:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 been received. A 0 at this bit posi
 182:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_MODE = 0x4U,     /**< Bit 10: A 0 at this bit position indicates 
 183:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 when the device has been in slave m
 184:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ERR = 0x8U,      /**< Bit 11: A 1 at this bit position indicates 
 185:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 data byte in the receive buffer */
 186:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_RECEIVER_STATUS_FLAG_ADR = 0x10       /**< Bit 12: A 0 at this bit position indicates 
 187:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****                                                                 has been received. A 1 indicates a 
 188:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_RECEIVER_STATUS_FLAG_t;
 189:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 190:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 191:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C commands
 192:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 193:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_CMD
 194:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 195:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_WRITE,                            /**< I2C Command Write */
 196:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_CMD_READ                              /**< I2C Command Read */
 197:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CMD_t;
 198:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 199:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 200:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C events
 201:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 202:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_EVENT
 203:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 204:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 205:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 206:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 207:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 208:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 209:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 210:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 211:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 212:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_SCRIEN_Msk,             /**< Star
 213:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_REPEATED_START_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_RSCRIEN_Msk,   /**< Repe
 214:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_STOP_CONDITION_RECEIVED = USIC_CH_PCR_IICMode_PCRIEN_Msk,              /**< Stop
 215:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_NACK = USIC_CH_PCR_IICMode_NACKIEN_Msk,                                /**< NACK
 216:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ARBITRATION_LOST = USIC_CH_PCR_IICMode_ARLIEN_Msk,                     /**< Arbi
 217:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_SLAVE_READ_REQUEST = USIC_CH_PCR_IICMode_SRRIEN_Msk,                   /**< Slav
 218:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ERROR = USIC_CH_PCR_IICMode_ERRIEN_Msk,	                              /**< Error
 219:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_EVENT_ACK = USIC_CH_PCR_IICMode_ACKIEN_Msk                                   /**< ACK 
 220:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_EVENT_t;
 221:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 222:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 223:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C input stage selection
 224:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 225:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INPUT
 226:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 227:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA = 0U,   /**< selection of sda input stage */
 228:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 229:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA1 = 3U,
 230:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SDA2 = 5U,
 231:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #endif  
 232:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL = 1U,  /**< selection of scl input stage */
 233:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #if UC_FAMILY == XMC1
 234:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INPUT_SCL1 = 4U
 235:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #endif  
 236:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INPUT_t;
 237:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 238:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 239:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * I2C channel interrupt node pointers
 240:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 241:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** typedef enum XMC_I2C_CH_INTERRUPT_NODE_POINTER
 242:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 243:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 244:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 245:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 246:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 247:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_I2C_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 248:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_INTERRUPT_NODE_POINTER_t;
 249:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 250:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 251:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * DATA STRUCTURES
 252:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 253:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 254:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @brief I2C_CH configuration structure
 255:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 256:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** typedef struct XMC_I2C_CH_CONFIG
 257:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 258:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   uint32_t baudrate;   /**< baud rate configuration upto max of 400KHz */
 259:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   uint16_t address;    /**< slave address 
 260:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 7-bit address needs to be left shifted it by 1.
 261:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****                             A 10-bit address needs to be ORed with XMC_I2C_10BIT_ADDR_GROUP. */
 262:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** } XMC_I2C_CH_CONFIG_t;
 263:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 264:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /*******************************************************************************
 265:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * API PROTOTYPES
 266:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *******************************************************************************/
 267:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 268:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #ifdef __cplusplus
 269:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** extern "C" {
 270:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** #endif
 271:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 272:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 273:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 274:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param config  Constant pointer to I2C channel config structure of type @ref XMC_I2C_CH_CONFIG_t
 275:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 276:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 277:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 278:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 279:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Initializes the I2C \a channel.<br>
 280:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 281:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 282:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Configures the data format in SCTR register. Sets the slave address, baud rate. Enables transmit
 283:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * and disables parity generation.<br>
 284:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 285:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 286:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_Enable()\n\n
 287:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 288:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 289:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config);
 290:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 291:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 292:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 293:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param rate  baud rate of I2C channel
 294:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 295:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 296:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 297:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 298:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the rate of I2C \a channel.
 299:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 300:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 301:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Standard over sampling is considered if rate <= 100KHz and fast over sampling is considered if r
 302:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 303:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 304:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetBaudrate()\n\n
 305:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 306:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 307:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 308:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 309:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 310:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 311:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 312:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 313:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 314:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C \a channel.
 315:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 316:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 317:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation mode to I2C mode using CCR register.
 318:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 319:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 320:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 321:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 322:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
 323:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 324:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 325:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** }
 326:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 327:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 328:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 329:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 330:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return @ref XMC_I2C_CH_STATUS_t<br>
 331:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 332:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 333:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C \a channel.<br>
 334:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 335:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 336:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the USIC input operation to IDLE mode using CCR register.
 337:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 338:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 339:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetMode()\n\n
 340:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 341:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel);
 342:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 343:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 344:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 345:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number in the range of 0-5
 346:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 347:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 348:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 349:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for protocol interrupt.<br>
 350:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 351:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 352:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * To generate interrupt for an event, node pointer should be configured with service request numbe
 353:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 354:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 355:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Note:</b><br>
 356:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * NVIC node should be separately enabled to generate the interrupt. After setting the node pointer
 357:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 358:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 359:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 360:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 361:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 362:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****                                                         const uint8_t service_request)
 363:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 364:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service
 365:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** }
 366:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 367:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 368:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 369:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 370:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				  \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref XM
 371:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 372:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: @ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 373:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  			@ref XMC_I2C_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 374:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param service_request Service request number.\n
 375:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 						  \b Range: 0 to 5.
 376:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 377:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 378:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 379:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the interrupt node for USIC channel events. \n\n
 380:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 381:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 382:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 383:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 384:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 385:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent() \n\n\n
 386:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 387:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 388:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****                                                            const XMC_I2C_CH_INTERRUPT_NODE_POINTER_
 389:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****                                                            const uint32_t service_request)
 390:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 391:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 392:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 		                                       (uint32_t)service_request);
 393:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** }
 394:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 395:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 396:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 397:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 				   \b Range: @ref XMC_I2C0_CH0, @ref XMC_I2C0_CH1,@ref XMC_I2C1_CH0,@ref XMC_I2C1_CH1,@ref X
 398:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 399:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 			\b Range: 0 to 5.
 400:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None
 401:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 402:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description</b><br>
 403:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Trigger a I2C interrupt service request.\n\n
 404:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * When the I2C service request is triggered, the NVIC interrupt associated with it will be
 405:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * generated if enabled.
 406:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 407:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><BR>
 408:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SelectInterruptNodePointer() \n\n\n
 409:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 410:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t 
 411:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 412:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 413:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** }
 414:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 415:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 416:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 417:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param input I2C channel input stage of type @ref XMC_I2C_CH_INPUT_t
 418:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param source Input source select for the input stage(0->DX0A, 1->DX1A, .. 7->DX7G)
 419:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 420:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 421:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 422:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the input source for I2C \a channel.<br>
 423:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Defines the input stage for the corresponding input line.
 424:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 425:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note After configuring the input source for corresponding channel, interrupt node pointer is se
 426:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 427:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 428:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 429:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 430:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 431:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT
 432:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 433:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX
 434:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 435:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** }
 436:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 437:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 438:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 439:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param address I2C slave address
 440:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 441:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 442:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 443:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sets the I2C \a channel slave address.<br>
 444:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 445:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 446:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Address is set in PCR_IICMode register by checking if it is in 10-bit address group or 7-bit add
 447:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is 10-bit mode otherwis
 448:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address should include an additional bit at the LSB for read/write indication. For
 449:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. A 10-bit address should be provided with the identifier 0b11110xx at the mo
 450:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * address 0x305 should be provided as 0x7b05(bitwise OR with 0x7800).
 451:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 452:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 453:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetSlaveAddress()\n\n
 454:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 455:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address);
 456:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 457:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 458:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel handler of type @ref XMC_USIC_CH_t
 459:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint16_t Slave address<br>
 460:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 461:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 462:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the I2C \a channel slave address.<br>
 463:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 464:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 465:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Returns the address using PCR_IICMode register by checking if it is in 10-bit address group or 7
 466:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * (If first five bits of address are assigned with 0xF0, then address mode is considered as 10-bit
 467:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note A 7-bit address will include an additional bit at the LSB. For example, address 0x05 will 
 468:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * 10-bit address will not include the 10-bit address identifier 0b11110xx at the most signifcant b
 469:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 470:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 471:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_SetSlaveAddress()\n\n
 472:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 473:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel);
 474:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 475:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 476:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 477:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 478:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 479:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 480:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 481:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 482:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Starts the I2C master \a channel.<br>
 483:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 484:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 485:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Start condition with read/write command by updating IN/TBUF register based on FIFO/non
 486:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 487:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 488:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 489:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 490:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 491:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 492:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 493:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 494:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD
 495:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 496:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 497:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 498:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param addr I2C master address
 499:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param command read/write command
 500:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 501:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 502:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 503:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition from I2C master \a channel.<br>
 504:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 505:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 506:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the repeated start condition with read/write command by updating IN/TBUF register based on
 507:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @note Address(addr) should reserve an additional bit at the LSB for read/write indication. For e
 508:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 509:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 510:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * followed by 1-bit field for read/write).
 511:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 512:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 513:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 514:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 515:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2
 516:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 517:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 518:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 519:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 520:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 521:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 522:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Stops the I2C master \a channel.<br>
 523:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 524:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 525:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on F
 526:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 527:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 528:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit(), XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 529:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 530:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel);
 531:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 532:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 533:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 534:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 535:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 536:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 537:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 538:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C master \a channel.<br>
 539:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 540:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 541:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 542:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 543:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 544:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus()\n\n
 545:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 546:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 547:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 548:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 549:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 550:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param data data to transmit from I2C \a channel
 551:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 552:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 553:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 554:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Transmit the data from the I2C slave \a channel.<br>
 555:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 556:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 557:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 558:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 559:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 560:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(),XMC_I2C_CH_ClearStatusFlag()\n\n
 561:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 562:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data);
 563:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 564:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 565:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 566:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 567:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 568:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 569:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Ack request from I2C master \a channel.<br>
 570:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 571:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 572:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FIF
 573:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 574:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 575:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 576:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 577:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel);
 578:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 579:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 580:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 581:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 582:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 583:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 584:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Sends the Nack request from I2C master \a channel.<br>
 585:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 586:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 587:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the transmit buffer status is busy or not and thereby updates IN/TBUF register based on FI
 588:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 589:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 590:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 591:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 592:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel);
 593:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 594:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 595:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 596:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t OUTR/RBUF register data<br>
 597:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 598:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 599:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Reads the data from I2C \a channel.<br>
 600:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 601:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par
 602:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Data is read by using OUTR/RBUF register based on FIFO/non-FIFO modes.
 603:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 604:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 605:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 606:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 607:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel);
 608:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 609:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 610:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 611:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint8_t Receiver status flag<br>
 612:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 613:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 614:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Gets the receiver status of I2C \a channel using RBUF register of bits 8-12 which gives informat
 615:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 616:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 617:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_MasterTransmit()\n\n
 618:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 619:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint8_t XMC_I2C_CH_GetReceiverStatusFlag(XMC_USIC_CH_t *const channel)
 620:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 621:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   return((uint8_t)((channel->RBUF) >> 8U));
 622:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** }
 623:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 624:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 625:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 626:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 627:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 628:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 629:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 630:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Enables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 631:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 632:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 633:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_DisableEvent()\n\n
 634:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 635:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 636:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 637:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 638:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 639:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param event ORed values of @ref XMC_I2C_CH_EVENT_t enum
 640:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 641:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 642:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 643:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Disables the input parameter @ref XMC_I2C_CH_EVENT_t event using PCR_IICMode register.
 644:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 645:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 646:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_EnableEvent()\n\n
 647:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 648:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, uint32_t event);
 649:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 650:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 651:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 652:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return uint32_t Status byte<br>
 653:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 654:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 655:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Retrieves the status byte of I2C \a channel using PSR_IICMode register.\n
 656:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 657:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 658:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_ClearStatusFlag()\n\n
 659:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 660:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 661:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 175              	 .loc 2 661 0
 176              	 .cfi_startproc
 177              	 
 178              	 
 179              	 
 180 0000 80B4     	 push {r7}
 181              	.LCFI18:
 182              	 .cfi_def_cfa_offset 4
 183              	 .cfi_offset 7,-4
 184 0002 83B0     	 sub sp,sp,#12
 185              	.LCFI19:
 186              	 .cfi_def_cfa_offset 16
 187 0004 00AF     	 add r7,sp,#0
 188              	.LCFI20:
 189              	 .cfi_def_cfa_register 7
 190 0006 7860     	 str r0,[r7,#4]
 662:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   return (channel->PSR_IICMode);
 191              	 .loc 2 662 0
 192 0008 7B68     	 ldr r3,[r7,#4]
 193 000a 9B6C     	 ldr r3,[r3,#72]
 663:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** }
 194              	 .loc 2 663 0
 195 000c 1846     	 mov r0,r3
 196 000e 0C37     	 adds r7,r7,#12
 197              	.LCFI21:
 198              	 .cfi_def_cfa_offset 4
 199 0010 BD46     	 mov sp,r7
 200              	.LCFI22:
 201              	 .cfi_def_cfa_register 13
 202              	 
 203 0012 5DF8047B 	 ldr r7,[sp],#4
 204              	.LCFI23:
 205              	 .cfi_restore 7
 206              	 .cfi_def_cfa_offset 0
 207 0016 7047     	 bx lr
 208              	 .cfi_endproc
 209              	.LFE212:
 211              	 .section .text.XMC_I2C_CH_ClearStatusFlag,"ax",%progbits
 212              	 .align 2
 213              	 .thumb
 214              	 .thumb_func
 216              	XMC_I2C_CH_ClearStatusFlag:
 217              	.LFB213:
 664:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** 
 665:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** /**
 666:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param channel Constant pointer to USIC channel structure of type @ref XMC_USIC_CH_t
 667:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @param flag Status flag
 668:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * @return None<br>
 669:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 670:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Description:</b><br>
 671:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * Clears the status flag of I2C \a channel by setting the input parameter \a flag in PSCR register
 672:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  *
 673:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * \par<b>Related APIs:</b><br>
 674:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  * XMC_I2C_CH_GetStatusFlag()\n\n
 675:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****  */
 676:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** __STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
 677:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** {
 218              	 .loc 2 677 0
 219              	 .cfi_startproc
 220              	 
 221              	 
 222              	 
 223 0000 80B4     	 push {r7}
 224              	.LCFI24:
 225              	 .cfi_def_cfa_offset 4
 226              	 .cfi_offset 7,-4
 227 0002 83B0     	 sub sp,sp,#12
 228              	.LCFI25:
 229              	 .cfi_def_cfa_offset 16
 230 0004 00AF     	 add r7,sp,#0
 231              	.LCFI26:
 232              	 .cfi_def_cfa_register 7
 233 0006 7860     	 str r0,[r7,#4]
 234 0008 3960     	 str r1,[r7]
 678:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h ****   channel->PSCR |= flag;
 235              	 .loc 2 678 0
 236 000a 7B68     	 ldr r3,[r7,#4]
 237 000c DA6C     	 ldr r2,[r3,#76]
 238 000e 3B68     	 ldr r3,[r7]
 239 0010 1A43     	 orrs r2,r2,r3
 240 0012 7B68     	 ldr r3,[r7,#4]
 241 0014 DA64     	 str r2,[r3,#76]
 679:C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc\xmc_i2c.h **** }
 242              	 .loc 2 679 0
 243 0016 0C37     	 adds r7,r7,#12
 244              	.LCFI27:
 245              	 .cfi_def_cfa_offset 4
 246 0018 BD46     	 mov sp,r7
 247              	.LCFI28:
 248              	 .cfi_def_cfa_register 13
 249              	 
 250 001a 5DF8047B 	 ldr r7,[sp],#4
 251              	.LCFI29:
 252              	 .cfi_restore 7
 253              	 .cfi_def_cfa_offset 0
 254 001e 7047     	 bx lr
 255              	 .cfi_endproc
 256              	.LFE213:
 258              	 .section .text.I2C_MASTER_IsTXFIFOFull,"ax",%progbits
 259              	 .align 2
 260              	 .thumb
 261              	 .thumb_func
 263              	I2C_MASTER_IsTXFIFOFull:
 264              	.LFB224:
 265              	 .file 3 "../Dave/Generated/I2C_MASTER/i2c_master.h"
   1:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
   2:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @file i2c_master.h
   3:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @date 2017-12-20
   4:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
   5:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * NOTE:
   6:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * regenerated.
   8:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
   9:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
  10:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @cond
  11:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  12:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER v4.1.28 Configures USIC channel to transmit & receive data using I2C protocol.
  13:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  14:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  15:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * All rights reserved.
  16:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  17:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  18:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * following conditions are met:
  19:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  20:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  21:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * disclaimer.
  22:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  23:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  24:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * following disclaimer in the documentation and/or other materials provided with the distribution.
  25:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  26:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  27:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * products derived from this software without specific prior written permission.
  28:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  29:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  30:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  31:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  32:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  33:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  34:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  35:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  37:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  38:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * with Infineon Technologies AG (dave@infineon.com).
  39:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  40:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  41:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Change History
  42:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * --------------
  43:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  44:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-02-16:
  45:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Initial version<br>
  46:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  47:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-06-10:
  48:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  49:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  50:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-08-31:
  51:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - DMA support APIs added
  52:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2015-10-20:
  53:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Code snippets updated
  54:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2016-08-18:
  55:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Documentation of slave address formatting improved.
  56:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2017-11-17:
  57:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Added tx_irqn and rx_irqn to I2C_MASTER_CONFIG_t
  58:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 2017-12-20:
  59:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     - Added I2C_MASTER_FlushTxFifo(), I2C_MASTER_FlushRxFifo(), I2C_MASTER_DisableOutputs(), I2C
  60:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  61:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcond
  62:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
  63:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
  64:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  65:../Dave/Generated/I2C_MASTER/i2c_master.h **** #ifndef I2C_MASTER_H
  66:../Dave/Generated/I2C_MASTER/i2c_master.h **** #define I2C_MASTER_H
  67:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  68:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  69:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  70:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
  71:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * HEADER FILES
  72:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  73:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include <xmc_gpio.h>
  74:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include <xmc_i2c.h>
  75:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "i2c_master_conf.h"
  76:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  77:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if(UC_FAMILY == XMC4)
  78:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
  79:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include "GLOBAL_DMA/global_dma.h"
  80:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
  81:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
  82:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  83:../Dave/Generated/I2C_MASTER/i2c_master.h **** #include <DAVE_Common.h>
  84:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  85:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  86:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef void(*i2c_master_fptr_cbhandler)(void);
  87:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  88:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
  89:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * MACROS
  90:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
  91:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  92:../Dave/Generated/I2C_MASTER/i2c_master.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  93:../Dave/Generated/I2C_MASTER/i2c_master.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  94:../Dave/Generated/I2C_MASTER/i2c_master.h **** #error "I2C_MASTER requires XMC Peripheral Library v2.0.0 or higher"
  95:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
  96:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
  97:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
  98:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * ENUMS
  99:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
 100:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 101:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_enumerations
 102:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 103:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 104:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 105:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Initialization status.
 106:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 107:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_STATUS
 108:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 109:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_SUCCESS = 0U,           /*!< I2C_MASTER SUCCESS */
 110:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_FAILURE = 1U,           /*!< I2C_MASTER FAILURE */
 111:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_BUSY = 2U,              /*!< I2C_MASTER BUSY */
 112:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_STATUS_UNSUPPORTED_MODE = 3U   /*!< I2C_MASTER UNSUPPORTED MODE */
 113:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_STATUS_t;
 114:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 115:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 116:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Direction
 117:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 118:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_DIRECTION
 119:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 120:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_DIRECTION_TRANSMIT = 0U,   /*!< Direction indicates transmit */
 121:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_DIRECTION_RECEIVE = 1U     /*!< Direction indicates receive */
 122:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_DIRECTION_t;
 123:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 124:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 125:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 126:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 127:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef enum I2C_MASTER_TRANSFER_MODE
 128:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 129:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 130:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 131:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP con
 132:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_TRANSFER_MODE_t;
 133:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 134:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @}
 135:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 136:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
 137:../Dave/Generated/I2C_MASTER/i2c_master.h **** * DATA STRUCTURES
 138:../Dave/Generated/I2C_MASTER/i2c_master.h **** ***************************************************************************************************
 139:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 140:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 141:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_datastructures
 142:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 143:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 144:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 145:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Structure for DMA configuration.
 146:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 147:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if ((I2C_MASTER_DMA_TX_ENABLED == 1) || (I2C_MASTER_DMA_RX_ENABLED == 1))
 148:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_DMA_CONFIG
 149:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 150:../Dave/Generated/I2C_MASTER/i2c_master.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 151:../Dave/Generated/I2C_MASTER/i2c_master.h ****   GLOBAL_DMA_t * global_dma;                   /**< Global DMA handle */
 152:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 153:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_DMA_CONFIG_t;
 154:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 155:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 156:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Constant structure for holding the configuration parameters of I2C channel.
 157:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 158:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_CONFIG
 159:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 160:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const XMC_I2C_CH_CONFIG_t *brg_config;             /*!< Basic I2C configuration from the GUI wit
 161:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 162:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel confi
 163:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                                    data transmission.*/
 164:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 165:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 166:../Dave/Generated/I2C_MASTER/i2c_master.h ****    const I2C_MASTER_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel confi
 167:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                                    data reception.*/
 168:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 169:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_config;         /*!< Function pointer to configure the MUX va
 170:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_enable_io;      /*!< Function pointer to enable SDA/SCL outpu
 171:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler fptr_i2c_disable_io;     /*!< Function pointer to disable SDA/SCL outp
 172:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 173:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler tx_cbhandler;            /*!< Function pointer to hold the callback fu
 174:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when the transmission is complete
 175:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler rx_cbhandler;            /*!< Function pointer to hold the callback fu
 176:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when the reception is complete*/
 177:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler nack_cbhandler;          /*!< Function pointer to hold the callback fu
 178:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when nack is received*/
 179:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler arbitration_cbhandler;   /*!< Function pointer to hold the callback fu
 180:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when arbitration lost is occured*
 181:../Dave/Generated/I2C_MASTER/i2c_master.h ****    i2c_master_fptr_cbhandler error_cbhandler;         /*!< Function pointer to hold the callback fu
 182:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            called when error is detected.*/
 183:../Dave/Generated/I2C_MASTER/i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t transmit_mode;          /**< Mode used for transmitting data. Data ca
 184:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 185:../Dave/Generated/I2C_MASTER/i2c_master.h ****    I2C_MASTER_TRANSFER_MODE_t receive_mode;           /**< Mode used for receiving data. Data can b
 186:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                            interrupt, DMA or direct(using polling o
 187:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 188:../Dave/Generated/I2C_MASTER/i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t txFIFO_size;               /*!< TxFIFO size configuration*/
 189:../Dave/Generated/I2C_MASTER/i2c_master.h ****    XMC_USIC_CH_FIFO_SIZE_t rxFIFO_size;               /*!< RxFIFO size configuration*/
 190:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 191:../Dave/Generated/I2C_MASTER/i2c_master.h ****    IRQn_Type tx_irqn;
 192:../Dave/Generated/I2C_MASTER/i2c_master.h ****    IRQn_Type rx_irqn; 
 193:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_CONFIG_t;
 194:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 195:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 196:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Structure to hold the dynamic variables for the I2C_MASTER communication.
 197:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 198:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER_RUNTIME
 199:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 200:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t * tx_data;                     /*!< Pointer to the transmit data buffer*/
 201:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t * rx_data;                     /*!< Pointer to the receive data buffer*/
 202:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t tx_data_count;                /*!< Number of bytes of data to be transmitted*/
 203:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t tx_data_index;       /*!< Index to the byte to be transmitted next in the tx_da
 204:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_data_count;                /*!< Number of bytes of data to be received*/
 205:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 206:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_dma_data_count;            /*!< Number of bytes of data to be received-DMA mode*/
 207:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t rx_dma_data_index;            /*!< Index of bytes of data to be received-DMA mode*/
 208:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 209:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t rx_data_index;       /*!< Indicates the number of bytes currently available in 
 210:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile uint32_t direction;           /*!< Indicates TRANSMIT/RECEIVE */
 211:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t send_stop;                    /*!< Indicates to stop the I2C */
 212:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint32_t send_nack;                    /*!< Indicates to send nack */
 213:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t tx_ack_sr;                         /*!< Service request number assigned to transmit inter
 214:../Dave/Generated/I2C_MASTER/i2c_master.h ****   uint8_t rx_sr;                         /*!< Service request number assigned to receive interrupts
 215:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool tx_busy;                 /*!< Status flag to indicate busy when a transmission is a
 216:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool rx_busy;                 /*!< Status flag to indicate busy when a reception is assi
 217:../Dave/Generated/I2C_MASTER/i2c_master.h ****   volatile bool bus_acquired;            /*!< flag to indicate whether bus is acquired or not */
 218:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_RUNTIME_t;
 219:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 220:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 221:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 222:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 223:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 224:../Dave/Generated/I2C_MASTER/i2c_master.h **** typedef struct I2C_MASTER
 225:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 226:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_t *channel;                    /*!< USIC channel*/
 227:../Dave/Generated/I2C_MASTER/i2c_master.h ****   const I2C_MASTER_CONFIG_t * const config;  /*!< I2C configuration structure pointer*/
 228:../Dave/Generated/I2C_MASTER/i2c_master.h ****   I2C_MASTER_RUNTIME_t * const runtime;      /*!< Pointer to the structure holding all variables,
 229:../Dave/Generated/I2C_MASTER/i2c_master.h ****    	                                               that can change at runtime*/
 230:../Dave/Generated/I2C_MASTER/i2c_master.h **** } I2C_MASTER_t;
 231:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 232:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 233:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @}
 234:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 235:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 236:../Dave/Generated/I2C_MASTER/i2c_master.h **** #ifdef __cplusplus
 237:../Dave/Generated/I2C_MASTER/i2c_master.h **** extern "C" {
 238:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 239:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 240:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 241:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 242:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @ingroup I2C_MASTER_apidoc
 243:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @{
 244:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 245:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 246:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**************************************************************************************************
 247:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * API PROTOTYPES
 248:../Dave/Generated/I2C_MASTER/i2c_master.h ****  **************************************************************************************************
 249:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 250:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Get I2C_MASTER APP version.
 251:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return \a DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 252:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 253:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description: </b><br>
 254:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The function can be used to check application software compatibility with a
 255:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * specific version of the APP.
 256:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 257:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 258:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 259:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 260:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 261:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 262:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_APP_VERSION_t version;
 263:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_Init();
 264:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    version = I2C_MASTER_GetAppVersion();
 265:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(version.major != 4U)
 266:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 267:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 268:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 269:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 270:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 271:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 272:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 273:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 274:../Dave/Generated/I2C_MASTER/i2c_master.h **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void);
 275:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 276:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief This function initializes the I2C_MASTER APP based on user provided configuration.
 277:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 278:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
 279:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 280:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description: </b><br>
 281:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C configurations like channel selection,baud rate setting,
 282:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * FIFO configuration etc are done in this API.
 283:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Protocol specific interrupts can also be enabled using the I2C_MASTER_Init
 284:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * function.
 285:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 286:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 287:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 288:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 289:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 290:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 291:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 292:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   // Initializing the modules and the multiplexer
 293:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_Init(); // I2C_MASTER_Init will be called from DAVE_Init()
 294:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1)
 295:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {}
 296:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 297:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 298:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 299:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 300:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 301:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 302:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle);
 303:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 304:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 305:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 306:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief  Receives the data from I2C slave device.
 307:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 308:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start Flag to indicate that the start condition need to be send.
 309:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address I2C slave device address.
 310:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data buffer to receive data.
 311:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  count The number of bytes to be received from slave.
 312:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 313:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_nack The flag to indicate that the NACK condition need to be send for the last byte
 314:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 315:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 316:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_Receive API can be used in Interrupt and Direct modes.\n
 317:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 318:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 319:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 320:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).\n
 321:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 322:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 323:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 324:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 325:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 326:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 327:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define BYTES_TO_READ 10
 328:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define BYTES_TO_TRANSMIT 10
 329:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 330:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 331:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 332:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 333:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 334:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 335:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  } PCA9502_REGADDR_t;
 336:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 337:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 338:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t data = 0x55;
 339:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t rx_data;
 340:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 341:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 342:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 343:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_STATUS_t init_status;  
 344:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   init_status = DAVE_Init();
 345:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 346:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 347:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     mem_address[0] = IO_STATE;//memory which need to be read from slave
 348:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Write data to IO EXPANDER
 349:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 350:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 351:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 352:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,&data,1,true);
 353:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 354:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 355:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Read data from IO EXPANDER
 356:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 357:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 358:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 359:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0,true,SLAVE_ADDRESS,&rx_data,1,true,true);
 360:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 361:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 362:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1)
 363:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   { }
 364:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  return 0;
 365:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 366:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 367:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 368:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 369:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 370:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 371:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                        uint8_t * data, const uint32_t count, bool send_stop, bool s
 372:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 373:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 374:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Transmits data to I2C slave device.
 375:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 376:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 377:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start The flag to indicate that the start condition need to be send.
 378:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address I2C slave device address.
 379:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data buffer containing the data to transmit.
 380:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size The number of bytes to be send to slave.
 381:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop The flag to indicate that the stop condition need to be send.
 382:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 383:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return @ref I2C_MASTER_STATUS_t Status.
 384:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 385:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_Transmit API can be used in Interrupt and Direct modes.\n
 386:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 387:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 388:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 389:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write). \n
 390:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 391:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 
 392:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 393:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 394:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 395:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 396:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  typedef enum PCA9502_REGADDR {
 397:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_DIR    = 0xA << 3,
 398:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_STATE  = 0xB << 3,
 399:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_INTE   = 0xC << 3,
 400:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    IO_CTRL   = 0xE << 3
 401:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  } PCA9502_REGADDR_t;
 402:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 403:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 404:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 405:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 406:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 407:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 408:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 409:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 410:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 411:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 412:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = IO_STATE;//memory which need to be read from slave
 413:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Write data to IO EXPANDER
 414:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 415:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 416:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 417:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,5,true);
 418:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 419:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 420:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 421:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 422:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 423:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 424:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 425:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 426:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 427:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 428:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 429:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 430:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                uint8_t *data, const uint32_t size, bool send_stop);
 431:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 432:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 433:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Get the I2C flag status.
 434:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 435:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 436:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 437:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *			 	      bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be used to selec
 438:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    multiple flags.
 439:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 440:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t Flag status.
 441:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 442:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 443:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 444:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 445:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 446:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 447:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 448:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 449:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 450:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 451:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 452:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 453:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 454:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 455:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 456:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 457:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 458:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
 459:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 460:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 461:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 462:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 463:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 464:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 465:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 466:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 467:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 468:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 469:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 470:../Dave/Generated/I2C_MASTER/i2c_master.h **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype);
 471:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 472:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 473:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Clear the I2C flag status.
 474:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 475:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C device handle of type I2C_MASTER_t*
 476:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flagtype   single or multiple flags, whose status need to be checked.
 477:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    The bitwise OR operation on elements of enum XMC_I2C_CH_STATUS_FLAG_t can be 
 478:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                    multiple flags.
 479:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 480:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None <BR>
 481:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 482:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 483:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 484:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 485:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 486:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
 487:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 488:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 489:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 490:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 491:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 492:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 493:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 494:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 495:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 496:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 497:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
 498:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 499:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 500:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 501:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 502:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {}
 503:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 504:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 0;
 505:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 506:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 507:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 508:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 509:../Dave/Generated/I2C_MASTER/i2c_master.h **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype);
 510:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 511:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 512:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Aborts the ongoing data transmission.
 513:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 514:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 515:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 516:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 517:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If there is a transmission in progress, it will be stopped. Once the transmission is stopped, 
 518:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * user can start a new transmission without delay.
 519:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 520:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 521:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 522:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 523:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 524:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 525:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 526:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 527:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 528:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buf[50] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 529:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 530:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 531:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 532:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 533:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 534:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 535:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 536:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 537:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
 538:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
 539:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 16, true);
 540:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 541:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 542:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
 543:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 544:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 545:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 546:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 547:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 548:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 549:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 550:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 551:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 552:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle);
 553:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 554:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 555:../Dave/Generated/I2C_MASTER/i2c_master.h **** * @brief Stops the active data reception request.
 556:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 557:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return I2C_MASTER_STATUS_t status
 558:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 559:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 560:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a reception is in progress, it will be stopped. When a reception request
 561:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * is active, user will not be able to place a new receive request till the active
 562:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * reception is complete. This API can stop the progressing reception to make
 563:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * a new receive request.
 564:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 565:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
 566:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 567:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 568:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 569:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 570:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 571:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 572:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 573:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 574:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t rx_buf[25];
 575:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t tx_buf[2];
 576:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   DAVE_STATUS_t init_status;
 577:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   init_status = DAVE_Init();
 578:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
 579:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 580:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //send the address from which data to be transfered
 581:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     tx_buf[0] = 0;
 582:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 583:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 584:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 585:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_AbortReceive(&I2C_MASTER_0);
 586:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_SendStop(&I2C_MASTER_0);
 587:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &tx_buf[0], 1, false);
 588:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 589:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, &rx_buf[0], 16, true, true);
 590:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 591:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 592:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1U)
 593:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
 594:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
 595:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 596:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 1U;
 597:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 598:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 599:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 600:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 601:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 602:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle);
 603:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 604:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 605:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_TX_ENABLED == 1U) || defined(DOXYGEN)
 606:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 607:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for transmitting data over I2C channel using DMA.
 608:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 609:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 610:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  block_size size of the block
 611:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  addr    address\n
 612:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 613:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 614:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 615:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 616:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 617:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 618:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 619:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * request is registered.
 620:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 621:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 622:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The data transmission is accomplished using DMA. User can configure a callback function in the A
 623:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. The function uses AP
 624:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * structure to store the status of transmission.
 625:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This function only registers a data transmission request, if there is no active transmission in 
 626:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Actual data transmission happens through DMA channel.
 627:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * A maximum of 4095 bytes can be transmitted in one API call. This limit is because of the DMA sin
 628:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Callback function is executed when all the data bytes are transmitted.
 629:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 630:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 631:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the completion of data transmission.
 632:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If data more than the block size of 4095 have to be transmitted, user will have to transmit them
 633:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * calls to this API.
 634:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>
 635:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * I2C_MASTER_StartTransmitDMA API can be used in DMA mode.
 636:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit should be configured as "DMA" mode in advanced settings tab. \n
 637:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 638:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 639:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 640:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 641:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 642:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 643:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 644:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 645:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 646:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 647:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
 648:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 649:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 650:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 651:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 652:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 653:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 654:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 655:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 656:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 657:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 658:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 659:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 660:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 661:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
 662:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 663:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 664:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 665:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 666:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 667:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 668:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // trigger the DMA
 669:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitDMA(&I2C_MASTER_0, sizeof(Send_Data), Send_Data);
 670:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 671:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 672:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 673:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 674:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 675:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 676:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 677:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 678:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 679:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 680:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
 681:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 682:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 683:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 684:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitDMA(const I2C_MASTER_t *const handle, uint32_t block_si
 685:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 686:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 687:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_DMA_RX_ENABLED == 1U) || defined(DOXYGEN)
 688:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 689:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel using DMA.
 690:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 691:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 692:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 693:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param block_size  size of the block
 694:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  addr  address \n
 695:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= 4095.
 696:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 697:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 698:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 699:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 700:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 701:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 702:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 703:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured callback function will be executed.
 704:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 705:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When all the requested number of data bytes are received, the configured callback function will 
 706:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, the user has to poll for the value of the variable, \a
 707:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * handle->runtime->rx_busy to be false. The value is updated to \a false when all the requested nu
 708:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * are received.
 709:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * A maximum of 4095 bytes can be received in one API call. This limit is because of the DMA single
 710:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 711:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveDMA API can be used only in DMA mode
 712:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive should be configured as "DMA" mode in advanced settings tab \n
 713:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(addr) should reserve an additional bit at the LSB for read/write indication. For example
 714:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 715:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 716:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
 717:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 718:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 719:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 720:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 721:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 722:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 723:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Pre condition:
 724:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Transmit mode and receive mode should be configured to "DMA" in advanced settings tab
 725:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 726:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t ReadData[256];
 727:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 728:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 729:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 730:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 731:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 732:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 733:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 734:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
 735:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 736:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 737:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 738:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 739:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 740:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
 741:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
 742:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 743:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 744:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 745:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 746:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 747:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
 748:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 749:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    {
 750:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	      // wait for ACK
 751:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *	    }
 752:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 753:../Dave/Generated/I2C_MASTER/i2c_master.h ****  
 754:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveDMA(&I2C_MASTER_0, 200, ReadData);
 755:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 756:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 757:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 758:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 759:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 760:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 761:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 762:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 763:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 764:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 765:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 766:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  @endcode
 767:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 768:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 769:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveDMA(const I2C_MASTER_t *const handle, uint32_t block_siz
 770:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 771:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 772:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1U)
 773:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 774:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for transmitting data over I2C_MASTER channel.
 775:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 776:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 777:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start flag to indicate the start condition
 778:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address slave address
 779:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data    pointer to buffer
 780:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size    number of bytes
 781:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop flag to indicate the stop condition\n
 782:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 783:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 784:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status of transmit request.\n
 785:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 786:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a transmission is in progress.\n
 787:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 788:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 789:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * request is registered.
 790:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 791:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 792:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The data transmission is accomplished using transmit interrupt. User can configure a callback fu
 793:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the data is fully transmitted, the callback function will be executed. If transmit FIFO is 
 794:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the trigger limit is set to 1. So the transmit interrupt will be generated when all the data in 
 795:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * from FIFO. The function uses APP handle's runtime structure to store the data pointer, count, da
 796:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * status of transmission. This function only registers a data transmission request if there is no 
 797:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * in progress.
 798:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Actual data transmission happens in the transmit interrupt service routine. A trigger is generat
 799:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interrupt to start loading the data. If transmit FIFO is configured, the data is filled into the
 800:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this point of
 801:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * some more data to be transmitted, it is loaded to the FIFO again. When FIFO is not enabled, data
 802:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * byte at a time. On transmission of each byte an interrupt is generated and the next byte is tran
 803:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interrupt service routine. Callback function is executed when all the data bytes are transmitted
 804:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of t
 805:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * structure( \a handle->runtime->tx_busy ) to check for the completion of data transmission.<br>
 806:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartTransmitIRQ API can be used only in Interrupt mode.
 807:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit should be configured as "Interrupt" mode in advanced settings tab.\n
 808:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 809:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 810:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 811:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).
 812:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 813:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 814:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 815:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 816:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 817:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t tx_buffer[64] = {0x01,0x02,0x03,0x04,0x05};
 818:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 819:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 820:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 821:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 822:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 823:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 824:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 825:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 826:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 827:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Write data to IO EXPANDER
 828:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 829:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 830:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 831:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,false,SLAVE_ADDRESS,tx_buffer,64,true);
 832:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 833:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 834:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 835:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 836:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 837:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 838:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 839:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 840:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 841:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 842:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 843:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 844:../Dave/Generated/I2C_MASTER/i2c_master.h **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 845:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 846:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 847:../Dave/Generated/I2C_MASTER/i2c_master.h **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1U)
 848:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 849:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Registers a request for receiving data over I2C_MASTER channel.
 850:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 851:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 852:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle  Pointer to I2C_MASTER_t handle structure
 853:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_start flag to indicate the start condition
 854:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  address slave address
 855:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  data    pointer to buffer
 856:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  count    number of bytes
 857:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_stop flag to indicate the stop condition
 858:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  send_nack flag to indicate the nack condition\n
 859:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 860:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 861:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return  I2C_MASTER_STATUS_t: Status for receive request.\n
 862:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_SUCCESS if the request is accepted.\n
 863:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                        @ref I2C_MASTER_STATUS_BUSY if a reception is in progress.\n
 864:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 865:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 866:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 867:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Data will be received asynchronously. When the requested number of data bytes are received, opti
 868:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured callback function will be executed. Based on the UI configuration, either standard re
 869:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * receive FIFO is used for data reception. An interrupt is configured for reading received data fr
 870:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * function only registers a request to receive a number of data bytes from a USIC channel. If FIFO
 871:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * reception, the FIFO limit is dynamically configured to optimally utilize the CPU load.  When all
 872:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * of data bytes are received, the configured callback function will be executed. If a callback fun
 873:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * configured, the user has to poll for the value of the variable, \a handle->runtime->rx_busy to b
 874:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * is updated to \a false when all the requested number of data bytes are received.<br>
 875:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: I2C_MASTER_StartReceiveIRQ API can be used only in Interrupt mode.
 876:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive should be configured as "Interrupt" mode in advanced settings tab.\n
 877:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
 878:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
 879:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
 880:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).
 881:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 882:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 883:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 884:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
 885:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 886:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t rx_buffer[64];
 887:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 888:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 889:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 890:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 891:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 892:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 893:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 894:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 895:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 896:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //Write data to IO EXPANDER
 897:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 898:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 899:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 900:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,rx_buffer,64,true, true);
 901:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
 902:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 903:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1)
 904:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    { }
 905:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 0;
 906:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 907:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 908:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode<BR> </p>
 909:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 910:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 911:../Dave/Generated/I2C_MASTER/i2c_master.h ****  I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 912:../Dave/Generated/I2C_MASTER/i2c_master.h ****                                                uint8_t * data, const uint32_t count, bool send_stop
 913:../Dave/Generated/I2C_MASTER/i2c_master.h **** #endif
 914:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 915:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 916:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 917:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Gets the transmit FIFO event flags.
 918:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 919:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 920:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 921:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
 922:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                      their bit positions.\n
 923:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
 924:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 925:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 926:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer interrupt flag
 927:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * buffer error flag before providing the value.
 928:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * User has to mask the bits of interest before checking the status.
 929:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: Enable transmit fifo in Advanced settings tab. <br>
 930:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 931:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 932:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 933:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 934:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 935:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 936:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
 937:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 938:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 939:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 940:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
 941:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
 942:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 943:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
 944:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
 945:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
 946:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
 947:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
 948:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
 949:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
 950:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
 951:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
 952:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
 953:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 954:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
 955:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
 956:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
 957:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
 958:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
 959:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
 960:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
 961:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
 962:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
 963:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
 964:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 965:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
 966:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetTXFIFOStatus(const I2C_MASTER_t* const handle)
 967:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 968:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetTXFIFOStatus: invalid handle", (handle != NULL))
 969:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
 970:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 971:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
 972:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
 973:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Configures trigger limit for the transmit FIFO.
 974:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 975:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
 976:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size   FIFO size
 977:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
 978:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               \bRange: 0 to transmit FIFO size.\n
 979:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
 980:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
 981:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 982:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
 983:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 984:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
 985:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
 986:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
 987:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * below the trigger limit.
 988:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 989:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
 990:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
 991:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 992:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
 993:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
 994:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
 995:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Send_Data[] = "Infineon Technologies";
 996:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
 997:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
 998:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
 999:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1000:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1001:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1002:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1003:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit, draining level as 10
1004:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1005:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // Execution will happen two times in the interrupt handler as the limit is set to 10
1006:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, Send_Data, 16, true);
1007:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1008:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1009:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1010:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1011:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1012:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1013:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1014:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1015:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1016:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1017:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1018:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1019:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1020:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1021:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetTXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1022:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                              const uint32_t limit)
1023:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1024:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetTXFIFOTriggerLimit: invalid handle", (handle != NULL))
1025:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1026:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1027:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1028:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Configures trigger limit for the receive FIFO.
1029:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1030:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1031:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  size   FIFO size
1032:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1033:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               \bRange: 0 to receive FIFO size.\n
1034:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1035:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1036:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1037:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1038:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1039:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1040:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1041:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1042:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * above the trigger limit.
1043:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1044:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1045:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1046:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1047:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1048:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1049:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1050:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1051:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t Rx_Data[256];
1052:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1053:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1054:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1055:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1056:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1057:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1058:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1059:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure receive fifo trigger limit to filling level as 10
1060:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1061:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // Execution will happen two times in the receive interrupt handler as the limit is set to 
1062:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_Receive(&I2C_MASTER_0, true, SLAVE_ADDRESS, Rx_Data, 16, true, true);
1063:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
1064:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1065:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1066:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1067:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1068:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1069:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1070:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1071:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1072:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1073:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1074:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1075:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1076:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1077:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t s
1078:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                              const uint32_t limit)
1079:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1080:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
1081:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
1082:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1083:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1084:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1085:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Checks if the transmit FIFO is full.
1086:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1087:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1088:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1089:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return bool Status of transmit FIFO filling level.
1090:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1091:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1092:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1093:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while filling
1094:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * data to the transmit FIFO.
1095:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>NOTE: </b><br>: Transmit should be "Direct" mode in advanced settings tab.<br>
1096:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1097:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1098:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1099:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1100:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1101:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1102:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1103:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1104:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t send_data[] = "Infineon Technologies";
1105:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1106:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1107:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1108:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();           // Initialization of DAVE APPs
1109:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1110:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1111:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1112:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1113:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1114:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1115:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1116:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1117:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1118:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  I2C_MASTER_Transmit(&I2C_MASTER_0, true, SLAVE_ADDRESS, &send_data[0], 10, false);
1119:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  //Wait when Tx FIFO is full
1120:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  while(!I2C_MASTER_IsTXFIFOFull(&I2C_MASTER_0))
1121:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1122:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_Transmit(&I2C_MASTER_0, false, SLAVE_ADDRESS, &send_data[0], 10, false);
1123:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1124:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  while(1U)
1125:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1126:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1127:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * }
1128:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1129:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1130:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
1131:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 266              	 .loc 3 1131 0
 267              	 .cfi_startproc
 268              	 
 269              	 
 270 0000 80B5     	 push {r7,lr}
 271              	.LCFI30:
 272              	 .cfi_def_cfa_offset 8
 273              	 .cfi_offset 7,-8
 274              	 .cfi_offset 14,-4
 275 0002 82B0     	 sub sp,sp,#8
 276              	.LCFI31:
 277              	 .cfi_def_cfa_offset 16
 278 0004 00AF     	 add r7,sp,#0
 279              	.LCFI32:
 280              	 .cfi_def_cfa_register 7
 281 0006 7860     	 str r0,[r7,#4]
1132:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL))
1133:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 282              	 .loc 3 1133 0
 283 0008 7B68     	 ldr r3,[r7,#4]
 284 000a 1B68     	 ldr r3,[r3]
 285 000c 1846     	 mov r0,r3
 286 000e FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsFull
 287 0012 0346     	 mov r3,r0
1134:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 288              	 .loc 3 1134 0
 289 0014 1846     	 mov r0,r3
 290 0016 0837     	 adds r7,r7,#8
 291              	.LCFI33:
 292              	 .cfi_def_cfa_offset 8
 293 0018 BD46     	 mov sp,r7
 294              	.LCFI34:
 295              	 .cfi_def_cfa_register 13
 296              	 
 297 001a 80BD     	 pop {r7,pc}
 298              	 .cfi_endproc
 299              	.LFE224:
 301              	 .section .text.I2C_MASTER_IsRXFIFOEmpty,"ax",%progbits
 302              	 .align 2
 303              	 .thumb
 304              	 .thumb_func
 306              	I2C_MASTER_IsRXFIFOEmpty:
 307              	.LFB225:
1135:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1136:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1137:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Checks if the receive FIFO is empty.
1138:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1139:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1140:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1141:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return bool Status of receive FIFO filling level.
1142:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1143:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *                       \afalse- if receive FIFO still has data.<br>
1144:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1145:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Checks the status using the register TRBSR. Can be used while reading data from the receive FIFO
1146:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1147:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1148:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1149:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1150:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1151:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1152:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1153:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1154:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1155:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1156:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1157:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1158:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1159:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1160:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1161:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1162:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1163:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1164:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1165:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1166:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1167:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1168:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1169:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1170:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1171:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1172:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1173:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1174:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1175:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1176:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1177:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1178:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1179:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1180:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1181:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1182:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1183:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1184:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1185:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1186:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1187:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1188:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1189:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1190:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   while(1U)
1191:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
1192:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1193:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1194:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1195:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1196:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
1197:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 308              	 .loc 3 1197 0
 309              	 .cfi_startproc
 310              	 
 311              	 
 312 0000 80B5     	 push {r7,lr}
 313              	.LCFI35:
 314              	 .cfi_def_cfa_offset 8
 315              	 .cfi_offset 7,-8
 316              	 .cfi_offset 14,-4
 317 0002 82B0     	 sub sp,sp,#8
 318              	.LCFI36:
 319              	 .cfi_def_cfa_offset 16
 320 0004 00AF     	 add r7,sp,#0
 321              	.LCFI37:
 322              	 .cfi_def_cfa_register 7
 323 0006 7860     	 str r0,[r7,#4]
1198:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL))
1199:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 324              	 .loc 3 1199 0
 325 0008 7B68     	 ldr r3,[r7,#4]
 326 000a 1B68     	 ldr r3,[r3]
 327 000c 1846     	 mov r0,r3
 328 000e FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_IsEmpty
 329 0012 0346     	 mov r3,r0
1200:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 330              	 .loc 3 1200 0
 331 0014 1846     	 mov r0,r3
 332 0016 0837     	 adds r7,r7,#8
 333              	.LCFI38:
 334              	 .cfi_def_cfa_offset 8
 335 0018 BD46     	 mov sp,r7
 336              	.LCFI39:
 337              	 .cfi_def_cfa_register 13
 338              	 
 339 001a 80BD     	 pop {r7,pc}
 340              	 .cfi_endproc
 341              	.LFE225:
 343              	 .section .text.I2C_MASTER_GetReceivedByte,"ax",%progbits
 344              	 .align 2
 345              	 .thumb
 346              	 .thumb_func
 348              	I2C_MASTER_GetReceivedByte:
 349              	.LFB229:
1201:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1202:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1203:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Gets the status of event flags related to receive FIFO.
1204:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1205:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1206:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1207:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1208:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer event and 
1209:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * error event in their bit positions in TRBSR register.\n
1210:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status c
1211:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * comparison using \a OR operation.
1212:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1213:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1214:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * It provides the status of standard receive buffer event, alternative receive buffer event and re
1215:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * event.
1216:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function masks the TRBSR register with the bitmask of SRBI, ARBI and RBERI flags. User has to ma
1217:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * interest before checking the status.
1218:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1219:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1220:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1221:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1222:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1223:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   #define SLAVE_ADDRESS 0xA0
1224:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   uint8_t mem_address[2];
1225:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   int main(void)
1226:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   {
1227:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     DAVE_STATUS_t init_status;
1228:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1229:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     init_status = DAVE_Init();
1230:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     if(init_status == DAVE_STATUS_SUCCESS)
1231:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1232:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       mem_address[0] = 0x00;//memory which need to be read from slave
1233:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       //Configure receive fifo trigger limit as 10
1234:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1235:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1236:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1237:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1238:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1239:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0
1240:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1241:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1242:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1243:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     else
1244:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1245:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1246:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1247:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1248:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1249:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1250:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      return 1U;
1251:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1252:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1253:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1254:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1255:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint32_t I2C_MASTER_GetRXFIFOStatus(const I2C_MASTER_t* const handle)
1256:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1257:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetRXFIFOStatus: invalid handle", (handle != NULL))
1258:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1259:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1260:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1261:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1262:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to
1263:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * transmit FIFO.
1264:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1265:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1266:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1267:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register to be cleared.\n
1268:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be combined 
1269:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \a OR operation.
1270:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1271:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return    None
1272:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1273:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1274:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register. But the function does 
1275:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * value with the bit positions restricted to transmit FIFO status bits. User should ensure that th
1276:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * appropriately masked.
1277:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1278:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1279:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1280:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1281:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1282:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1283:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
1284:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1285:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1286:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1287:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1288:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1289:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1290:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1291:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00; //memory which need to be read from slave
1292:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure transmit fifo trigger limit as 10
1293:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetTXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1294:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1295:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1296:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,false);
1297:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1298:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetTXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0)
1299:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearTXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1300:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false);
1301:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1302:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1303:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1304:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1305:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1306:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1307:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1308:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1309:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1310:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1311:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1312:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1313:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1314:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearTXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1315:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1316:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearTXFIFOStatus: invalid handle", (handle != NULL))
1317:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1318:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1319:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1320:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1321:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Function clears the specified FIFO event flag related to receive FIFO. It should be used 
1322:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * of standard receive buffer interrupt, alternative receive buffer interrupt and receive buffer er
1323:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1324:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1325:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1326:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register to be cleared.\n
1327:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1328:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *             Multiple events can be input by using \a OR operation.
1329:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1330:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return    None
1331:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1332:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1333:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1334:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The function does not mask the input value to clear only receive buffer
1335:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * events. So user should appropriately mask the input value before calling
1336:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * the function.
1337:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1338:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1339:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1340:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1341:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1342:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1343:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  uint8_t mem_address[2];
1344:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1345:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1346:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1347:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1348:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1349:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1350:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1351:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      mem_address[0] = 0x00;//memory which need to be read from slave
1352:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Configure receive fifo trigger limit as 10
1353:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SetRXFIFOTriggerLimit(&I2C_MASTER_0, 16, 10);
1354:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartTransmitIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,1,false);
1355:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1356:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,16,true, true);
1357:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining data
1358:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((I2C_MASTER_GetRXFIFOStatus(&I2C_MASTER_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD) == 0)
1359:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearRXFIFOStatus(&I2C_MASTER_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1360:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_StartReceiveIRQ(&I2C_MASTER_0,true,SLAVE_ADDRESS,mem_address,6,false, false);
1361:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1362:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1363:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1364:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1365:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1366:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1367:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1368:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1369:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1370:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1371:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1372:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1373:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1374:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ClearRXFIFOStatus(const I2C_MASTER_t* const handle, const uint32_t 
1375:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1376:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ClearRXFIFOStatus: invalid handle", (handle != NULL))
1377:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1378:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1379:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1380:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1381:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Provides the received data from receive buffer.
1382:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1383:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1384:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return uint8_t: Data read from RBUF.\n
1385:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1386:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1387:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * This can be used in receive mode "Direct" to read the received data.
1388:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1389:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Otherwise it reads the data from OUTR register.
1390:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1391:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1392:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1393:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1394:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1395:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1396:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1397:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1398:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[10];
1399:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0,loc_index = 0;
1400:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1401:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1402:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1403:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1404:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1405:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1406:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1407:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1408:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1409:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1410:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1411:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1412:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1413:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1414:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1415:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1416:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1417:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1418:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1419:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1420:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        // wait for ACK
1421:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1422:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1423:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1424:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1425:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1426:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         index++;
1427:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1428:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1429:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1430:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1431:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1432:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1433:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1434:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1435:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1436:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1437:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1438:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1439:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1440:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1441:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1442:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1443:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1444:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1445:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1446:../Dave/Generated/I2C_MASTER/i2c_master.h **** /* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
1447:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
1448:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 350              	 .loc 3 1448 0
 351              	 .cfi_startproc
 352              	 
 353              	 
 354 0000 80B5     	 push {r7,lr}
 355              	.LCFI40:
 356              	 .cfi_def_cfa_offset 8
 357              	 .cfi_offset 7,-8
 358              	 .cfi_offset 14,-4
 359 0002 82B0     	 sub sp,sp,#8
 360              	.LCFI41:
 361              	 .cfi_def_cfa_offset 16
 362 0004 00AF     	 add r7,sp,#0
 363              	.LCFI42:
 364              	 .cfi_def_cfa_register 7
 365 0006 7860     	 str r0,[r7,#4]
1449:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
1450:../Dave/Generated/I2C_MASTER/i2c_master.h ****   return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 366              	 .loc 3 1450 0
 367 0008 7B68     	 ldr r3,[r7,#4]
 368 000a 1B68     	 ldr r3,[r3]
 369 000c 1846     	 mov r0,r3
 370 000e FFF7FEFF 	 bl XMC_I2C_CH_GetReceivedData
 371 0012 0346     	 mov r3,r0
1451:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 372              	 .loc 3 1451 0
 373 0014 1846     	 mov r0,r3
 374 0016 0837     	 adds r7,r7,#8
 375              	.LCFI43:
 376              	 .cfi_def_cfa_offset 8
 377 0018 BD46     	 mov sp,r7
 378              	.LCFI44:
 379              	 .cfi_def_cfa_register 13
 380              	 
 381 001a 80BD     	 pop {r7,pc}
 382              	 .cfi_endproc
 383              	.LFE229:
 385              	 .section .text.I2C_MASTER_TransmitByte,"ax",%progbits
 386              	 .align 2
 387              	 .thumb
 388              	 .thumb_func
 390              	I2C_MASTER_TransmitByte:
 391              	.LFB230:
1452:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1453:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1454:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Transmits single byte using I2C protocol.
1455:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1456:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1457:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  byte data byte to transmit. \n
1458:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1459:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 
1460:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1461:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1462:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1463:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1464:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1465:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1466:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1467:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1468:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1469:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1470:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1471:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1472:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1473:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1474:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1475:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1476:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1477:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1478:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1479:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1480:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1481:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1482:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1483:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1484:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1485:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // wait for ACK
1486:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1487:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1488:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1489:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1490:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1491:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // wait for ACK
1492:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1493:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1494:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1495:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1496:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1497:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1498:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1499:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1500:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
1501:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 392              	 .loc 3 1501 0
 393              	 .cfi_startproc
 394              	 
 395              	 
 396 0000 80B5     	 push {r7,lr}
 397              	.LCFI45:
 398              	 .cfi_def_cfa_offset 8
 399              	 .cfi_offset 7,-8
 400              	 .cfi_offset 14,-4
 401 0002 82B0     	 sub sp,sp,#8
 402              	.LCFI46:
 403              	 .cfi_def_cfa_offset 16
 404 0004 00AF     	 add r7,sp,#0
 405              	.LCFI47:
 406              	 .cfi_def_cfa_register 7
 407 0006 7860     	 str r0,[r7,#4]
 408 0008 0B46     	 mov r3,r1
 409 000a FB70     	 strb r3,[r7,#3]
1502:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
1503:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 410              	 .loc 3 1503 0
 411 000c 7B68     	 ldr r3,[r7,#4]
 412 000e 1A68     	 ldr r2,[r3]
 413 0010 FB78     	 ldrb r3,[r7,#3]
 414 0012 1046     	 mov r0,r2
 415 0014 1946     	 mov r1,r3
 416 0016 FFF7FEFF 	 bl XMC_I2C_CH_MasterTransmit
1504:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 417              	 .loc 3 1504 0
 418 001a 0837     	 adds r7,r7,#8
 419              	.LCFI48:
 420              	 .cfi_def_cfa_offset 8
 421 001c BD46     	 mov sp,r7
 422              	.LCFI49:
 423              	 .cfi_def_cfa_register 13
 424              	 
 425 001e 80BD     	 pop {r7,pc}
 426              	 .cfi_endproc
 427              	.LFE230:
 429              	 .section .text.I2C_MASTER_ReceiveACK,"ax",%progbits
 430              	 .align 2
 431              	 .thumb
 432              	 .thumb_func
 434              	I2C_MASTER_ReceiveACK:
 435              	.LFB233:
1505:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1506:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Enables the selected protocol events for interrupt generation.
1507:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1508:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1509:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  event  Protocol events to be enabled for interrupt generation. \n
1510:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1511:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         combined using the bitwise OR operation.\n
1512:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None\n
1513:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1514:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1515:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1516:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1517:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1518:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * may not yield expected result.
1519:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1520:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1521:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1522:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1523:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1524:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1525:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1526:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1527:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1528:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1529:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1530:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1531:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1532:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1533:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1534:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1535:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1536:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1537:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1538:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1539:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1540:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_EnableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1541:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1542:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1543:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1544:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1545:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1546:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1547:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
1548:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1549:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
1550:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_EnableEvent(handle->channel, event);
1551:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1552:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1553:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Disables selected events from generating interrupt.
1554:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1555:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  handle I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1556:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param  event  Events to be disabled from generating interrupt. \n
1557:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         \bRange: Use type \aXMC_I2C_CH_EVENT_t to select the event. Multiple events can be
1558:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *         combined using the bitwise OR operation.\n
1559:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1560:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1561:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1562:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1563:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1564:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1565:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1566:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1567:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declar
1568:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1569:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1570:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1571:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t status;
1572:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1573:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    status = DAVE_Init();
1574:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1575:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(status == DAVE_STATUS_FAILURE)
1576:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1577:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("DAVE APPs initialization failed\n");
1578:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1579:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1580:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1581:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1582:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1583:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1584:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    I2C_MASTER_DisableEvent(&I2C_MASTER_0, XMC_I2C_CH_EVENT_NACK);
1585:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    while(1U)
1586:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1587:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1588:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1589:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1590:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1591:../Dave/Generated/I2C_MASTER/i2c_master.h ****  */
1592:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
1593:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
1594:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
1595:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_DisableEvent(handle->channel, event);
1596:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
1597:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1598:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1599:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Receives the ACK from slave
1600:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1601:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1602:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1603:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1604:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * After transmitting a byte, master receives the ack from slave.<br>
1605:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1606:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1607:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1608:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1609:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1610:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1611:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1612:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1613:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1614:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1615:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1616:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t index = 0, loc_index = 0;
1617:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1618:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1619:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1620:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1621:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1622:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1623:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1624:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1625:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1626:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1627:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1628:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1629:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1630:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1631:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1632:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1633:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1634:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1635:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1636:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1637:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1638:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1639:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1640:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1641:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1642:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1643:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1644:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1645:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1646:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1647:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1648:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1649:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1650:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1651:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1652:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1653:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1654:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1655:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1656:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1657:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1658:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1659:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1660:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1661:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1662:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
1663:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 436              	 .loc 3 1663 0
 437              	 .cfi_startproc
 438              	 
 439              	 
 440 0000 80B5     	 push {r7,lr}
 441              	.LCFI50:
 442              	 .cfi_def_cfa_offset 8
 443              	 .cfi_offset 7,-8
 444              	 .cfi_offset 14,-4
 445 0002 82B0     	 sub sp,sp,#8
 446              	.LCFI51:
 447              	 .cfi_def_cfa_offset 16
 448 0004 00AF     	 add r7,sp,#0
 449              	.LCFI52:
 450              	 .cfi_def_cfa_register 7
 451 0006 7860     	 str r0,[r7,#4]
1664:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
1665:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterReceiveAck(handle->channel);
 452              	 .loc 3 1665 0
 453 0008 7B68     	 ldr r3,[r7,#4]
 454 000a 1B68     	 ldr r3,[r3]
 455 000c 1846     	 mov r0,r3
 456 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveAck
1666:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 457              	 .loc 3 1666 0
 458 0012 0837     	 adds r7,r7,#8
 459              	.LCFI53:
 460              	 .cfi_def_cfa_offset 8
 461 0014 BD46     	 mov sp,r7
 462              	.LCFI54:
 463              	 .cfi_def_cfa_register 13
 464              	 
 465 0016 80BD     	 pop {r7,pc}
 466              	 .cfi_endproc
 467              	.LFE233:
 469              	 .section .text.I2C_MASTER_ReceiveNACK,"ax",%progbits
 470              	 .align 2
 471              	 .thumb
 472              	 .thumb_func
 474              	I2C_MASTER_ReceiveNACK:
 475              	.LFB234:
1667:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1668:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Receives the NACK from slave
1669:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1670:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1671:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1672:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1673:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * After transmitting a byte, master receives the nack from slave.<br>
1674:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.
1675:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1676:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1677:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1678:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1679:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1680:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1681:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1682:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1683:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1684:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint32_t index = 0, loc_index = 0;
1685:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rec_data[64];
1686:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1687:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1688:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1689:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1690:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1691:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1692:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1693:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1694:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1695:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // write to address 0
1696:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_TransmitByte(&I2C_MASTER_0, 0x00);
1697:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1698:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1699:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1700:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1701:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1702:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1703:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1704:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1705:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1706:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1707:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1708:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(index < 16)
1709:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1710:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        I2C_MASTER_ReceiveACK(&I2C_MASTER_0);
1711:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        index++;
1712:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1713:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      // only for the last byte
1714:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ReceiveNACK(&I2C_MASTER_0);
1715:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //Wait when Rx FIFO is empty
1716:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(!I2C_MASTER_IsRXFIFOEmpty(&I2C_MASTER_0))
1717:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1718:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *        rec_data[loc_index++] = I2C_MASTER_GetReceivedByte(&I2C_MASTER_0);
1719:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1720:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1721:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1722:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1723:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1724:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1725:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1726:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1727:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1728:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1729:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1730:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1731:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1732:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
1733:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 476              	 .loc 3 1733 0
 477              	 .cfi_startproc
 478              	 
 479              	 
 480 0000 80B5     	 push {r7,lr}
 481              	.LCFI55:
 482              	 .cfi_def_cfa_offset 8
 483              	 .cfi_offset 7,-8
 484              	 .cfi_offset 14,-4
 485 0002 82B0     	 sub sp,sp,#8
 486              	.LCFI56:
 487              	 .cfi_def_cfa_offset 16
 488 0004 00AF     	 add r7,sp,#0
 489              	.LCFI57:
 490              	 .cfi_def_cfa_register 7
 491 0006 7860     	 str r0,[r7,#4]
1734:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
1735:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterReceiveNack(handle->channel);
 492              	 .loc 3 1735 0
 493 0008 7B68     	 ldr r3,[r7,#4]
 494 000a 1B68     	 ldr r3,[r3]
 495 000c 1846     	 mov r0,r3
 496 000e FFF7FEFF 	 bl XMC_I2C_CH_MasterReceiveNack
1736:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 497              	 .loc 3 1736 0
 498 0012 0837     	 adds r7,r7,#8
 499              	.LCFI58:
 500              	 .cfi_def_cfa_offset 8
 501 0014 BD46     	 mov sp,r7
 502              	.LCFI59:
 503              	 .cfi_def_cfa_register 13
 504              	 
 505 0016 80BD     	 pop {r7,pc}
 506              	 .cfi_endproc
 507              	.LFE234:
 509              	 .section .text.I2C_MASTER_SendStop,"ax",%progbits
 510              	 .align 2
 511              	 .thumb
 512              	 .thumb_func
 514              	I2C_MASTER_SendStop:
 515              	.LFB235:
1737:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1738:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends stop command to slave
1739:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1740:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1741:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1742:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1743:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * At the end of transmission, sends a stop command to slave <br>
1744:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet.<br>
1745:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1746:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1747:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1748:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1749:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS (0xA0)
1750:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1751:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1752:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1753:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1754:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1755:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1756:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1757:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1758:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(I2C_MASTER_GetFlagStatus(&I2C_MASTER_0, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
1759:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1760:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       // wait for ACK
1761:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1762:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_ClearFlag(&I2C_MASTER_0,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1763:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //send the address to which data to be transfered
1764:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1765:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1766:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1767:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1768:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1769:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1770:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStop(&I2C_MASTER_0);
1771:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1772:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1773:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1774:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1775:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1776:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1777:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1778:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1779:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1780:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1781:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1782:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1783:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
1784:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 516              	 .loc 3 1784 0
 517              	 .cfi_startproc
 518              	 
 519              	 
 520 0000 80B5     	 push {r7,lr}
 521              	.LCFI60:
 522              	 .cfi_def_cfa_offset 8
 523              	 .cfi_offset 7,-8
 524              	 .cfi_offset 14,-4
 525 0002 82B0     	 sub sp,sp,#8
 526              	.LCFI61:
 527              	 .cfi_def_cfa_offset 16
 528 0004 00AF     	 add r7,sp,#0
 529              	.LCFI62:
 530              	 .cfi_def_cfa_register 7
 531 0006 7860     	 str r0,[r7,#4]
1785:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
1786:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 532              	 .loc 3 1786 0
 533 0008 7B68     	 ldr r3,[r7,#4]
 534 000a 1B68     	 ldr r3,[r3]
 535 000c 1846     	 mov r0,r3
 536 000e 1021     	 movs r1,#16
 537 0010 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
1787:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterStop(handle->channel);
 538              	 .loc 3 1787 0
 539 0014 7B68     	 ldr r3,[r7,#4]
 540 0016 1B68     	 ldr r3,[r3]
 541 0018 1846     	 mov r0,r3
 542 001a FFF7FEFF 	 bl XMC_I2C_CH_MasterStop
1788:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 543              	 .loc 3 1788 0
 544 001e 0837     	 adds r7,r7,#8
 545              	.LCFI63:
 546              	 .cfi_def_cfa_offset 8
 547 0020 BD46     	 mov sp,r7
 548              	.LCFI64:
 549              	 .cfi_def_cfa_register 13
 550              	 
 551 0022 80BD     	 pop {r7,pc}
 552              	 .cfi_endproc
 553              	.LFE235:
 555              	 .section .text.I2C_MASTER_SendStart,"ax",%progbits
 556              	 .align 2
 557              	 .thumb
 558              	 .thumb_func
 560              	I2C_MASTER_SendStart:
 561              	.LFB236:
1789:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1790:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends start command to slave
1791:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1792:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param address slave address
1793:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param cmd     command
1794:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1795:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1796:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1797:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Before start of transmission, sends a start command to slave. \n
1798:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1799:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1800:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1801:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1802:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1803:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1804:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1805:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1806:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>
1807:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1808:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1809:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1810:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1811:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1812:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1813:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1814:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1815:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      I2C_MASTER_SendStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1816:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1817:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1818:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1819:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1820:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1821:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      //send the address to which data to be transfered
1822:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1823:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1824:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1825:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1826:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1827:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1828:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1829:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1830:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       XMC_DEBUG("main: Application initialization failed");
1831:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       while(1U)
1832:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       {
1833:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *       }
1834:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1835:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    return 1U;
1836:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   }
1837:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1838:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1839:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
1840:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                  const XMC_I2C_CH_CMD_t cmd)
1841:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 562              	 .loc 3 1841 0
 563              	 .cfi_startproc
 564              	 
 565              	 
 566 0000 80B5     	 push {r7,lr}
 567              	.LCFI65:
 568              	 .cfi_def_cfa_offset 8
 569              	 .cfi_offset 7,-8
 570              	 .cfi_offset 14,-4
 571 0002 84B0     	 sub sp,sp,#16
 572              	.LCFI66:
 573              	 .cfi_def_cfa_offset 24
 574 0004 00AF     	 add r7,sp,#0
 575              	.LCFI67:
 576              	 .cfi_def_cfa_register 7
 577 0006 F860     	 str r0,[r7,#12]
 578 0008 B960     	 str r1,[r7,#8]
 579 000a 1346     	 mov r3,r2
 580 000c FB71     	 strb r3,[r7,#7]
1842:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
1843:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 581              	 .loc 3 1843 0
 582 000e FB68     	 ldr r3,[r7,#12]
 583 0010 1B68     	 ldr r3,[r3]
 584 0012 1846     	 mov r0,r3
 585 0014 0421     	 movs r1,#4
 586 0016 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
1844:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 587              	 .loc 3 1844 0
 588 001a FB68     	 ldr r3,[r7,#12]
 589 001c 1968     	 ldr r1,[r3]
 590 001e BB68     	 ldr r3,[r7,#8]
 591 0020 9AB2     	 uxth r2,r3
 592 0022 FB79     	 ldrb r3,[r7,#7]
 593 0024 0846     	 mov r0,r1
 594 0026 1146     	 mov r1,r2
 595 0028 1A46     	 mov r2,r3
 596 002a FFF7FEFF 	 bl XMC_I2C_CH_MasterStart
1845:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 597              	 .loc 3 1845 0
 598 002e 1037     	 adds r7,r7,#16
 599              	.LCFI68:
 600              	 .cfi_def_cfa_offset 8
 601 0030 BD46     	 mov sp,r7
 602              	.LCFI69:
 603              	 .cfi_def_cfa_register 13
 604              	 
 605 0032 80BD     	 pop {r7,pc}
 606              	 .cfi_endproc
 607              	.LFE236:
 609              	 .section .text.I2C_MASTER_SendRepeatedStart,"ax",%progbits
 610              	 .align 2
 611              	 .thumb
 612              	 .thumb_func
 614              	I2C_MASTER_SendRepeatedStart:
 615              	.LFB237:
1846:../Dave/Generated/I2C_MASTER/i2c_master.h **** /**
1847:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @brief Sends repeated start command to slave
1848:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param handle  I2C_MASTER APP handle pointer of type @ref I2C_MASTER_t
1849:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param address slave address
1850:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @param cmd     command
1851:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @return None
1852:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1853:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * \par<b>Description:</b><br>
1854:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Before start of transmission, sends a repeatedstart command to slave if bus acquired is true.\n
1855:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Address(address) should reserve an additional bit at the LSB for read/write indication. For exam
1856:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * be provided as 0x0a. If the address is 10-bit, only most significant bits with the 10-bit identi
1857:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * For example, if the 10-bit address is 0x305, the address should be provided as 0xf6(prepend with
1858:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * followed by 1-bit field for read/write).<br>
1859:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Pre-requisite: Instantiate I2C_MASTER APP and generate code before using below code snippet. <br
1860:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * Example Usage:
1861:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @code
1862:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1863:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #include <DAVE.h>         //Declarations from DAVE Code Generation (includes SFR declaration)
1864:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  #define SLAVE_ADDRESS 0xA0
1865:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  int main(void)
1866:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  {
1867:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    DAVE_STATUS_t init_status;
1868:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    uint8_t rx_buf[256];
1869:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1870:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    init_status = DAVE_Init();
1871:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    if(init_status == DAVE_STATUS_SUCCESS)
1872:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1873:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_MasterStart(I2C_MASTER_0.channel, SLAVE_ADDRESS, XMC_I2C_CH_CMD_WRITE);
1874:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED
1875:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1876:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1877:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1878:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1879:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     //send the address to which data to be transfered
1880:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_MasterTransmit(I2C_MASTER_0.channel, 0x00);
1881:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1882:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1883:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1884:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1885:../Dave/Generated/I2C_MASTER/i2c_master.h **** 
1886:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_SendRepeatedStart(&I2C_MASTER_0, SLAVE_ADDRESS, XMC_I2C_CH_CMD_READ);
1887:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     while((XMC_I2C_CH_GetStatusFlag(I2C_MASTER_0.channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED)
1888:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     {
1889:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     }
1890:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *
1891:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     XMC_I2C_CH_ClearStatusFlag(I2C_MASTER_0.channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
1892:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * 	   memset(rx_buf,0,16);
1893:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *     I2C_MASTER_Receive(&I2C_MASTER_0, false, SLAVE_ADDRESS, rx_buf, 16, true, true);
1894:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1895:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    else
1896:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    {
1897:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      XMC_DEBUG("main: Application initialization failed");
1898:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      while(1U)
1899:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      {
1900:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *      }
1901:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *    }
1902:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *   return 1U;
1903:../Dave/Generated/I2C_MASTER/i2c_master.h ****  *  }
1904:../Dave/Generated/I2C_MASTER/i2c_master.h ****  * @endcode
1905:../Dave/Generated/I2C_MASTER/i2c_master.h **** */
1906:../Dave/Generated/I2C_MASTER/i2c_master.h **** __STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t addre
1907:../Dave/Generated/I2C_MASTER/i2c_master.h **** 		                                          const XMC_I2C_CH_CMD_t cmd)
1908:../Dave/Generated/I2C_MASTER/i2c_master.h **** {
 616              	 .loc 3 1908 0
 617              	 .cfi_startproc
 618              	 
 619              	 
 620 0000 80B5     	 push {r7,lr}
 621              	.LCFI70:
 622              	 .cfi_def_cfa_offset 8
 623              	 .cfi_offset 7,-8
 624              	 .cfi_offset 14,-4
 625 0002 84B0     	 sub sp,sp,#16
 626              	.LCFI71:
 627              	 .cfi_def_cfa_offset 24
 628 0004 00AF     	 add r7,sp,#0
 629              	.LCFI72:
 630              	 .cfi_def_cfa_register 7
 631 0006 F860     	 str r0,[r7,#12]
 632 0008 B960     	 str r1,[r7,#8]
 633 000a 1346     	 mov r3,r2
 634 000c FB71     	 strb r3,[r7,#7]
1909:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
1910:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEI
 635              	 .loc 3 1910 0
 636 000e FB68     	 ldr r3,[r7,#12]
 637 0010 1B68     	 ldr r3,[r3]
 638 0012 1846     	 mov r0,r3
 639 0014 0821     	 movs r1,#8
 640 0016 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
1911:../Dave/Generated/I2C_MASTER/i2c_master.h ****   XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 641              	 .loc 3 1911 0
 642 001a FB68     	 ldr r3,[r7,#12]
 643 001c 1968     	 ldr r1,[r3]
 644 001e BB68     	 ldr r3,[r7,#8]
 645 0020 9AB2     	 uxth r2,r3
 646 0022 FB79     	 ldrb r3,[r7,#7]
 647 0024 0846     	 mov r0,r1
 648 0026 1146     	 mov r1,r2
 649 0028 1A46     	 mov r2,r3
 650 002a FFF7FEFF 	 bl XMC_I2C_CH_MasterRepeatedStart
1912:../Dave/Generated/I2C_MASTER/i2c_master.h **** }
 651              	 .loc 3 1912 0
 652 002e 1037     	 adds r7,r7,#16
 653              	.LCFI73:
 654              	 .cfi_def_cfa_offset 8
 655 0030 BD46     	 mov sp,r7
 656              	.LCFI74:
 657              	 .cfi_def_cfa_register 13
 658              	 
 659 0032 80BD     	 pop {r7,pc}
 660              	 .cfi_endproc
 661              	.LFE237:
 663              	 .section .text.I2C_MASTER_GetAppVersion,"ax",%progbits
 664              	 .align 2
 665              	 .global I2C_MASTER_GetAppVersion
 666              	 .thumb
 667              	 .thumb_func
 669              	I2C_MASTER_GetAppVersion:
 670              	.LFB244:
 671              	 .file 4 "../Dave/Generated/I2C_MASTER/i2c_master.c"
   1:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**
   2:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @file i2c_master.c
   3:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @date 2017-12-20
   4:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
   5:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * NOTE:
   6:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
   8:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**
   9:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @cond
  10:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  11:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * I2C_MASTER v4.1.28 Configures USIC channel to transmit & receive data using I2C protocol.
  12:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  13:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  14:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * All rights reserved.
  15:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  16:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * following conditions are met:
  18:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  19:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   disclaimer.
  21:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  22:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  25:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  28:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  36:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  39:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  40:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Change History
  41:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * --------------
  42:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  43:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-02-16:
  44:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Initial version<br>
  45:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  46:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-06-10:
  47:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - AbortTransmit and AbortReceive API return type modified. <br>
  48:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  49:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2015-07-31:
  50:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - DMA support APIs added
  51:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  52:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2017-01-19:
  53:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Avoid unintended interrupts when filling FIFO
  54:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  55:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2017-11-17:
  56:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Use tx_irqn of channel config structure in the call of NVIC_ClearPendingIRQ()
  57:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  58:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * 2017-12-20:
  59:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *     - Fix TX DMA issues
  60:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  61:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @endcond
  62:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  63:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
  64:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  65:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * HEADER FILES
  66:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  67:../Dave/Generated/I2C_MASTER/i2c_master.c **** #include "i2c_master.h"
  68:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  69:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  70:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * MACROS
  71:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  72:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_TDF_RECEIVE_ACK             (0x0200U)
  73:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_TDF_RECEIVE_NACK       (3U << 8U)
  74:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_DST_TR_WIDTH_MASK   (0x7EU)
  75:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_ADDR_INC_MASK       (0x600U)
  76:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_ADDR_INC_POS        (9U)
  77:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_SRC_TRANSFER_WIDTH_POS  (4U)
  78:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_MASTER_DMA_DST_TRANSFER_WIDTH_POS  (1U)
  79:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  80:../Dave/Generated/I2C_MASTER/i2c_master.c **** #define I2C_DMA_MAX_BLOCK_SIZE (4095U)
  81:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  82:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  83:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * LOCAL DATA
  84:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  85:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
  86:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
  87:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * LOCAL ROUTINES
  88:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
  89:../Dave/Generated/I2C_MASTER/i2c_master.c ****  /*
  90:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Function monitors the configured protocol interrupt flags. It is called from the protocol interr
  91:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * service handler.
  92:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Function reads the status of the USIC channel and checks for configured flags in the app UI.
  93:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If any callback function is provided in the app UI, it will be called when the selected flag is 
  94:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  95:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * I2C_MASTER_t * pointer to the I2C_MASTER APP instance handle
  96:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
  97:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
  98:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);
  99:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 100:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 101:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
 102:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 103:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t result;
 104:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 105:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (a < b)
 106:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 107:../Dave/Generated/I2C_MASTER/i2c_master.c ****     result = a;
 108:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 109:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 110:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 111:../Dave/Generated/I2C_MASTER/i2c_master.c ****     result = b;
 112:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 113:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (result);
 114:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 115:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 116:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 117:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
 118:../Dave/Generated/I2C_MASTER/i2c_master.c ****     (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
 119:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle, const uint32_t address,
 120:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                const XMC_I2C_CH_CMD_t cmd);
 121:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 122:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 123:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 124:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle);
 125:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 126:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 127:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if(I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 128:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle);
 129:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 130:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 131:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 132:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle);
 133:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size);
 134:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 135:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32
 136:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                          const uint32_t count);
 137:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 138:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_
 139:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle);
 140:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 141:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 142:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 143:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
 144:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_s
 145:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         const uint32_t slave_address, uint8_t *data
 146:../Dave/Generated/I2C_MASTER/i2c_master.c ****                               bool send_stop);
 147:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 148:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if I2C_MASTER_DIRECT_RX_ENABLED
 149:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_st
 150:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                        uint8_t *data, uint32_t count, bool send_sto
 151:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                bool send_nack);
 152:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 153:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 154:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortTransmitDMA(const I2C_MASTER_t *const handle);
 155:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 156:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 157:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveDMA(const I2C_MASTER_t *const handle);
 158:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 159:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 160:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1) && (I2C_MASTER_DMA_RX_ENABLED == 1)
 161:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* DMA buffer to send the ACK */
 162:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint16_t ack_buf[1];
 163:../Dave/Generated/I2C_MASTER/i2c_master.c **** static uint16_t nack_buf[1];
 164:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 165:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 166:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 167:../Dave/Generated/I2C_MASTER/i2c_master.c **** * API IMPLEMENTATION
 168:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 169:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 170:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 171:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief API to retrieve the version of the I2C_MASTER APP.
 172:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 173:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return DAVE_APP_VERSION_t Structure containing major version, minor version
 174:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *         and patch version.
 175:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 176:../Dave/Generated/I2C_MASTER/i2c_master.c **** DAVE_APP_VERSION_t I2C_MASTER_GetAppVersion(void)
 177:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 672              	 .loc 4 177 0
 673              	 .cfi_startproc
 674              	 
 675              	 
 676              	 
 677 0000 80B4     	 push {r7}
 678              	.LCFI75:
 679              	 .cfi_def_cfa_offset 4
 680              	 .cfi_offset 7,-4
 681 0002 83B0     	 sub sp,sp,#12
 682              	.LCFI76:
 683              	 .cfi_def_cfa_offset 16
 684 0004 00AF     	 add r7,sp,#0
 685              	.LCFI77:
 686              	 .cfi_def_cfa_register 7
 178:../Dave/Generated/I2C_MASTER/i2c_master.c ****   DAVE_APP_VERSION_t version;
 179:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 180:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.major = I2C_MASTER_MAJOR_VERSION;
 687              	 .loc 4 180 0
 688 0006 0423     	 movs r3,#4
 689 0008 3B70     	 strb r3,[r7]
 181:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.minor = I2C_MASTER_MINOR_VERSION;
 690              	 .loc 4 181 0
 691 000a 0123     	 movs r3,#1
 692 000c 7B70     	 strb r3,[r7,#1]
 182:../Dave/Generated/I2C_MASTER/i2c_master.c ****   version.patch = I2C_MASTER_PATCH_VERSION;
 693              	 .loc 4 182 0
 694 000e 1C23     	 movs r3,#28
 695 0010 BB70     	 strb r3,[r7,#2]
 183:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 184:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (version);
 696              	 .loc 4 184 0
 697 0012 3B1D     	 adds r3,r7,#4
 698 0014 3A46     	 mov r2,r7
 699 0016 1268     	 ldr r2,[r2]
 700 0018 1146     	 mov r1,r2
 701 001a 1980     	 strh r1,[r3]
 702 001c 0233     	 adds r3,r3,#2
 703 001e 120C     	 lsrs r2,r2,#16
 704 0020 1A70     	 strb r2,[r3]
 705 0022 0023     	 movs r3,#0
 706 0024 3A79     	 ldrb r2,[r7,#4]
 707 0026 62F30703 	 bfi r3,r2,#0,#8
 708 002a 7A79     	 ldrb r2,[r7,#5]
 709 002c 62F30F23 	 bfi r3,r2,#8,#8
 710 0030 BA79     	 ldrb r2,[r7,#6]
 711 0032 62F31743 	 bfi r3,r2,#16,#8
 185:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 712              	 .loc 4 185 0
 713 0036 1846     	 mov r0,r3
 714 0038 0C37     	 adds r7,r7,#12
 715              	.LCFI78:
 716              	 .cfi_def_cfa_offset 4
 717 003a BD46     	 mov sp,r7
 718              	.LCFI79:
 719              	 .cfi_def_cfa_register 13
 720              	 
 721 003c 5DF8047B 	 ldr r7,[sp],#4
 722              	.LCFI80:
 723              	 .cfi_restore 7
 724              	 .cfi_def_cfa_offset 0
 725 0040 7047     	 bx lr
 726              	 .cfi_endproc
 727              	.LFE244:
 729 0042 00BF     	 .section .text.I2C_MASTER_Init,"ax",%progbits
 730              	 .align 2
 731              	 .global I2C_MASTER_Init
 732              	 .thumb
 733              	 .thumb_func
 735              	I2C_MASTER_Init:
 736              	.LFB245:
 186:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 187:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to initialize the USIC Channel with GUI configured values.*/
 188:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
 189:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 737              	 .loc 4 189 0
 738              	 .cfi_startproc
 739              	 
 740              	 
 741 0000 80B5     	 push {r7,lr}
 742              	.LCFI81:
 743              	 .cfi_def_cfa_offset 8
 744              	 .cfi_offset 7,-8
 745              	 .cfi_offset 14,-4
 746 0002 84B0     	 sub sp,sp,#16
 747              	.LCFI82:
 748              	 .cfi_def_cfa_offset 24
 749 0004 00AF     	 add r7,sp,#0
 750              	.LCFI83:
 751              	 .cfi_def_cfa_register 7
 752 0006 7860     	 str r0,[r7,#4]
 190:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 191:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 192:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle != NULL)
 753              	 .loc 4 192 0
 754 0008 7B68     	 ldr r3,[r7,#4]
 755 000a 002B     	 cmp r3,#0
 756 000c 06D0     	 beq .L25
 193:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 194:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Initialize the multiplexers required for I2C_MASTER configuration*/
 195:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->fptr_i2c_config();
 757              	 .loc 4 195 0
 758 000e 7B68     	 ldr r3,[r7,#4]
 759 0010 5B68     	 ldr r3,[r3,#4]
 760 0012 5B68     	 ldr r3,[r3,#4]
 761 0014 9847     	 blx r3
 196:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 197:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
 762              	 .loc 4 197 0
 763 0016 0023     	 movs r3,#0
 764 0018 FB73     	 strb r3,[r7,#15]
 765 001a 01E0     	 b .L26
 766              	.L25:
 198:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 199:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 200:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 201:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 767              	 .loc 4 201 0
 768 001c 0123     	 movs r3,#1
 769 001e FB73     	 strb r3,[r7,#15]
 770              	.L26:
 202:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 203:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 771              	 .loc 4 203 0
 772 0020 FB7B     	 ldrb r3,[r7,#15]
 204:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 773              	 .loc 4 204 0
 774 0022 1846     	 mov r0,r3
 775 0024 1037     	 adds r7,r7,#16
 776              	.LCFI84:
 777              	 .cfi_def_cfa_offset 8
 778 0026 BD46     	 mov sp,r7
 779              	.LCFI85:
 780              	 .cfi_def_cfa_register 13
 781              	 
 782 0028 80BD     	 pop {r7,pc}
 783              	 .cfi_endproc
 784              	.LFE245:
 786 002a 00BF     	 .section .text.I2C_MASTER_GetFlagStatus,"ax",%progbits
 787              	 .align 2
 788              	 .global I2C_MASTER_GetFlagStatus
 789              	 .thumb
 790              	 .thumb_func
 792              	I2C_MASTER_GetFlagStatus:
 793              	.LFB246:
 205:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 206:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to get flag status of the requested parameter */
 207:../Dave/Generated/I2C_MASTER/i2c_master.c **** uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
 208:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 794              	 .loc 4 208 0
 795              	 .cfi_startproc
 796              	 
 797              	 
 798 0000 80B5     	 push {r7,lr}
 799              	.LCFI86:
 800              	 .cfi_def_cfa_offset 8
 801              	 .cfi_offset 7,-8
 802              	 .cfi_offset 14,-4
 803 0002 84B0     	 sub sp,sp,#16
 804              	.LCFI87:
 805              	 .cfi_def_cfa_offset 24
 806 0004 00AF     	 add r7,sp,#0
 807              	.LCFI88:
 808              	 .cfi_def_cfa_register 7
 809 0006 7860     	 str r0,[r7,#4]
 810 0008 3960     	 str r1,[r7]
 209:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t status;
 210:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 211:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 811              	 .loc 4 211 0
 812 000a 7B68     	 ldr r3,[r7,#4]
 813 000c 1B68     	 ldr r3,[r3]
 814 000e 1846     	 mov r0,r3
 815 0010 FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 816 0014 F860     	 str r0,[r7,#12]
 212:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 213:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status & flagtype);
 817              	 .loc 4 213 0
 818 0016 FA68     	 ldr r2,[r7,#12]
 819 0018 3B68     	 ldr r3,[r7]
 820 001a 1340     	 ands r3,r3,r2
 214:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 821              	 .loc 4 214 0
 822 001c 1846     	 mov r0,r3
 823 001e 1037     	 adds r7,r7,#16
 824              	.LCFI89:
 825              	 .cfi_def_cfa_offset 8
 826 0020 BD46     	 mov sp,r7
 827              	.LCFI90:
 828              	 .cfi_def_cfa_register 13
 829              	 
 830 0022 80BD     	 pop {r7,pc}
 831              	 .cfi_endproc
 832              	.LFE246:
 834              	 .section .text.I2C_MASTER_ClearFlag,"ax",%progbits
 835              	 .align 2
 836              	 .global I2C_MASTER_ClearFlag
 837              	 .thumb
 838              	 .thumb_func
 840              	I2C_MASTER_ClearFlag:
 841              	.LFB247:
 215:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 216:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to clear flag status of the requested parameter */
 217:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
 218:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 842              	 .loc 4 218 0
 843              	 .cfi_startproc
 844              	 
 845              	 
 846 0000 80B5     	 push {r7,lr}
 847              	.LCFI91:
 848              	 .cfi_def_cfa_offset 8
 849              	 .cfi_offset 7,-8
 850              	 .cfi_offset 14,-4
 851 0002 82B0     	 sub sp,sp,#8
 852              	.LCFI92:
 853              	 .cfi_def_cfa_offset 16
 854 0004 00AF     	 add r7,sp,#0
 855              	.LCFI93:
 856              	 .cfi_def_cfa_register 7
 857 0006 7860     	 str r0,[r7,#4]
 858 0008 3960     	 str r1,[r7]
 219:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 859              	 .loc 4 219 0
 860 000a 7B68     	 ldr r3,[r7,#4]
 861 000c 1B68     	 ldr r3,[r3]
 862 000e 1846     	 mov r0,r3
 863 0010 3968     	 ldr r1,[r7]
 864 0012 FFF7FEFF 	 bl XMC_I2C_CH_ClearStatusFlag
 220:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 865              	 .loc 4 220 0
 866 0016 0837     	 adds r7,r7,#8
 867              	.LCFI94:
 868              	 .cfi_def_cfa_offset 8
 869 0018 BD46     	 mov sp,r7
 870              	.LCFI95:
 871              	 .cfi_def_cfa_register 13
 872              	 
 873 001a 80BD     	 pop {r7,pc}
 874              	 .cfi_endproc
 875              	.LFE247:
 877              	 .section .text.I2C_MASTER_Transmit,"ax",%progbits
 878              	 .align 2
 879              	 .global I2C_MASTER_Transmit
 880              	 .thumb
 881              	 .thumb_func
 883              	I2C_MASTER_Transmit:
 884              	.LFB248:
 221:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 222:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to transmit the data to slave device */
 223:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t addre
 224:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         uint8_t *data, const uint32_t size, bool send_stop)
 225:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 885              	 .loc 4 225 0
 886              	 .cfi_startproc
 887              	 
 888              	 
 889 0000 80B5     	 push {r7,lr}
 890              	.LCFI96:
 891              	 .cfi_def_cfa_offset 8
 892              	 .cfi_offset 7,-8
 893              	 .cfi_offset 14,-4
 894 0002 88B0     	 sub sp,sp,#32
 895              	.LCFI97:
 896              	 .cfi_def_cfa_offset 40
 897 0004 02AF     	 add r7,sp,#8
 898              	.LCFI98:
 899              	 .cfi_def_cfa 7,32
 900 0006 F860     	 str r0,[r7,#12]
 901 0008 7A60     	 str r2,[r7,#4]
 902 000a 3B60     	 str r3,[r7]
 903 000c 0B46     	 mov r3,r1
 904 000e FB72     	 strb r3,[r7,#11]
 226:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 227:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 228:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 905              	 .loc 4 228 0
 906 0010 0223     	 movs r3,#2
 907 0012 FB75     	 strb r3,[r7,#23]
 229:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 230:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 908              	 .loc 4 230 0
 909 0014 FB68     	 ldr r3,[r7,#12]
 910 0016 5B68     	 ldr r3,[r3,#4]
 911 0018 93F82430 	 ldrb r3,[r3,#36]
 912 001c 002B     	 cmp r3,#0
 913 001e 13D0     	 beq .L32
 231:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 232:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 233:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
 234:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 235:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 236:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 914              	 .loc 4 236 0
 915 0020 FB68     	 ldr r3,[r7,#12]
 916 0022 5B68     	 ldr r3,[r3,#4]
 917 0024 93F82430 	 ldrb r3,[r3,#36]
 918 0028 012B     	 cmp r3,#1
 919 002a 0DD0     	 beq .L32
 237:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 238:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
 239:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_UNSUPPORTED_MODE;
 240:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 241:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 242:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 243:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 244:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
 245:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 920              	 .loc 4 245 0
 921 002c FA7A     	 ldrb r2,[r7,#11]
 922 002e 3B6A     	 ldr r3,[r7,#32]
 923 0030 0093     	 str r3,[sp]
 924 0032 97F82430 	 ldrb r3,[r7,#36]
 925 0036 0193     	 str r3,[sp,#4]
 926 0038 F868     	 ldr r0,[r7,#12]
 927 003a 1146     	 mov r1,r2
 928 003c 7A68     	 ldr r2,[r7,#4]
 929 003e 3B68     	 ldr r3,[r7]
 930 0040 FFF7FEFF 	 bl I2C_MASTER_lStartTransmitPolling
 931 0044 0346     	 mov r3,r0
 932 0046 FB75     	 strb r3,[r7,#23]
 933              	.L32:
 246:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 247:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 248:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 249:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 934              	 .loc 4 249 0
 935 0048 FB7D     	 ldrb r3,[r7,#23]
 250:../Dave/Generated/I2C_MASTER/i2c_master.c **** } /* end of function */
 936              	 .loc 4 250 0
 937 004a 1846     	 mov r0,r3
 938 004c 1837     	 adds r7,r7,#24
 939              	.LCFI99:
 940              	 .cfi_def_cfa_offset 8
 941 004e BD46     	 mov sp,r7
 942              	.LCFI100:
 943              	 .cfi_def_cfa_register 13
 944              	 
 945 0050 80BD     	 pop {r7,pc}
 946              	 .cfi_endproc
 947              	.LFE248:
 949 0052 00BF     	 .section .text.I2C_MASTER_Receive,"ax",%progbits
 950              	 .align 2
 951              	 .global I2C_MASTER_Receive
 952              	 .thumb
 953              	 .thumb_func
 955              	I2C_MASTER_Receive:
 956              	.LFB249:
 251:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 252:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
 253:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 254:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Transmit interrupt handler for the APP.
 255:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This is a common interrupt handling function called for different instances of the APP.
 256:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 257:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 258:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 259:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *  @return void
 260:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 261:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
 262:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 263:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 264:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_min;
 265:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 266:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 267:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_min = 0U;
 268:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 269:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* check if any error flag is set */
 270:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 271:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
 272:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                         (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
 273:../Dave/Generated/I2C_MASTER/i2c_master.c ****                     (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
 274:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 275:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* Disable the transmit events */
 276:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDAR
 277:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 278:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 279:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ProtocolHandler(handle);
 280:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 281:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 282:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 283:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 284:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Direction = Transmit, Tx FIFO enabled
 285:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 286:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 287:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 288:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 289:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 290:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 291:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 292:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 293:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAND
 294:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Fill the transmit FIFO */
 295:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 296:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 297:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* transmit each byte till index reaches to the last byte */
 298:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 299:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 300:../Dave/Generated/I2C_MASTER/i2c_master.c ****             /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
 301:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_inde
 302:../Dave/Generated/I2C_MASTER/i2c_master.c ****             ptr_runtime->tx_data_index++;
 303:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 304:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 305:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 306:../Dave/Generated/I2C_MASTER/i2c_master.c ****             break;
 307:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 308:../Dave/Generated/I2C_MASTER/i2c_master.c ****         } /* end of while */
 309:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 310:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 311:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 312:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send
 313:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAN
 314:../Dave/Generated/I2C_MASTER/i2c_master.c ****       NVIC_ClearPendingIRQ(handle->config->tx_irqn);
 315:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 316:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*make sure data is transmitted in FIFO*/
 317:../Dave/Generated/I2C_MASTER/i2c_master.c ****         while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 318:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 319:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (ptr_runtime->bus_acquired == true)
 320:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 321:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 322:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 323:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 324:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of  if(handle->config->txFIFO_size > 0) */
 325:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 326:../Dave/Generated/I2C_MASTER/i2c_master.c ****     Direction = transmit and Tx FIFO disabled
 327:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 328:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 329:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 330:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* transmit each byte till the last byte */
 331:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 332:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 333:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 334:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->tx_data_index++;
 335:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 336:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 337:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 338:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
 339:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->bus_acquired == true)
 340:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 341:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 342:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 343:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 344:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 345:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of if(ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT) */
 346:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 347:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 348:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 349:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Direction = Receive, Tx, Rx FIFO enabled.
 350:../Dave/Generated/I2C_MASTER/i2c_master.c ****   Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
 351:../Dave/Generated/I2C_MASTER/i2c_master.c ****   If Rx FIFO is not enabled, default size of 2 is considered.
 352:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 353:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 354:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 355:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if ((handle->config->rxFIFO_size > 0))
 356:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 357:../Dave/Generated/I2C_MASTER/i2c_master.c ****         fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_
 358:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size
 359:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 360:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 361:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 362:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
 363:../Dave/Generated/I2C_MASTER/i2c_master.c ****         fifo_min = 2U;
 364:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 365:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 366:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAN
 367:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 368:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* fill the FIFO */
 369:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 370:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 371:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 372:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 373:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* check for last byte and send_nack is set to true */
 374:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->se
 375:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 376:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 377:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 378:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 379:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 380:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 381:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 382:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 383:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 384:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*if index reaches fifo size - break*/
 385:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if ((ptr_runtime->tx_data_index) >= fifo_min)
 386:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 387:../Dave/Generated/I2C_MASTER/i2c_master.c ****             break;
 388:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 389:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 390:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 391:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 392:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 393:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 394:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 395:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if(handle->config->txFIFO_size > 0) */
 396:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 397:../Dave/Generated/I2C_MASTER/i2c_master.c ****    Direction = Receive, Tx FIFO disabled
 398:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 399:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 400:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 401:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* check for last byte and send_nack is set to true */
 402:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 403:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 404:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 405:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 406:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 407:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 408:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveACK(handle);
 409:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 410:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 411:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 412:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 413:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 414:../Dave/Generated/I2C_MASTER/i2c_master.c ****    If last byte, then disable ACK event
 415:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 416:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 417:../Dave/Generated/I2C_MASTER/i2c_master.c ****      {
 418:../Dave/Generated/I2C_MASTER/i2c_master.c ****        I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 419:../Dave/Generated/I2C_MASTER/i2c_master.c ****      }
 420:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
 421:../Dave/Generated/I2C_MASTER/i2c_master.c ****  } /* end of else */
 422:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 423:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 424:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Stop command and jump to callback routine */
 425:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
 426:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 427:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 428:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 429:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 430:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 431:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 432:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 433:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->send_stop == true)
 434:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 435:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->bus_acquired = false;
 436:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStop(handle);
 437:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 438:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 439:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 440:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 441:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*All data is transmitted*/
 442:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->tx_busy = false;
 443:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 444:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->tx_cbhandler != NULL)
 445:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 446:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Execute the 'End of transmission' callback function*/
 447:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->tx_cbhandler();
 448:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 449:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 450:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 451:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 452:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 453:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief This function registers the receive request by configuring the I2C_MASTER
 454:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * receive FIFO/Standard buffer (depending on the user configuration). The data
 455:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * is received asynchronously. When the requested number of data bytes are received,
 456:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * optionally, the user configured callback function will be executed. If a callback
 457:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * function is not configured on the APP UI, the user has to poll for the status of
 458:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * rx_busy variable of the APP handle structure.
 459:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 460:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Note: In FIFO mode, FIFO trigger limit should be adjusted manually to
 461:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * read required amount of data from FIFO buffer.
 462:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 463:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 464:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  I2C_MASTER_t* I2C_MASTER APP handle pointer of type I2C_MASTER_t
 465:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_start
 466:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint32_t  slave address
 467:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint8_t*  Pointer to data array
 468:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  uint32_t  Total no of bytes to be read.
 469:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_stop
 470:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  bool      flag for send_nack
 471:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 472:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return  I2C_MASTER_STATUS_t I2C_MASTER_STATUS_SUCCESS if the request is accepted.
 473:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *                              I2C_MASTER_STATUS_BUSY if a reception is in progress.
 474:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 475:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 476:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * request is registered.
 477:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 478:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 479:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
 480:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t addres
 481:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                    const uint32_t count, bool send_stop, bool send_nack)
 482:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 957              	 .loc 4 482 0
 958              	 .cfi_startproc
 959              	 
 960              	 
 961 0000 80B5     	 push {r7,lr}
 962              	.LCFI101:
 963              	 .cfi_def_cfa_offset 8
 964              	 .cfi_offset 7,-8
 965              	 .cfi_offset 14,-4
 966 0002 8AB0     	 sub sp,sp,#40
 967              	.LCFI102:
 968              	 .cfi_def_cfa_offset 48
 969 0004 04AF     	 add r7,sp,#16
 970              	.LCFI103:
 971              	 .cfi_def_cfa 7,32
 972 0006 F860     	 str r0,[r7,#12]
 973 0008 7A60     	 str r2,[r7,#4]
 974 000a 3B60     	 str r3,[r7]
 975 000c 0B46     	 mov r3,r1
 976 000e FB72     	 strb r3,[r7,#11]
 483:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 484:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 485:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 977              	 .loc 4 485 0
 978 0010 0223     	 movs r3,#2
 979 0012 FB75     	 strb r3,[r7,#23]
 486:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 487:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 980              	 .loc 4 487 0
 981 0014 FB68     	 ldr r3,[r7,#12]
 982 0016 5B68     	 ldr r3,[r3,#4]
 983 0018 93F82530 	 ldrb r3,[r3,#37]
 984 001c 002B     	 cmp r3,#0
 985 001e 16D0     	 beq .L35
 488:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 489:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 490:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nac
 491:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 492:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 493:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 986              	 .loc 4 493 0
 987 0020 FB68     	 ldr r3,[r7,#12]
 988 0022 5B68     	 ldr r3,[r3,#4]
 989 0024 93F82530 	 ldrb r3,[r3,#37]
 990 0028 012B     	 cmp r3,#1
 991 002a 10D0     	 beq .L35
 494:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 495:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
 496:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_UNSUPPORTED_MODE;
 497:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 498:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 499:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 500:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 501:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
 502:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, s
 992              	 .loc 4 502 0
 993 002c FA7A     	 ldrb r2,[r7,#11]
 994 002e 3B6A     	 ldr r3,[r7,#32]
 995 0030 0093     	 str r3,[sp]
 996 0032 97F82430 	 ldrb r3,[r7,#36]
 997 0036 0193     	 str r3,[sp,#4]
 998 0038 97F82830 	 ldrb r3,[r7,#40]
 999 003c 0293     	 str r3,[sp,#8]
 1000 003e F868     	 ldr r0,[r7,#12]
 1001 0040 1146     	 mov r1,r2
 1002 0042 7A68     	 ldr r2,[r7,#4]
 1003 0044 3B68     	 ldr r3,[r7]
 1004 0046 FFF7FEFF 	 bl I2C_MASTER_lStartReceivePolling
 1005 004a 0346     	 mov r3,r0
 1006 004c FB75     	 strb r3,[r7,#23]
 1007              	.L35:
 503:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 504:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 505:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 506:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1008              	 .loc 4 506 0
 1009 004e FB7D     	 ldrb r3,[r7,#23]
 507:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1010              	 .loc 4 507 0
 1011 0050 1846     	 mov r0,r3
 1012 0052 1837     	 adds r7,r7,#24
 1013              	.LCFI104:
 1014              	 .cfi_def_cfa_offset 8
 1015 0054 BD46     	 mov sp,r7
 1016              	.LCFI105:
 1017              	 .cfi_def_cfa_register 13
 1018              	 
 1019 0056 80BD     	 pop {r7,pc}
 1020              	 .cfi_endproc
 1021              	.LFE249:
 1023              	 .section .text.I2C_MASTER_lSendStart_Or_RepeatedStart,"ax",%progbits
 1024              	 .align 2
 1025              	 .thumb
 1026              	 .thumb_func
 1028              	I2C_MASTER_lSendStart_Or_RepeatedStart:
 1029              	.LFB250:
 508:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 509:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 510:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 511:../Dave/Generated/I2C_MASTER/i2c_master.c ****      Rx FIFO data
 512:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 513:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32
 514:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                      const uint32_t count)
 515:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 516:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 517:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 518:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 519:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 520:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Clear the receive FIFO, configure the trigger lime
 521:../Dave/Generated/I2C_MASTER/i2c_master.c ****    * and enable the receive events*/
 522:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 523:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 524:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Configure the FIFO trigger limit based on the required data size*/
 525:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_lReconfigureRxFIFO(handle, count);
 526:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 527:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 528:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                 (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 529:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
 530:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (send_start == true)
 531:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 532:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 533:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 534:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 535:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 536:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 537:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 538:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 539:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 540:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED)
 541:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 542:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 543:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nac
 544:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 545:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ReceiveNACK(handle);
 546:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 547:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 548:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 549:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ReceiveACK(handle);
 550:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 551:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index++;
 552:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 553:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 554:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
 555:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 556:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 557:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 558:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Fill the transmit FIFO */
 559:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 560:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 561:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 562:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 563:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send
 564:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 565:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveNACK(handle);
 566:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 567:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 568:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 569:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveACK(handle);
 570:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 571:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 572:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 573:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 574:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 575:../Dave/Generated/I2C_MASTER/i2c_master.c ****         break;
 576:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 577:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of while */
 578:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 579:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 580:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 581:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* if it is last byte and send_nack true */
 582:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 583:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 584:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_ReceiveNACK(handle);
 585:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 586:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 587:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 588:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_ReceiveACK(handle);
 589:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 590:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index++;
 591:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 592:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
 593:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of if (send_start == true) */
 594:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 595:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 596:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* if Tx FIFO enabled */
 597:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size > 0)
 598:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 599:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
 600:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                      (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 601:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Fill the transmit FIFO */
 602:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 603:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 604:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 605:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 606:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 607:../Dave/Generated/I2C_MASTER/i2c_master.c ****                (ptr_runtime->send_nack == true))
 608:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 609:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 610:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 611:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 612:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 613:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 614:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 615:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 616:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 617:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 618:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 619:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 620:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 621:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 622:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 623:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else  /* Tx FIFO disabled and Rx FIFO enabled */
 624:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 625:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 626:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 627:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
 628:../Dave/Generated/I2C_MASTER/i2c_master.c ****              (ptr_runtime->send_nack == true))
 629:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 630:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveNACK(handle);
 631:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 632:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 633:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 634:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_I2C_CH_ClearStatusFlag(handle->channel, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVE
 635:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDI
 636:../Dave/Generated/I2C_MASTER/i2c_master.c ****                           (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION|
 637:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 638:../Dave/Generated/I2C_MASTER/i2c_master.c ****                           (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
 639:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveACK(handle);
 640:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 641:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->tx_data_index++;
 642:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 643:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of else */
 644:../Dave/Generated/I2C_MASTER/i2c_master.c ****    } /* end of  if(send_start == false) */
 645:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 646:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 647:../Dave/Generated/I2C_MASTER/i2c_master.c ****     Standard receive mode
 648:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 649:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_
 650:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 651:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 652:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 653:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 654:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 655:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE 
 656:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                       (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEI
 657:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 658:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (send_start == true)
 659:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 660:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 661:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
 662:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 663:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 664:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 665:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 666:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 667:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 668:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
 669:../Dave/Generated/I2C_MASTER/i2c_master.c ****         (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
 670:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 671:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nac
 672:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 673:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 674:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 675:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 676:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 677:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ReceiveACK(handle);
 678:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 679:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index++;
 680:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 681:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 682:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 683:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 684:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 685:../Dave/Generated/I2C_MASTER/i2c_master.c ****      send_start flag is set to false and Tx FIFO is disabled
 686:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 687:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->txFIFO_size == 0)
 688:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 689:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_n
 690:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 691:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 692:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 693:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
 694:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 695:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveACK(handle);
 696:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
 697:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 698:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->tx_data_index++;
 699:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 700:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 701:../Dave/Generated/I2C_MASTER/i2c_master.c ****      send_start flag is set to false and Tx FIFO is enabled
 702:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 703:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 704:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 705:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAND
 706:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 707:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Fill the transmit FIFO */
 708:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 709:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 710:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 711:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 712:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->se
 713:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 714:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
 715:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 716:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
 717:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 718:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
 719:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
 720:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
 721:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 722:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
 723:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 724:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 725:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 726:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while */
 727:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of else */
 728:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
 729:../Dave/Generated/I2C_MASTER/i2c_master.c **** } /* end of function */
 730:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 731:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 732:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
 733:../Dave/Generated/I2C_MASTER/i2c_master.c ****     (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
 734:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Start/Repeated Start command */
 735:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
 736:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                const XMC_I2C_CH_CMD_t cmd)
 737:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1030              	 .loc 4 737 0
 1031              	 .cfi_startproc
 1032              	 
 1033              	 
 1034 0000 80B5     	 push {r7,lr}
 1035              	.LCFI106:
 1036              	 .cfi_def_cfa_offset 8
 1037              	 .cfi_offset 7,-8
 1038              	 .cfi_offset 14,-4
 1039 0002 84B0     	 sub sp,sp,#16
 1040              	.LCFI107:
 1041              	 .cfi_def_cfa_offset 24
 1042 0004 00AF     	 add r7,sp,#0
 1043              	.LCFI108:
 1044              	 .cfi_def_cfa_register 7
 1045 0006 F860     	 str r0,[r7,#12]
 1046 0008 B960     	 str r1,[r7,#8]
 1047 000a 1346     	 mov r3,r2
 1048 000c FB71     	 strb r3,[r7,#7]
 738:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->runtime->bus_acquired == true)
 1049              	 .loc 4 738 0
 1050 000e FB68     	 ldr r3,[r7,#12]
 1051 0010 9B68     	 ldr r3,[r3,#8]
 1052 0012 93F82830 	 ldrb r3,[r3,#40]
 1053 0016 DBB2     	 uxtb r3,r3
 1054 0018 002B     	 cmp r3,#0
 1055 001a 09D0     	 beq .L38
 739:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 740:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 1056              	 .loc 4 740 0
 1057 001c BB68     	 ldr r3,[r7,#8]
 1058 001e 9BB2     	 uxth r3,r3
 1059 0020 1A46     	 mov r2,r3
 1060 0022 FB79     	 ldrb r3,[r7,#7]
 1061 0024 F868     	 ldr r0,[r7,#12]
 1062 0026 1146     	 mov r1,r2
 1063 0028 1A46     	 mov r2,r3
 1064 002a FFF7FEFF 	 bl I2C_MASTER_SendRepeatedStart
 1065 002e 0DE0     	 b .L37
 1066              	.L38:
 741:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 742:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 743:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 744:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->runtime->bus_acquired = true;
 1067              	 .loc 4 744 0
 1068 0030 FB68     	 ldr r3,[r7,#12]
 1069 0032 9B68     	 ldr r3,[r3,#8]
 1070 0034 0122     	 movs r2,#1
 1071 0036 83F82820 	 strb r2,[r3,#40]
 745:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 1072              	 .loc 4 745 0
 1073 003a BB68     	 ldr r3,[r7,#8]
 1074 003c 9BB2     	 uxth r3,r3
 1075 003e 1A46     	 mov r2,r3
 1076 0040 FB79     	 ldrb r3,[r7,#7]
 1077 0042 F868     	 ldr r0,[r7,#12]
 1078 0044 1146     	 mov r1,r2
 1079 0046 1A46     	 mov r2,r3
 1080 0048 FFF7FEFF 	 bl I2C_MASTER_SendStart
 1081              	.L37:
 746:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 747:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1082              	 .loc 4 747 0
 1083 004c 1037     	 adds r7,r7,#16
 1084              	.LCFI109:
 1085              	 .cfi_def_cfa_offset 8
 1086 004e BD46     	 mov sp,r7
 1087              	.LCFI110:
 1088              	 .cfi_def_cfa_register 13
 1089              	 
 1090 0050 80BD     	 pop {r7,pc}
 1091              	 .cfi_endproc
 1092              	.LFE250:
 1094 0052 00BF     	 .section .text.I2C_MASTER_ProtocolHandler,"ax",%progbits
 1095              	 .align 2
 1096              	 .global I2C_MASTER_ProtocolHandler
 1097              	 .thumb
 1098              	 .thumb_func
 1100              	I2C_MASTER_ProtocolHandler:
 1101              	.LFB251:
 748:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 749:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 750:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
 751:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32
 752:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                 uint8_t *data, const uint32_t size, bool send_stop)
 753:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 754:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 755:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 756:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 757:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 758:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 759:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 760:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
 761:../Dave/Generated/I2C_MASTER/i2c_master.c ****    If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
 762:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (siz
 763:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 764:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_FAILURE;
 765:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 766:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 767:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 768:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
 769:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 770:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (ptr_runtime->tx_busy == false)
 771:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 772:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*If there is no transmission in progress, obtain the address of data, size of data*/
 773:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data = data;
 774:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_count = size;
 775:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 776:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Initialize to first index and set the busy flag*/
 777:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index = 0U;
 778:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_busy = true;
 779:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->send_stop = send_stop;
 780:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 781:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* Enable ACK event */
 782:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 783:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 784:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 785:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (send_start == true)
 786:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 787:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRIT
 788:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 789:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 790:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 791:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Trigger the Ack interrupt*/
 792:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
 793:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 794:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 795:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
 796:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 797:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 798:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 799:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 800:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 801:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_AbortTransmitIRQ(const I2C_MASTER_t *const handle)
 802:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 803:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_busy = false;
 804:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_data = NULL;
 805:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->bus_acquired = false;
 806:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 807:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /*Disable the transmit interrupts*/
 808:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 809:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 810:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Disable the transmit FIFO event*/
 811:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDAR
 812:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 813:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 814:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 815:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 816:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
 817:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 818:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
 819:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_
 820:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                uint8_t * data, const uint32_t count, bool send_stop
 821:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 822:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
 823:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 824:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 825:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 826:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 827:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 828:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (
 829:../Dave/Generated/I2C_MASTER/i2c_master.c ****      (count == 0U)))
 830:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 831:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 832:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 833:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
 834:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 835:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (ptr_runtime->rx_busy == false)
 836:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 837:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
 838:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 839:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* If no active reception in progress, obtain the address of data buffer and number of data b
 840:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_data = data;
 841:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_data_count = count;
 842:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data = data;
 843:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_count = count;
 844:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_busy = true;
 845:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_busy = true;
 846:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->send_stop = send_stop;
 847:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->send_nack = send_nack;
 848:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->rx_data_index = 0U;
 849:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->tx_data_index = 0U;
 850:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 851:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->rxFIFO_size > 0)
 852:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 853:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_lReceive_FIFOData(handle, send_start, address, count);
 854:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 855:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 856:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 857:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_lReceive_StdData(handle, send_start, address);
 858:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
 859:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
 860:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 861:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
 862:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 863:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 864:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 865:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
 866:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Receive interrupt handler for the APP.
 867:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * This is a common interrupt handling function for different instances of the I2C_MASTER APP.
 868:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 869:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 870:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
 871:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void
 872:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
 873:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
 874:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 875:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
 876:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_lindex;
 877:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_min;
 878:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 879:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
 880:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_lindex = 0U;
 881:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 882:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->rx_busy == true)
 883:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
 884:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->rxFIFO_size > 0)
 885:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 886:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /********************************************************************************************
 887:../Dave/Generated/I2C_MASTER/i2c_master.c ****        Rx FIFO enabled
 888:../Dave/Generated/I2C_MASTER/i2c_master.c ****       *********************************************************************************************
 889:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
 890:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 891:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Read all the content of Receive FIFO */
 892:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(hand
 893:../Dave/Generated/I2C_MASTER/i2c_master.c ****         ptr_runtime->rx_data_index++;
 894:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 895:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 896:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 897:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*Reception complete*/
 898:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->rx_busy = false;
 899:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 900:../Dave/Generated/I2C_MASTER/i2c_master.c ****             /*Disable both standard receive and alternative receive FIFO events*/
 901:../Dave/Generated/I2C_MASTER/i2c_master.c ****             XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 902:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                           (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDA
 903:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                      (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERN
 904:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 905:../Dave/Generated/I2C_MASTER/i2c_master.c ****           break;
 906:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
 907:../Dave/Generated/I2C_MASTER/i2c_master.c ****       } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/
 908:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 909:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /*Set the trigger limit if data still to be received*/
 910:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 911:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
 912:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->r
 913:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 914:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if ((handle->config->txFIFO_size > 0))
 915:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 916:../Dave/Generated/I2C_MASTER/i2c_master.c ****           fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIF
 917:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                     ((uint32_t)1 << (uint32_t)handle->config->rxFIF
 918:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 919:../Dave/Generated/I2C_MASTER/i2c_master.c ****        else
 920:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
 921:../Dave/Generated/I2C_MASTER/i2c_master.c ****           fifo_min = 2U;
 922:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 923:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*******************************************************************************************
 924:../Dave/Generated/I2C_MASTER/i2c_master.c ****          Rx and Tx FIFO enabled
 925:../Dave/Generated/I2C_MASTER/i2c_master.c ****         *******************************************************************************************
 926:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (handle->config->txFIFO_size > 0)
 927:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
 928:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /*Fill the transmit FIFO */
 929:../Dave/Generated/I2C_MASTER/i2c_master.c ****           while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 930:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
 931:../Dave/Generated/I2C_MASTER/i2c_master.c ****             if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 932:../Dave/Generated/I2C_MASTER/i2c_master.c ****             {
 933:../Dave/Generated/I2C_MASTER/i2c_master.c ****               if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime
 934:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 935:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 I2C_MASTER_ReceiveNACK(handle);
 936:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 937:../Dave/Generated/I2C_MASTER/i2c_master.c ****               else
 938:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 939:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 I2C_MASTER_ReceiveACK(handle);
 940:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 941:../Dave/Generated/I2C_MASTER/i2c_master.c ****               ptr_runtime->tx_data_index++;
 942:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 943:../Dave/Generated/I2C_MASTER/i2c_master.c ****               /* if fifo size- break */
 944:../Dave/Generated/I2C_MASTER/i2c_master.c ****               if ((++fifo_lindex) >= fifo_min)
 945:../Dave/Generated/I2C_MASTER/i2c_master.c ****               {
 946:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 fifo_lindex = 0U;
 947:../Dave/Generated/I2C_MASTER/i2c_master.c ****                 break;
 948:../Dave/Generated/I2C_MASTER/i2c_master.c ****               }
 949:../Dave/Generated/I2C_MASTER/i2c_master.c ****             }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
 950:../Dave/Generated/I2C_MASTER/i2c_master.c ****             else
 951:../Dave/Generated/I2C_MASTER/i2c_master.c ****             {
 952:../Dave/Generated/I2C_MASTER/i2c_master.c ****               break;
 953:../Dave/Generated/I2C_MASTER/i2c_master.c ****             }
 954:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 955:../Dave/Generated/I2C_MASTER/i2c_master.c ****        } /* end of  if((handle->config->txFIFO_size > 0)) */
 956:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*******************************************************************************************
 957:../Dave/Generated/I2C_MASTER/i2c_master.c ****           Rx FIFO is enabled, Tx FIFO disabled
 958:../Dave/Generated/I2C_MASTER/i2c_master.c ****        ********************************************************************************************
 959:../Dave/Generated/I2C_MASTER/i2c_master.c ****        else
 960:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
 961:../Dave/Generated/I2C_MASTER/i2c_master.c ****          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->sen
 962:../Dave/Generated/I2C_MASTER/i2c_master.c ****          {
 963:../Dave/Generated/I2C_MASTER/i2c_master.c ****            I2C_MASTER_ReceiveNACK(handle);
 964:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 965:../Dave/Generated/I2C_MASTER/i2c_master.c ****          else
 966:../Dave/Generated/I2C_MASTER/i2c_master.c ****          {
 967:../Dave/Generated/I2C_MASTER/i2c_master.c ****            I2C_MASTER_ReceiveACK(handle);
 968:../Dave/Generated/I2C_MASTER/i2c_master.c ****          }
 969:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 970:../Dave/Generated/I2C_MASTER/i2c_master.c ****          ptr_runtime->tx_data_index++;
 971:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 972:../Dave/Generated/I2C_MASTER/i2c_master.c ****      } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
 973:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 974:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if last byte to receive then disable receive events and jump to callback routine
 975:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 976:../Dave/Generated/I2C_MASTER/i2c_master.c ****      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 977:../Dave/Generated/I2C_MASTER/i2c_master.c ****      {
 978:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*Clear both standard receive and alternative receive FIFO events*/
 979:../Dave/Generated/I2C_MASTER/i2c_master.c ****        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVE
 980:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                                    (uint32_t)XMC_USIC_CH_RXFIFO_EVE
 981:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 982:../Dave/Generated/I2C_MASTER/i2c_master.c ****        /*Disable both standard receive and alternative receive events*/
 983:../Dave/Generated/I2C_MASTER/i2c_master.c ****        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE
 984:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RE
 985:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
 986:../Dave/Generated/I2C_MASTER/i2c_master.c ****        if (ptr_runtime->bus_acquired == true)
 987:../Dave/Generated/I2C_MASTER/i2c_master.c ****        {
 988:../Dave/Generated/I2C_MASTER/i2c_master.c ****          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 989:../Dave/Generated/I2C_MASTER/i2c_master.c ****        }
 990:../Dave/Generated/I2C_MASTER/i2c_master.c ****      }
 991:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /*  end of if(handle->config->rxFIFO_size > 0) */
 992:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
 993:../Dave/Generated/I2C_MASTER/i2c_master.c ****      Rx FIFO disabled
 994:../Dave/Generated/I2C_MASTER/i2c_master.c **** ***************************************************************************************************
 995:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
 996:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 997:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle
 998:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ptr_runtime->rx_data_index++;
 999:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1000:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
1001:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1002:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1003:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1004:../Dave/Generated/I2C_MASTER/i2c_master.c ****           /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise A
1005:../Dave/Generated/I2C_MASTER/i2c_master.c ****           if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->
1006:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
1007:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveNACK(handle);
1008:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1009:../Dave/Generated/I2C_MASTER/i2c_master.c ****           else
1010:../Dave/Generated/I2C_MASTER/i2c_master.c ****           {
1011:../Dave/Generated/I2C_MASTER/i2c_master.c ****             I2C_MASTER_ReceiveACK(handle);
1012:../Dave/Generated/I2C_MASTER/i2c_master.c ****           }
1013:../Dave/Generated/I2C_MASTER/i2c_master.c ****           ptr_runtime->tx_data_index++;
1014:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1015:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1016:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1017:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1018:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /*Disable both standard receive and alternative receive events*/
1019:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIV
1020:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                              (uint32_t)XMC_USIC_CH_EVENT_STANDARD_R
1021:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (ptr_runtime->bus_acquired == true)
1022:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1023:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
1024:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1025:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1026:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1027:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of  if(ptr_runtime->rx_busy == true)*/
1028:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1029:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1030:../Dave/Generated/I2C_MASTER/i2c_master.c **** /* Function to issue Send Stop command and jump to receive callback routine */
1031:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
1032:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1033:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_RUNTIME_t * ptr_runtime;
1034:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1035:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime = handle->runtime;
1036:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1037:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (ptr_runtime->send_stop == true)
1038:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1039:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
1040:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1041:../Dave/Generated/I2C_MASTER/i2c_master.c ****     ptr_runtime->bus_acquired = false;
1042:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1043:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStop(handle);
1044:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1045:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1046:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
1047:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1048:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Reception complete */
1049:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->rx_busy = false;
1050:../Dave/Generated/I2C_MASTER/i2c_master.c ****   ptr_runtime->tx_busy = false;
1051:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1052:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->rx_cbhandler != NULL)
1053:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1054:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*Execute the 'End of reception' callback function*/
1055:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->rx_cbhandler();
1056:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1057:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1058:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1059:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1060:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveIRQ(const I2C_MASTER_t *const handle)
1061:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1062:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Reset the user buffer pointer to null */
1063:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_busy = false;
1064:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_busy = false;
1065:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_data = NULL;
1066:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1067:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->bus_acquired = false;
1068:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1069:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Disable the receive interrupts */
1070:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
1071:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1072:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_
1073:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNA
1074:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1075:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1076:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1077:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEI
1078:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                  (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
1079:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1080:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
1081:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1082:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1083:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1084:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
1085:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Protocol interrupt handling function.
1086:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * The function is common for different instances of the I2C_MASTER APP.
1087:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1088:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
1089:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1090:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void
1091:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
1092:../Dave/Generated/I2C_MASTER/i2c_master.c **** void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
1093:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1102              	 .loc 4 1093 0
 1103              	 .cfi_startproc
 1104              	 
 1105              	 
 1106 0000 80B5     	 push {r7,lr}
 1107              	.LCFI111:
 1108              	 .cfi_def_cfa_offset 8
 1109              	 .cfi_offset 7,-8
 1110              	 .cfi_offset 14,-4
 1111 0002 84B0     	 sub sp,sp,#16
 1112              	.LCFI112:
 1113              	 .cfi_def_cfa_offset 24
 1114 0004 00AF     	 add r7,sp,#0
 1115              	.LCFI113:
 1116              	 .cfi_def_cfa_register 7
 1117 0006 7860     	 str r0,[r7,#4]
1094:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t psr_status;
1095:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1096:../Dave/Generated/I2C_MASTER/i2c_master.c ****   psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 1118              	 .loc 4 1096 0
 1119 0008 7B68     	 ldr r3,[r7,#4]
 1120 000a 1B68     	 ldr r3,[r3]
 1121 000c 1846     	 mov r0,r3
 1122 000e FFF7FEFF 	 bl XMC_I2C_CH_GetStatusFlag
 1123 0012 F860     	 str r0,[r7,#12]
1097:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1098:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for nack event */
1099:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NA
 1124              	 .loc 4 1099 0
 1125 0014 7B68     	 ldr r3,[r7,#4]
 1126 0016 5B68     	 ldr r3,[r3,#4]
 1127 0018 9B69     	 ldr r3,[r3,#24]
 1128 001a 002B     	 cmp r3,#0
 1129 001c 0CD0     	 beq .L41
 1130              	 .loc 4 1099 0 is_stmt 0 discriminator 1
 1131 001e FB68     	 ldr r3,[r7,#12]
 1132 0020 03F02003 	 and r3,r3,#32
 1133 0024 002B     	 cmp r3,#0
 1134 0026 07D0     	 beq .L41
1100:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1101:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 1135              	 .loc 4 1101 0 is_stmt 1
 1136 0028 7868     	 ldr r0,[r7,#4]
 1137 002a 2021     	 movs r1,#32
 1138 002c FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1102:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->nack_cbhandler();
 1139              	 .loc 4 1102 0
 1140 0030 7B68     	 ldr r3,[r7,#4]
 1141 0032 5B68     	 ldr r3,[r3,#4]
 1142 0034 9B69     	 ldr r3,[r3,#24]
 1143 0036 9847     	 blx r3
 1144              	.L41:
1103:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1104:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1105:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for arbitration lost */
1106:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_
 1145              	 .loc 4 1106 0
 1146 0038 7B68     	 ldr r3,[r7,#4]
 1147 003a 5B68     	 ldr r3,[r3,#4]
 1148 003c DB69     	 ldr r3,[r3,#28]
 1149 003e 002B     	 cmp r3,#0
 1150 0040 0CD0     	 beq .L42
 1151              	 .loc 4 1106 0 is_stmt 0 discriminator 1
 1152 0042 FB68     	 ldr r3,[r7,#12]
 1153 0044 03F04003 	 and r3,r3,#64
 1154 0048 002B     	 cmp r3,#0
 1155 004a 07D0     	 beq .L42
1107:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1108:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 1156              	 .loc 4 1108 0 is_stmt 1
 1157 004c 7868     	 ldr r0,[r7,#4]
 1158 004e 4021     	 movs r1,#64
 1159 0050 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1109:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->arbitration_cbhandler();
 1160              	 .loc 4 1109 0
 1161 0054 7B68     	 ldr r3,[r7,#4]
 1162 0056 5B68     	 ldr r3,[r3,#4]
 1163 0058 DB69     	 ldr r3,[r3,#28]
 1164 005a 9847     	 blx r3
 1165              	.L42:
1110:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1111:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1112:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Check for error detected */
1113:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_
 1166              	 .loc 4 1113 0
 1167 005c 7B68     	 ldr r3,[r7,#4]
 1168 005e 5B68     	 ldr r3,[r3,#4]
 1169 0060 1B6A     	 ldr r3,[r3,#32]
 1170 0062 002B     	 cmp r3,#0
 1171 0064 0DD0     	 beq .L40
 1172              	 .loc 4 1113 0 is_stmt 0 discriminator 1
 1173 0066 FB68     	 ldr r3,[r7,#12]
 1174 0068 03F48173 	 and r3,r3,#258
 1175 006c 002B     	 cmp r3,#0
 1176 006e 08D0     	 beq .L40
1114:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1115:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 1177              	 .loc 4 1115 0 is_stmt 1
 1178 0070 7868     	 ldr r0,[r7,#4]
 1179 0072 4FF48071 	 mov r1,#256
 1180 0076 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1116:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->config->error_cbhandler();
 1181              	 .loc 4 1116 0
 1182 007a 7B68     	 ldr r3,[r7,#4]
 1183 007c 5B68     	 ldr r3,[r3,#4]
 1184 007e 1B6A     	 ldr r3,[r3,#32]
 1185 0080 9847     	 blx r3
 1186              	.L40:
1117:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1118:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1187              	 .loc 4 1118 0
 1188 0082 1037     	 adds r7,r7,#16
 1189              	.LCFI114:
 1190              	 .cfi_def_cfa_offset 8
 1191 0084 BD46     	 mov sp,r7
 1192              	.LCFI115:
 1193              	 .cfi_def_cfa_register 13
 1194              	 
 1195 0086 80BD     	 pop {r7,pc}
 1196              	 .cfi_endproc
 1197              	.LFE251:
 1199              	 .section .text.I2C_MASTER_AbortTransmit,"ax",%progbits
 1200              	 .align 2
 1201              	 .global I2C_MASTER_AbortTransmit
 1202              	 .thumb
 1203              	 .thumb_func
 1205              	I2C_MASTER_AbortTransmit:
 1206              	.LFB252:
1119:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1120:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
1121:../Dave/Generated/I2C_MASTER/i2c_master.c **** /*
1122:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief A local function to reconfigure Receive FIFO with the given size and trigger limit.
1123:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Size is needed because the FIFO should be disabled before changing the trigger limit by
1124:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * clearing the FIFO size.
1125:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1126:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t * pointer to the I2C_MASTER APP handle
1127:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param uint32_t  number of bytes to be received.
1128:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1129:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return void.
1130:../Dave/Generated/I2C_MASTER/i2c_master.c ****  */
1131:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1132:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
1133:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1134:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t minfifo_value;
1135:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t tx_fifo_size;
1136:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t rx_fifo_size;
1137:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t fifo_limit;
1138:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1139:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
1140:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1141:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((handle->config->txFIFO_size > 0))
1142:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1143:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
1144:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1145:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1146:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1147:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_fifo_size = 1U;
1148:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1149:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1150:../Dave/Generated/I2C_MASTER/i2c_master.c ****   minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size))
1151:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1152:../Dave/Generated/I2C_MASTER/i2c_master.c ****   fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
1153:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1154:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Set the limit value */
1155:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)
1156:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1157:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1158:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1159:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1160:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data transmission.
1161:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t*  I2C_MASTER APP handle pointer of type I2C_MASTER_t
1162:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return I2C_MASTER_STATUS_t
1163:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1164:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1165:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
1166:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * the existing data will be flushed. After the transmission is stopped, user can start
1167:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new transmission without delay.
1168:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1169:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
1170:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1207              	 .loc 4 1170 0
 1208              	 .cfi_startproc
 1209              	 
 1210              	 
 1211              	 
 1212 0000 80B4     	 push {r7}
 1213              	.LCFI116:
 1214              	 .cfi_def_cfa_offset 4
 1215              	 .cfi_offset 7,-4
 1216 0002 85B0     	 sub sp,sp,#20
 1217              	.LCFI117:
 1218              	 .cfi_def_cfa_offset 24
 1219 0004 00AF     	 add r7,sp,#0
 1220              	.LCFI118:
 1221              	 .cfi_def_cfa_register 7
 1222 0006 7860     	 str r0,[r7,#4]
1171:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1172:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1173:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_SUCCESS;
 1223              	 .loc 4 1173 0
 1224 0008 0023     	 movs r3,#0
 1225 000a FB73     	 strb r3,[r7,#15]
1174:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1175:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 1226              	 .loc 4 1175 0
 1227 000c 7B68     	 ldr r3,[r7,#4]
 1228 000e 5B68     	 ldr r3,[r3,#4]
 1229 0010 93F82430 	 ldrb r3,[r3,#36]
 1230 0014 002B     	 cmp r3,#0
 1231 0016 07D0     	 beq .L45
1176:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1177:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
1178:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_AbortTransmitIRQ(handle);
1179:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1180:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1181:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 1232              	 .loc 4 1181 0
 1233 0018 7B68     	 ldr r3,[r7,#4]
 1234 001a 5B68     	 ldr r3,[r3,#4]
 1235 001c 93F82430 	 ldrb r3,[r3,#36]
 1236 0020 012B     	 cmp r3,#1
 1237 0022 01D0     	 beq .L45
1182:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1183:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1184:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortTransmitDMA(handle);
1185:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1186:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1187:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1188:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1189:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 1238              	 .loc 4 1189 0
 1239 0024 0123     	 movs r3,#1
 1240 0026 FB73     	 strb r3,[r7,#15]
 1241              	.L45:
1190:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1191:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 1242              	 .loc 4 1191 0
 1243 0028 7B68     	 ldr r3,[r7,#4]
 1244 002a 1B68     	 ldr r3,[r3]
 1245 002c 7A68     	 ldr r2,[r7,#4]
 1246 002e 1268     	 ldr r2,[r2]
 1247 0030 D26C     	 ldr r2,[r2,#76]
 1248 0032 42F00202 	 orr r2,r2,#2
 1249 0036 DA64     	 str r2,[r3,#76]
1192:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->channel->FMR = 0x00000002U;/*clear TDV*/
 1250              	 .loc 4 1192 0
 1251 0038 7B68     	 ldr r3,[r7,#4]
 1252 003a 1B68     	 ldr r3,[r3]
 1253 003c 0222     	 movs r2,#2
 1254 003e 9A66     	 str r2,[r3,#104]
1193:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1194:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1255              	 .loc 4 1194 0
 1256 0040 FB7B     	 ldrb r3,[r7,#15]
1195:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1257              	 .loc 4 1195 0
 1258 0042 1846     	 mov r0,r3
 1259 0044 1437     	 adds r7,r7,#20
 1260              	.LCFI119:
 1261              	 .cfi_def_cfa_offset 4
 1262 0046 BD46     	 mov sp,r7
 1263              	.LCFI120:
 1264              	 .cfi_def_cfa_register 13
 1265              	 
 1266 0048 5DF8047B 	 ldr r7,[sp],#4
 1267              	.LCFI121:
 1268              	 .cfi_restore 7
 1269              	 .cfi_def_cfa_offset 0
 1270 004c 7047     	 bx lr
 1271              	 .cfi_endproc
 1272              	.LFE252:
 1274 004e 00BF     	 .section .text.I2C_MASTER_AbortReceive,"ax",%progbits
 1275              	 .align 2
 1276              	 .global I2C_MASTER_AbortReceive
 1277              	 .thumb
 1278              	 .thumb_func
 1280              	I2C_MASTER_AbortReceive:
 1281              	.LFB253:
1196:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1197:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1198:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data reception.
1199:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t* I2C_MASTER APP handle pointer of type I2C_MASTER_t
1200:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return I2C_MASTER_STATUS_t
1201:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1202:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1203:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If a reception is in progress, it will be stopped. When a reception request
1204:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * is active, user will not be able to place a new receive request till the active
1205:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * reception is complete. This API can stop the progressing reception to make
1206:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new receive request.
1207:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1208:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
1209:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1282              	 .loc 4 1209 0
 1283              	 .cfi_startproc
 1284              	 
 1285              	 
 1286              	 
 1287 0000 80B4     	 push {r7}
 1288              	.LCFI122:
 1289              	 .cfi_def_cfa_offset 4
 1290              	 .cfi_offset 7,-4
 1291 0002 85B0     	 sub sp,sp,#20
 1292              	.LCFI123:
 1293              	 .cfi_def_cfa_offset 24
 1294 0004 00AF     	 add r7,sp,#0
 1295              	.LCFI124:
 1296              	 .cfi_def_cfa_register 7
 1297 0006 7860     	 str r0,[r7,#4]
1210:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1211:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1212:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_SUCCESS;
 1298              	 .loc 4 1212 0
 1299 0008 0023     	 movs r3,#0
 1300 000a FB73     	 strb r3,[r7,#15]
1213:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1214:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 1301              	 .loc 4 1214 0
 1302 000c 7B68     	 ldr r3,[r7,#4]
 1303 000e 5B68     	 ldr r3,[r3,#4]
 1304 0010 93F82530 	 ldrb r3,[r3,#37]
 1305 0014 002B     	 cmp r3,#0
 1306 0016 07D0     	 beq .L48
1215:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1216:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
1217:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortReceiveIRQ(handle);
1218:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1219:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1220:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 1307              	 .loc 4 1220 0
 1308 0018 7B68     	 ldr r3,[r7,#4]
 1309 001a 5B68     	 ldr r3,[r3,#4]
 1310 001c 93F82530 	 ldrb r3,[r3,#37]
 1311 0020 012B     	 cmp r3,#1
 1312 0022 01D0     	 beq .L48
1221:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1222:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
1223:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_lAbortReceiveDMA(handle);
1224:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1225:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1226:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1227:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1228:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 1313              	 .loc 4 1228 0
 1314 0024 0123     	 movs r3,#1
 1315 0026 FB73     	 strb r3,[r7,#15]
 1316              	.L48:
1229:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1230:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1231:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1317              	 .loc 4 1231 0
 1318 0028 FB7B     	 ldrb r3,[r7,#15]
1232:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1319              	 .loc 4 1232 0
 1320 002a 1846     	 mov r0,r3
 1321 002c 1437     	 adds r7,r7,#20
 1322              	.LCFI125:
 1323              	 .cfi_def_cfa_offset 4
 1324 002e BD46     	 mov sp,r7
 1325              	.LCFI126:
 1326              	 .cfi_def_cfa_register 13
 1327              	 
 1328 0030 5DF8047B 	 ldr r7,[sp],#4
 1329              	.LCFI127:
 1330              	 .cfi_restore 7
 1331              	 .cfi_def_cfa_offset 0
 1332 0034 7047     	 bx lr
 1333              	 .cfi_endproc
 1334              	.LFE253:
 1336 0036 00BF     	 .section .text.I2C_MASTER_lStartTransmitPolling,"ax",%progbits
 1337              	 .align 2
 1338              	 .thumb
 1339              	 .thumb_func
 1341              	I2C_MASTER_lStartTransmitPolling:
 1342              	.LFB254:
1233:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1234:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_RX_ENABLED == 1)
1235:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveDMA(const I2C_MASTER_t *const handle, uint32_t data_coun
1236:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1237:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1238:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *rx_dma_config;
1239:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *rx_dma_config_global;
1240:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1241:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1242:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *tx_dma_config;
1243:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *tx_dma_config_global;
1244:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t tx_ch_num;
1245:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_ch_num = 0U;
1246:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config = handle->config->transmit_dma_config;
1247:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config_global = handle->config->transmit_dma_config->global_dma;
1248:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1249:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1250:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
1251:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_dma_config = handle->config->receive_dma_config;
1252:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_dma_config_global = handle->config->receive_dma_config->global_dma;
1253:../Dave/Generated/I2C_MASTER/i2c_master.c ****   
1254:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((addr == NULL) || (data_count > I2C_DMA_MAX_BLOCK_SIZE) || (data_count == 0U))
1255:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1256:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
1257:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1258:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1259:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1260:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->runtime->rx_busy == false)
1261:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1262:../Dave/Generated/I2C_MASTER/i2c_master.c ****       handle->runtime->rx_busy = true;
1263:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
1264:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->runtime->rx_dma_data_count = data_count;
1265:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1266:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_USIC_CH_EnableEvent(handle->channel, ((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
1267:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                               (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
1268:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1269:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_SetBlockSize(rx_dma_config_global->dma, rx_dma_config->dma_channel, data_count);
1270:../Dave/Generated/I2C_MASTER/i2c_master.c **** #else
1271:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_SetBlockSize(rx_dma_config_global->dma, rx_dma_config->dma_channel, 1);
1272:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1273:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_SetSourceAddress(rx_dma_config_global->dma, rx_dma_config->dma_channel, (uint32_t)&h
1274:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_SetDestinationAddress(rx_dma_config_global->dma, rx_dma_config->dma_channel, (uint32
1275:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1276:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
1277:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1278:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1279:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* ACK TDF value */
1280:../Dave/Generated/I2C_MASTER/i2c_master.c ****       ack_buf[0] = (uint16_t)I2C_MASTER_TDF_RECEIVE_ACK;
1281:../Dave/Generated/I2C_MASTER/i2c_master.c ****       nack_buf[0] = (uint16_t)I2C_MASTER_TDF_RECEIVE_NACK;
1282:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
1283:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* need to make source reload for tx, transfer width for tx= 2 bytes */
1284:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_ch_num = handle->config->transmit_dma_config->dma_channel;
1285:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* clear the bits */
1286:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_dma_config_global->dma->CH[tx_ch_num].CTLL &= ~((uint32_t)I2C_MASTER_DMA_SRC_DST_TR_WIDTH_MA
1287:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         (uint32_t)I2C_MASTER_DMA_SRC_ADDR_INC_MASK)
1288:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1289:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* set the src and dest transf width as XMC_DMA_CH_TRANSFER_WIDTH_16 */
1290:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_dma_config_global->dma->CH[tx_ch_num].CTLL |= (((uint32_t)XMC_DMA_CH_TRANSFER_WIDTH_16 <<
1291:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         (uint32_t)I2C_MASTER_DMA_DST_TRANSFER_WIDTH
1292:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                        ((uint32_t)XMC_DMA_CH_TRANSFER_WIDTH_16 <<
1293:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                       (uint32_t)I2C_MASTER_DMA_SRC_TRANSFER_WIDTH_P
1294:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1295:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* set the tx channel src address inc mode to XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE */
1296:../Dave/Generated/I2C_MASTER/i2c_master.c ****     tx_dma_config_global->dma->CH[tx_ch_num].CTLL |= ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CH
1297:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                        (uint32_t)I2C_MASTER_DMA_SRC_ADDR_INC_POS);
1298:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1299:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1300:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1301:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_RECEIVE_START);
1302:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1303:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1304:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1305:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if(data_count == 1U)
1306:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1307:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_DMA_CH_SetSourceAddress(tx_dma_config_global->dma, tx_dma_config->dma_channel, (uint3
1308:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_DMA_CH_SetBlockSize(tx_dma_config_global->dma, tx_dma_config->dma_channel, 1);
1309:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1310:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
1311:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1312:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_DMA_CH_SetSourceAddress(tx_dma_config_global->dma, tx_dma_config->dma_channel, (uint3
1313:../Dave/Generated/I2C_MASTER/i2c_master.c ****           XMC_DMA_CH_SetBlockSize(tx_dma_config_global->dma, tx_dma_config->dma_channel, data_count
1314:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1315:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_SetDestinationAddress(tx_dma_config_global->dma, tx_dma_config->dma_channel,
1316:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                      (uint32_t)&handle->channel->TBUF[0]);
1317:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1318:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1319:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1320:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1321:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_Enable(tx_dma_config_global->dma, tx_dma_config->dma_channel);
1322:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1323:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1324:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1325:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1326:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (data_count > 1U)
1327:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1328:../Dave/Generated/I2C_MASTER/i2c_master.c ****           I2C_MASTER_ReceiveACK((I2C_MASTER_t * const)handle);
1329:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1330:../Dave/Generated/I2C_MASTER/i2c_master.c ****         else
1331:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1332:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_ReceiveNACK((I2C_MASTER_t * const)handle);
1333:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1334:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1335:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1336:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_Enable(rx_dma_config_global->dma, rx_dma_config->dma_channel);
1337:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1338:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_SUCCESS;
1339:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1340:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of if(handle->runtime->rx_busy == false) */
1341:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
1342:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1343:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
1344:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1345:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1346:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data reception.
1347:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t* I2C_MASTER APP handle pointer of type I2C_MASTER_t
1348:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return None
1349:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1350:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1351:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If a reception is in progress, it will be stopped. When a reception request
1352:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * is active, user will not be able to place a new receive request till the active
1353:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * reception is complete. This API can stop the progressing reception to make
1354:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new receive request.
1355:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1356:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortReceiveDMA(const I2C_MASTER_t *const handle)
1357:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1358:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *rx_dma_config;
1359:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *rx_dma_config_global;
1360:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1361:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *tx_dma_config;
1362:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *tx_dma_config_global;
1363:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1364:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1365:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_dma_config = handle->config->receive_dma_config;
1366:../Dave/Generated/I2C_MASTER/i2c_master.c ****   rx_dma_config_global = handle->config->receive_dma_config->global_dma;
1367:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1368:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config = handle->config->transmit_dma_config;
1369:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config_global = handle->config->transmit_dma_config->global_dma;
1370:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1371:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1372:../Dave/Generated/I2C_MASTER/i2c_master.c ****   /* Reset the user buffer pointer to null */
1373:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_busy = false;
1374:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->rx_dma_data_index = 0U;
1375:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1376:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (XMC_DMA_CH_IsEnabled(rx_dma_config_global->dma, rx_dma_config->dma_channel))
1377:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1378:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_Disable(rx_dma_config_global->dma, rx_dma_config->dma_channel);
1379:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1380:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1381:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
1382:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1383:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (XMC_DMA_CH_IsEnabled(tx_dma_config_global->dma, tx_dma_config->dma_channel))
1384:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1385:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_DMA_CH_Disable(tx_dma_config_global->dma, tx_dma_config->dma_channel);
1386:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1387:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (XMC_DMA_CH_IsEnabled(tx_dma_config_global->dma, tx_dma_config->dma_channel) == 1U){}
1388:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1389:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1390:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1391:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_DMA_CH_IsEnabled(rx_dma_config_global->dma, rx_dma_config->dma_channel) == 1U){}
1392:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1393:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1394:../Dave/Generated/I2C_MASTER/i2c_master.c ****   XMC_USIC_CH_DisableEvent(handle->channel, ((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
1395:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                              (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
1396:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1397:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1398:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1399:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DMA_TX_ENABLED == 1)
1400:../Dave/Generated/I2C_MASTER/i2c_master.c **** I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitDMA(const I2C_MASTER_t *const handle, uint32_t block_si
1401:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1402:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1403:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *tx_dma_config;
1404:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *tx_dma_config_global;
1405:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint8_t tx_ch_num;
1406:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1407:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
1408:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1409:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config = handle->config->transmit_dma_config;
1410:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config_global = handle->config->transmit_dma_config->global_dma;
1411:../Dave/Generated/I2C_MASTER/i2c_master.c ****   
1412:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_ch_num = 0U;
1413:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1414:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((addr == NULL) || (block_size > I2C_DMA_MAX_BLOCK_SIZE) || (!block_size))
1415:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1416:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
1417:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1418:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1419:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1420:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (handle->runtime->tx_busy == false)
1421:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1422:../Dave/Generated/I2C_MASTER/i2c_master.c ****       tx_ch_num = handle->config->transmit_dma_config->dma_channel;
1423:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* clear the bits */
1424:../Dave/Generated/I2C_MASTER/i2c_master.c ****       tx_dma_config_global->dma->CH[tx_ch_num].CTLL &= ~((uint32_t)I2C_MASTER_DMA_SRC_DST_TR_WIDTH_
1425:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* set the src and dest transf width as XMC_DMA_CH_TRANSFER_WIDTH_8 */
1426:../Dave/Generated/I2C_MASTER/i2c_master.c ****       tx_dma_config_global->dma->CH[tx_ch_num].CTLL |= (((uint32_t)XMC_DMA_CH_TRANSFER_WIDTH_8 << (
1427:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         ((uint32_t)XMC_DMA_CH_TRANSFER_WIDTH_8 << (
1428:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* set the tx channel src address inc mode to XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT */
1429:../Dave/Generated/I2C_MASTER/i2c_master.c ****       tx_dma_config_global->dma->CH[tx_ch_num].CTLL |= ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_INC
1430:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1431:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_DMA_ClearRequestLine(tx_dma_config_global->dma, handle->config->transmit_dma_config->dma_
1432:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_EnableEvent((I2C_MASTER_t * const)handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
1433:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1434:../Dave/Generated/I2C_MASTER/i2c_master.c ****       handle->runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
1435:../Dave/Generated/I2C_MASTER/i2c_master.c ****       handle->runtime->tx_busy = true;
1436:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1437:../Dave/Generated/I2C_MASTER/i2c_master.c ****       XMC_I2C_CH_MasterTransmit(handle->channel,*addr);
1438:../Dave/Generated/I2C_MASTER/i2c_master.c ****       block_size--;
1439:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1440:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if(block_size)
1441:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1442:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_SetBlockSize(tx_dma_config_global->dma, tx_dma_config->dma_channel, block_size);
1443:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_SetSourceAddress(tx_dma_config_global->dma, tx_dma_config->dma_channel, (uint32_
1444:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_SetDestinationAddress(tx_dma_config_global->dma, tx_dma_config->dma_channel, (ui
1445:../Dave/Generated/I2C_MASTER/i2c_master.c ****  
1446:../Dave/Generated/I2C_MASTER/i2c_master.c ****         XMC_DMA_CH_Enable(tx_dma_config_global->dma, tx_dma_config->dma_channel);
1447:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1448:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1449:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1450:../Dave/Generated/I2C_MASTER/i2c_master.c ****         handle->runtime->tx_busy = false;
1451:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if(handle->config->tx_cbhandler)
1452:../Dave/Generated/I2C_MASTER/i2c_master.c ****         {
1453:../Dave/Generated/I2C_MASTER/i2c_master.c ****           handle->config->tx_cbhandler();
1454:../Dave/Generated/I2C_MASTER/i2c_master.c ****         }
1455:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1456:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1457:../Dave/Generated/I2C_MASTER/i2c_master.c ****       status = I2C_MASTER_STATUS_SUCCESS;
1458:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1459:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1460:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1461:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
1462:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1463:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1464:../Dave/Generated/I2C_MASTER/i2c_master.c **** /**************************************************************************************************
1465:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @brief Aborts the ongoing data transmission.
1466:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @param I2C_MASTER_t*  I2C_MASTER APP handle pointer of type I2C_MASTER_t
1467:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * @return None
1468:../Dave/Generated/I2C_MASTER/i2c_master.c ****  *
1469:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * Details of function:
1470:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
1471:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * the existing data will be flushed. After the transmission is stopped, user can start
1472:../Dave/Generated/I2C_MASTER/i2c_master.c ****  * a new transmission without delay.
1473:../Dave/Generated/I2C_MASTER/i2c_master.c ****  **************************************************************************************************
1474:../Dave/Generated/I2C_MASTER/i2c_master.c **** static void I2C_MASTER_lAbortTransmitDMA(const I2C_MASTER_t *const handle)
1475:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
1476:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const I2C_MASTER_DMA_CONFIG_t *tx_dma_config;
1477:../Dave/Generated/I2C_MASTER/i2c_master.c ****   const GLOBAL_DMA_t *tx_dma_config_global;
1478:../Dave/Generated/I2C_MASTER/i2c_master.c ****   
1479:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config = handle->config->transmit_dma_config;
1480:../Dave/Generated/I2C_MASTER/i2c_master.c ****   tx_dma_config_global = handle->config->transmit_dma_config->global_dma;
1481:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1482:../Dave/Generated/I2C_MASTER/i2c_master.c ****   handle->runtime->tx_busy = false;
1483:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1484:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (XMC_DMA_CH_IsEnabled(tx_dma_config_global->dma, tx_dma_config->dma_channel))
1485:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1486:../Dave/Generated/I2C_MASTER/i2c_master.c ****     XMC_DMA_CH_Disable(tx_dma_config_global->dma, tx_dma_config->dma_channel);
1487:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1488:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1489:../Dave/Generated/I2C_MASTER/i2c_master.c ****   while (XMC_DMA_CH_IsEnabled(tx_dma_config_global->dma, tx_dma_config->dma_channel) == 1U){}
1490:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1491:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_DisableEvent((I2C_MASTER_t *)handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
1492:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
1493:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1494:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1495:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1496:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
1497:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_s
1498:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                         const uint32_t slave_address, uint8_t *data
1499:../Dave/Generated/I2C_MASTER/i2c_master.c ****                               bool send_stop)
1500:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1343              	 .loc 4 1500 0
 1344              	 .cfi_startproc
 1345              	 
 1346              	 
 1347 0000 80B5     	 push {r7,lr}
 1348              	.LCFI128:
 1349              	 .cfi_def_cfa_offset 8
 1350              	 .cfi_offset 7,-8
 1351              	 .cfi_offset 14,-4
 1352 0002 86B0     	 sub sp,sp,#24
 1353              	.LCFI129:
 1354              	 .cfi_def_cfa_offset 32
 1355 0004 00AF     	 add r7,sp,#0
 1356              	.LCFI130:
 1357              	 .cfi_def_cfa_register 7
 1358 0006 F860     	 str r0,[r7,#12]
 1359 0008 7A60     	 str r2,[r7,#4]
 1360 000a 3B60     	 str r3,[r7]
 1361 000c 0B46     	 mov r3,r1
 1362 000e FB72     	 strb r3,[r7,#11]
1501:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t buffer_index;
1502:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1503:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1504:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 1363              	 .loc 4 1504 0
 1364 0010 0223     	 movs r3,#2
 1365 0012 FB74     	 strb r3,[r7,#19]
1505:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1506:../Dave/Generated/I2C_MASTER/i2c_master.c ****   buffer_index = 0U;
 1366              	 .loc 4 1506 0
 1367 0014 0023     	 movs r3,#0
 1368 0016 7B61     	 str r3,[r7,#20]
1507:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1508:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (si
 1369              	 .loc 4 1508 0
 1370 0018 FB7A     	 ldrb r3,[r7,#11]
 1371 001a 83F00103 	 eor r3,r3,#1
 1372 001e DBB2     	 uxtb r3,r3
 1373 0020 002B     	 cmp r3,#0
 1374 0022 09D0     	 beq .L51
 1375              	 .loc 4 1508 0 is_stmt 0 discriminator 1
 1376 0024 FB68     	 ldr r3,[r7,#12]
 1377 0026 9B68     	 ldr r3,[r3,#8]
 1378 0028 93F82830 	 ldrb r3,[r3,#40]
 1379 002c DBB2     	 uxtb r3,r3
 1380 002e 83F00103 	 eor r3,r3,#1
 1381 0032 DBB2     	 uxtb r3,r3
 1382 0034 002B     	 cmp r3,#0
 1383 0036 05D1     	 bne .L52
 1384              	.L51:
 1385              	 .loc 4 1508 0 discriminator 3
 1386 0038 3B68     	 ldr r3,[r7]
 1387 003a 002B     	 cmp r3,#0
 1388 003c 02D0     	 beq .L52
 1389              	 .loc 4 1508 0 discriminator 4
 1390 003e 3B6A     	 ldr r3,[r7,#32]
 1391 0040 002B     	 cmp r3,#0
 1392 0042 02D1     	 bne .L53
 1393              	.L52:
1509:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1510:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 1394              	 .loc 4 1510 0 is_stmt 1
 1395 0044 0123     	 movs r3,#1
 1396 0046 FB74     	 strb r3,[r7,#19]
 1397 0048 7EE0     	 b .L54
 1398              	.L53:
1511:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1512:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1513:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1514:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (send_start == true)
 1399              	 .loc 4 1514 0
 1400 004a FB7A     	 ldrb r3,[r7,#11]
 1401 004c 002B     	 cmp r3,#0
 1402 004e 1CD0     	 beq .L55
1515:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1516:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (handle->runtime->bus_acquired == false)
 1403              	 .loc 4 1516 0
 1404 0050 FB68     	 ldr r3,[r7,#12]
 1405 0052 9B68     	 ldr r3,[r3,#8]
 1406 0054 93F82830 	 ldrb r3,[r3,#40]
 1407 0058 DBB2     	 uxtb r3,r3
 1408 005a 83F00103 	 eor r3,r3,#1
 1409 005e DBB2     	 uxtb r3,r3
 1410 0060 002B     	 cmp r3,#0
 1411 0062 12D0     	 beq .L55
1517:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1518:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_WRITE);
 1412              	 .loc 4 1518 0
 1413 0064 F868     	 ldr r0,[r7,#12]
 1414 0066 7968     	 ldr r1,[r7,#4]
 1415 0068 0022     	 movs r2,#0
 1416 006a FFF7FEFF 	 bl I2C_MASTER_lSendStart_Or_RepeatedStart
1519:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 1417              	 .loc 4 1519 0
 1418 006e 00BF     	 nop
 1419              	.L56:
 1420              	 .loc 4 1519 0 is_stmt 0 discriminator 1
 1421 0070 F868     	 ldr r0,[r7,#12]
 1422 0072 4FF40071 	 mov r1,#512
 1423 0076 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1424 007a 0346     	 mov r3,r0
 1425 007c 002B     	 cmp r3,#0
 1426 007e F7D0     	 beq .L56
1520:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1521:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* wait for ACK */
1522:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1523:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1427              	 .loc 4 1523 0 is_stmt 1
 1428 0080 F868     	 ldr r0,[r7,#12]
 1429 0082 4FF40071 	 mov r1,#512
 1430 0086 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
 1431              	.L55:
1524:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1525:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1526:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1527:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 1432              	 .loc 4 1527 0
 1433 008a FB68     	 ldr r3,[r7,#12]
 1434 008c 5B68     	 ldr r3,[r3,#4]
 1435 008e 93F82630 	 ldrb r3,[r3,#38]
 1436 0092 002B     	 cmp r3,#0
 1437 0094 1ED1     	 bne .L57
1528:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1529:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* send data, byte by byte */
1530:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (buffer_index < size)
 1438              	 .loc 4 1530 0
 1439 0096 18E0     	 b .L58
 1440              	.L60:
1531:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1532:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 1441              	 .loc 4 1532 0
 1442 0098 3A68     	 ldr r2,[r7]
 1443 009a 7B69     	 ldr r3,[r7,#20]
 1444 009c 1344     	 add r3,r3,r2
 1445 009e 1B78     	 ldrb r3,[r3]
 1446 00a0 F868     	 ldr r0,[r7,#12]
 1447 00a2 1946     	 mov r1,r3
 1448 00a4 FFF7FEFF 	 bl I2C_MASTER_TransmitByte
1533:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 1449              	 .loc 4 1533 0
 1450 00a8 00BF     	 nop
 1451              	.L59:
 1452              	 .loc 4 1533 0 is_stmt 0 discriminator 1
 1453 00aa F868     	 ldr r0,[r7,#12]
 1454 00ac 4FF40071 	 mov r1,#512
 1455 00b0 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1456 00b4 0346     	 mov r3,r0
 1457 00b6 002B     	 cmp r3,#0
 1458 00b8 F7D0     	 beq .L59
1534:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1535:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* wait for ACK */
1536:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1537:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1459              	 .loc 4 1537 0 is_stmt 1
 1460 00ba F868     	 ldr r0,[r7,#12]
 1461 00bc 4FF40071 	 mov r1,#512
 1462 00c0 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1538:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1539:../Dave/Generated/I2C_MASTER/i2c_master.c ****     buffer_index++;
 1463              	 .loc 4 1539 0
 1464 00c4 7B69     	 ldr r3,[r7,#20]
 1465 00c6 0133     	 adds r3,r3,#1
 1466 00c8 7B61     	 str r3,[r7,#20]
 1467              	.L58:
1530:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 1468              	 .loc 4 1530 0
 1469 00ca 7A69     	 ldr r2,[r7,#20]
 1470 00cc 3B6A     	 ldr r3,[r7,#32]
 1471 00ce 9A42     	 cmp r2,r3
 1472 00d0 E2D3     	 bcc .L60
 1473 00d2 2BE0     	 b .L61
 1474              	.L57:
1540:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1541:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1542:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1543:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1544:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (buffer_index < size)
 1475              	 .loc 4 1544 0
 1476 00d4 1AE0     	 b .L62
 1477              	.L66:
1545:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1546:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /* Fill the transmit FIFO */
1547:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 1478              	 .loc 4 1547 0
 1479 00d6 10E0     	 b .L63
 1480              	.L65:
1548:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1549:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* transmit each byte till index reaches to the last byte */
1550:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (buffer_index < size)
 1481              	 .loc 4 1550 0
 1482 00d8 7A69     	 ldr r2,[r7,#20]
 1483 00da 3B6A     	 ldr r3,[r7,#32]
 1484 00dc 9A42     	 cmp r2,r3
 1485 00de 0BD2     	 bcs .L64
1551:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1552:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
1553:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 1486              	 .loc 4 1553 0
 1487 00e0 3A68     	 ldr r2,[r7]
 1488 00e2 7B69     	 ldr r3,[r7,#20]
 1489 00e4 1344     	 add r3,r3,r2
 1490 00e6 1B78     	 ldrb r3,[r3]
 1491 00e8 F868     	 ldr r0,[r7,#12]
 1492 00ea 1946     	 mov r1,r3
 1493 00ec FFF7FEFF 	 bl I2C_MASTER_TransmitByte
1554:../Dave/Generated/I2C_MASTER/i2c_master.c ****       buffer_index++;
 1494              	 .loc 4 1554 0
 1495 00f0 7B69     	 ldr r3,[r7,#20]
 1496 00f2 0133     	 adds r3,r3,#1
 1497 00f4 7B61     	 str r3,[r7,#20]
 1498 00f6 00E0     	 b .L63
 1499              	.L64:
1555:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1556:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1557:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1558:../Dave/Generated/I2C_MASTER/i2c_master.c ****         break;
 1500              	 .loc 4 1558 0
 1501 00f8 08E0     	 b .L62
 1502              	.L63:
1547:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 1503              	 .loc 4 1547 0
 1504 00fa F868     	 ldr r0,[r7,#12]
 1505 00fc FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 1506 0100 0346     	 mov r3,r0
 1507 0102 83F00103 	 eor r3,r3,#1
 1508 0106 DBB2     	 uxtb r3,r3
 1509 0108 002B     	 cmp r3,#0
 1510 010a E5D1     	 bne .L65
 1511              	.L62:
1544:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 1512              	 .loc 4 1544 0
 1513 010c 7A69     	 ldr r2,[r7,#20]
 1514 010e 3B6A     	 ldr r3,[r7,#32]
 1515 0110 9A42     	 cmp r2,r3
 1516 0112 E0D3     	 bcc .L66
1559:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1560:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1561:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1562:../Dave/Generated/I2C_MASTER/i2c_master.c ****     /*make sure data is transmitted from FIFO*/
1563:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 1517              	 .loc 4 1563 0
 1518 0114 00BF     	 nop
 1519              	.L67:
 1520              	 .loc 4 1563 0 is_stmt 0 discriminator 1
 1521 0116 FB68     	 ldr r3,[r7,#12]
 1522 0118 1B68     	 ldr r3,[r3]
 1523 011a 1846     	 mov r0,r3
 1524 011c FFF7FEFF 	 bl XMC_USIC_CH_TXFIFO_IsEmpty
 1525 0120 0346     	 mov r3,r0
 1526 0122 83F00103 	 eor r3,r3,#1
 1527 0126 DBB2     	 uxtb r3,r3
 1528 0128 002B     	 cmp r3,#0
 1529 012a F4D1     	 bne .L67
 1530              	.L61:
1564:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1565:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1566:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if(send_stop == true)
 1531              	 .loc 4 1566 0 is_stmt 1
 1532 012c 97F82430 	 ldrb r3,[r7,#36]
 1533 0130 002B     	 cmp r3,#0
 1534 0132 07D0     	 beq .L68
1567:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1568:../Dave/Generated/I2C_MASTER/i2c_master.c ****     handle->runtime->bus_acquired = false;
 1535              	 .loc 4 1568 0
 1536 0134 FB68     	 ldr r3,[r7,#12]
 1537 0136 9B68     	 ldr r3,[r3,#8]
 1538 0138 0022     	 movs r2,#0
 1539 013a 83F82820 	 strb r2,[r3,#40]
1569:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_SendStop(handle);
 1540              	 .loc 4 1569 0
 1541 013e F868     	 ldr r0,[r7,#12]
 1542 0140 FFF7FEFF 	 bl I2C_MASTER_SendStop
 1543              	.L68:
1570:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1571:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1572:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_SUCCESS;
 1544              	 .loc 4 1572 0
 1545 0144 0023     	 movs r3,#0
 1546 0146 FB74     	 strb r3,[r7,#19]
 1547              	.L54:
1573:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1574:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1575:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1548              	 .loc 4 1575 0
 1549 0148 FB7C     	 ldrb r3,[r7,#19]
1576:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1550              	 .loc 4 1576 0
 1551 014a 1846     	 mov r0,r3
 1552 014c 1837     	 adds r7,r7,#24
 1553              	.LCFI131:
 1554              	 .cfi_def_cfa_offset 8
 1555 014e BD46     	 mov sp,r7
 1556              	.LCFI132:
 1557              	 .cfi_def_cfa_register 13
 1558              	 
 1559 0150 80BD     	 pop {r7,pc}
 1560              	 .cfi_endproc
 1561              	.LFE254:
 1563 0152 00BF     	 .section .text.I2C_MASTER_lStartReceivePolling,"ax",%progbits
 1564              	 .align 2
 1565              	 .thumb
 1566              	 .thumb_func
 1568              	I2C_MASTER_lStartReceivePolling:
 1569              	.LFB255:
1577:../Dave/Generated/I2C_MASTER/i2c_master.c **** #endif
1578:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1579:../Dave/Generated/I2C_MASTER/i2c_master.c **** #if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
1580:../Dave/Generated/I2C_MASTER/i2c_master.c **** static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_st
1581:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                                        uint32_t slave_address, uint8_t *data, uint3
1582:../Dave/Generated/I2C_MASTER/i2c_master.c ****                                bool send_stop, bool send_nack)
1583:../Dave/Generated/I2C_MASTER/i2c_master.c **** {
 1570              	 .loc 4 1583 0
 1571              	 .cfi_startproc
 1572              	 
 1573              	 
 1574 0000 90B5     	 push {r4,r7,lr}
 1575              	.LCFI133:
 1576              	 .cfi_def_cfa_offset 12
 1577              	 .cfi_offset 4,-12
 1578              	 .cfi_offset 7,-8
 1579              	 .cfi_offset 14,-4
 1580 0002 89B0     	 sub sp,sp,#36
 1581              	.LCFI134:
 1582              	 .cfi_def_cfa_offset 48
 1583 0004 00AF     	 add r7,sp,#0
 1584              	.LCFI135:
 1585              	 .cfi_def_cfa_register 7
 1586 0006 F860     	 str r0,[r7,#12]
 1587 0008 7A60     	 str r2,[r7,#4]
 1588 000a 3B60     	 str r3,[r7]
 1589 000c 0B46     	 mov r3,r1
 1590 000e FB72     	 strb r3,[r7,#11]
1584:../Dave/Generated/I2C_MASTER/i2c_master.c ****   I2C_MASTER_STATUS_t status;
1585:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t buffer_index;
1586:../Dave/Generated/I2C_MASTER/i2c_master.c ****   uint32_t temp_index;
1587:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1588:../Dave/Generated/I2C_MASTER/i2c_master.c ****   status = I2C_MASTER_STATUS_BUSY;
 1591              	 .loc 4 1588 0
 1592 0010 0223     	 movs r3,#2
 1593 0012 FB77     	 strb r3,[r7,#31]
1589:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (co
 1594              	 .loc 4 1589 0
 1595 0014 FB7A     	 ldrb r3,[r7,#11]
 1596 0016 83F00103 	 eor r3,r3,#1
 1597 001a DBB2     	 uxtb r3,r3
 1598 001c 002B     	 cmp r3,#0
 1599 001e 09D0     	 beq .L71
 1600              	 .loc 4 1589 0 is_stmt 0 discriminator 1
 1601 0020 FB68     	 ldr r3,[r7,#12]
 1602 0022 9B68     	 ldr r3,[r3,#8]
 1603 0024 93F82830 	 ldrb r3,[r3,#40]
 1604 0028 DBB2     	 uxtb r3,r3
 1605 002a 83F00103 	 eor r3,r3,#1
 1606 002e DBB2     	 uxtb r3,r3
 1607 0030 002B     	 cmp r3,#0
 1608 0032 05D1     	 bne .L72
 1609              	.L71:
 1610              	 .loc 4 1589 0 discriminator 3
 1611 0034 3B68     	 ldr r3,[r7]
 1612 0036 002B     	 cmp r3,#0
 1613 0038 02D0     	 beq .L72
 1614              	 .loc 4 1589 0 discriminator 4
 1615 003a 3B6B     	 ldr r3,[r7,#48]
 1616 003c 002B     	 cmp r3,#0
 1617 003e 02D1     	 bne .L73
 1618              	.L72:
1590:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1591:../Dave/Generated/I2C_MASTER/i2c_master.c ****     status = I2C_MASTER_STATUS_FAILURE;
 1619              	 .loc 4 1591 0 is_stmt 1
 1620 0040 0123     	 movs r3,#1
 1621 0042 FB77     	 strb r3,[r7,#31]
 1622 0044 A6E0     	 b .L74
 1623              	.L73:
1592:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1593:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1594:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1595:../Dave/Generated/I2C_MASTER/i2c_master.c ****   buffer_index = 0U;
 1624              	 .loc 4 1595 0
 1625 0046 0023     	 movs r3,#0
 1626 0048 BB61     	 str r3,[r7,#24]
1596:../Dave/Generated/I2C_MASTER/i2c_master.c ****   temp_index = 0U;
 1627              	 .loc 4 1596 0
 1628 004a 0023     	 movs r3,#0
 1629 004c 7B61     	 str r3,[r7,#20]
1597:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (send_start == true)
 1630              	 .loc 4 1597 0
 1631 004e FB7A     	 ldrb r3,[r7,#11]
 1632 0050 002B     	 cmp r3,#0
 1633 0052 12D0     	 beq .L75
1598:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1599:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_READ);
 1634              	 .loc 4 1599 0
 1635 0054 F868     	 ldr r0,[r7,#12]
 1636 0056 7968     	 ldr r1,[r7,#4]
 1637 0058 0122     	 movs r2,#1
 1638 005a FFF7FEFF 	 bl I2C_MASTER_lSendStart_Or_RepeatedStart
1600:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 1639              	 .loc 4 1600 0
 1640 005e 00BF     	 nop
 1641              	.L76:
 1642              	 .loc 4 1600 0 is_stmt 0 discriminator 1
 1643 0060 F868     	 ldr r0,[r7,#12]
 1644 0062 4FF40071 	 mov r1,#512
 1645 0066 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1646 006a 0346     	 mov r3,r0
 1647 006c 002B     	 cmp r3,#0
 1648 006e F7D0     	 beq .L76
1601:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1602:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* wait for ACK */
1603:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1604:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 1649              	 .loc 4 1604 0 is_stmt 1
 1650 0070 F868     	 ldr r0,[r7,#12]
 1651 0072 4FF40071 	 mov r1,#512
 1652 0076 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
 1653              	.L75:
1605:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1606:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1607:../Dave/Generated/I2C_MASTER/i2c_master.c ****   if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 1654              	 .loc 4 1607 0
 1655 007a FB68     	 ldr r3,[r7,#12]
 1656 007c 5B68     	 ldr r3,[r3,#4]
 1657 007e 93F82630 	 ldrb r3,[r3,#38]
 1658 0082 002B     	 cmp r3,#0
 1659 0084 3AD1     	 bne .L77
1608:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1609:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (buffer_index < count)
 1660              	 .loc 4 1609 0
 1661 0086 34E0     	 b .L78
 1662              	.L83:
1610:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1611:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (((buffer_index + 1U) == count) && (send_nack == true))
 1663              	 .loc 4 1611 0
 1664 0088 BB69     	 ldr r3,[r7,#24]
 1665 008a 5A1C     	 adds r2,r3,#1
 1666 008c 3B6B     	 ldr r3,[r7,#48]
 1667 008e 9A42     	 cmp r2,r3
 1668 0090 07D1     	 bne .L79
 1669              	 .loc 4 1611 0 is_stmt 0 discriminator 1
 1670 0092 97F83830 	 ldrb r3,[r7,#56]
 1671 0096 002B     	 cmp r3,#0
 1672 0098 03D0     	 beq .L79
1612:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1613:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 1673              	 .loc 4 1613 0 is_stmt 1
 1674 009a F868     	 ldr r0,[r7,#12]
 1675 009c FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 1676 00a0 02E0     	 b .L80
 1677              	.L79:
1614:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1615:../Dave/Generated/I2C_MASTER/i2c_master.c ****     else
1616:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1617:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_ReceiveACK(handle);
 1678              	 .loc 4 1617 0
 1679 00a2 F868     	 ldr r0,[r7,#12]
 1680 00a4 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 1681              	.L80:
1618:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1619:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1620:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE
 1682              	 .loc 4 1620 0
 1683 00a8 00BF     	 nop
 1684              	.L82:
 1685              	 .loc 4 1620 0 is_stmt 0 discriminator 2
 1686 00aa F868     	 ldr r0,[r7,#12]
 1687 00ac 4FF40041 	 mov r1,#32768
 1688 00b0 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1689 00b4 0346     	 mov r3,r0
 1690 00b6 002B     	 cmp r3,#0
 1691 00b8 07D1     	 bne .L81
1621:../Dave/Generated/I2C_MASTER/i2c_master.c ****          (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 
 1692              	 .loc 4 1621 0 is_stmt 1 discriminator 1
 1693 00ba F868     	 ldr r0,[r7,#12]
 1694 00bc 4FF48041 	 mov r1,#16384
 1695 00c0 FFF7FEFF 	 bl I2C_MASTER_GetFlagStatus
 1696 00c4 0346     	 mov r3,r0
1620:../Dave/Generated/I2C_MASTER/i2c_master.c ****          (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 
 1697              	 .loc 4 1620 0 discriminator 1
 1698 00c6 002B     	 cmp r3,#0
 1699 00c8 EFD0     	 beq .L82
 1700              	.L81:
1622:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1623:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* wait for RSI */
1624:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1625:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1626:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 1701              	 .loc 4 1626 0
 1702 00ca F868     	 ldr r0,[r7,#12]
 1703 00cc 4FF40041 	 mov r1,#32768
 1704 00d0 FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1627:../Dave/Generated/I2C_MASTER/i2c_master.c ****     I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION);
 1705              	 .loc 4 1627 0
 1706 00d4 F868     	 ldr r0,[r7,#12]
 1707 00d6 4FF48041 	 mov r1,#16384
 1708 00da FFF7FEFF 	 bl I2C_MASTER_ClearFlag
1628:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1629:../Dave/Generated/I2C_MASTER/i2c_master.c ****     data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 1709              	 .loc 4 1629 0
 1710 00de BB69     	 ldr r3,[r7,#24]
 1711 00e0 5A1C     	 adds r2,r3,#1
 1712 00e2 BA61     	 str r2,[r7,#24]
 1713 00e4 3A68     	 ldr r2,[r7]
 1714 00e6 D418     	 adds r4,r2,r3
 1715 00e8 F868     	 ldr r0,[r7,#12]
 1716 00ea FFF7FEFF 	 bl I2C_MASTER_GetReceivedByte
 1717 00ee 0346     	 mov r3,r0
 1718 00f0 2370     	 strb r3,[r4]
 1719              	.L78:
1609:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 1720              	 .loc 4 1609 0
 1721 00f2 BA69     	 ldr r2,[r7,#24]
 1722 00f4 3B6B     	 ldr r3,[r7,#48]
 1723 00f6 9A42     	 cmp r2,r3
 1724 00f8 C6D3     	 bcc .L83
 1725 00fa 3FE0     	 b .L84
 1726              	.L77:
1630:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1631:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
1632:../Dave/Generated/I2C_MASTER/i2c_master.c ****   else
1633:../Dave/Generated/I2C_MASTER/i2c_master.c ****   {
1634:../Dave/Generated/I2C_MASTER/i2c_master.c ****     temp_index = buffer_index;
 1727              	 .loc 4 1634 0
 1728 00fc BB69     	 ldr r3,[r7,#24]
 1729 00fe 7B61     	 str r3,[r7,#20]
1635:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (temp_index < count)
 1730              	 .loc 4 1635 0
 1731 0100 38E0     	 b .L85
 1732              	.L95:
1636:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1637:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 1733              	 .loc 4 1637 0
 1734 0102 18E0     	 b .L86
 1735              	.L91:
1638:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1639:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* transmit each byte till index reaches to the last byte */
1640:../Dave/Generated/I2C_MASTER/i2c_master.c ****       if (temp_index < count)
 1736              	 .loc 4 1640 0
 1737 0104 7A69     	 ldr r2,[r7,#20]
 1738 0106 3B6B     	 ldr r3,[r7,#48]
 1739 0108 9A42     	 cmp r2,r3
 1740 010a 13D2     	 bcs .L87
1641:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1642:../Dave/Generated/I2C_MASTER/i2c_master.c ****         /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
1643:../Dave/Generated/I2C_MASTER/i2c_master.c ****         if (((temp_index + 1U) == count) && (send_nack == true))
 1741              	 .loc 4 1643 0
 1742 010c 7B69     	 ldr r3,[r7,#20]
 1743 010e 5A1C     	 adds r2,r3,#1
 1744 0110 3B6B     	 ldr r3,[r7,#48]
 1745 0112 9A42     	 cmp r2,r3
 1746 0114 07D1     	 bne .L88
 1747              	 .loc 4 1643 0 is_stmt 0 discriminator 1
 1748 0116 97F83830 	 ldrb r3,[r7,#56]
 1749 011a 002B     	 cmp r3,#0
 1750 011c 03D0     	 beq .L88
1644:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1645:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveNACK(handle);
 1751              	 .loc 4 1645 0 is_stmt 1
 1752 011e F868     	 ldr r0,[r7,#12]
 1753 0120 FFF7FEFF 	 bl I2C_MASTER_ReceiveNACK
 1754 0124 02E0     	 b .L89
 1755              	.L88:
1646:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1647:../Dave/Generated/I2C_MASTER/i2c_master.c ****             else
1648:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1649:../Dave/Generated/I2C_MASTER/i2c_master.c ****         I2C_MASTER_ReceiveACK(handle);
 1756              	 .loc 4 1649 0
 1757 0126 F868     	 ldr r0,[r7,#12]
 1758 0128 FFF7FEFF 	 bl I2C_MASTER_ReceiveACK
 1759              	.L89:
1650:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1651:../Dave/Generated/I2C_MASTER/i2c_master.c ****       temp_index++;
 1760              	 .loc 4 1651 0
 1761 012c 7B69     	 ldr r3,[r7,#20]
 1762 012e 0133     	 adds r3,r3,#1
 1763 0130 7B61     	 str r3,[r7,#20]
 1764 0132 00E0     	 b .L86
 1765              	.L87:
1652:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1653:../Dave/Generated/I2C_MASTER/i2c_master.c ****       else
1654:../Dave/Generated/I2C_MASTER/i2c_master.c ****       {
1655:../Dave/Generated/I2C_MASTER/i2c_master.c ****         break;
 1766              	 .loc 4 1655 0
 1767 0134 08E0     	 b .L90
 1768              	.L86:
1637:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 1769              	 .loc 4 1637 0
 1770 0136 F868     	 ldr r0,[r7,#12]
 1771 0138 FFF7FEFF 	 bl I2C_MASTER_IsTXFIFOFull
 1772 013c 0346     	 mov r3,r0
 1773 013e 83F00103 	 eor r3,r3,#1
 1774 0142 DBB2     	 uxtb r3,r3
 1775 0144 002B     	 cmp r3,#0
 1776 0146 DDD1     	 bne .L91
 1777              	.L90:
1656:../Dave/Generated/I2C_MASTER/i2c_master.c ****       }
1657:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */
1658:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1659:../Dave/Generated/I2C_MASTER/i2c_master.c ****     while (buffer_index < temp_index)
 1778              	 .loc 4 1659 0 discriminator 1
 1779 0148 10E0     	 b .L92
 1780              	.L94:
1660:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1661:../Dave/Generated/I2C_MASTER/i2c_master.c ****       /* wait for data to come in RX fifo */
1662:../Dave/Generated/I2C_MASTER/i2c_master.c ****       while (I2C_MASTER_IsRXFIFOEmpty(handle)){}
 1781              	 .loc 4 1662 0
 1782 014a 00BF     	 nop
 1783              	.L93:
 1784              	 .loc 4 1662 0 is_stmt 0 discriminator 1
 1785 014c F868     	 ldr r0,[r7,#12]
 1786 014e FFF7FEFF 	 bl I2C_MASTER_IsRXFIFOEmpty
 1787 0152 0346     	 mov r3,r0
 1788 0154 002B     	 cmp r3,#0
 1789 0156 F9D1     	 bne .L93
1663:../Dave/Generated/I2C_MASTER/i2c_master.c ****       data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 1790              	 .loc 4 1663 0 is_stmt 1
 1791 0158 BB69     	 ldr r3,[r7,#24]
 1792 015a 5A1C     	 adds r2,r3,#1
 1793 015c BA61     	 str r2,[r7,#24]
 1794 015e 3A68     	 ldr r2,[r7]
 1795 0160 D418     	 adds r4,r2,r3
 1796 0162 F868     	 ldr r0,[r7,#12]
 1797 0164 FFF7FEFF 	 bl I2C_MASTER_GetReceivedByte
 1798 0168 0346     	 mov r3,r0
 1799 016a 2370     	 strb r3,[r4]
 1800              	.L92:
1659:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 1801              	 .loc 4 1659 0
 1802 016c BA69     	 ldr r2,[r7,#24]
 1803 016e 7B69     	 ldr r3,[r7,#20]
 1804 0170 9A42     	 cmp r2,r3
 1805 0172 EAD3     	 bcc .L94
 1806              	.L85:
1635:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
 1807              	 .loc 4 1635 0
 1808 0174 7A69     	 ldr r2,[r7,#20]
 1809 0176 3B6B     	 ldr r3,[r7,#48]
 1810 0178 9A42     	 cmp r2,r3
 1811 017a C2D3     	 bcc .L95
 1812              	.L84:
1664:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1665:../Dave/Generated/I2C_MASTER/i2c_master.c ****     } /* end of while (temp_index < count) */
1666:../Dave/Generated/I2C_MASTER/i2c_master.c ****   } /* end of else */
1667:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1668:../Dave/Generated/I2C_MASTER/i2c_master.c ****     if (send_stop == true)
 1813              	 .loc 4 1668 0
 1814 017c 97F83430 	 ldrb r3,[r7,#52]
 1815 0180 002B     	 cmp r3,#0
 1816 0182 07D0     	 beq .L74
1669:../Dave/Generated/I2C_MASTER/i2c_master.c ****     {
1670:../Dave/Generated/I2C_MASTER/i2c_master.c ****       handle->runtime->bus_acquired = false;
 1817              	 .loc 4 1670 0
 1818 0184 FB68     	 ldr r3,[r7,#12]
 1819 0186 9B68     	 ldr r3,[r3,#8]
 1820 0188 0022     	 movs r2,#0
 1821 018a 83F82820 	 strb r2,[r3,#40]
1671:../Dave/Generated/I2C_MASTER/i2c_master.c ****       I2C_MASTER_SendStop(handle);
 1822              	 .loc 4 1671 0
 1823 018e F868     	 ldr r0,[r7,#12]
 1824 0190 FFF7FEFF 	 bl I2C_MASTER_SendStop
 1825              	.L74:
1672:../Dave/Generated/I2C_MASTER/i2c_master.c ****     }
1673:../Dave/Generated/I2C_MASTER/i2c_master.c ****   }
1674:../Dave/Generated/I2C_MASTER/i2c_master.c **** 
1675:../Dave/Generated/I2C_MASTER/i2c_master.c ****   return (status);
 1826              	 .loc 4 1675 0
 1827 0194 FB7F     	 ldrb r3,[r7,#31]
1676:../Dave/Generated/I2C_MASTER/i2c_master.c **** }
 1828              	 .loc 4 1676 0
 1829 0196 1846     	 mov r0,r3
 1830 0198 2437     	 adds r7,r7,#36
 1831              	.LCFI136:
 1832              	 .cfi_def_cfa_offset 12
 1833 019a BD46     	 mov sp,r7
 1834              	.LCFI137:
 1835              	 .cfi_def_cfa_register 13
 1836              	 
 1837 019c 90BD     	 pop {r4,r7,pc}
 1838              	 .cfi_endproc
 1839              	.LFE255:
 1841 019e 00BF     	 .text
 1842              	.Letext0:
 1843              	 .file 5 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1844              	 .file 6 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1845              	 .file 7 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1846              	 .file 8 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Dave/Generated/DAVE_Common.h"
 1847              	 .file 9 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 i2c_master.c
    {standard input}:20     .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_TXFIFO_IsFull:00000000 XMC_USIC_CH_TXFIFO_IsFull
    {standard input}:70     .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 $t
    {standard input}:74     .text.XMC_USIC_CH_TXFIFO_IsEmpty:00000000 XMC_USIC_CH_TXFIFO_IsEmpty
    {standard input}:119    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 $t
    {standard input}:123    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 XMC_USIC_CH_RXFIFO_IsEmpty
    {standard input}:168    .text.XMC_I2C_CH_GetStatusFlag:00000000 $t
    {standard input}:172    .text.XMC_I2C_CH_GetStatusFlag:00000000 XMC_I2C_CH_GetStatusFlag
    {standard input}:212    .text.XMC_I2C_CH_ClearStatusFlag:00000000 $t
    {standard input}:216    .text.XMC_I2C_CH_ClearStatusFlag:00000000 XMC_I2C_CH_ClearStatusFlag
    {standard input}:259    .text.I2C_MASTER_IsTXFIFOFull:00000000 $t
    {standard input}:263    .text.I2C_MASTER_IsTXFIFOFull:00000000 I2C_MASTER_IsTXFIFOFull
    {standard input}:302    .text.I2C_MASTER_IsRXFIFOEmpty:00000000 $t
    {standard input}:306    .text.I2C_MASTER_IsRXFIFOEmpty:00000000 I2C_MASTER_IsRXFIFOEmpty
    {standard input}:344    .text.I2C_MASTER_GetReceivedByte:00000000 $t
    {standard input}:348    .text.I2C_MASTER_GetReceivedByte:00000000 I2C_MASTER_GetReceivedByte
    {standard input}:386    .text.I2C_MASTER_TransmitByte:00000000 $t
    {standard input}:390    .text.I2C_MASTER_TransmitByte:00000000 I2C_MASTER_TransmitByte
    {standard input}:430    .text.I2C_MASTER_ReceiveACK:00000000 $t
    {standard input}:434    .text.I2C_MASTER_ReceiveACK:00000000 I2C_MASTER_ReceiveACK
    {standard input}:470    .text.I2C_MASTER_ReceiveNACK:00000000 $t
    {standard input}:474    .text.I2C_MASTER_ReceiveNACK:00000000 I2C_MASTER_ReceiveNACK
    {standard input}:510    .text.I2C_MASTER_SendStop:00000000 $t
    {standard input}:514    .text.I2C_MASTER_SendStop:00000000 I2C_MASTER_SendStop
    {standard input}:556    .text.I2C_MASTER_SendStart:00000000 $t
    {standard input}:560    .text.I2C_MASTER_SendStart:00000000 I2C_MASTER_SendStart
    {standard input}:610    .text.I2C_MASTER_SendRepeatedStart:00000000 $t
    {standard input}:614    .text.I2C_MASTER_SendRepeatedStart:00000000 I2C_MASTER_SendRepeatedStart
    {standard input}:664    .text.I2C_MASTER_GetAppVersion:00000000 $t
    {standard input}:669    .text.I2C_MASTER_GetAppVersion:00000000 I2C_MASTER_GetAppVersion
    {standard input}:730    .text.I2C_MASTER_Init:00000000 $t
    {standard input}:735    .text.I2C_MASTER_Init:00000000 I2C_MASTER_Init
    {standard input}:787    .text.I2C_MASTER_GetFlagStatus:00000000 $t
    {standard input}:792    .text.I2C_MASTER_GetFlagStatus:00000000 I2C_MASTER_GetFlagStatus
    {standard input}:835    .text.I2C_MASTER_ClearFlag:00000000 $t
    {standard input}:840    .text.I2C_MASTER_ClearFlag:00000000 I2C_MASTER_ClearFlag
    {standard input}:878    .text.I2C_MASTER_Transmit:00000000 $t
    {standard input}:883    .text.I2C_MASTER_Transmit:00000000 I2C_MASTER_Transmit
    {standard input}:1341   .text.I2C_MASTER_lStartTransmitPolling:00000000 I2C_MASTER_lStartTransmitPolling
    {standard input}:950    .text.I2C_MASTER_Receive:00000000 $t
    {standard input}:955    .text.I2C_MASTER_Receive:00000000 I2C_MASTER_Receive
    {standard input}:1568   .text.I2C_MASTER_lStartReceivePolling:00000000 I2C_MASTER_lStartReceivePolling
    {standard input}:1024   .text.I2C_MASTER_lSendStart_Or_RepeatedStart:00000000 $t
    {standard input}:1028   .text.I2C_MASTER_lSendStart_Or_RepeatedStart:00000000 I2C_MASTER_lSendStart_Or_RepeatedStart
    {standard input}:1095   .text.I2C_MASTER_ProtocolHandler:00000000 $t
    {standard input}:1100   .text.I2C_MASTER_ProtocolHandler:00000000 I2C_MASTER_ProtocolHandler
    {standard input}:1200   .text.I2C_MASTER_AbortTransmit:00000000 $t
    {standard input}:1205   .text.I2C_MASTER_AbortTransmit:00000000 I2C_MASTER_AbortTransmit
    {standard input}:1275   .text.I2C_MASTER_AbortReceive:00000000 $t
    {standard input}:1280   .text.I2C_MASTER_AbortReceive:00000000 I2C_MASTER_AbortReceive
    {standard input}:1337   .text.I2C_MASTER_lStartTransmitPolling:00000000 $t
    {standard input}:1564   .text.I2C_MASTER_lStartReceivePolling:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_I2C_CH_GetReceivedData
XMC_I2C_CH_MasterTransmit
XMC_I2C_CH_MasterReceiveAck
XMC_I2C_CH_MasterReceiveNack
XMC_I2C_CH_MasterStop
XMC_I2C_CH_MasterStart
XMC_I2C_CH_MasterRepeatedStart
