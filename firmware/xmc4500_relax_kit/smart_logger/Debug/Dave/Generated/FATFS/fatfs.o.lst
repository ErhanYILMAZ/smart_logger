   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "fatfs.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global FATFS_errorcodes
  20              	 .section .data.FATFS_errorcodes,"aw",%progbits
  21              	 .align 2
  24              	FATFS_errorcodes:
  25 0000 00       	 .byte 0
  26 0001 01       	 .byte 1
  27 0002 02       	 .byte 2
  28 0003 03       	 .byte 3
  29 0004 04       	 .byte 4
  30              	 .global FATFS_statuscodes
  31 0005 000000   	 .section .data.FATFS_statuscodes,"aw",%progbits
  32              	 .align 2
  35              	FATFS_statuscodes:
  36 0000 00       	 .byte 0
  37 0001 01       	 .byte 1
  38 0002 02       	 .byte 2
  39 0003 04       	 .byte 4
  40              	 .global FATFS_devicefunc
  41              	 .section .data.FATFS_devicefunc,"aw",%progbits
  42              	 .align 2
  45              	FATFS_devicefunc:
  46 0000 00000000 	 .word SDMMC_BLOCK_Initialize
  47 0004 00000000 	 .word SDMMC_BLOCK_GetStatus
  48 0008 00000000 	 .word SDMMC_BLOCK_ReadBlock
  49 000c 00000000 	 .word SDMMC_BLOCK_WriteBlock
  50 0010 00000000 	 .word SDMMC_BLOCK_Ioctl
  51              	 .section .text.FATFS_GetAppVersion,"ax",%progbits
  52              	 .align 2
  53              	 .global FATFS_GetAppVersion
  54              	 .thumb
  55              	 .thumb_func
  57              	FATFS_GetAppVersion:
  58              	.LFB225:
  59              	 .file 1 "../Dave/Generated/FATFS/fatfs.c"
   1:../Dave/Generated/FATFS/fatfs.c **** /**
   2:../Dave/Generated/FATFS/fatfs.c ****  * @file fatfs.c
   3:../Dave/Generated/FATFS/fatfs.c ****  * @date 2017-07-05
   4:../Dave/Generated/FATFS/fatfs.c ****  *
   5:../Dave/Generated/FATFS/fatfs.c ****  * NOTE:
   6:../Dave/Generated/FATFS/fatfs.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/FATFS/fatfs.c ****  */
   8:../Dave/Generated/FATFS/fatfs.c **** /**
   9:../Dave/Generated/FATFS/fatfs.c ****  * @cond
  10:../Dave/Generated/FATFS/fatfs.c ****  **************************************************************************************************
  11:../Dave/Generated/FATFS/fatfs.c ****  * FATFS v4.0.22 Helps the user to create his own file system
  12:../Dave/Generated/FATFS/fatfs.c ****  *
  13:../Dave/Generated/FATFS/fatfs.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  14:../Dave/Generated/FATFS/fatfs.c ****  * All rights reserved.
  15:../Dave/Generated/FATFS/fatfs.c ****  *
  16:../Dave/Generated/FATFS/fatfs.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/FATFS/fatfs.c ****  * following conditions are met:
  18:../Dave/Generated/FATFS/fatfs.c ****  *
  19:../Dave/Generated/FATFS/fatfs.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/FATFS/fatfs.c ****  *   disclaimer.
  21:../Dave/Generated/FATFS/fatfs.c ****  *
  22:../Dave/Generated/FATFS/fatfs.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/FATFS/fatfs.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:../Dave/Generated/FATFS/fatfs.c ****  *
  25:../Dave/Generated/FATFS/fatfs.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/FATFS/fatfs.c ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/FATFS/fatfs.c ****  *
  28:../Dave/Generated/FATFS/fatfs.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/FATFS/fatfs.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/FATFS/fatfs.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/FATFS/fatfs.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/FATFS/fatfs.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/FATFS/fatfs.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/FATFS/fatfs.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/FATFS/fatfs.c ****  *
  36:../Dave/Generated/FATFS/fatfs.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/FATFS/fatfs.c ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/FATFS/fatfs.c ****  **************************************************************************************************
  39:../Dave/Generated/FATFS/fatfs.c ****  *
  40:../Dave/Generated/FATFS/fatfs.c ****  * Change History
  41:../Dave/Generated/FATFS/fatfs.c ****  * --------------
  42:../Dave/Generated/FATFS/fatfs.c ****  *
  43:../Dave/Generated/FATFS/fatfs.c ****  * 2016-02-05:
  44:../Dave/Generated/FATFS/fatfs.c ****  *     - Initial version<br>
  45:../Dave/Generated/FATFS/fatfs.c ****  * 2016-04-12:
  46:../Dave/Generated/FATFS/fatfs.c ****  *     - Removed the array FATFS_devicefunc
  47:../Dave/Generated/FATFS/fatfs.c ****  * 2018-07-05:
  48:../Dave/Generated/FATFS/fatfs.c ****  *     - Updated to FatFS v0.13b_p1
  49:../Dave/Generated/FATFS/fatfs.c ****  * @endcond
  50:../Dave/Generated/FATFS/fatfs.c ****  *
  51:../Dave/Generated/FATFS/fatfs.c ****  */
  52:../Dave/Generated/FATFS/fatfs.c **** 
  53:../Dave/Generated/FATFS/fatfs.c **** 
  54:../Dave/Generated/FATFS/fatfs.c **** /**************************************************************************************************
  55:../Dave/Generated/FATFS/fatfs.c ****  * HEADER FILES
  56:../Dave/Generated/FATFS/fatfs.c ****  **************************************************************************************************
  57:../Dave/Generated/FATFS/fatfs.c **** #include "fatfs.h"
  58:../Dave/Generated/FATFS/fatfs.c **** #include "ff_Src/ffconf.h"
  59:../Dave/Generated/FATFS/fatfs.c **** #include "ff_Src/diskio.h"
  60:../Dave/Generated/FATFS/fatfs.c **** #if (FATFS_STANDARDLIBRARY == 1U)
  61:../Dave/Generated/FATFS/fatfs.c **** #include "sltha.h"
  62:../Dave/Generated/FATFS/fatfs.c **** #endif
  63:../Dave/Generated/FATFS/fatfs.c **** #if (FF_FS_NORTC == 1U)
  64:../Dave/Generated/FATFS/fatfs.c **** #include <time.h>
  65:../Dave/Generated/FATFS/fatfs.c **** #endif
  66:../Dave/Generated/FATFS/fatfs.c **** /**************************************************************************************************
  67:../Dave/Generated/FATFS/fatfs.c **** 	* MACROS
  68:../Dave/Generated/FATFS/fatfs.c ****  **************************************************************************************************
  69:../Dave/Generated/FATFS/fatfs.c **** DRESULT FATFS_errorcodes[5] =   {
  70:../Dave/Generated/FATFS/fatfs.c ****                                   RES_OK ,
  71:../Dave/Generated/FATFS/fatfs.c ****                                   RES_ERROR,
  72:../Dave/Generated/FATFS/fatfs.c ****                                   RES_WRPRT,
  73:../Dave/Generated/FATFS/fatfs.c ****                                   RES_NOTRDY,
  74:../Dave/Generated/FATFS/fatfs.c ****                                   RES_PARERR
  75:../Dave/Generated/FATFS/fatfs.c ****                                 };
  76:../Dave/Generated/FATFS/fatfs.c **** DSTATUS FATFS_statuscodes[4] =  {
  77:../Dave/Generated/FATFS/fatfs.c ****                                   (DSTATUS)0,
  78:../Dave/Generated/FATFS/fatfs.c ****                                   (DSTATUS)STA_NOINIT,
  79:../Dave/Generated/FATFS/fatfs.c ****                                   (DSTATUS)STA_NODISK,
  80:../Dave/Generated/FATFS/fatfs.c ****                                   (DSTATUS)STA_PROTECT
  81:../Dave/Generated/FATFS/fatfs.c ****                                 };
  82:../Dave/Generated/FATFS/fatfs.c **** 
  83:../Dave/Generated/FATFS/fatfs.c **** FATFS_DEVICEFUNCTYPE_t FATFS_devicefunc =  {
  84:../Dave/Generated/FATFS/fatfs.c ****                                               SDMMC_BLOCK_Initialize,
  85:../Dave/Generated/FATFS/fatfs.c ****                                               SDMMC_BLOCK_GetStatus,
  86:../Dave/Generated/FATFS/fatfs.c ****                                               SDMMC_BLOCK_ReadBlock,
  87:../Dave/Generated/FATFS/fatfs.c ****                                               SDMMC_BLOCK_WriteBlock,
  88:../Dave/Generated/FATFS/fatfs.c ****                                               SDMMC_BLOCK_Ioctl
  89:../Dave/Generated/FATFS/fatfs.c ****                                            };
  90:../Dave/Generated/FATFS/fatfs.c **** /**************************************************************************************************
  91:../Dave/Generated/FATFS/fatfs.c ****  * LOCAL DATA
  92:../Dave/Generated/FATFS/fatfs.c ****  **************************************************************************************************
  93:../Dave/Generated/FATFS/fatfs.c **** 
  94:../Dave/Generated/FATFS/fatfs.c **** /**************************************************************************************************
  95:../Dave/Generated/FATFS/fatfs.c ****  * LOCAL ROUTINES
  96:../Dave/Generated/FATFS/fatfs.c ****  **************************************************************************************************
  97:../Dave/Generated/FATFS/fatfs.c **** extern SDMMC_BLOCK_t* const sdmmc_block[FF_VOLUMES];
  98:../Dave/Generated/FATFS/fatfs.c **** /**************************************************************************************************
  99:../Dave/Generated/FATFS/fatfs.c **** * API IMPLEMENTATION
 100:../Dave/Generated/FATFS/fatfs.c **** ***************************************************************************************************
 101:../Dave/Generated/FATFS/fatfs.c **** /*
 102:../Dave/Generated/FATFS/fatfs.c ****  * API to retrieve the version of the FATFS APP
 103:../Dave/Generated/FATFS/fatfs.c ****  */
 104:../Dave/Generated/FATFS/fatfs.c **** DAVE_APP_VERSION_t FATFS_GetAppVersion(void)
 105:../Dave/Generated/FATFS/fatfs.c **** {
  60              	 .loc 1 105 0
  61              	 .cfi_startproc
  62              	 
  63              	 
  64              	 
  65 0000 80B4     	 push {r7}
  66              	.LCFI0:
  67              	 .cfi_def_cfa_offset 4
  68              	 .cfi_offset 7,-4
  69 0002 83B0     	 sub sp,sp,#12
  70              	.LCFI1:
  71              	 .cfi_def_cfa_offset 16
  72 0004 00AF     	 add r7,sp,#0
  73              	.LCFI2:
  74              	 .cfi_def_cfa_register 7
 106:../Dave/Generated/FATFS/fatfs.c ****   DAVE_APP_VERSION_t version;
 107:../Dave/Generated/FATFS/fatfs.c **** 
 108:../Dave/Generated/FATFS/fatfs.c ****   version.major = (uint8_t)FATFS_MAJOR_VERSION;
  75              	 .loc 1 108 0
  76 0006 0423     	 movs r3,#4
  77 0008 3B70     	 strb r3,[r7]
 109:../Dave/Generated/FATFS/fatfs.c ****   version.minor = (uint8_t)FATFS_MINOR_VERSION;
  78              	 .loc 1 109 0
  79 000a 0023     	 movs r3,#0
  80 000c 7B70     	 strb r3,[r7,#1]
 110:../Dave/Generated/FATFS/fatfs.c ****   version.patch = (uint8_t)FATFS_PATCH_VERSION;
  81              	 .loc 1 110 0
  82 000e 1623     	 movs r3,#22
  83 0010 BB70     	 strb r3,[r7,#2]
 111:../Dave/Generated/FATFS/fatfs.c **** 
 112:../Dave/Generated/FATFS/fatfs.c ****   return (version);
  84              	 .loc 1 112 0
  85 0012 3B1D     	 adds r3,r7,#4
  86 0014 3A46     	 mov r2,r7
  87 0016 1268     	 ldr r2,[r2]
  88 0018 1146     	 mov r1,r2
  89 001a 1980     	 strh r1,[r3]
  90 001c 0233     	 adds r3,r3,#2
  91 001e 120C     	 lsrs r2,r2,#16
  92 0020 1A70     	 strb r2,[r3]
  93 0022 0023     	 movs r3,#0
  94 0024 3A79     	 ldrb r2,[r7,#4]
  95 0026 62F30703 	 bfi r3,r2,#0,#8
  96 002a 7A79     	 ldrb r2,[r7,#5]
  97 002c 62F30F23 	 bfi r3,r2,#8,#8
  98 0030 BA79     	 ldrb r2,[r7,#6]
  99 0032 62F31743 	 bfi r3,r2,#16,#8
 113:../Dave/Generated/FATFS/fatfs.c **** }
 100              	 .loc 1 113 0
 101 0036 1846     	 mov r0,r3
 102 0038 0C37     	 adds r7,r7,#12
 103              	.LCFI3:
 104              	 .cfi_def_cfa_offset 4
 105 003a BD46     	 mov sp,r7
 106              	.LCFI4:
 107              	 .cfi_def_cfa_register 13
 108              	 
 109 003c 5DF8047B 	 ldr r7,[sp],#4
 110              	.LCFI5:
 111              	 .cfi_restore 7
 112              	 .cfi_def_cfa_offset 0
 113 0040 7047     	 bx lr
 114              	 .cfi_endproc
 115              	.LFE225:
 117 0042 00BF     	 .section .text.FATFS_Init,"ax",%progbits
 118              	 .align 2
 119              	 .global FATFS_Init
 120              	 .thumb
 121              	 .thumb_func
 123              	FATFS_Init:
 124              	.LFB226:
 114:../Dave/Generated/FATFS/fatfs.c **** 
 115:../Dave/Generated/FATFS/fatfs.c **** /*
 116:../Dave/Generated/FATFS/fatfs.c ****  * API to initialize the FATFS APP
 117:../Dave/Generated/FATFS/fatfs.c ****  */
 118:../Dave/Generated/FATFS/fatfs.c **** FATFS_STATUS_t FATFS_Init(FATFS_t *const handle)
 119:../Dave/Generated/FATFS/fatfs.c **** {
 125              	 .loc 1 119 0
 126              	 .cfi_startproc
 127              	 
 128              	 
 129 0000 80B5     	 push {r7,lr}
 130              	.LCFI6:
 131              	 .cfi_def_cfa_offset 8
 132              	 .cfi_offset 7,-8
 133              	 .cfi_offset 14,-4
 134 0002 84B0     	 sub sp,sp,#16
 135              	.LCFI7:
 136              	 .cfi_def_cfa_offset 24
 137 0004 00AF     	 add r7,sp,#0
 138              	.LCFI8:
 139              	 .cfi_def_cfa_register 7
 140 0006 7860     	 str r0,[r7,#4]
 120:../Dave/Generated/FATFS/fatfs.c ****   XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
 121:../Dave/Generated/FATFS/fatfs.c ****   FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
 141              	 .loc 1 121 0
 142 0008 0023     	 movs r3,#0
 143 000a FB73     	 strb r3,[r7,#15]
 122:../Dave/Generated/FATFS/fatfs.c ****   if (handle->initialized == false)
 144              	 .loc 1 122 0
 145 000c 7B68     	 ldr r3,[r7,#4]
 146 000e 1B79     	 ldrb r3,[r3,#4]
 147 0010 83F00103 	 eor r3,r3,#1
 148 0014 DBB2     	 uxtb r3,r3
 149 0016 002B     	 cmp r3,#0
 150 0018 22D0     	 beq .L4
 151              	.LBB2:
 123:../Dave/Generated/FATFS/fatfs.c ****   {
 124:../Dave/Generated/FATFS/fatfs.c ****   for (int i = 0; i<FF_VOLUMES; i++)
 152              	 .loc 1 124 0
 153 001a 0023     	 movs r3,#0
 154 001c BB60     	 str r3,[r7,#8]
 155 001e 0EE0     	 b .L5
 156              	.L6:
 125:../Dave/Generated/FATFS/fatfs.c ****   {
 126:../Dave/Generated/FATFS/fatfs.c ****     status |= (FATFS_STATUS_t)SDMMC_BLOCK_Init(sdmmc_block[i]);
 157              	 .loc 1 126 0 discriminator 3
 158 0020 134A     	 ldr r2,.L10
 159 0022 BB68     	 ldr r3,[r7,#8]
 160 0024 52F82330 	 ldr r3,[r2,r3,lsl#2]
 161 0028 1846     	 mov r0,r3
 162 002a FFF7FEFF 	 bl SDMMC_BLOCK_Init
 163 002e 0346     	 mov r3,r0
 164 0030 1A46     	 mov r2,r3
 165 0032 FB7B     	 ldrb r3,[r7,#15]
 166 0034 1343     	 orrs r3,r3,r2
 167 0036 FB73     	 strb r3,[r7,#15]
 124:../Dave/Generated/FATFS/fatfs.c ****   {
 168              	 .loc 1 124 0 discriminator 3
 169 0038 BB68     	 ldr r3,[r7,#8]
 170 003a 0133     	 adds r3,r3,#1
 171 003c BB60     	 str r3,[r7,#8]
 172              	.L5:
 124:../Dave/Generated/FATFS/fatfs.c ****   {
 173              	 .loc 1 124 0 is_stmt 0 discriminator 1
 174 003e BB68     	 ldr r3,[r7,#8]
 175 0040 002B     	 cmp r3,#0
 176 0042 EDD0     	 beq .L6
 177              	.LBE2:
 127:../Dave/Generated/FATFS/fatfs.c ****   }
 128:../Dave/Generated/FATFS/fatfs.c **** 
 129:../Dave/Generated/FATFS/fatfs.c **** #if (FATFS_STANDARDLIBRARY == 1U)
 130:../Dave/Generated/FATFS/fatfs.c ****   SLTHA_Init();
 131:../Dave/Generated/FATFS/fatfs.c **** #endif
 132:../Dave/Generated/FATFS/fatfs.c **** 
 133:../Dave/Generated/FATFS/fatfs.c **** #if (FF_FS_NORTC == 0U)
 134:../Dave/Generated/FATFS/fatfs.c ****   if (status == FATFS_STATUS_SUCCESS)
 178              	 .loc 1 134 0 is_stmt 1
 179 0044 FB7B     	 ldrb r3,[r7,#15]
 180 0046 002B     	 cmp r3,#0
 181 0048 06D1     	 bne .L7
 135:../Dave/Generated/FATFS/fatfs.c ****   {
 136:../Dave/Generated/FATFS/fatfs.c ****     status = (FATFS_STATUS_t)RTC_Init(handle->rtc_handle);
 182              	 .loc 1 136 0
 183 004a 7B68     	 ldr r3,[r7,#4]
 184 004c 1B68     	 ldr r3,[r3]
 185 004e 1846     	 mov r0,r3
 186 0050 FFF7FEFF 	 bl RTC_Init
 187 0054 0346     	 mov r3,r0
 188 0056 FB73     	 strb r3,[r7,#15]
 189              	.L7:
 137:../Dave/Generated/FATFS/fatfs.c ****   }
 138:../Dave/Generated/FATFS/fatfs.c **** #endif
 139:../Dave/Generated/FATFS/fatfs.c ****     handle->initialized = true;
 190              	 .loc 1 139 0
 191 0058 7B68     	 ldr r3,[r7,#4]
 192 005a 0122     	 movs r2,#1
 193 005c 1A71     	 strb r2,[r3,#4]
 194 005e 01E0     	 b .L8
 195              	.L4:
 140:../Dave/Generated/FATFS/fatfs.c ****   }
 141:../Dave/Generated/FATFS/fatfs.c ****   else
 142:../Dave/Generated/FATFS/fatfs.c ****   {
 143:../Dave/Generated/FATFS/fatfs.c ****     status = FATFS_STATUS_FAILURE;
 196              	 .loc 1 143 0
 197 0060 0123     	 movs r3,#1
 198 0062 FB73     	 strb r3,[r7,#15]
 199              	.L8:
 144:../Dave/Generated/FATFS/fatfs.c ****   }
 145:../Dave/Generated/FATFS/fatfs.c ****   return (status);
 200              	 .loc 1 145 0
 201 0064 FB7B     	 ldrb r3,[r7,#15]
 146:../Dave/Generated/FATFS/fatfs.c **** }
 202              	 .loc 1 146 0
 203 0066 1846     	 mov r0,r3
 204 0068 1037     	 adds r7,r7,#16
 205              	.LCFI9:
 206              	 .cfi_def_cfa_offset 8
 207 006a BD46     	 mov sp,r7
 208              	.LCFI10:
 209              	 .cfi_def_cfa_register 13
 210              	 
 211 006c 80BD     	 pop {r7,pc}
 212              	.L11:
 213 006e 00BF     	 .align 2
 214              	.L10:
 215 0070 00000000 	 .word sdmmc_block
 216              	 .cfi_endproc
 217              	.LFE226:
 219              	 .section .text.disk_initialize,"ax",%progbits
 220              	 .align 2
 221              	 .global disk_initialize
 222              	 .thumb
 223              	 .thumb_func
 225              	disk_initialize:
 226              	.LFB227:
 147:../Dave/Generated/FATFS/fatfs.c **** 
 148:../Dave/Generated/FATFS/fatfs.c **** /*
 149:../Dave/Generated/FATFS/fatfs.c ****  * The function performs the disk initialization.
 150:../Dave/Generated/FATFS/fatfs.c ****  */
 151:../Dave/Generated/FATFS/fatfs.c **** DSTATUS disk_initialize(BYTE drive) /* Physical drive number (0..) */
 152:../Dave/Generated/FATFS/fatfs.c **** {
 227              	 .loc 1 152 0
 228              	 .cfi_startproc
 229              	 
 230              	 
 231 0000 80B5     	 push {r7,lr}
 232              	.LCFI11:
 233              	 .cfi_def_cfa_offset 8
 234              	 .cfi_offset 7,-8
 235              	 .cfi_offset 14,-4
 236 0002 84B0     	 sub sp,sp,#16
 237              	.LCFI12:
 238              	 .cfi_def_cfa_offset 24
 239 0004 00AF     	 add r7,sp,#0
 240              	.LCFI13:
 241              	 .cfi_def_cfa_register 7
 242 0006 0346     	 mov r3,r0
 243 0008 FB71     	 strb r3,[r7,#7]
 153:../Dave/Generated/FATFS/fatfs.c ****   DSTATUS diskstatus = (DSTATUS)0;
 244              	 .loc 1 153 0
 245 000a 0023     	 movs r3,#0
 246 000c FB73     	 strb r3,[r7,#15]
 154:../Dave/Generated/FATFS/fatfs.c ****   uint32_t status;
 155:../Dave/Generated/FATFS/fatfs.c **** 
 156:../Dave/Generated/FATFS/fatfs.c ****   /* If drive number is greater than the maximum drives allowed  */
 157:../Dave/Generated/FATFS/fatfs.c ****   if (drive >= FF_VOLUMES)
 247              	 .loc 1 157 0
 248 000e FB79     	 ldrb r3,[r7,#7]
 249 0010 002B     	 cmp r3,#0
 250 0012 02D0     	 beq .L13
 158:../Dave/Generated/FATFS/fatfs.c ****   {
 159:../Dave/Generated/FATFS/fatfs.c ****     diskstatus = (DSTATUS)((uint8_t)STA_NODISK | (uint8_t)STA_NOINIT);
 251              	 .loc 1 159 0
 252 0014 0323     	 movs r3,#3
 253 0016 FB73     	 strb r3,[r7,#15]
 254 0018 0EE0     	 b .L14
 255              	.L13:
 160:../Dave/Generated/FATFS/fatfs.c ****   }
 161:../Dave/Generated/FATFS/fatfs.c ****   else
 162:../Dave/Generated/FATFS/fatfs.c ****   {
 163:../Dave/Generated/FATFS/fatfs.c ****     /* Call the Initialize function. */
 164:../Dave/Generated/FATFS/fatfs.c ****     status = FATFS_devicefunc.InitializePtr(sdmmc_block[drive]);
 256              	 .loc 1 164 0
 257 001a 0A4B     	 ldr r3,.L16
 258 001c 1B68     	 ldr r3,[r3]
 259 001e FA79     	 ldrb r2,[r7,#7]
 260 0020 0949     	 ldr r1,.L16+4
 261 0022 51F82220 	 ldr r2,[r1,r2,lsl#2]
 262 0026 1046     	 mov r0,r2
 263 0028 9847     	 blx r3
 264 002a 0346     	 mov r3,r0
 265 002c BB60     	 str r3,[r7,#8]
 165:../Dave/Generated/FATFS/fatfs.c ****     /* Fatfs to Device Abstraction Layer Error Code Mapping */
 166:../Dave/Generated/FATFS/fatfs.c ****     diskstatus = FATFS_statuscodes[status];
 266              	 .loc 1 166 0
 267 002e 074A     	 ldr r2,.L16+8
 268 0030 BB68     	 ldr r3,[r7,#8]
 269 0032 1344     	 add r3,r3,r2
 270 0034 1B78     	 ldrb r3,[r3]
 271 0036 FB73     	 strb r3,[r7,#15]
 272              	.L14:
 167:../Dave/Generated/FATFS/fatfs.c ****   }
 168:../Dave/Generated/FATFS/fatfs.c ****   return (diskstatus);
 273              	 .loc 1 168 0
 274 0038 FB7B     	 ldrb r3,[r7,#15]
 169:../Dave/Generated/FATFS/fatfs.c **** }
 275              	 .loc 1 169 0
 276 003a 1846     	 mov r0,r3
 277 003c 1037     	 adds r7,r7,#16
 278              	.LCFI14:
 279              	 .cfi_def_cfa_offset 8
 280 003e BD46     	 mov sp,r7
 281              	.LCFI15:
 282              	 .cfi_def_cfa_register 13
 283              	 
 284 0040 80BD     	 pop {r7,pc}
 285              	.L17:
 286 0042 00BF     	 .align 2
 287              	.L16:
 288 0044 00000000 	 .word FATFS_devicefunc
 289 0048 00000000 	 .word sdmmc_block
 290 004c 00000000 	 .word FATFS_statuscodes
 291              	 .cfi_endproc
 292              	.LFE227:
 294              	 .section .text.disk_status,"ax",%progbits
 295              	 .align 2
 296              	 .global disk_status
 297              	 .thumb
 298              	 .thumb_func
 300              	disk_status:
 301              	.LFB228:
 170:../Dave/Generated/FATFS/fatfs.c **** 
 171:../Dave/Generated/FATFS/fatfs.c **** /*
 172:../Dave/Generated/FATFS/fatfs.c ****  * The function gets the disk status information.
 173:../Dave/Generated/FATFS/fatfs.c ****  */
 174:../Dave/Generated/FATFS/fatfs.c **** DSTATUS disk_status(BYTE drive)		/* Physical drive number (0..) */
 175:../Dave/Generated/FATFS/fatfs.c **** {
 302              	 .loc 1 175 0
 303              	 .cfi_startproc
 304              	 
 305              	 
 306 0000 80B5     	 push {r7,lr}
 307              	.LCFI16:
 308              	 .cfi_def_cfa_offset 8
 309              	 .cfi_offset 7,-8
 310              	 .cfi_offset 14,-4
 311 0002 84B0     	 sub sp,sp,#16
 312              	.LCFI17:
 313              	 .cfi_def_cfa_offset 24
 314 0004 00AF     	 add r7,sp,#0
 315              	.LCFI18:
 316              	 .cfi_def_cfa_register 7
 317 0006 0346     	 mov r3,r0
 318 0008 FB71     	 strb r3,[r7,#7]
 176:../Dave/Generated/FATFS/fatfs.c ****   DSTATUS diskstatus;
 177:../Dave/Generated/FATFS/fatfs.c ****   uint32_t status;
 178:../Dave/Generated/FATFS/fatfs.c ****   /* If drive number is greater than the maximum drives allowed  */
 179:../Dave/Generated/FATFS/fatfs.c ****   if (drive >= (uint8_t)FF_VOLUMES)
 319              	 .loc 1 179 0
 320 000a FB79     	 ldrb r3,[r7,#7]
 321 000c 002B     	 cmp r3,#0
 322 000e 02D0     	 beq .L19
 180:../Dave/Generated/FATFS/fatfs.c ****   {
 181:../Dave/Generated/FATFS/fatfs.c ****     diskstatus = (DSTATUS)((uint8_t)STA_NODISK | (uint8_t)STA_NOINIT);
 323              	 .loc 1 181 0
 324 0010 0323     	 movs r3,#3
 325 0012 FB73     	 strb r3,[r7,#15]
 326 0014 0EE0     	 b .L20
 327              	.L19:
 182:../Dave/Generated/FATFS/fatfs.c ****   }
 183:../Dave/Generated/FATFS/fatfs.c ****   else
 184:../Dave/Generated/FATFS/fatfs.c ****   {
 185:../Dave/Generated/FATFS/fatfs.c ****     /* Call the Initialize function.*/
 186:../Dave/Generated/FATFS/fatfs.c ****     status = FATFS_devicefunc.GetStatusPtr(sdmmc_block[drive]);
 328              	 .loc 1 186 0
 329 0016 0A4B     	 ldr r3,.L22
 330 0018 5B68     	 ldr r3,[r3,#4]
 331 001a FA79     	 ldrb r2,[r7,#7]
 332 001c 0949     	 ldr r1,.L22+4
 333 001e 51F82220 	 ldr r2,[r1,r2,lsl#2]
 334 0022 1046     	 mov r0,r2
 335 0024 9847     	 blx r3
 336 0026 0346     	 mov r3,r0
 337 0028 BB60     	 str r3,[r7,#8]
 187:../Dave/Generated/FATFS/fatfs.c ****     /* Fatfs to Block Layer Error Code Mapping */
 188:../Dave/Generated/FATFS/fatfs.c ****     diskstatus = FATFS_statuscodes[status];
 338              	 .loc 1 188 0
 339 002a 074A     	 ldr r2,.L22+8
 340 002c BB68     	 ldr r3,[r7,#8]
 341 002e 1344     	 add r3,r3,r2
 342 0030 1B78     	 ldrb r3,[r3]
 343 0032 FB73     	 strb r3,[r7,#15]
 344              	.L20:
 189:../Dave/Generated/FATFS/fatfs.c ****   }
 190:../Dave/Generated/FATFS/fatfs.c ****   return (diskstatus);
 345              	 .loc 1 190 0
 346 0034 FB7B     	 ldrb r3,[r7,#15]
 191:../Dave/Generated/FATFS/fatfs.c **** }
 347              	 .loc 1 191 0
 348 0036 1846     	 mov r0,r3
 349 0038 1037     	 adds r7,r7,#16
 350              	.LCFI19:
 351              	 .cfi_def_cfa_offset 8
 352 003a BD46     	 mov sp,r7
 353              	.LCFI20:
 354              	 .cfi_def_cfa_register 13
 355              	 
 356 003c 80BD     	 pop {r7,pc}
 357              	.L23:
 358 003e 00BF     	 .align 2
 359              	.L22:
 360 0040 00000000 	 .word FATFS_devicefunc
 361 0044 00000000 	 .word sdmmc_block
 362 0048 00000000 	 .word FATFS_statuscodes
 363              	 .cfi_endproc
 364              	.LFE228:
 366              	 .section .text.disk_read,"ax",%progbits
 367              	 .align 2
 368              	 .global disk_read
 369              	 .thumb
 370              	 .thumb_func
 372              	disk_read:
 373              	.LFB229:
 192:../Dave/Generated/FATFS/fatfs.c **** 
 193:../Dave/Generated/FATFS/fatfs.c **** /*
 194:../Dave/Generated/FATFS/fatfs.c ****  * The function reads the blocks of data from the disk.
 195:../Dave/Generated/FATFS/fatfs.c ****  */
 196:../Dave/Generated/FATFS/fatfs.c **** DRESULT disk_read(
 197:../Dave/Generated/FATFS/fatfs.c ****   BYTE drive,		  /* Physical drive number (0..) */
 198:../Dave/Generated/FATFS/fatfs.c ****   BYTE *buffer,	      /* Data buffer to store read data */
 199:../Dave/Generated/FATFS/fatfs.c ****   DWORD sectornumber, /* Sector address (LBA) */
 200:../Dave/Generated/FATFS/fatfs.c ****   UINT sectorcount    /* Number of sectors to read */
 201:../Dave/Generated/FATFS/fatfs.c **** )
 202:../Dave/Generated/FATFS/fatfs.c **** {
 374              	 .loc 1 202 0
 375              	 .cfi_startproc
 376              	 
 377              	 
 378 0000 90B5     	 push {r4,r7,lr}
 379              	.LCFI21:
 380              	 .cfi_def_cfa_offset 12
 381              	 .cfi_offset 4,-12
 382              	 .cfi_offset 7,-8
 383              	 .cfi_offset 14,-4
 384 0002 87B0     	 sub sp,sp,#28
 385              	.LCFI22:
 386              	 .cfi_def_cfa_offset 40
 387 0004 00AF     	 add r7,sp,#0
 388              	.LCFI23:
 389              	 .cfi_def_cfa_register 7
 390 0006 B960     	 str r1,[r7,#8]
 391 0008 7A60     	 str r2,[r7,#4]
 392 000a 3B60     	 str r3,[r7]
 393 000c 0346     	 mov r3,r0
 394 000e FB73     	 strb r3,[r7,#15]
 203:../Dave/Generated/FATFS/fatfs.c ****   DRESULT diskresult;
 204:../Dave/Generated/FATFS/fatfs.c ****   uint32_t result;
 205:../Dave/Generated/FATFS/fatfs.c ****   /* If drive number is greater than the maximum drives allowed  */
 206:../Dave/Generated/FATFS/fatfs.c ****   if (drive >= (uint8_t)FF_VOLUMES )
 395              	 .loc 1 206 0
 396 0010 FB7B     	 ldrb r3,[r7,#15]
 397 0012 002B     	 cmp r3,#0
 398 0014 02D0     	 beq .L25
 207:../Dave/Generated/FATFS/fatfs.c ****   {
 208:../Dave/Generated/FATFS/fatfs.c ****     diskresult = RES_PARERR;
 399              	 .loc 1 208 0
 400 0016 0423     	 movs r3,#4
 401 0018 FB75     	 strb r3,[r7,#23]
 402 001a 18E0     	 b .L26
 403              	.L25:
 209:../Dave/Generated/FATFS/fatfs.c ****   }
 210:../Dave/Generated/FATFS/fatfs.c ****   /* If sector count is less than 1. Minimum 1 sector is needed*/
 211:../Dave/Generated/FATFS/fatfs.c ****   else if (sectorcount < (uint8_t)1)
 404              	 .loc 1 211 0
 405 001c 3B68     	 ldr r3,[r7]
 406 001e 002B     	 cmp r3,#0
 407 0020 02D1     	 bne .L27
 212:../Dave/Generated/FATFS/fatfs.c ****   {
 213:../Dave/Generated/FATFS/fatfs.c ****     diskresult = RES_PARERR;
 408              	 .loc 1 213 0
 409 0022 0423     	 movs r3,#4
 410 0024 FB75     	 strb r3,[r7,#23]
 411 0026 12E0     	 b .L26
 412              	.L27:
 214:../Dave/Generated/FATFS/fatfs.c ****   }
 215:../Dave/Generated/FATFS/fatfs.c ****   /*Call the ReadBlkPtr function.*/
 216:../Dave/Generated/FATFS/fatfs.c ****   else
 217:../Dave/Generated/FATFS/fatfs.c ****   {
 218:../Dave/Generated/FATFS/fatfs.c ****     result = (uint32_t)FATFS_devicefunc.ReadBlkPtr(sdmmc_block[drive], (uint8_t *)buffer,
 413              	 .loc 1 218 0
 414 0028 0B4B     	 ldr r3,.L29
 415 002a 9C68     	 ldr r4,[r3,#8]
 416 002c FB7B     	 ldrb r3,[r7,#15]
 417 002e 0B4A     	 ldr r2,.L29+4
 418 0030 52F82320 	 ldr r2,[r2,r3,lsl#2]
 419 0034 3B68     	 ldr r3,[r7]
 420 0036 DBB2     	 uxtb r3,r3
 421 0038 1046     	 mov r0,r2
 422 003a B968     	 ldr r1,[r7,#8]
 423 003c 7A68     	 ldr r2,[r7,#4]
 424 003e A047     	 blx r4
 425 0040 0346     	 mov r3,r0
 426 0042 3B61     	 str r3,[r7,#16]
 219:../Dave/Generated/FATFS/fatfs.c ****                                                           (uint32_t)sectornumber, sectorcount);
 220:../Dave/Generated/FATFS/fatfs.c **** 
 221:../Dave/Generated/FATFS/fatfs.c ****     /* FatFs to Device Abstraction Layer Error Code Mapping */
 222:../Dave/Generated/FATFS/fatfs.c ****     diskresult = FATFS_errorcodes[result];
 427              	 .loc 1 222 0
 428 0044 064A     	 ldr r2,.L29+8
 429 0046 3B69     	 ldr r3,[r7,#16]
 430 0048 1344     	 add r3,r3,r2
 431 004a 1B78     	 ldrb r3,[r3]
 432 004c FB75     	 strb r3,[r7,#23]
 433              	.L26:
 223:../Dave/Generated/FATFS/fatfs.c ****   }
 224:../Dave/Generated/FATFS/fatfs.c ****   return (diskresult);
 434              	 .loc 1 224 0
 435 004e FB7D     	 ldrb r3,[r7,#23]
 225:../Dave/Generated/FATFS/fatfs.c **** }
 436              	 .loc 1 225 0
 437 0050 1846     	 mov r0,r3
 438 0052 1C37     	 adds r7,r7,#28
 439              	.LCFI24:
 440              	 .cfi_def_cfa_offset 12
 441 0054 BD46     	 mov sp,r7
 442              	.LCFI25:
 443              	 .cfi_def_cfa_register 13
 444              	 
 445 0056 90BD     	 pop {r4,r7,pc}
 446              	.L30:
 447              	 .align 2
 448              	.L29:
 449 0058 00000000 	 .word FATFS_devicefunc
 450 005c 00000000 	 .word sdmmc_block
 451 0060 00000000 	 .word FATFS_errorcodes
 452              	 .cfi_endproc
 453              	.LFE229:
 455              	 .section .text.disk_write,"ax",%progbits
 456              	 .align 2
 457              	 .global disk_write
 458              	 .thumb
 459              	 .thumb_func
 461              	disk_write:
 462              	.LFB230:
 226:../Dave/Generated/FATFS/fatfs.c **** 
 227:../Dave/Generated/FATFS/fatfs.c **** /*
 228:../Dave/Generated/FATFS/fatfs.c ****  * The function writes the blocks of data on the disk.
 229:../Dave/Generated/FATFS/fatfs.c ****  */
 230:../Dave/Generated/FATFS/fatfs.c **** DRESULT disk_write(
 231:../Dave/Generated/FATFS/fatfs.c ****   BYTE drive,			/* Physical drive number (0..) */
 232:../Dave/Generated/FATFS/fatfs.c ****   const BYTE *buffer,	/* Data to be written */
 233:../Dave/Generated/FATFS/fatfs.c ****   DWORD sectornumber,	/* Sector address (LBA) */
 234:../Dave/Generated/FATFS/fatfs.c ****   UINT sectorcount	    /* Number of sectors to write */
 235:../Dave/Generated/FATFS/fatfs.c **** )
 236:../Dave/Generated/FATFS/fatfs.c **** {
 463              	 .loc 1 236 0
 464              	 .cfi_startproc
 465              	 
 466              	 
 467 0000 90B5     	 push {r4,r7,lr}
 468              	.LCFI26:
 469              	 .cfi_def_cfa_offset 12
 470              	 .cfi_offset 4,-12
 471              	 .cfi_offset 7,-8
 472              	 .cfi_offset 14,-4
 473 0002 87B0     	 sub sp,sp,#28
 474              	.LCFI27:
 475              	 .cfi_def_cfa_offset 40
 476 0004 00AF     	 add r7,sp,#0
 477              	.LCFI28:
 478              	 .cfi_def_cfa_register 7
 479 0006 B960     	 str r1,[r7,#8]
 480 0008 7A60     	 str r2,[r7,#4]
 481 000a 3B60     	 str r3,[r7]
 482 000c 0346     	 mov r3,r0
 483 000e FB73     	 strb r3,[r7,#15]
 237:../Dave/Generated/FATFS/fatfs.c ****   DRESULT diskresult;
 238:../Dave/Generated/FATFS/fatfs.c ****   uint32_t result;
 239:../Dave/Generated/FATFS/fatfs.c ****   /* If drive number is greater than the maximum drives allowed  */
 240:../Dave/Generated/FATFS/fatfs.c ****   if (drive >= (uint8_t)FF_VOLUMES)
 484              	 .loc 1 240 0
 485 0010 FB7B     	 ldrb r3,[r7,#15]
 486 0012 002B     	 cmp r3,#0
 487 0014 02D0     	 beq .L32
 241:../Dave/Generated/FATFS/fatfs.c ****   {
 242:../Dave/Generated/FATFS/fatfs.c ****     diskresult = RES_PARERR;
 488              	 .loc 1 242 0
 489 0016 0423     	 movs r3,#4
 490 0018 FB75     	 strb r3,[r7,#23]
 491 001a 18E0     	 b .L33
 492              	.L32:
 243:../Dave/Generated/FATFS/fatfs.c ****   }
 244:../Dave/Generated/FATFS/fatfs.c ****   /* If sector count is less than 1. Minimum 1 sector is needed*/
 245:../Dave/Generated/FATFS/fatfs.c ****   else if (sectorcount < (uint8_t)1)
 493              	 .loc 1 245 0
 494 001c 3B68     	 ldr r3,[r7]
 495 001e 002B     	 cmp r3,#0
 496 0020 02D1     	 bne .L34
 246:../Dave/Generated/FATFS/fatfs.c ****   {
 247:../Dave/Generated/FATFS/fatfs.c ****     diskresult = RES_PARERR;
 497              	 .loc 1 247 0
 498 0022 0423     	 movs r3,#4
 499 0024 FB75     	 strb r3,[r7,#23]
 500 0026 12E0     	 b .L33
 501              	.L34:
 248:../Dave/Generated/FATFS/fatfs.c ****   }
 249:../Dave/Generated/FATFS/fatfs.c ****   /*Call the WriteBlkPtr function.*/
 250:../Dave/Generated/FATFS/fatfs.c ****   else
 251:../Dave/Generated/FATFS/fatfs.c ****   {
 252:../Dave/Generated/FATFS/fatfs.c ****     result = (uint32_t)FATFS_devicefunc.WriteBlkPtr(sdmmc_block[drive],(uint8_t *)buffer, 
 502              	 .loc 1 252 0
 503 0028 0B4B     	 ldr r3,.L36
 504 002a DC68     	 ldr r4,[r3,#12]
 505 002c FB7B     	 ldrb r3,[r7,#15]
 506 002e 0B4A     	 ldr r2,.L36+4
 507 0030 52F82320 	 ldr r2,[r2,r3,lsl#2]
 508 0034 3B68     	 ldr r3,[r7]
 509 0036 DBB2     	 uxtb r3,r3
 510 0038 1046     	 mov r0,r2
 511 003a B968     	 ldr r1,[r7,#8]
 512 003c 7A68     	 ldr r2,[r7,#4]
 513 003e A047     	 blx r4
 514 0040 0346     	 mov r3,r0
 515 0042 3B61     	 str r3,[r7,#16]
 253:../Dave/Generated/FATFS/fatfs.c ****                                                            (uint32_t)sectornumber, sectorcount);
 254:../Dave/Generated/FATFS/fatfs.c ****     /* FatFs to Device Abstraction Layer Error Code Mapping */
 255:../Dave/Generated/FATFS/fatfs.c ****     diskresult = FATFS_errorcodes[result];
 516              	 .loc 1 255 0
 517 0044 064A     	 ldr r2,.L36+8
 518 0046 3B69     	 ldr r3,[r7,#16]
 519 0048 1344     	 add r3,r3,r2
 520 004a 1B78     	 ldrb r3,[r3]
 521 004c FB75     	 strb r3,[r7,#23]
 522              	.L33:
 256:../Dave/Generated/FATFS/fatfs.c ****   }
 257:../Dave/Generated/FATFS/fatfs.c ****   return (diskresult);
 523              	 .loc 1 257 0
 524 004e FB7D     	 ldrb r3,[r7,#23]
 258:../Dave/Generated/FATFS/fatfs.c **** }
 525              	 .loc 1 258 0
 526 0050 1846     	 mov r0,r3
 527 0052 1C37     	 adds r7,r7,#28
 528              	.LCFI29:
 529              	 .cfi_def_cfa_offset 12
 530 0054 BD46     	 mov sp,r7
 531              	.LCFI30:
 532              	 .cfi_def_cfa_register 13
 533              	 
 534 0056 90BD     	 pop {r4,r7,pc}
 535              	.L37:
 536              	 .align 2
 537              	.L36:
 538 0058 00000000 	 .word FATFS_devicefunc
 539 005c 00000000 	 .word sdmmc_block
 540 0060 00000000 	 .word FATFS_errorcodes
 541              	 .cfi_endproc
 542              	.LFE230:
 544              	 .section .text.disk_ioctl,"ax",%progbits
 545              	 .align 2
 546              	 .global disk_ioctl
 547              	 .thumb
 548              	 .thumb_func
 550              	disk_ioctl:
 551              	.LFB231:
 259:../Dave/Generated/FATFS/fatfs.c **** 
 260:../Dave/Generated/FATFS/fatfs.c **** /*
 261:../Dave/Generated/FATFS/fatfs.c ****  * The function performs the various IOCTL operation.
 262:../Dave/Generated/FATFS/fatfs.c ****  */
 263:../Dave/Generated/FATFS/fatfs.c **** DRESULT disk_ioctl(
 264:../Dave/Generated/FATFS/fatfs.c ****   BYTE drive,		/* Physical drive number (0..) */
 265:../Dave/Generated/FATFS/fatfs.c ****   BYTE command,	    /* Control code */
 266:../Dave/Generated/FATFS/fatfs.c ****   void *buffer      /* Buffer to send/receive control data */
 267:../Dave/Generated/FATFS/fatfs.c **** )
 268:../Dave/Generated/FATFS/fatfs.c **** {
 552              	 .loc 1 268 0
 553              	 .cfi_startproc
 554              	 
 555              	 
 556 0000 80B5     	 push {r7,lr}
 557              	.LCFI31:
 558              	 .cfi_def_cfa_offset 8
 559              	 .cfi_offset 7,-8
 560              	 .cfi_offset 14,-4
 561 0002 84B0     	 sub sp,sp,#16
 562              	.LCFI32:
 563              	 .cfi_def_cfa_offset 24
 564 0004 00AF     	 add r7,sp,#0
 565              	.LCFI33:
 566              	 .cfi_def_cfa_register 7
 567 0006 0346     	 mov r3,r0
 568 0008 3A60     	 str r2,[r7]
 569 000a FB71     	 strb r3,[r7,#7]
 570 000c 0B46     	 mov r3,r1
 571 000e BB71     	 strb r3,[r7,#6]
 269:../Dave/Generated/FATFS/fatfs.c ****   DRESULT diskresult;
 270:../Dave/Generated/FATFS/fatfs.c ****   uint32_t result;
 271:../Dave/Generated/FATFS/fatfs.c ****   if (drive >= (uint8_t)FF_VOLUMES)
 572              	 .loc 1 271 0
 573 0010 FB79     	 ldrb r3,[r7,#7]
 574 0012 002B     	 cmp r3,#0
 575 0014 02D0     	 beq .L39
 272:../Dave/Generated/FATFS/fatfs.c ****   {
 273:../Dave/Generated/FATFS/fatfs.c ****     diskresult = RES_PARERR;
 576              	 .loc 1 273 0
 577 0016 0423     	 movs r3,#4
 578 0018 FB73     	 strb r3,[r7,#15]
 579 001a 11E0     	 b .L40
 580              	.L39:
 274:../Dave/Generated/FATFS/fatfs.c ****   }
 275:../Dave/Generated/FATFS/fatfs.c ****   /*Call the Ioctl function.*/
 276:../Dave/Generated/FATFS/fatfs.c ****   else
 277:../Dave/Generated/FATFS/fatfs.c ****   {
 278:../Dave/Generated/FATFS/fatfs.c ****     result = FATFS_devicefunc.IoctlPtr(sdmmc_block[drive],command, buffer);
 581              	 .loc 1 278 0
 582 001c 0B4B     	 ldr r3,.L42
 583 001e 1B69     	 ldr r3,[r3,#16]
 584 0020 FA79     	 ldrb r2,[r7,#7]
 585 0022 0B49     	 ldr r1,.L42+4
 586 0024 51F82210 	 ldr r1,[r1,r2,lsl#2]
 587 0028 BA79     	 ldrb r2,[r7,#6]
 588 002a 0846     	 mov r0,r1
 589 002c 1146     	 mov r1,r2
 590 002e 3A68     	 ldr r2,[r7]
 591 0030 9847     	 blx r3
 592 0032 0346     	 mov r3,r0
 593 0034 BB60     	 str r3,[r7,#8]
 279:../Dave/Generated/FATFS/fatfs.c ****     /* FatFs to Block Layer Error Code Mapping */
 280:../Dave/Generated/FATFS/fatfs.c ****     diskresult = FATFS_errorcodes[result];
 594              	 .loc 1 280 0
 595 0036 074A     	 ldr r2,.L42+8
 596 0038 BB68     	 ldr r3,[r7,#8]
 597 003a 1344     	 add r3,r3,r2
 598 003c 1B78     	 ldrb r3,[r3]
 599 003e FB73     	 strb r3,[r7,#15]
 600              	.L40:
 281:../Dave/Generated/FATFS/fatfs.c ****   }
 282:../Dave/Generated/FATFS/fatfs.c ****   return (diskresult);
 601              	 .loc 1 282 0
 602 0040 FB7B     	 ldrb r3,[r7,#15]
 283:../Dave/Generated/FATFS/fatfs.c **** }
 603              	 .loc 1 283 0
 604 0042 1846     	 mov r0,r3
 605 0044 1037     	 adds r7,r7,#16
 606              	.LCFI34:
 607              	 .cfi_def_cfa_offset 8
 608 0046 BD46     	 mov sp,r7
 609              	.LCFI35:
 610              	 .cfi_def_cfa_register 13
 611              	 
 612 0048 80BD     	 pop {r7,pc}
 613              	.L43:
 614 004a 00BF     	 .align 2
 615              	.L42:
 616 004c 00000000 	 .word FATFS_devicefunc
 617 0050 00000000 	 .word sdmmc_block
 618 0054 00000000 	 .word FATFS_errorcodes
 619              	 .cfi_endproc
 620              	.LFE231:
 622              	 .section .text.get_fattime,"ax",%progbits
 623              	 .align 2
 624              	 .global get_fattime
 625              	 .thumb
 626              	 .thumb_func
 628              	get_fattime:
 629              	.LFB232:
 284:../Dave/Generated/FATFS/fatfs.c **** 
 285:../Dave/Generated/FATFS/fatfs.c **** /**
 286:../Dave/Generated/FATFS/fatfs.c ****  * This is a real time clock service to be called from FatFs module.
 287:../Dave/Generated/FATFS/fatfs.c ****  */
 288:../Dave/Generated/FATFS/fatfs.c **** DWORD get_fattime()
 289:../Dave/Generated/FATFS/fatfs.c **** {
 630              	 .loc 1 289 0
 631              	 .cfi_startproc
 632              	 
 633              	 
 634 0000 80B5     	 push {r7,lr}
 635              	.LCFI36:
 636              	 .cfi_def_cfa_offset 8
 637              	 .cfi_offset 7,-8
 638              	 .cfi_offset 14,-4
 639 0002 82B0     	 sub sp,sp,#8
 640              	.LCFI37:
 641              	 .cfi_def_cfa_offset 16
 642 0004 00AF     	 add r7,sp,#0
 643              	.LCFI38:
 644              	 .cfi_def_cfa_register 7
 290:../Dave/Generated/FATFS/fatfs.c **** #if ((FF_FS_NORTC == 0U) && (FF_FS_READONLY == 0U))
 291:../Dave/Generated/FATFS/fatfs.c ****   XMC_RTC_TIME_t Time = {{0UL}};
 645              	 .loc 1 291 0
 646 0006 0023     	 movs r3,#0
 647 0008 3B60     	 str r3,[r7]
 648 000a 0023     	 movs r3,#0
 649 000c 7B60     	 str r3,[r7,#4]
 292:../Dave/Generated/FATFS/fatfs.c **** 
 293:../Dave/Generated/FATFS/fatfs.c ****   RTC_GetTime(&Time);
 650              	 .loc 1 293 0
 651 000e 3B46     	 mov r3,r7
 652 0010 1846     	 mov r0,r3
 653 0012 FFF7FEFF 	 bl RTC_GetTime
 294:../Dave/Generated/FATFS/fatfs.c **** 
 295:../Dave/Generated/FATFS/fatfs.c ****   /* Pack date and time into a DWORD variable */
 296:../Dave/Generated/FATFS/fatfs.c ****   return (((DWORD)(Time.year - 1980UL) << 25UL) | ((DWORD)Time.month << 21UL) | ((DWORD)Time.days <
 654              	 .loc 1 296 0
 655 0016 FB88     	 ldrh r3,[r7,#6]
 656 0018 A3F2BC73 	 subw r3,r3,#1980
 657 001c 5A06     	 lsls r2,r3,#25
 658 001e 7B79     	 ldrb r3,[r7,#5]
 659 0020 C3F30303 	 ubfx r3,r3,#0,#4
 660 0024 DBB2     	 uxtb r3,r3
 661 0026 5B05     	 lsls r3,r3,#21
 662 0028 1A43     	 orrs r2,r2,r3
 663 002a FB78     	 ldrb r3,[r7,#3]
 664 002c C3F30403 	 ubfx r3,r3,#0,#5
 665 0030 DBB2     	 uxtb r3,r3
 666 0032 1B04     	 lsls r3,r3,#16
 667 0034 1A43     	 orrs r2,r2,r3
 297:../Dave/Generated/FATFS/fatfs.c ****           | ((DWORD)Time.hours << 11UL)
 668              	 .loc 1 297 0
 669 0036 BB78     	 ldrb r3,[r7,#2]
 670 0038 C3F30403 	 ubfx r3,r3,#0,#5
 671 003c DBB2     	 uxtb r3,r3
 672 003e DB02     	 lsls r3,r3,#11
 673 0040 1A43     	 orrs r2,r2,r3
 298:../Dave/Generated/FATFS/fatfs.c ****           | ((DWORD)Time.minutes << 5UL)
 674              	 .loc 1 298 0
 675 0042 7B78     	 ldrb r3,[r7,#1]
 676 0044 C3F30503 	 ubfx r3,r3,#0,#6
 677 0048 DBB2     	 uxtb r3,r3
 678 004a 5B01     	 lsls r3,r3,#5
 679 004c 1343     	 orrs r3,r3,r2
 299:../Dave/Generated/FATFS/fatfs.c ****           | ((DWORD)Time.seconds >> 1UL));
 680              	 .loc 1 299 0
 681 004e 3A78     	 ldrb r2,[r7]
 682 0050 C2F30502 	 ubfx r2,r2,#0,#6
 683 0054 D2B2     	 uxtb r2,r2
 684 0056 5208     	 lsrs r2,r2,#1
 685 0058 D2B2     	 uxtb r2,r2
 296:../Dave/Generated/FATFS/fatfs.c ****           | ((DWORD)Time.hours << 11UL)
 686              	 .loc 1 296 0
 687 005a 1343     	 orrs r3,r3,r2
 300:../Dave/Generated/FATFS/fatfs.c **** #endif
 301:../Dave/Generated/FATFS/fatfs.c **** 
 302:../Dave/Generated/FATFS/fatfs.c **** #if (FF_FS_NORTC == 1U)
 303:../Dave/Generated/FATFS/fatfs.c ****   struct tm stdtime;
 304:../Dave/Generated/FATFS/fatfs.c ****   DWORD current_time;
 305:../Dave/Generated/FATFS/fatfs.c **** 
 306:../Dave/Generated/FATFS/fatfs.c ****   current_time = (((stdtime.tm_year - 1980UL) << 25UL)  | (stdtime.tm_mon << 21UL) | (stdtime.tm_md
 307:../Dave/Generated/FATFS/fatfs.c ****                    (stdtime.tm_hour << 11UL) | (stdtime.tm_min << 5UL) | (stdtime.tm_sec >> 1UL));
 308:../Dave/Generated/FATFS/fatfs.c **** 
 309:../Dave/Generated/FATFS/fatfs.c ****   return (current_time);
 310:../Dave/Generated/FATFS/fatfs.c **** #endif
 311:../Dave/Generated/FATFS/fatfs.c **** }
 688              	 .loc 1 311 0
 689 005c 1846     	 mov r0,r3
 690 005e 0837     	 adds r7,r7,#8
 691              	.LCFI39:
 692              	 .cfi_def_cfa_offset 8
 693 0060 BD46     	 mov sp,r7
 694              	.LCFI40:
 695              	 .cfi_def_cfa_register 13
 696              	 
 697 0062 80BD     	 pop {r7,pc}
 698              	 .cfi_endproc
 699              	.LFE232:
 701              	 .text
 702              	.Letext0:
 703              	 .file 2 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 704              	 .file 3 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 705              	 .file 4 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Dave/Generated/DAVE_Common.h"
 706              	 .file 5 "../Dave/Generated/FATFS/ff_Src/integer.h"
 707              	 .file 6 "../Dave/Generated/FATFS/ff_Src/diskio.h"
 708              	 .file 7 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc/xmc_sdmmc.h"
 709              	 .file 8 "c:\\users\\erhan\\desktop\\smartlogger\\design\\firmware\\xmc4500\\smart_logger\\smart_logger\\dave\\generated\\systimer\\systimer.h"
 710              	 .file 9 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Dave/Generated/SDMMC_BLOCK/SDMMC_BLOCK.h"
 711              	 .file 10 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc/xmc_rtc.h"
 712              	 .file 11 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Dave/Generated/RTC/rtc.h"
 713              	 .file 12 "../Dave/Generated/FATFS/fatfs.h"
 714              	 .file 13 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/CMSIS/Include/core_cm4.h"
 715              	 .file 14 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 fatfs.c
    {standard input}:24     .data.FATFS_errorcodes:00000000 FATFS_errorcodes
    {standard input}:21     .data.FATFS_errorcodes:00000000 $d
    {standard input}:35     .data.FATFS_statuscodes:00000000 FATFS_statuscodes
    {standard input}:32     .data.FATFS_statuscodes:00000000 $d
    {standard input}:45     .data.FATFS_devicefunc:00000000 FATFS_devicefunc
    {standard input}:42     .data.FATFS_devicefunc:00000000 $d
    {standard input}:52     .text.FATFS_GetAppVersion:00000000 $t
    {standard input}:57     .text.FATFS_GetAppVersion:00000000 FATFS_GetAppVersion
    {standard input}:118    .text.FATFS_Init:00000000 $t
    {standard input}:123    .text.FATFS_Init:00000000 FATFS_Init
    {standard input}:215    .text.FATFS_Init:00000070 $d
    {standard input}:220    .text.disk_initialize:00000000 $t
    {standard input}:225    .text.disk_initialize:00000000 disk_initialize
    {standard input}:288    .text.disk_initialize:00000044 $d
    {standard input}:295    .text.disk_status:00000000 $t
    {standard input}:300    .text.disk_status:00000000 disk_status
    {standard input}:360    .text.disk_status:00000040 $d
    {standard input}:367    .text.disk_read:00000000 $t
    {standard input}:372    .text.disk_read:00000000 disk_read
    {standard input}:449    .text.disk_read:00000058 $d
    {standard input}:456    .text.disk_write:00000000 $t
    {standard input}:461    .text.disk_write:00000000 disk_write
    {standard input}:538    .text.disk_write:00000058 $d
    {standard input}:545    .text.disk_ioctl:00000000 $t
    {standard input}:550    .text.disk_ioctl:00000000 disk_ioctl
    {standard input}:616    .text.disk_ioctl:0000004c $d
    {standard input}:623    .text.get_fattime:00000000 $t
    {standard input}:628    .text.get_fattime:00000000 get_fattime
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SDMMC_BLOCK_Initialize
SDMMC_BLOCK_GetStatus
SDMMC_BLOCK_ReadBlock
SDMMC_BLOCK_WriteBlock
SDMMC_BLOCK_Ioctl
SDMMC_BLOCK_Init
RTC_Init
sdmmc_block
RTC_GetTime
