   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "ff.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.FatFs,"aw",%nobits
  20              	 .align 2
  23              	FatFs:
  24 0000 00000000 	 .space 4
  25              	 .section .bss.Fsid,"aw",%nobits
  26              	 .align 1
  29              	Fsid:
  30 0000 0000     	 .space 2
  31              	 .section .bss.CurrVol,"aw",%nobits
  34              	CurrVol:
  35 0000 00       	 .space 1
  36              	 .section .bss.Files,"aw",%nobits
  37              	 .align 2
  40              	Files:
  41 0000 00000000 	 .space 16
  41      00000000 
  41      00000000 
  41      00000000 
  42              	 .section .rodata.LfnOfs,"a",%progbits
  43              	 .align 2
  46              	LfnOfs:
  47 0000 01       	 .byte 1
  48 0001 03       	 .byte 3
  49 0002 05       	 .byte 5
  50 0003 07       	 .byte 7
  51 0004 09       	 .byte 9
  52 0005 0E       	 .byte 14
  53 0006 10       	 .byte 16
  54 0007 12       	 .byte 18
  55 0008 14       	 .byte 20
  56 0009 16       	 .byte 22
  57 000a 18       	 .byte 24
  58 000b 1C       	 .byte 28
  59 000c 1E       	 .byte 30
  60 000d 000000   	 .section .bss.LfnBuf,"aw",%nobits
  61              	 .align 2
  64              	LfnBuf:
  65 0000 00000000 	 .space 512
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              	 .section .rodata.ExCvt,"a",%progbits
  67              	 .align 2
  70              	ExCvt:
  71 0000 43       	 .byte 67
  72 0001 55       	 .byte 85
  73 0002 45       	 .byte 69
  74 0003 41       	 .byte 65
  75 0004 41       	 .byte 65
  76 0005 41       	 .byte 65
  77 0006 41       	 .byte 65
  78 0007 43       	 .byte 67
  79 0008 45       	 .byte 69
  80 0009 45       	 .byte 69
  81 000a 45       	 .byte 69
  82 000b 49       	 .byte 73
  83 000c 49       	 .byte 73
  84 000d 49       	 .byte 73
  85 000e 41       	 .byte 65
  86 000f 41       	 .byte 65
  87 0010 45       	 .byte 69
  88 0011 92       	 .byte -110
  89 0012 92       	 .byte -110
  90 0013 4F       	 .byte 79
  91 0014 4F       	 .byte 79
  92 0015 4F       	 .byte 79
  93 0016 55       	 .byte 85
  94 0017 55       	 .byte 85
  95 0018 59       	 .byte 89
  96 0019 4F       	 .byte 79
  97 001a 55       	 .byte 85
  98 001b 4F       	 .byte 79
  99 001c 9C       	 .byte -100
 100 001d 4F       	 .byte 79
 101 001e 9E       	 .byte -98
 102 001f 9F       	 .byte -97
 103 0020 41       	 .byte 65
 104 0021 49       	 .byte 73
 105 0022 4F       	 .byte 79
 106 0023 55       	 .byte 85
 107 0024 A5       	 .byte -91
 108 0025 A5       	 .byte -91
 109 0026 A6       	 .byte -90
 110 0027 A7       	 .byte -89
 111 0028 A8       	 .byte -88
 112 0029 A9       	 .byte -87
 113 002a AA       	 .byte -86
 114 002b AB       	 .byte -85
 115 002c AC       	 .byte -84
 116 002d AD       	 .byte -83
 117 002e AE       	 .byte -82
 118 002f AF       	 .byte -81
 119 0030 B0       	 .byte -80
 120 0031 B1       	 .byte -79
 121 0032 B2       	 .byte -78
 122 0033 B3       	 .byte -77
 123 0034 B4       	 .byte -76
 124 0035 41       	 .byte 65
 125 0036 41       	 .byte 65
 126 0037 41       	 .byte 65
 127 0038 B8       	 .byte -72
 128 0039 B9       	 .byte -71
 129 003a BA       	 .byte -70
 130 003b BB       	 .byte -69
 131 003c BC       	 .byte -68
 132 003d BD       	 .byte -67
 133 003e BE       	 .byte -66
 134 003f BF       	 .byte -65
 135 0040 C0       	 .byte -64
 136 0041 C1       	 .byte -63
 137 0042 C2       	 .byte -62
 138 0043 C3       	 .byte -61
 139 0044 C4       	 .byte -60
 140 0045 C5       	 .byte -59
 141 0046 41       	 .byte 65
 142 0047 41       	 .byte 65
 143 0048 C8       	 .byte -56
 144 0049 C9       	 .byte -55
 145 004a CA       	 .byte -54
 146 004b CB       	 .byte -53
 147 004c CC       	 .byte -52
 148 004d CD       	 .byte -51
 149 004e CE       	 .byte -50
 150 004f CF       	 .byte -49
 151 0050 D1       	 .byte -47
 152 0051 D1       	 .byte -47
 153 0052 45       	 .byte 69
 154 0053 45       	 .byte 69
 155 0054 45       	 .byte 69
 156 0055 49       	 .byte 73
 157 0056 49       	 .byte 73
 158 0057 49       	 .byte 73
 159 0058 49       	 .byte 73
 160 0059 D9       	 .byte -39
 161 005a DA       	 .byte -38
 162 005b DB       	 .byte -37
 163 005c DC       	 .byte -36
 164 005d DD       	 .byte -35
 165 005e 49       	 .byte 73
 166 005f DF       	 .byte -33
 167 0060 4F       	 .byte 79
 168 0061 E1       	 .byte -31
 169 0062 4F       	 .byte 79
 170 0063 4F       	 .byte 79
 171 0064 4F       	 .byte 79
 172 0065 4F       	 .byte 79
 173 0066 E6       	 .byte -26
 174 0067 E8       	 .byte -24
 175 0068 E8       	 .byte -24
 176 0069 55       	 .byte 85
 177 006a 55       	 .byte 85
 178 006b 55       	 .byte 85
 179 006c 59       	 .byte 89
 180 006d 59       	 .byte 89
 181 006e EE       	 .byte -18
 182 006f EF       	 .byte -17
 183 0070 F0       	 .byte -16
 184 0071 F1       	 .byte -15
 185 0072 F2       	 .byte -14
 186 0073 F3       	 .byte -13
 187 0074 F4       	 .byte -12
 188 0075 F5       	 .byte -11
 189 0076 F6       	 .byte -10
 190 0077 F7       	 .byte -9
 191 0078 F8       	 .byte -8
 192 0079 F9       	 .byte -7
 193 007a FA       	 .byte -6
 194 007b FB       	 .byte -5
 195 007c FC       	 .byte -4
 196 007d FD       	 .byte -3
 197 007e FE       	 .byte -2
 198 007f FF       	 .byte -1
 199              	 .section .text.ld_word,"ax",%progbits
 200              	 .align 2
 201              	 .thumb
 202              	 .thumb_func
 204              	ld_word:
 205              	.LFB0:
 206              	 .file 1 "../Dave/Generated/FATFS/ff_Src/ff.c"
   1:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------------------------------------------/
   2:../Dave/Generated/FATFS/ff_Src/ff.c **** /  FatFs - Generic FAT Filesystem Module  R0.13b                              /
   3:../Dave/Generated/FATFS/ff_Src/ff.c **** /-----------------------------------------------------------------------------/
   4:../Dave/Generated/FATFS/ff_Src/ff.c **** /
   5:../Dave/Generated/FATFS/ff_Src/ff.c **** / Copyright (C) 2018, ChaN, all right reserved.
   6:../Dave/Generated/FATFS/ff_Src/ff.c **** /
   7:../Dave/Generated/FATFS/ff_Src/ff.c **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:../Dave/Generated/FATFS/ff_Src/ff.c **** / source and binary forms, with or without modification, are permitted provided
   9:../Dave/Generated/FATFS/ff_Src/ff.c **** / that the following condition is met:
  10:../Dave/Generated/FATFS/ff_Src/ff.c **** /
  11:../Dave/Generated/FATFS/ff_Src/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  12:../Dave/Generated/FATFS/ff_Src/ff.c **** /    this condition and the following disclaimer.
  13:../Dave/Generated/FATFS/ff_Src/ff.c **** /
  14:../Dave/Generated/FATFS/ff_Src/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  15:../Dave/Generated/FATFS/ff_Src/ff.c **** / and any warranties related to this software are DISCLAIMED.
  16:../Dave/Generated/FATFS/ff_Src/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:../Dave/Generated/FATFS/ff_Src/ff.c **** / by use of this software.
  18:../Dave/Generated/FATFS/ff_Src/ff.c **** /
  19:../Dave/Generated/FATFS/ff_Src/ff.c **** /----------------------------------------------------------------------------*/
  20:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  21:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  22:../Dave/Generated/FATFS/ff_Src/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
  23:../Dave/Generated/FATFS/ff_Src/ff.c **** #include "diskio.h"		/* Declarations of device I/O functions */
  24:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  25:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  26:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------------------------
  27:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  28:../Dave/Generated/FATFS/ff_Src/ff.c ****    Module Private Definitions
  29:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  30:../Dave/Generated/FATFS/ff_Src/ff.c **** ---------------------------------------------------------------------------*/
  31:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  32:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_DEFINED != 63463	/* Revision ID */
  33:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong include file (ff.h).
  34:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
  35:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  36:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  37:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Character code support macros */
  38:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsUpper(c)		((c) >= 'A' && (c) <= 'Z')
  39:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsLower(c)		((c) >= 'a' && (c) <= 'z')
  40:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsDigit(c)		((c) >= '0' && (c) <= '9')
  41:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsSurrogate(c)	((c) >= 0xD800 && (c) <= 0xDFFF)
  42:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsSurrogateH(c)	((c) >= 0xD800 && (c) <= 0xDBFF)
  43:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsSurrogateL(c)	((c) >= 0xDC00 && (c) <= 0xDFFF)
  44:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  45:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  46:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Additional file attribute bits for internal use */
  47:../Dave/Generated/FATFS/ff_Src/ff.c **** #define AM_VOL		0x08	/* Volume label */
  48:../Dave/Generated/FATFS/ff_Src/ff.c **** #define AM_LFN		0x0F	/* LFN entry */
  49:../Dave/Generated/FATFS/ff_Src/ff.c **** #define AM_MASK		0x3F	/* Mask of defined bits */
  50:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  51:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  52:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Additional file access control and file status flags for internal use */
  53:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
  54:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FA_MODIFIED	0x40	/* File has been modified */
  55:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
  56:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  57:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  58:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Name status flags in fn[11] */
  59:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NSFLAG		11		/* Index of the name status byte */
  60:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
  61:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
  62:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_LAST		0x04	/* Last segment */
  63:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
  64:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
  65:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_DOT		0x20	/* Dot entry */
  66:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_NOLFN	0x40	/* Do not find LFN */
  67:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_NONAME	0x80	/* Not followed */
  68:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  69:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  70:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Limits and boundaries */
  71:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_DIR		0x200000		/* Max size of FAT directory */
  72:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_DIR_EX	0x10000000		/* Max size of exFAT directory */
  73:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_FAT12	0xFF5			/* Max FAT12 clusters (differs from specs, but right for real DOS/Windows
  74:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_FAT16	0xFFF5			/* Max FAT16 clusters (differs from specs, but right for real DOS/Window
  75:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_FAT32	0x0FFFFFF5		/* Max FAT32 clusters (not specified, practical limit) */
  76:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_EXFAT	0x7FFFFFFD		/* Max exFAT clusters (differs from specs, implementation limit) */
  77:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  78:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  79:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FatFs refers the FAT structure as simple byte array instead of structure member
  80:../Dave/Generated/FATFS/ff_Src/ff.c **** / because the C structure is not binary compatible between different platforms */
  81:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  82:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
  83:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_OEMName			3		/* OEM name (8-byte) */
  84:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
  85:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
  86:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
  87:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
  88:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT [entry] (WORD) */
  89:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
  90:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
  91:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
  92:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_SecPerTrk		24		/* Number of sectors per track for int13h [sector] (WORD) */
  93:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
  94:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
  95:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
  96:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
  97:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_NTres			37		/* WindowsNT error flag (BYTE) */
  98:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
  99:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 100:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 101:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_FilSysType		54		/* Filesystem type string (8-byte) */
 102:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootCode			62		/* Boot code (448-byte) */
 103:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_55AA				510		/* Signature word (WORD) */
 104:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 105:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 106:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 107:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FSVer32			42		/* FAT32: Filesystem version (WORD) */
 108:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 109:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 110:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 111:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 112:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 113:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 114:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 115:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 116:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_FilSysType32		82		/* FAT32: Filesystem type string (8-byte) */
 117:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 118:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 119:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 120:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
 121:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 122:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 123:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 124:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 125:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 126:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RootClusEx		96		/* exFAT: Root directory start cluster (DWORD) */
 127:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 128:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FSVerEx			104		/* exFAT: Filesystem version (WORD) */
 129:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (WORD) */
 130:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
 131:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 132:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 133:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
 134:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 135:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 136:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 137:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 138:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_Name			0		/* Short file name (11-byte) */
 139:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_Attr			11		/* Attribute (BYTE) */
 140:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_NTres			12		/* Lower case flag (BYTE) */
 141:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 142:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_CrtTime			14		/* Created time (DWORD) */
 143:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 144:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 145:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_ModTime			22		/* Modified time (DWORD) */
 146:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 147:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_FileSize		28		/* File size (DWORD) */
 148:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Ord			0		/* LFN: LFN order and LLE flag (BYTE) */
 149:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Attr			11		/* LFN: LFN attribute (BYTE) */
 150:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Type			12		/* LFN: Entry type (BYTE) */
 151:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Chksum			13		/* LFN: Checksum of the SFN (BYTE) */
 152:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_FstClusLO		26		/* LFN: MBZ field (WORD) */
 153:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_Type			0		/* exFAT: Type of exFAT directory entry (BYTE) */
 154:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NumLabel		1		/* exFAT: Number of volume label characters (BYTE) */
 155:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_Label			2		/* exFAT: Volume label (11-WORD) */
 156:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CaseSum		4		/* exFAT: Sum of case conversion table (DWORD) */
 157:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NumSec			1		/* exFAT: Number of secondary entries (BYTE) */
 158:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_SetSum			2		/* exFAT: Sum of the set of directory entries (WORD) */
 159:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_Attr			4		/* exFAT: File attribute (WORD) */
 160:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CrtTime		8		/* exFAT: Created time (DWORD) */
 161:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ModTime		12		/* exFAT: Modified time (DWORD) */
 162:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_AccTime		16		/* exFAT: Last accessed time (DWORD) */
 163:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CrtTime10		20		/* exFAT: Created time subsecond (BYTE) */
 164:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ModTime10		21		/* exFAT: Modified time subsecond (BYTE) */
 165:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CrtTZ			22		/* exFAT: Created timezone (BYTE) */
 166:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ModTZ			23		/* exFAT: Modified timezone (BYTE) */
 167:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_AccTZ			24		/* exFAT: Last accessed timezone (BYTE) */
 168:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_GenFlags		33		/* exFAT: General secondary flags (BYTE) */
 169:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NumName		35		/* exFAT: Number of file name characters (BYTE) */
 170:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NameHash		36		/* exFAT: Hash of file name (WORD) */
 171:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ValidFileSize	40		/* exFAT: Valid file size (QWORD) */
 172:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_FstClus		52		/* exFAT: First cluster of the file data (DWORD) */
 173:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_FileSize		56		/* exFAT: File/Directory size (QWORD) */
 174:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 175:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SZDIRE				32		/* Size of a directory entry */
 176:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
 177:../Dave/Generated/FATFS/ff_Src/ff.c **** #define RDDEM				0x05	/* Replacement of the character collides with DDEM */
 178:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 179:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 180:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 181:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 182:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 183:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 184:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 185:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 186:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SZ_PTE				16		/* MBR: Size of a partition table entry */
 187:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 188:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StHead			1		/* MBR PTE: Start head */
 189:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 190:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
 191:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_System			4		/* MBR PTE: System ID */
 192:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_EdHead			5		/* MBR PTE: End head */
 193:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 194:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 195:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 196:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 197:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 198:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 199:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Post process on fatal error in the file operations */
 200:../Dave/Generated/FATFS/ff_Src/ff.c **** #define ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 201:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 202:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 203:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Re-entrancy related */
 204:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
 205:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 1
 206:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
 207:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 208:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 209:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 210:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_FF(fs, res)	return res
 211:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 212:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 213:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 214:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Definitions of volume - physical location conversion */
 215:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MULTI_PARTITION
 216:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 217:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PT(vol) VolToPart[vol].pt	/* Get partition index */
 218:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 219:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is bound to the same physical drive number */
 220:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PT(vol) 0			/* Find first valid partition or in SFD */
 221:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 222:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 223:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 224:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Definitions of sector size */
 225:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MA
 226:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong sector size configuration
 227:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 228:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_SS == FF_MIN_SS
 229:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed sector size */
 230:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 231:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SS(fs)	((fs)->ssize)	/* Variable sector size */
 232:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 233:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 234:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 235:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Timestamp */
 236:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_NORTC == 1
 237:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NOR
 238:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Invalid FF_FS_NORTC settings
 239:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 240:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR - 1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_
 241:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 242:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GET_FATTIME()	get_fattime()
 243:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 244:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 245:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 246:../Dave/Generated/FATFS/ff_Src/ff.c **** /* File lock controls */
 247:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
 248:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_READONLY
 249:../Dave/Generated/FATFS/ff_Src/ff.c **** #error FF_FS_LOCK must be 0 at read-only configuration
 250:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 251:../Dave/Generated/FATFS/ff_Src/ff.c **** typedef struct {
 252:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 253:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clu;		/* Object ID 2, containing directory (0:root) */
 254:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ofs;		/* Object ID 3, offset in the directory */
 255:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 256:../Dave/Generated/FATFS/ff_Src/ff.c **** } FILESEM;
 257:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 258:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 259:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 260:../Dave/Generated/FATFS/ff_Src/ff.c **** /* SBCS up-case tables (\x80-\xFF) */
 261:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 262:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 263:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 264:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 265:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 266:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 267:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 268:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 269:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 270:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 271:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 272:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 273:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 274:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 275:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 276:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 277:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 278:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 279:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 280:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 281:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 282:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 283:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 284:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 285:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 286:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 287:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 288:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 289:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 290:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 291:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 292:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 293:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F
 294:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 295:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 296:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 297:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 298:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 299:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 300:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 301:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41
 302:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 303:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 304:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 305:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 306:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 307:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 308:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 309:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F
 310:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 311:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 312:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 313:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 314:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 315:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 316:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 317:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F
 318:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 319:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 320:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 321:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 322:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 323:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 324:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 325:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F
 326:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 327:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 328:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 329:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 330:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 331:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 332:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 333:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F
 334:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 335:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 336:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 337:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 338:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 339:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 340:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 341:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F
 342:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 343:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 344:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 345:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 346:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 347:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 348:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 349:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 350:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 351:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 352:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 353:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 354:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 355:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 356:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 357:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F
 358:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 359:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 360:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 361:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 362:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 363:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 364:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 365:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 366:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 367:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 368:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 369:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 370:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 371:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 372:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 373:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 374:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 375:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 376:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 377:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 378:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 379:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 380:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 381:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 382:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 383:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 384:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 385:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 386:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 387:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 388:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 389:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 390:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 391:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 392:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 393:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 394:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 395:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 396:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 397:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 398:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 399:../Dave/Generated/FATFS/ff_Src/ff.c **** /* DBCS code range |----- 1st byte -----|  |----------- 2nd byte -----------| */
 400:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00}
 401:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0x80, 0xFE, 0x00, 0x00}
 402:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 0x5A, 0x61, 0x7A, 0x81, 0xFE}
 403:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0xA1, 0xFE, 0x00, 0x00}
 404:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 405:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 406:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Macros for table definitions */
 407:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MERGE_2STR(a, b) a ## b
 408:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)
 409:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 410:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 411:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 412:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 413:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------------------------
 414:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 415:../Dave/Generated/FATFS/ff_Src/ff.c ****    Module Private Work Area
 416:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 417:../Dave/Generated/FATFS/ff_Src/ff.c **** ---------------------------------------------------------------------------*/
 418:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Remark: Variables defined here without initial value shall be guaranteed
 419:../Dave/Generated/FATFS/ff_Src/ff.c **** /  zero/null at start-up. If not, the linker option or start-up routine is
 420:../Dave/Generated/FATFS/ff_Src/ff.c **** /  not compliance with C standard. */
 421:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 422:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 423:../Dave/Generated/FATFS/ff_Src/ff.c **** /* File/Volume controls           */
 424:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 425:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 426:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_VOLUMES < 1 || FF_VOLUMES > 10
 427:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong FF_VOLUMES setting
 428:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 429:../Dave/Generated/FATFS/ff_Src/ff.c **** static FATFS* FatFs[FF_VOLUMES];	/* Pointer to the filesystem objects (logical drives) */
 430:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD Fsid;					/* Filesystem mount ID */
 431:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 432:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
 433:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE CurrVol;				/* Current drive */
 434:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 435:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 436:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
 437:../Dave/Generated/FATFS/ff_Src/ff.c **** static FILESEM Files[FF_FS_LOCK];	/* Open object lock semaphores */
 438:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 439:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 440:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID
 441:../Dave/Generated/FATFS/ff_Src/ff.c **** #ifdef FF_VOLUME_STRS
 442:../Dave/Generated/FATFS/ff_Src/ff.c **** static const char* const VolumeStr[FF_VOLUMES] = {FF_VOLUME_STRS};	/* Pre-defined volume ID */
 443:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 444:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 445:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 446:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 447:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 448:../Dave/Generated/FATFS/ff_Src/ff.c **** /* LFN/Directory working buffer   */
 449:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 450:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 451:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 0		/* Non-LFN configuration */
 452:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 453:../Dave/Generated/FATFS/ff_Src/ff.c **** #error LFN must be enabled when enable exFAT
 454:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 455:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF
 456:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)
 457:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 458:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	return res
 459:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 460:../Dave/Generated/FATFS/ff_Src/ff.c **** #else					/* LFN configurations */
 461:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
 462:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_MAX_LFN
 463:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 464:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_BUF < 12
 465:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_LFN_BUF or FF_SFN_BUF
 466:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 467:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3
 468:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_LFN_UNICODE
 469:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 470:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* FAT: Offset of LFN characters 
 471:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIRE)	/* exFAT: Size of directory entry block scratchpad b
 472:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 473:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 1		/* LFN enabled with static working buffer */
 474:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 475:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)];	/* Directory entry block scratchpad buffer */
 476:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 477:../Dave/Generated/FATFS/ff_Src/ff.c **** static WCHAR LfnBuf[FF_MAX_LFN + 1];		/* LFN working buffer */
 478:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF
 479:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)
 480:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 481:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	return res
 482:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 483:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 484:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 485:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1]; BYTE dbuf[MAXDIRB(FF_MAX_LFN)];	/* LFN working buffer
 486:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 487:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 488:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 489:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1];	/* LFN working buffer */
 490:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 491:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 492:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 493:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	return res
 494:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 495:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 496:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 497:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer and directory entry block scratchp
 498:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2 + MAXDIRB(FF_MAX_LFN)); if (!lfn) LEAV
 499:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()	ff_memfree(lfn)
 500:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 501:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer */
 502:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH
 503:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()	ff_memfree(lfn)
 504:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 505:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	{ if (!work) ff_memfree(buf); return res; }
 506:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_MALLOC	0x8000	/* Must be >=FF_MAX_SS */
 507:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 508:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 509:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_USE_LFN
 510:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 511:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN == 1 */
 512:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN == 0 */
 513:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 514:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 515:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 516:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 517:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Code conversion tables         */
 518:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 519:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 520:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0		/* Run-time code page configuration */
 521:../Dave/Generated/FATFS/ff_Src/ff.c **** #define CODEPAGE CodePage
 522:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD CodePage;	/* Current code page */
 523:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE *ExCvt, *DbcTbl;	/* Pointer to current SBCS up-case table and DBCS code range tab
 524:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct437[] = TBL_CT437;
 525:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct720[] = TBL_CT720;
 526:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct737[] = TBL_CT737;
 527:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct771[] = TBL_CT771;
 528:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct775[] = TBL_CT775;
 529:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct850[] = TBL_CT850;
 530:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct852[] = TBL_CT852;
 531:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct855[] = TBL_CT855;
 532:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct857[] = TBL_CT857;
 533:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct860[] = TBL_CT860;
 534:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct861[] = TBL_CT861;
 535:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct862[] = TBL_CT862;
 536:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct863[] = TBL_CT863;
 537:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct864[] = TBL_CT864;
 538:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct865[] = TBL_CT865;
 539:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct866[] = TBL_CT866;
 540:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct869[] = TBL_CT869;
 541:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc932[] = TBL_DC932;
 542:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc936[] = TBL_DC936;
 543:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc949[] = TBL_DC949;
 544:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc950[] = TBL_DC950;
 545:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 546:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900	/* Static code page configuration (SBCS) */
 547:../Dave/Generated/FATFS/ff_Src/ff.c **** #define CODEPAGE FF_CODE_PAGE
 548:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CODE_PAGE);
 549:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 550:../Dave/Generated/FATFS/ff_Src/ff.c **** #else					/* Static code page configuration (DBCS) */
 551:../Dave/Generated/FATFS/ff_Src/ff.c **** #define CODEPAGE FF_CODE_PAGE
 552:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_CODE_PAGE);
 553:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 554:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 555:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 556:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 557:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 558:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 559:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------------------------
 560:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 561:../Dave/Generated/FATFS/ff_Src/ff.c ****    Module Private Functions
 562:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 563:../Dave/Generated/FATFS/ff_Src/ff.c **** ---------------------------------------------------------------------------*/
 564:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 565:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 566:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 567:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Load/Store multi-byte word in the FAT structure                       */
 568:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 569:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 570:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 571:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 207              	 .loc 1 571 0
 208              	 .cfi_startproc
 209              	 
 210              	 
 211              	 
 212 0000 80B4     	 push {r7}
 213              	.LCFI0:
 214              	 .cfi_def_cfa_offset 4
 215              	 .cfi_offset 7,-4
 216 0002 85B0     	 sub sp,sp,#20
 217              	.LCFI1:
 218              	 .cfi_def_cfa_offset 24
 219 0004 00AF     	 add r7,sp,#0
 220              	.LCFI2:
 221              	 .cfi_def_cfa_register 7
 222 0006 7860     	 str r0,[r7,#4]
 572:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD rv;
 573:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 574:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = ptr[1];
 223              	 .loc 1 574 0
 224 0008 7B68     	 ldr r3,[r7,#4]
 225 000a 0133     	 adds r3,r3,#1
 226 000c 1B78     	 ldrb r3,[r3]
 227 000e FB81     	 strh r3,[r7,#14]
 575:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[0];
 228              	 .loc 1 575 0
 229 0010 FB89     	 ldrh r3,[r7,#14]
 230 0012 1B02     	 lsls r3,r3,#8
 231 0014 9AB2     	 uxth r2,r3
 232 0016 7B68     	 ldr r3,[r7,#4]
 233 0018 1B78     	 ldrb r3,[r3]
 234 001a 9BB2     	 uxth r3,r3
 235 001c 1343     	 orrs r3,r3,r2
 236 001e 9BB2     	 uxth r3,r3
 237 0020 FB81     	 strh r3,[r7,#14]
 576:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return rv;
 238              	 .loc 1 576 0
 239 0022 FB89     	 ldrh r3,[r7,#14]
 577:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 240              	 .loc 1 577 0
 241 0024 1846     	 mov r0,r3
 242 0026 1437     	 adds r7,r7,#20
 243              	.LCFI3:
 244              	 .cfi_def_cfa_offset 4
 245 0028 BD46     	 mov sp,r7
 246              	.LCFI4:
 247              	 .cfi_def_cfa_register 13
 248              	 
 249 002a 5DF8047B 	 ldr r7,[sp],#4
 250              	.LCFI5:
 251              	 .cfi_restore 7
 252              	 .cfi_def_cfa_offset 0
 253 002e 7047     	 bx lr
 254              	 .cfi_endproc
 255              	.LFE0:
 257              	 .section .text.ld_dword,"ax",%progbits
 258              	 .align 2
 259              	 .thumb
 260              	 .thumb_func
 262              	ld_dword:
 263              	.LFB1:
 578:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 579:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 580:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 264              	 .loc 1 580 0
 265              	 .cfi_startproc
 266              	 
 267              	 
 268              	 
 269 0000 80B4     	 push {r7}
 270              	.LCFI6:
 271              	 .cfi_def_cfa_offset 4
 272              	 .cfi_offset 7,-4
 273 0002 85B0     	 sub sp,sp,#20
 274              	.LCFI7:
 275              	 .cfi_def_cfa_offset 24
 276 0004 00AF     	 add r7,sp,#0
 277              	.LCFI8:
 278              	 .cfi_def_cfa_register 7
 279 0006 7860     	 str r0,[r7,#4]
 581:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD rv;
 582:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 583:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = ptr[3];
 280              	 .loc 1 583 0
 281 0008 7B68     	 ldr r3,[r7,#4]
 282 000a 0333     	 adds r3,r3,#3
 283 000c 1B78     	 ldrb r3,[r3]
 284 000e FB60     	 str r3,[r7,#12]
 584:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[2];
 285              	 .loc 1 584 0
 286 0010 FB68     	 ldr r3,[r7,#12]
 287 0012 1B02     	 lsls r3,r3,#8
 288 0014 7A68     	 ldr r2,[r7,#4]
 289 0016 0232     	 adds r2,r2,#2
 290 0018 1278     	 ldrb r2,[r2]
 291 001a 1343     	 orrs r3,r3,r2
 292 001c FB60     	 str r3,[r7,#12]
 585:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[1];
 293              	 .loc 1 585 0
 294 001e FB68     	 ldr r3,[r7,#12]
 295 0020 1B02     	 lsls r3,r3,#8
 296 0022 7A68     	 ldr r2,[r7,#4]
 297 0024 0132     	 adds r2,r2,#1
 298 0026 1278     	 ldrb r2,[r2]
 299 0028 1343     	 orrs r3,r3,r2
 300 002a FB60     	 str r3,[r7,#12]
 586:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[0];
 301              	 .loc 1 586 0
 302 002c FB68     	 ldr r3,[r7,#12]
 303 002e 1B02     	 lsls r3,r3,#8
 304 0030 7A68     	 ldr r2,[r7,#4]
 305 0032 1278     	 ldrb r2,[r2]
 306 0034 1343     	 orrs r3,r3,r2
 307 0036 FB60     	 str r3,[r7,#12]
 587:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return rv;
 308              	 .loc 1 587 0
 309 0038 FB68     	 ldr r3,[r7,#12]
 588:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 310              	 .loc 1 588 0
 311 003a 1846     	 mov r0,r3
 312 003c 1437     	 adds r7,r7,#20
 313              	.LCFI9:
 314              	 .cfi_def_cfa_offset 4
 315 003e BD46     	 mov sp,r7
 316              	.LCFI10:
 317              	 .cfi_def_cfa_register 13
 318              	 
 319 0040 5DF8047B 	 ldr r7,[sp],#4
 320              	.LCFI11:
 321              	 .cfi_restore 7
 322              	 .cfi_def_cfa_offset 0
 323 0044 7047     	 bx lr
 324              	 .cfi_endproc
 325              	.LFE1:
 327 0046 00BF     	 .section .text.st_word,"ax",%progbits
 328              	 .align 2
 329              	 .thumb
 330              	 .thumb_func
 332              	st_word:
 333              	.LFB2:
 589:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 590:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 591:../Dave/Generated/FATFS/ff_Src/ff.c **** static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 592:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 593:../Dave/Generated/FATFS/ff_Src/ff.c **** 	QWORD rv;
 594:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 595:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = ptr[7];
 596:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[6];
 597:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[5];
 598:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[4];
 599:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[3];
 600:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[2];
 601:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[1];
 602:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[0];
 603:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return rv;
 604:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 605:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 606:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 607:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
 608:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 609:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 334              	 .loc 1 609 0
 335              	 .cfi_startproc
 336              	 
 337              	 
 338              	 
 339 0000 80B4     	 push {r7}
 340              	.LCFI12:
 341              	 .cfi_def_cfa_offset 4
 342              	 .cfi_offset 7,-4
 343 0002 83B0     	 sub sp,sp,#12
 344              	.LCFI13:
 345              	 .cfi_def_cfa_offset 16
 346 0004 00AF     	 add r7,sp,#0
 347              	.LCFI14:
 348              	 .cfi_def_cfa_register 7
 349 0006 7860     	 str r0,[r7,#4]
 350 0008 0B46     	 mov r3,r1
 351 000a 7B80     	 strh r3,[r7,#2]
 610:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 352              	 .loc 1 610 0
 353 000c 7B68     	 ldr r3,[r7,#4]
 354 000e 5A1C     	 adds r2,r3,#1
 355 0010 7A60     	 str r2,[r7,#4]
 356 0012 7A88     	 ldrh r2,[r7,#2]
 357 0014 D2B2     	 uxtb r2,r2
 358 0016 1A70     	 strb r2,[r3]
 359 0018 7B88     	 ldrh r3,[r7,#2]
 360 001a 1B0A     	 lsrs r3,r3,#8
 361 001c 7B80     	 strh r3,[r7,#2]
 611:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val;
 362              	 .loc 1 611 0
 363 001e 7B68     	 ldr r3,[r7,#4]
 364 0020 5A1C     	 adds r2,r3,#1
 365 0022 7A60     	 str r2,[r7,#4]
 366 0024 7A88     	 ldrh r2,[r7,#2]
 367 0026 D2B2     	 uxtb r2,r2
 368 0028 1A70     	 strb r2,[r3]
 612:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 369              	 .loc 1 612 0
 370 002a 0C37     	 adds r7,r7,#12
 371              	.LCFI15:
 372              	 .cfi_def_cfa_offset 4
 373 002c BD46     	 mov sp,r7
 374              	.LCFI16:
 375              	 .cfi_def_cfa_register 13
 376              	 
 377 002e 5DF8047B 	 ldr r7,[sp],#4
 378              	.LCFI17:
 379              	 .cfi_restore 7
 380              	 .cfi_def_cfa_offset 0
 381 0032 7047     	 bx lr
 382              	 .cfi_endproc
 383              	.LFE2:
 385              	 .section .text.st_dword,"ax",%progbits
 386              	 .align 2
 387              	 .thumb
 388              	 .thumb_func
 390              	st_dword:
 391              	.LFB3:
 613:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 614:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 615:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 392              	 .loc 1 615 0
 393              	 .cfi_startproc
 394              	 
 395              	 
 396              	 
 397 0000 80B4     	 push {r7}
 398              	.LCFI18:
 399              	 .cfi_def_cfa_offset 4
 400              	 .cfi_offset 7,-4
 401 0002 83B0     	 sub sp,sp,#12
 402              	.LCFI19:
 403              	 .cfi_def_cfa_offset 16
 404 0004 00AF     	 add r7,sp,#0
 405              	.LCFI20:
 406              	 .cfi_def_cfa_register 7
 407 0006 7860     	 str r0,[r7,#4]
 408 0008 3960     	 str r1,[r7]
 616:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 409              	 .loc 1 616 0
 410 000a 7B68     	 ldr r3,[r7,#4]
 411 000c 5A1C     	 adds r2,r3,#1
 412 000e 7A60     	 str r2,[r7,#4]
 413 0010 3A68     	 ldr r2,[r7]
 414 0012 D2B2     	 uxtb r2,r2
 415 0014 1A70     	 strb r2,[r3]
 416 0016 3B68     	 ldr r3,[r7]
 417 0018 1B0A     	 lsrs r3,r3,#8
 418 001a 3B60     	 str r3,[r7]
 617:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 419              	 .loc 1 617 0
 420 001c 7B68     	 ldr r3,[r7,#4]
 421 001e 5A1C     	 adds r2,r3,#1
 422 0020 7A60     	 str r2,[r7,#4]
 423 0022 3A68     	 ldr r2,[r7]
 424 0024 D2B2     	 uxtb r2,r2
 425 0026 1A70     	 strb r2,[r3]
 426 0028 3B68     	 ldr r3,[r7]
 427 002a 1B0A     	 lsrs r3,r3,#8
 428 002c 3B60     	 str r3,[r7]
 618:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 429              	 .loc 1 618 0
 430 002e 7B68     	 ldr r3,[r7,#4]
 431 0030 5A1C     	 adds r2,r3,#1
 432 0032 7A60     	 str r2,[r7,#4]
 433 0034 3A68     	 ldr r2,[r7]
 434 0036 D2B2     	 uxtb r2,r2
 435 0038 1A70     	 strb r2,[r3]
 436 003a 3B68     	 ldr r3,[r7]
 437 003c 1B0A     	 lsrs r3,r3,#8
 438 003e 3B60     	 str r3,[r7]
 619:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val;
 439              	 .loc 1 619 0
 440 0040 7B68     	 ldr r3,[r7,#4]
 441 0042 5A1C     	 adds r2,r3,#1
 442 0044 7A60     	 str r2,[r7,#4]
 443 0046 3A68     	 ldr r2,[r7]
 444 0048 D2B2     	 uxtb r2,r2
 445 004a 1A70     	 strb r2,[r3]
 620:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 446              	 .loc 1 620 0
 447 004c 0C37     	 adds r7,r7,#12
 448              	.LCFI21:
 449              	 .cfi_def_cfa_offset 4
 450 004e BD46     	 mov sp,r7
 451              	.LCFI22:
 452              	 .cfi_def_cfa_register 13
 453              	 
 454 0050 5DF8047B 	 ldr r7,[sp],#4
 455              	.LCFI23:
 456              	 .cfi_restore 7
 457              	 .cfi_def_cfa_offset 0
 458 0054 7047     	 bx lr
 459              	 .cfi_endproc
 460              	.LFE3:
 462 0056 00BF     	 .section .text.mem_cpy,"ax",%progbits
 463              	 .align 2
 464              	 .thumb
 465              	 .thumb_func
 467              	mem_cpy:
 468              	.LFB4:
 621:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 622:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 623:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 624:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 625:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 626:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 627:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 628:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 629:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 630:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 631:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 632:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val;
 633:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 634:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 635:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
 636:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 637:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 638:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 639:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 640:../Dave/Generated/FATFS/ff_Src/ff.c **** /* String functions                                                      */
 641:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 642:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 643:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Copy memory to memory */
 644:../Dave/Generated/FATFS/ff_Src/ff.c **** static void mem_cpy (void* dst, const void* src, UINT cnt)
 645:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 469              	 .loc 1 645 0
 470              	 .cfi_startproc
 471              	 
 472              	 
 473              	 
 474 0000 80B4     	 push {r7}
 475              	.LCFI24:
 476              	 .cfi_def_cfa_offset 4
 477              	 .cfi_offset 7,-4
 478 0002 87B0     	 sub sp,sp,#28
 479              	.LCFI25:
 480              	 .cfi_def_cfa_offset 32
 481 0004 00AF     	 add r7,sp,#0
 482              	.LCFI26:
 483              	 .cfi_def_cfa_register 7
 484 0006 F860     	 str r0,[r7,#12]
 485 0008 B960     	 str r1,[r7,#8]
 486 000a 7A60     	 str r2,[r7,#4]
 646:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *d = (BYTE*)dst;
 487              	 .loc 1 646 0
 488 000c FB68     	 ldr r3,[r7,#12]
 489 000e 7B61     	 str r3,[r7,#20]
 647:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE *s = (const BYTE*)src;
 490              	 .loc 1 647 0
 491 0010 BB68     	 ldr r3,[r7,#8]
 492 0012 3B61     	 str r3,[r7,#16]
 648:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 649:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (cnt != 0) {
 493              	 .loc 1 649 0
 494 0014 7B68     	 ldr r3,[r7,#4]
 495 0016 002B     	 cmp r3,#0
 496 0018 0DD0     	 beq .L7
 497              	.L9:
 650:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
 651:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*d++ = *s++;
 498              	 .loc 1 651 0 discriminator 1
 499 001a 7B69     	 ldr r3,[r7,#20]
 500 001c 5A1C     	 adds r2,r3,#1
 501 001e 7A61     	 str r2,[r7,#20]
 502 0020 3A69     	 ldr r2,[r7,#16]
 503 0022 511C     	 adds r1,r2,#1
 504 0024 3961     	 str r1,[r7,#16]
 505 0026 1278     	 ldrb r2,[r2]
 506 0028 1A70     	 strb r2,[r3]
 652:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (--cnt);
 507              	 .loc 1 652 0 discriminator 1
 508 002a 7B68     	 ldr r3,[r7,#4]
 509 002c 013B     	 subs r3,r3,#1
 510 002e 7B60     	 str r3,[r7,#4]
 511 0030 7B68     	 ldr r3,[r7,#4]
 512 0032 002B     	 cmp r3,#0
 513 0034 F1D1     	 bne .L9
 514              	.L7:
 653:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 654:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 515              	 .loc 1 654 0
 516 0036 1C37     	 adds r7,r7,#28
 517              	.LCFI27:
 518              	 .cfi_def_cfa_offset 4
 519 0038 BD46     	 mov sp,r7
 520              	.LCFI28:
 521              	 .cfi_def_cfa_register 13
 522              	 
 523 003a 5DF8047B 	 ldr r7,[sp],#4
 524              	.LCFI29:
 525              	 .cfi_restore 7
 526              	 .cfi_def_cfa_offset 0
 527 003e 7047     	 bx lr
 528              	 .cfi_endproc
 529              	.LFE4:
 531              	 .section .text.mem_set,"ax",%progbits
 532              	 .align 2
 533              	 .thumb
 534              	 .thumb_func
 536              	mem_set:
 537              	.LFB5:
 655:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 656:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 657:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Fill memory block */
 658:../Dave/Generated/FATFS/ff_Src/ff.c **** static void mem_set (void* dst, int val, UINT cnt)
 659:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 538              	 .loc 1 659 0
 539              	 .cfi_startproc
 540              	 
 541              	 
 542              	 
 543 0000 80B4     	 push {r7}
 544              	.LCFI30:
 545              	 .cfi_def_cfa_offset 4
 546              	 .cfi_offset 7,-4
 547 0002 87B0     	 sub sp,sp,#28
 548              	.LCFI31:
 549              	 .cfi_def_cfa_offset 32
 550 0004 00AF     	 add r7,sp,#0
 551              	.LCFI32:
 552              	 .cfi_def_cfa_register 7
 553 0006 F860     	 str r0,[r7,#12]
 554 0008 B960     	 str r1,[r7,#8]
 555 000a 7A60     	 str r2,[r7,#4]
 660:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *d = (BYTE*)dst;
 556              	 .loc 1 660 0
 557 000c FB68     	 ldr r3,[r7,#12]
 558 000e 7B61     	 str r3,[r7,#20]
 559              	.L11:
 661:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 662:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
 663:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*d++ = (BYTE)val;
 560              	 .loc 1 663 0 discriminator 1
 561 0010 7B69     	 ldr r3,[r7,#20]
 562 0012 5A1C     	 adds r2,r3,#1
 563 0014 7A61     	 str r2,[r7,#20]
 564 0016 BA68     	 ldr r2,[r7,#8]
 565 0018 D2B2     	 uxtb r2,r2
 566 001a 1A70     	 strb r2,[r3]
 664:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (--cnt);
 567              	 .loc 1 664 0 discriminator 1
 568 001c 7B68     	 ldr r3,[r7,#4]
 569 001e 013B     	 subs r3,r3,#1
 570 0020 7B60     	 str r3,[r7,#4]
 571 0022 7B68     	 ldr r3,[r7,#4]
 572 0024 002B     	 cmp r3,#0
 573 0026 F3D1     	 bne .L11
 665:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 574              	 .loc 1 665 0
 575 0028 1C37     	 adds r7,r7,#28
 576              	.LCFI33:
 577              	 .cfi_def_cfa_offset 4
 578 002a BD46     	 mov sp,r7
 579              	.LCFI34:
 580              	 .cfi_def_cfa_register 13
 581              	 
 582 002c 5DF8047B 	 ldr r7,[sp],#4
 583              	.LCFI35:
 584              	 .cfi_restore 7
 585              	 .cfi_def_cfa_offset 0
 586 0030 7047     	 bx lr
 587              	 .cfi_endproc
 588              	.LFE5:
 590 0032 00BF     	 .section .text.mem_cmp,"ax",%progbits
 591              	 .align 2
 592              	 .thumb
 593              	 .thumb_func
 595              	mem_cmp:
 596              	.LFB6:
 666:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 667:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 668:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Compare memory block */
 669:../Dave/Generated/FATFS/ff_Src/ff.c **** static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
 670:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 597              	 .loc 1 670 0
 598              	 .cfi_startproc
 599              	 
 600              	 
 601              	 
 602 0000 80B4     	 push {r7}
 603              	.LCFI36:
 604              	 .cfi_def_cfa_offset 4
 605              	 .cfi_offset 7,-4
 606 0002 89B0     	 sub sp,sp,#36
 607              	.LCFI37:
 608              	 .cfi_def_cfa_offset 40
 609 0004 00AF     	 add r7,sp,#0
 610              	.LCFI38:
 611              	 .cfi_def_cfa_register 7
 612 0006 F860     	 str r0,[r7,#12]
 613 0008 B960     	 str r1,[r7,#8]
 614 000a 7A60     	 str r2,[r7,#4]
 671:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 615              	 .loc 1 671 0
 616 000c FB68     	 ldr r3,[r7,#12]
 617 000e FB61     	 str r3,[r7,#28]
 618 0010 BB68     	 ldr r3,[r7,#8]
 619 0012 BB61     	 str r3,[r7,#24]
 672:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int r = 0;
 620              	 .loc 1 672 0
 621 0014 0023     	 movs r3,#0
 622 0016 7B61     	 str r3,[r7,#20]
 623              	.L14:
 673:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 674:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
 675:../Dave/Generated/FATFS/ff_Src/ff.c **** 		r = *d++ - *s++;
 624              	 .loc 1 675 0 discriminator 2
 625 0018 FB69     	 ldr r3,[r7,#28]
 626 001a 5A1C     	 adds r2,r3,#1
 627 001c FA61     	 str r2,[r7,#28]
 628 001e 1B78     	 ldrb r3,[r3]
 629 0020 1946     	 mov r1,r3
 630 0022 BB69     	 ldr r3,[r7,#24]
 631 0024 5A1C     	 adds r2,r3,#1
 632 0026 BA61     	 str r2,[r7,#24]
 633 0028 1B78     	 ldrb r3,[r3]
 634 002a CB1A     	 subs r3,r1,r3
 635 002c 7B61     	 str r3,[r7,#20]
 676:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (--cnt && r == 0);
 636              	 .loc 1 676 0 discriminator 2
 637 002e 7B68     	 ldr r3,[r7,#4]
 638 0030 013B     	 subs r3,r3,#1
 639 0032 7B60     	 str r3,[r7,#4]
 640 0034 7B68     	 ldr r3,[r7,#4]
 641 0036 002B     	 cmp r3,#0
 642 0038 02D0     	 beq .L13
 643              	 .loc 1 676 0 is_stmt 0 discriminator 1
 644 003a 7B69     	 ldr r3,[r7,#20]
 645 003c 002B     	 cmp r3,#0
 646 003e EBD0     	 beq .L14
 647              	.L13:
 677:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 678:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return r;
 648              	 .loc 1 678 0 is_stmt 1
 649 0040 7B69     	 ldr r3,[r7,#20]
 679:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 650              	 .loc 1 679 0
 651 0042 1846     	 mov r0,r3
 652 0044 2437     	 adds r7,r7,#36
 653              	.LCFI39:
 654              	 .cfi_def_cfa_offset 4
 655 0046 BD46     	 mov sp,r7
 656              	.LCFI40:
 657              	 .cfi_def_cfa_register 13
 658              	 
 659 0048 5DF8047B 	 ldr r7,[sp],#4
 660              	.LCFI41:
 661              	 .cfi_restore 7
 662              	 .cfi_def_cfa_offset 0
 663 004c 7047     	 bx lr
 664              	 .cfi_endproc
 665              	.LFE6:
 667 004e 00BF     	 .section .text.chk_chr,"ax",%progbits
 668              	 .align 2
 669              	 .thumb
 670              	 .thumb_func
 672              	chk_chr:
 673              	.LFB7:
 680:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 681:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 682:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Check if chr is contained in the string */
 683:../Dave/Generated/FATFS/ff_Src/ff.c **** static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
 684:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 674              	 .loc 1 684 0
 675              	 .cfi_startproc
 676              	 
 677              	 
 678              	 
 679 0000 80B4     	 push {r7}
 680              	.LCFI42:
 681              	 .cfi_def_cfa_offset 4
 682              	 .cfi_offset 7,-4
 683 0002 83B0     	 sub sp,sp,#12
 684              	.LCFI43:
 685              	 .cfi_def_cfa_offset 16
 686 0004 00AF     	 add r7,sp,#0
 687              	.LCFI44:
 688              	 .cfi_def_cfa_register 7
 689 0006 7860     	 str r0,[r7,#4]
 690 0008 3960     	 str r1,[r7]
 685:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (*str && *str != chr) str++;
 691              	 .loc 1 685 0
 692 000a 02E0     	 b .L17
 693              	.L19:
 694              	 .loc 1 685 0 is_stmt 0 discriminator 3
 695 000c 7B68     	 ldr r3,[r7,#4]
 696 000e 0133     	 adds r3,r3,#1
 697 0010 7B60     	 str r3,[r7,#4]
 698              	.L17:
 699              	 .loc 1 685 0 discriminator 1
 700 0012 7B68     	 ldr r3,[r7,#4]
 701 0014 1B78     	 ldrb r3,[r3]
 702 0016 002B     	 cmp r3,#0
 703 0018 05D0     	 beq .L18
 704              	 .loc 1 685 0 discriminator 2
 705 001a 7B68     	 ldr r3,[r7,#4]
 706 001c 1B78     	 ldrb r3,[r3]
 707 001e 1A46     	 mov r2,r3
 708 0020 3B68     	 ldr r3,[r7]
 709 0022 9A42     	 cmp r2,r3
 710 0024 F2D1     	 bne .L19
 711              	.L18:
 686:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return *str;
 712              	 .loc 1 686 0 is_stmt 1
 713 0026 7B68     	 ldr r3,[r7,#4]
 714 0028 1B78     	 ldrb r3,[r3]
 687:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 715              	 .loc 1 687 0
 716 002a 1846     	 mov r0,r3
 717 002c 0C37     	 adds r7,r7,#12
 718              	.LCFI45:
 719              	 .cfi_def_cfa_offset 4
 720 002e BD46     	 mov sp,r7
 721              	.LCFI46:
 722              	 .cfi_def_cfa_register 13
 723              	 
 724 0030 5DF8047B 	 ldr r7,[sp],#4
 725              	.LCFI47:
 726              	 .cfi_restore 7
 727              	 .cfi_def_cfa_offset 0
 728 0034 7047     	 bx lr
 729              	 .cfi_endproc
 730              	.LFE7:
 732 0036 00BF     	 .section .text.dbc_1st,"ax",%progbits
 733              	 .align 2
 734              	 .thumb
 735              	 .thumb_func
 737              	dbc_1st:
 738              	.LFB8:
 688:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 689:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 690:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Test if the character is DBC 1st byte */
 691:../Dave/Generated/FATFS/ff_Src/ff.c **** static int dbc_1st (BYTE c)
 692:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 739              	 .loc 1 692 0
 740              	 .cfi_startproc
 741              	 
 742              	 
 743              	 
 744 0000 80B4     	 push {r7}
 745              	.LCFI48:
 746              	 .cfi_def_cfa_offset 4
 747              	 .cfi_offset 7,-4
 748 0002 83B0     	 sub sp,sp,#12
 749              	.LCFI49:
 750              	 .cfi_def_cfa_offset 16
 751 0004 00AF     	 add r7,sp,#0
 752              	.LCFI50:
 753              	 .cfi_def_cfa_register 7
 754 0006 0346     	 mov r3,r0
 755 0008 FB71     	 strb r3,[r7,#7]
 693:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0		/* Variable code page */
 694:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (DbcTbl && c >= DbcTbl[0]) {
 695:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
 696:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
 697:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 698:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 699:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c >= DbcTbl[0]) {
 700:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[1]) return 1;
 701:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 702:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 703:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* SBCS fixed code page */
 704:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c != 0) return 0;	/* Always false */
 756              	 .loc 1 704 0
 757 000a FB79     	 ldrb r3,[r7,#7]
 758 000c 002B     	 cmp r3,#0
 759 000e 01D0     	 beq .L22
 760              	 .loc 1 704 0 is_stmt 0 discriminator 1
 761 0010 0023     	 movs r3,#0
 762 0012 00E0     	 b .L23
 763              	.L22:
 705:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 706:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 0;
 764              	 .loc 1 706 0 is_stmt 1
 765 0014 0023     	 movs r3,#0
 766              	.L23:
 707:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 767              	 .loc 1 707 0
 768 0016 1846     	 mov r0,r3
 769 0018 0C37     	 adds r7,r7,#12
 770              	.LCFI51:
 771              	 .cfi_def_cfa_offset 4
 772 001a BD46     	 mov sp,r7
 773              	.LCFI52:
 774              	 .cfi_def_cfa_register 13
 775              	 
 776 001c 5DF8047B 	 ldr r7,[sp],#4
 777              	.LCFI53:
 778              	 .cfi_restore 7
 779              	 .cfi_def_cfa_offset 0
 780 0020 7047     	 bx lr
 781              	 .cfi_endproc
 782              	.LFE8:
 784 0022 00BF     	 .section .text.dbc_2nd,"ax",%progbits
 785              	 .align 2
 786              	 .thumb
 787              	 .thumb_func
 789              	dbc_2nd:
 790              	.LFB9:
 708:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 709:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 710:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Test if the character is DBC 2nd byte */
 711:../Dave/Generated/FATFS/ff_Src/ff.c **** static int dbc_2nd (BYTE c)
 712:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 791              	 .loc 1 712 0
 792              	 .cfi_startproc
 793              	 
 794              	 
 795              	 
 796 0000 80B4     	 push {r7}
 797              	.LCFI54:
 798              	 .cfi_def_cfa_offset 4
 799              	 .cfi_offset 7,-4
 800 0002 83B0     	 sub sp,sp,#12
 801              	.LCFI55:
 802              	 .cfi_def_cfa_offset 16
 803 0004 00AF     	 add r7,sp,#0
 804              	.LCFI56:
 805              	 .cfi_def_cfa_register 7
 806 0006 0346     	 mov r3,r0
 807 0008 FB71     	 strb r3,[r7,#7]
 713:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0		/* Variable code page */
 714:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (DbcTbl && c >= DbcTbl[4]) {
 715:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
 716:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
 717:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
 718:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 719:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 720:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c >= DbcTbl[4]) {
 721:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[5]) return 1;
 722:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 723:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 724:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 725:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* SBCS fixed code page */
 726:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c != 0) return 0;	/* Always false */
 808              	 .loc 1 726 0
 809 000a FB79     	 ldrb r3,[r7,#7]
 810 000c 002B     	 cmp r3,#0
 811 000e 01D0     	 beq .L25
 812              	 .loc 1 726 0 is_stmt 0 discriminator 1
 813 0010 0023     	 movs r3,#0
 814 0012 00E0     	 b .L26
 815              	.L25:
 727:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 728:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 0;
 816              	 .loc 1 728 0 is_stmt 1
 817 0014 0023     	 movs r3,#0
 818              	.L26:
 729:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 819              	 .loc 1 729 0
 820 0016 1846     	 mov r0,r3
 821 0018 0C37     	 adds r7,r7,#12
 822              	.LCFI57:
 823              	 .cfi_def_cfa_offset 4
 824 001a BD46     	 mov sp,r7
 825              	.LCFI58:
 826              	 .cfi_def_cfa_register 13
 827              	 
 828 001c 5DF8047B 	 ldr r7,[sp],#4
 829              	.LCFI59:
 830              	 .cfi_restore 7
 831              	 .cfi_def_cfa_offset 0
 832 0020 7047     	 bx lr
 833              	 .cfi_endproc
 834              	.LFE9:
 836 0022 00BF     	 .section .text.tchar2uni,"ax",%progbits
 837              	 .align 2
 838              	 .thumb
 839              	 .thumb_func
 841              	tchar2uni:
 842              	.LFB10:
 730:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 731:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 732:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
 733:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 734:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get a character from TCHAR string in defined API encodeing */
 735:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit
 736:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
 737:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 738:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 843              	 .loc 1 738 0
 844              	 .cfi_startproc
 845              	 
 846              	 
 847 0000 80B5     	 push {r7,lr}
 848              	.LCFI60:
 849              	 .cfi_def_cfa_offset 8
 850              	 .cfi_offset 7,-8
 851              	 .cfi_offset 14,-4
 852 0002 86B0     	 sub sp,sp,#24
 853              	.LCFI61:
 854              	 .cfi_def_cfa_offset 32
 855 0004 00AF     	 add r7,sp,#0
 856              	.LCFI62:
 857              	 .cfi_def_cfa_register 7
 858 0006 7860     	 str r0,[r7,#4]
 739:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD uc;
 740:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *p = *str;
 859              	 .loc 1 740 0
 860 0008 7B68     	 ldr r3,[r7,#4]
 861 000a 1B68     	 ldr r3,[r3]
 862 000c 7B61     	 str r3,[r7,#20]
 741:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 742:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1		/* UTF-16 input */
 743:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
 744:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 745:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = *p++;	/* Get a unit */
 746:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsSurrogate(uc)) {	/* Surrogate? */
 747:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = *p++;		/* Get low surrogate */
 748:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!IsSurrogateH(uc) || !IsSurrogateL(wc)) return 0xFFFFFFFF;	/* Wrong surrogate? */
 749:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = uc << 16 | wc;
 750:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 751:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 752:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 input */
 753:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b;
 754:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int nf;
 755:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 756:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = (BYTE)*p++;	/* Get a unit */
 757:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (uc & 0x80) {	/* Multiple byte code? */
 758:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
 759:../Dave/Generated/FATFS/ff_Src/ff.c **** 			uc &= 0x1F; nf = 1;
 760:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
 761:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
 762:../Dave/Generated/FATFS/ff_Src/ff.c **** 				uc &= 0x0F; nf = 2;
 763:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
 764:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
 765:../Dave/Generated/FATFS/ff_Src/ff.c **** 					uc &= 0x07; nf = 3;
 766:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {					/* Wrong sequence */
 767:../Dave/Generated/FATFS/ff_Src/ff.c **** 					return 0xFFFFFFFF;
 768:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
 769:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
 770:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 771:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {	/* Get trailing bytes */
 772:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b = (BYTE)*p++;
 773:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
 774:../Dave/Generated/FATFS/ff_Src/ff.c **** 			uc = uc << 6 | (b & 0x3F);
 775:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (--nf != 0);
 776:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 777:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a
 778:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 779:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 780:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 input */
 781:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = (TCHAR)*p++;	/* Get a unit */
 782:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 783:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a 
 784:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 785:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* ANSI/OEM input */
 786:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b;
 787:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
 788:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 789:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = (BYTE)*p++;			/* Get a byte */
 863              	 .loc 1 789 0
 864 000e 7B69     	 ldr r3,[r7,#20]
 865 0010 5A1C     	 adds r2,r3,#1
 866 0012 7A61     	 str r2,[r7,#20]
 867 0014 1B78     	 ldrb r3,[r3]
 868 0016 7B82     	 strh r3,[r7,#18]
 790:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 869              	 .loc 1 790 0
 870 0018 7B8A     	 ldrh r3,[r7,#18]
 871 001a DBB2     	 uxtb r3,r3
 872 001c 1846     	 mov r0,r3
 873 001e FFF7FEFF 	 bl dbc_1st
 874 0022 0346     	 mov r3,r0
 875 0024 002B     	 cmp r3,#0
 876 0026 15D0     	 beq .L28
 791:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b = (BYTE)*p++;			/* Get 2nd byte */
 877              	 .loc 1 791 0
 878 0028 7B69     	 ldr r3,[r7,#20]
 879 002a 5A1C     	 adds r2,r3,#1
 880 002c 7A61     	 str r2,[r7,#20]
 881 002e 1B78     	 ldrb r3,[r3]
 882 0030 7B74     	 strb r3,[r7,#17]
 792:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 883              	 .loc 1 792 0
 884 0032 7B7C     	 ldrb r3,[r7,#17]
 885 0034 1846     	 mov r0,r3
 886 0036 FFF7FEFF 	 bl dbc_2nd
 887 003a 0346     	 mov r3,r0
 888 003c 002B     	 cmp r3,#0
 889 003e 02D1     	 bne .L29
 890              	 .loc 1 792 0 is_stmt 0 discriminator 1
 891 0040 4FF0FF33 	 mov r3,#-1
 892 0044 1DE0     	 b .L30
 893              	.L29:
 793:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = (wc << 8) + b;		/* Make a DBC */
 894              	 .loc 1 793 0 is_stmt 1
 895 0046 7B8A     	 ldrh r3,[r7,#18]
 896 0048 1B02     	 lsls r3,r3,#8
 897 004a 9AB2     	 uxth r2,r3
 898 004c 7B7C     	 ldrb r3,[r7,#17]
 899 004e 9BB2     	 uxth r3,r3
 900 0050 1344     	 add r3,r3,r2
 901 0052 7B82     	 strh r3,[r7,#18]
 902              	.L28:
 794:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 795:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc != 0) {
 903              	 .loc 1 795 0
 904 0054 7B8A     	 ldrh r3,[r7,#18]
 905 0056 002B     	 cmp r3,#0
 906 0058 0DD0     	 beq .L31
 796:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 907              	 .loc 1 796 0
 908 005a 7B8A     	 ldrh r3,[r7,#18]
 909 005c 1846     	 mov r0,r3
 910 005e 40F25231 	 movw r1,#850
 911 0062 FFF7FEFF 	 bl ff_oem2uni
 912 0066 0346     	 mov r3,r0
 913 0068 7B82     	 strh r3,[r7,#18]
 797:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 914              	 .loc 1 797 0
 915 006a 7B8A     	 ldrh r3,[r7,#18]
 916 006c 002B     	 cmp r3,#0
 917 006e 02D1     	 bne .L31
 918              	 .loc 1 797 0 is_stmt 0 discriminator 1
 919 0070 4FF0FF33 	 mov r3,#-1
 920 0074 05E0     	 b .L30
 921              	.L31:
 798:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 799:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = wc;
 922              	 .loc 1 799 0 is_stmt 1
 923 0076 7B8A     	 ldrh r3,[r7,#18]
 924 0078 FB60     	 str r3,[r7,#12]
 800:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 801:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 802:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*str = p;	/* Next read pointer */
 925              	 .loc 1 802 0
 926 007a 7B68     	 ldr r3,[r7,#4]
 927 007c 7A69     	 ldr r2,[r7,#20]
 928 007e 1A60     	 str r2,[r3]
 803:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return uc;
 929              	 .loc 1 803 0
 930 0080 FB68     	 ldr r3,[r7,#12]
 931              	.L30:
 804:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 932              	 .loc 1 804 0
 933 0082 1846     	 mov r0,r3
 934 0084 1837     	 adds r7,r7,#24
 935              	.LCFI63:
 936              	 .cfi_def_cfa_offset 8
 937 0086 BD46     	 mov sp,r7
 938              	.LCFI64:
 939              	 .cfi_def_cfa_register 13
 940              	 
 941 0088 80BD     	 pop {r7,pc}
 942              	 .cfi_endproc
 943              	.LFE10:
 945 008a 00BF     	 .section .text.put_utf,"ax",%progbits
 946              	 .align 2
 947              	 .thumb
 948              	 .thumb_func
 950              	put_utf:
 951              	.LFB11:
 805:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 806:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 807:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Output a TCHAR string in defined API encoding */
 808:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encod
 809:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD chr,	/* UTF-16 encoded character (Double encoding unit char if >=0x10000) */
 810:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* buf,	/* Output buffer */
 811:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT szb	/* Size of the buffer */
 812:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 813:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 952              	 .loc 1 813 0
 953              	 .cfi_startproc
 954              	 
 955              	 
 956 0000 80B5     	 push {r7,lr}
 957              	.LCFI65:
 958              	 .cfi_def_cfa_offset 8
 959              	 .cfi_offset 7,-8
 960              	 .cfi_offset 14,-4
 961 0002 86B0     	 sub sp,sp,#24
 962              	.LCFI66:
 963              	 .cfi_def_cfa_offset 32
 964 0004 00AF     	 add r7,sp,#0
 965              	.LCFI67:
 966              	 .cfi_def_cfa_register 7
 967 0006 F860     	 str r0,[r7,#12]
 968 0008 B960     	 str r1,[r7,#8]
 969 000a 7A60     	 str r2,[r7,#4]
 814:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1	/* UTF-16 output */
 815:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR hs, wc;
 816:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 817:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hs = (WCHAR)(chr >> 16);
 818:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = (WCHAR)chr;
 819:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs == 0) {	/* Single encoding unit? */
 820:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 1 || IsSurrogate(wc)) return 0;	/* Buffer overflow or wrong code? */
 821:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf = wc;
 822:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 1;
 823:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 824:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb < 2 || !IsSurrogateH(hs) || !IsSurrogateL(wc)) return 0;	/* Buffer overflow or wrong surro
 825:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = hs;
 826:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = wc;
 827:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 2;
 828:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 829:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 output */
 830:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD hc;
 831:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 832:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr < 0x80) {	/* Single byte code? */
 833:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 1) return 0;	/* Buffer overflow? */
 834:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf = (TCHAR)chr;
 835:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 1;
 836:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 837:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr < 0x800) {	/* 2-byte sequence? */
 838:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 2) return 0;	/* Buffer overflow? */
 839:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
 840:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 841:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 2;
 842:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 843:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr < 0x10000) {	/* 3-byte sequence? */
 844:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
 845:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
 846:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 847:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 848:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 3;
 849:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 850:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* 4-byte sequence */
 851:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb < 4) return 0;	/* Buffer overflow? */
 852:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 853:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 854:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 855:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = (hc | chr) + 0x10000;
 856:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
 857:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
 858:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 859:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 860:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 4;
 861:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 862:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 output */
 863:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD hc;
 864:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 865:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb < 1) return 0;	/* Buffer overflow? */
 866:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr >= 0x10000) {	/* Out of BMP? */
 867:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 868:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 869:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 870:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = (hc | chr) + 0x10000;
 871:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 872:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)chr;
 873:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;
 874:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 875:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* ANSI/OEM output */
 876:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
 877:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 878:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = ff_uni2oem(chr, CODEPAGE);
 970              	 .loc 1 878 0
 971 000c F868     	 ldr r0,[r7,#12]
 972 000e 40F25231 	 movw r1,#850
 973 0012 FFF7FEFF 	 bl ff_uni2oem
 974 0016 0346     	 mov r3,r0
 975 0018 FB82     	 strh r3,[r7,#22]
 879:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc >= 0x100) {	/* Is this a DBC? */
 976              	 .loc 1 879 0
 977 001a FB8A     	 ldrh r3,[r7,#22]
 978 001c FF2B     	 cmp r3,#255
 979 001e 14D9     	 bls .L33
 880:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 2) return 0;
 980              	 .loc 1 880 0
 981 0020 7B68     	 ldr r3,[r7,#4]
 982 0022 012B     	 cmp r3,#1
 983 0024 01D8     	 bhi .L34
 984              	 .loc 1 880 0 is_stmt 0 discriminator 1
 985 0026 0023     	 movs r3,#0
 986 0028 1EE0     	 b .L35
 987              	.L34:
 881:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 988              	 .loc 1 881 0 is_stmt 1
 989 002a BB68     	 ldr r3,[r7,#8]
 990 002c 5A1C     	 adds r2,r3,#1
 991 002e BA60     	 str r2,[r7,#8]
 992 0030 FA8A     	 ldrh r2,[r7,#22]
 993 0032 120A     	 lsrs r2,r2,#8
 994 0034 92B2     	 uxth r2,r2
 995 0036 D2B2     	 uxtb r2,r2
 996 0038 1A70     	 strb r2,[r3]
 882:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 997              	 .loc 1 882 0
 998 003a BB68     	 ldr r3,[r7,#8]
 999 003c 5A1C     	 adds r2,r3,#1
 1000 003e BA60     	 str r2,[r7,#8]
 1001 0040 FA8A     	 ldrh r2,[r7,#22]
 1002 0042 D2B2     	 uxtb r2,r2
 1003 0044 1A70     	 strb r2,[r3]
 883:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 2;
 1004              	 .loc 1 883 0
 1005 0046 0223     	 movs r3,#2
 1006 0048 0EE0     	 b .L35
 1007              	.L33:
 884:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 885:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 1008              	 .loc 1 885 0
 1009 004a FB8A     	 ldrh r3,[r7,#22]
 1010 004c 002B     	 cmp r3,#0
 1011 004e 02D0     	 beq .L36
 1012              	 .loc 1 885 0 is_stmt 0 discriminator 2
 1013 0050 7B68     	 ldr r3,[r7,#4]
 1014 0052 002B     	 cmp r3,#0
 1015 0054 01D1     	 bne .L37
 1016              	.L36:
 1017              	 .loc 1 885 0 discriminator 3
 1018 0056 0023     	 movs r3,#0
 1019 0058 06E0     	 b .L35
 1020              	.L37:
 886:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 1021              	 .loc 1 886 0 is_stmt 1
 1022 005a BB68     	 ldr r3,[r7,#8]
 1023 005c 5A1C     	 adds r2,r3,#1
 1024 005e BA60     	 str r2,[r7,#8]
 1025 0060 FA8A     	 ldrh r2,[r7,#22]
 1026 0062 D2B2     	 uxtb r2,r2
 1027 0064 1A70     	 strb r2,[r3]
 887:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;
 1028              	 .loc 1 887 0
 1029 0066 0123     	 movs r3,#1
 1030              	.L35:
 888:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 889:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1031              	 .loc 1 889 0
 1032 0068 1846     	 mov r0,r3
 1033 006a 1837     	 adds r7,r7,#24
 1034              	.LCFI68:
 1035              	 .cfi_def_cfa_offset 8
 1036 006c BD46     	 mov sp,r7
 1037              	.LCFI69:
 1038              	 .cfi_def_cfa_register 13
 1039              	 
 1040 006e 80BD     	 pop {r7,pc}
 1041              	 .cfi_endproc
 1042              	.LFE11:
 1044              	 .section .text.chk_lock,"ax",%progbits
 1045              	 .align 2
 1046              	 .thumb
 1047              	 .thumb_func
 1049              	chk_lock:
 1050              	.LFB12:
 890:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN */
 891:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 892:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 893:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
 894:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 895:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Request/Release grant to access the volume                            */
 896:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 897:../Dave/Generated/FATFS/ff_Src/ff.c **** static int lock_fs (		/* 1:Ok, 0:timeout */
 898:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs		/* Filesystem object */
 899:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 900:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 901:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return ff_req_grant(fs->sobj);
 902:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 903:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 904:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 905:../Dave/Generated/FATFS/ff_Src/ff.c **** static void unlock_fs (
 906:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
 907:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res		/* Result code to be returned */
 908:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 909:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 910:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 911:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ff_rel_grant(fs->sobj);
 912:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 913:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 914:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 915:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 916:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 917:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 918:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 919:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
 920:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 921:../Dave/Generated/FATFS/ff_Src/ff.c **** /* File lock control functions                                           */
 922:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 923:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 924:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT chk_lock (	/* Check if the file can be accessed */
 925:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 926:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
 927:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 928:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1051              	 .loc 1 928 0
 1052              	 .cfi_startproc
 1053              	 
 1054              	 
 1055              	 
 1056 0000 80B4     	 push {r7}
 1057              	.LCFI70:
 1058              	 .cfi_def_cfa_offset 4
 1059              	 .cfi_offset 7,-4
 1060 0002 85B0     	 sub sp,sp,#20
 1061              	.LCFI71:
 1062              	 .cfi_def_cfa_offset 24
 1063 0004 00AF     	 add r7,sp,#0
 1064              	.LCFI72:
 1065              	 .cfi_def_cfa_register 7
 1066 0006 7860     	 str r0,[r7,#4]
 1067 0008 3960     	 str r1,[r7]
 929:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, be;
 930:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 931:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Search open object table for the object */
 932:../Dave/Generated/FATFS/ff_Src/ff.c **** 	be = 0;
 1068              	 .loc 1 932 0
 1069 000a 0023     	 movs r3,#0
 1070 000c BB60     	 str r3,[r7,#8]
 933:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {
 1071              	 .loc 1 933 0
 1072 000e 0023     	 movs r3,#0
 1073 0010 FB60     	 str r3,[r7,#12]
 1074 0012 28E0     	 b .L39
 1075              	.L43:
 934:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 1076              	 .loc 1 934 0
 1077 0014 264A     	 ldr r2,.L51
 1078 0016 FB68     	 ldr r3,[r7,#12]
 1079 0018 1B01     	 lsls r3,r3,#4
 1080 001a 1344     	 add r3,r3,r2
 1081 001c 1B68     	 ldr r3,[r3]
 1082 001e 002B     	 cmp r3,#0
 1083 0020 1CD0     	 beq .L40
 935:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 1084              	 .loc 1 935 0
 1085 0022 234A     	 ldr r2,.L51
 1086 0024 FB68     	 ldr r3,[r7,#12]
 1087 0026 1B01     	 lsls r3,r3,#4
 1088 0028 1344     	 add r3,r3,r2
 1089 002a 1A68     	 ldr r2,[r3]
 1090 002c 7B68     	 ldr r3,[r7,#4]
 1091 002e 1B68     	 ldr r3,[r3]
 1092 0030 9A42     	 cmp r2,r3
 1093 0032 15D1     	 bne .L41
 936:../Dave/Generated/FATFS/ff_Src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 1094              	 .loc 1 936 0 discriminator 1
 1095 0034 1E4A     	 ldr r2,.L51
 1096 0036 FB68     	 ldr r3,[r7,#12]
 1097 0038 1B01     	 lsls r3,r3,#4
 1098 003a 1344     	 add r3,r3,r2
 1099 003c 5A68     	 ldr r2,[r3,#4]
 1100 003e 7B68     	 ldr r3,[r7,#4]
 1101 0040 9B68     	 ldr r3,[r3,#8]
 935:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 1102              	 .loc 1 935 0 discriminator 1
 1103 0042 9A42     	 cmp r2,r3
 1104 0044 0CD1     	 bne .L41
 937:../Dave/Generated/FATFS/ff_Src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 1105              	 .loc 1 937 0
 1106 0046 1A4A     	 ldr r2,.L51
 1107 0048 FB68     	 ldr r3,[r7,#12]
 1108 004a 1B01     	 lsls r3,r3,#4
 1109 004c 1344     	 add r3,r3,r2
 1110 004e 0833     	 adds r3,r3,#8
 1111 0050 1A68     	 ldr r2,[r3]
 1112 0052 7B68     	 ldr r3,[r7,#4]
 1113 0054 5B69     	 ldr r3,[r3,#20]
 936:../Dave/Generated/FATFS/ff_Src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 1114              	 .loc 1 936 0
 1115 0056 9A42     	 cmp r2,r3
 1116 0058 02D1     	 bne .L41
 1117              	 .loc 1 937 0
 1118 005a 07E0     	 b .L42
 1119              	.L40:
 938:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {			/* Blank entry */
 939:../Dave/Generated/FATFS/ff_Src/ff.c **** 			be = 1;
 1120              	 .loc 1 939 0
 1121 005c 0123     	 movs r3,#1
 1122 005e BB60     	 str r3,[r7,#8]
 1123              	.L41:
 933:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 1124              	 .loc 1 933 0 discriminator 2
 1125 0060 FB68     	 ldr r3,[r7,#12]
 1126 0062 0133     	 adds r3,r3,#1
 1127 0064 FB60     	 str r3,[r7,#12]
 1128              	.L39:
 933:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 1129              	 .loc 1 933 0 is_stmt 0 discriminator 1
 1130 0066 FB68     	 ldr r3,[r7,#12]
 1131 0068 002B     	 cmp r3,#0
 1132 006a D3D0     	 beq .L43
 1133              	.L42:
 940:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 941:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 942:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 1134              	 .loc 1 942 0 is_stmt 1
 1135 006c FB68     	 ldr r3,[r7,#12]
 1136 006e 012B     	 cmp r3,#1
 1137 0070 09D1     	 bne .L44
 943:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new obje
 1138              	 .loc 1 943 0
 1139 0072 BB68     	 ldr r3,[r7,#8]
 1140 0074 002B     	 cmp r3,#0
 1141 0076 04D1     	 bne .L45
 1142              	 .loc 1 943 0 is_stmt 0 discriminator 1
 1143 0078 3B68     	 ldr r3,[r7]
 1144 007a 022B     	 cmp r3,#2
 1145 007c 01D0     	 beq .L45
 1146              	 .loc 1 943 0 discriminator 3
 1147 007e 1223     	 movs r3,#18
 1148 0080 10E0     	 b .L47
 1149              	.L45:
 1150              	 .loc 1 943 0 discriminator 4
 1151 0082 0023     	 movs r3,#0
 1152 0084 0EE0     	 b .L47
 1153              	.L44:
 944:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 945:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 946:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* The object was opened. Reject any open against writing file and all write mode open */
 947:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 1154              	 .loc 1 947 0 is_stmt 1
 1155 0086 3B68     	 ldr r3,[r7]
 1156 0088 002B     	 cmp r3,#0
 1157 008a 08D1     	 bne .L48
 1158              	 .loc 1 947 0 is_stmt 0 discriminator 2
 1159 008c 084A     	 ldr r2,.L51
 1160 008e FB68     	 ldr r3,[r7,#12]
 1161 0090 1B01     	 lsls r3,r3,#4
 1162 0092 1344     	 add r3,r3,r2
 1163 0094 0833     	 adds r3,r3,#8
 1164 0096 9B88     	 ldrh r3,[r3,#4]
 1165 0098 B3F5807F 	 cmp r3,#256
 1166 009c 01D1     	 bne .L49
 1167              	.L48:
 1168              	 .loc 1 947 0 discriminator 3
 1169 009e 1023     	 movs r3,#16
 1170 00a0 00E0     	 b .L47
 1171              	.L49:
 1172              	 .loc 1 947 0 discriminator 4
 1173 00a2 0023     	 movs r3,#0
 1174              	.L47:
 948:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1175              	 .loc 1 948 0 is_stmt 1
 1176 00a4 1846     	 mov r0,r3
 1177 00a6 1437     	 adds r7,r7,#20
 1178              	.LCFI73:
 1179              	 .cfi_def_cfa_offset 4
 1180 00a8 BD46     	 mov sp,r7
 1181              	.LCFI74:
 1182              	 .cfi_def_cfa_register 13
 1183              	 
 1184 00aa 5DF8047B 	 ldr r7,[sp],#4
 1185              	.LCFI75:
 1186              	 .cfi_restore 7
 1187              	 .cfi_def_cfa_offset 0
 1188 00ae 7047     	 bx lr
 1189              	.L52:
 1190              	 .align 2
 1191              	.L51:
 1192 00b0 00000000 	 .word Files
 1193              	 .cfi_endproc
 1194              	.LFE12:
 1196              	 .section .text.enq_lock,"ax",%progbits
 1197              	 .align 2
 1198              	 .thumb
 1199              	 .thumb_func
 1201              	enq_lock:
 1202              	.LFB13:
 949:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 950:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 951:../Dave/Generated/FATFS/ff_Src/ff.c **** static int enq_lock (void)	/* Check if an entry is available for a new object */
 952:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1203              	 .loc 1 952 0
 1204              	 .cfi_startproc
 1205              	 
 1206              	 
 1207              	 
 1208 0000 80B4     	 push {r7}
 1209              	.LCFI76:
 1210              	 .cfi_def_cfa_offset 4
 1211              	 .cfi_offset 7,-4
 1212 0002 83B0     	 sub sp,sp,#12
 1213              	.LCFI77:
 1214              	 .cfi_def_cfa_offset 16
 1215 0004 00AF     	 add r7,sp,#0
 1216              	.LCFI78:
 1217              	 .cfi_def_cfa_register 7
 953:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
 954:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 955:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 1218              	 .loc 1 955 0
 1219 0006 0023     	 movs r3,#0
 1220 0008 7B60     	 str r3,[r7,#4]
 1221 000a 02E0     	 b .L54
 1222              	.L56:
 1223              	 .loc 1 955 0 is_stmt 0 discriminator 4
 1224 000c 7B68     	 ldr r3,[r7,#4]
 1225 000e 0133     	 adds r3,r3,#1
 1226 0010 7B60     	 str r3,[r7,#4]
 1227              	.L54:
 1228              	 .loc 1 955 0 discriminator 1
 1229 0012 7B68     	 ldr r3,[r7,#4]
 1230 0014 002B     	 cmp r3,#0
 1231 0016 06D1     	 bne .L55
 1232              	 .loc 1 955 0 discriminator 3
 1233 0018 094A     	 ldr r2,.L58
 1234 001a 7B68     	 ldr r3,[r7,#4]
 1235 001c 1B01     	 lsls r3,r3,#4
 1236 001e 1344     	 add r3,r3,r2
 1237 0020 1B68     	 ldr r3,[r3]
 1238 0022 002B     	 cmp r3,#0
 1239 0024 F2D1     	 bne .L56
 1240              	.L55:
 956:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (i == FF_FS_LOCK) ? 0 : 1;
 1241              	 .loc 1 956 0 is_stmt 1
 1242 0026 7B68     	 ldr r3,[r7,#4]
 1243 0028 012B     	 cmp r3,#1
 1244 002a 14BF     	 ite ne
 1245 002c 0123     	 movne r3,#1
 1246 002e 0023     	 moveq r3,#0
 1247 0030 DBB2     	 uxtb r3,r3
 957:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1248              	 .loc 1 957 0
 1249 0032 1846     	 mov r0,r3
 1250 0034 0C37     	 adds r7,r7,#12
 1251              	.LCFI79:
 1252              	 .cfi_def_cfa_offset 4
 1253 0036 BD46     	 mov sp,r7
 1254              	.LCFI80:
 1255              	 .cfi_def_cfa_register 13
 1256              	 
 1257 0038 5DF8047B 	 ldr r7,[sp],#4
 1258              	.LCFI81:
 1259              	 .cfi_restore 7
 1260              	 .cfi_def_cfa_offset 0
 1261 003c 7047     	 bx lr
 1262              	.L59:
 1263 003e 00BF     	 .align 2
 1264              	.L58:
 1265 0040 00000000 	 .word Files
 1266              	 .cfi_endproc
 1267              	.LFE13:
 1269              	 .section .text.inc_lock,"ax",%progbits
 1270              	 .align 2
 1271              	 .thumb
 1272              	 .thumb_func
 1274              	inc_lock:
 1275              	.LFB14:
 958:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 959:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 960:../Dave/Generated/FATFS/ff_Src/ff.c **** static UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 961:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 962:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 963:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 964:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1276              	 .loc 1 964 0
 1277              	 .cfi_startproc
 1278              	 
 1279              	 
 1280              	 
 1281 0000 80B4     	 push {r7}
 1282              	.LCFI82:
 1283              	 .cfi_def_cfa_offset 4
 1284              	 .cfi_offset 7,-4
 1285 0002 85B0     	 sub sp,sp,#20
 1286              	.LCFI83:
 1287              	 .cfi_def_cfa_offset 24
 1288 0004 00AF     	 add r7,sp,#0
 1289              	.LCFI84:
 1290              	 .cfi_def_cfa_register 7
 1291 0006 7860     	 str r0,[r7,#4]
 1292 0008 3960     	 str r1,[r7]
 965:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
 966:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 967:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 968:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 1293              	 .loc 1 968 0
 1294 000a 0023     	 movs r3,#0
 1295 000c FB60     	 str r3,[r7,#12]
 1296 000e 1FE0     	 b .L61
 1297              	.L64:
 969:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1298              	 .loc 1 969 0
 1299 0010 404A     	 ldr r2,.L74
 1300 0012 FB68     	 ldr r3,[r7,#12]
 1301 0014 1B01     	 lsls r3,r3,#4
 1302 0016 1344     	 add r3,r3,r2
 1303 0018 1A68     	 ldr r2,[r3]
 1304 001a 7B68     	 ldr r3,[r7,#4]
 1305 001c 1B68     	 ldr r3,[r3]
 1306 001e 9A42     	 cmp r2,r3
 1307 0020 13D1     	 bne .L62
 970:../Dave/Generated/FATFS/ff_Src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 1308              	 .loc 1 970 0 discriminator 1
 1309 0022 3C4A     	 ldr r2,.L74
 1310 0024 FB68     	 ldr r3,[r7,#12]
 1311 0026 1B01     	 lsls r3,r3,#4
 1312 0028 1344     	 add r3,r3,r2
 1313 002a 5A68     	 ldr r2,[r3,#4]
 1314 002c 7B68     	 ldr r3,[r7,#4]
 1315 002e 9B68     	 ldr r3,[r3,#8]
 969:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1316              	 .loc 1 969 0 discriminator 1
 1317 0030 9A42     	 cmp r2,r3
 1318 0032 0AD1     	 bne .L62
 971:../Dave/Generated/FATFS/ff_Src/ff.c **** 			Files[i].ofs == dp->dptr) break;
 1319              	 .loc 1 971 0
 1320 0034 374A     	 ldr r2,.L74
 1321 0036 FB68     	 ldr r3,[r7,#12]
 1322 0038 1B01     	 lsls r3,r3,#4
 1323 003a 1344     	 add r3,r3,r2
 1324 003c 0833     	 adds r3,r3,#8
 1325 003e 1A68     	 ldr r2,[r3]
 1326 0040 7B68     	 ldr r3,[r7,#4]
 1327 0042 5B69     	 ldr r3,[r3,#20]
 970:../Dave/Generated/FATFS/ff_Src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 1328              	 .loc 1 970 0
 1329 0044 9A42     	 cmp r2,r3
 1330 0046 00D1     	 bne .L62
 1331              	 .loc 1 971 0
 1332 0048 05E0     	 b .L63
 1333              	.L62:
 968:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1334              	 .loc 1 968 0 discriminator 2
 1335 004a FB68     	 ldr r3,[r7,#12]
 1336 004c 0133     	 adds r3,r3,#1
 1337 004e FB60     	 str r3,[r7,#12]
 1338              	.L61:
 968:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 1339              	 .loc 1 968 0 is_stmt 0 discriminator 1
 1340 0050 FB68     	 ldr r3,[r7,#12]
 1341 0052 002B     	 cmp r3,#0
 1342 0054 DCD0     	 beq .L64
 1343              	.L63:
 972:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 973:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 974:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i == FF_FS_LOCK) {				/* Not opened. Register it as new. */
 1344              	 .loc 1 974 0 is_stmt 1
 1345 0056 FB68     	 ldr r3,[r7,#12]
 1346 0058 012B     	 cmp r3,#1
 1347 005a 31D1     	 bne .L65
 975:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 1348              	 .loc 1 975 0
 1349 005c 0023     	 movs r3,#0
 1350 005e FB60     	 str r3,[r7,#12]
 1351 0060 02E0     	 b .L66
 1352              	.L68:
 1353              	 .loc 1 975 0 is_stmt 0 discriminator 4
 1354 0062 FB68     	 ldr r3,[r7,#12]
 1355 0064 0133     	 adds r3,r3,#1
 1356 0066 FB60     	 str r3,[r7,#12]
 1357              	.L66:
 1358              	 .loc 1 975 0 discriminator 1
 1359 0068 FB68     	 ldr r3,[r7,#12]
 1360 006a 002B     	 cmp r3,#0
 1361 006c 06D1     	 bne .L67
 1362              	 .loc 1 975 0 discriminator 3
 1363 006e 294A     	 ldr r2,.L74
 1364 0070 FB68     	 ldr r3,[r7,#12]
 1365 0072 1B01     	 lsls r3,r3,#4
 1366 0074 1344     	 add r3,r3,r2
 1367 0076 1B68     	 ldr r3,[r3]
 1368 0078 002B     	 cmp r3,#0
 1369 007a F2D1     	 bne .L68
 1370              	.L67:
 976:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 1371              	 .loc 1 976 0 is_stmt 1
 1372 007c FB68     	 ldr r3,[r7,#12]
 1373 007e 012B     	 cmp r3,#1
 1374 0080 01D1     	 bne .L69
 1375              	 .loc 1 976 0 is_stmt 0 discriminator 1
 1376 0082 0023     	 movs r3,#0
 1377 0084 3FE0     	 b .L70
 1378              	.L69:
 977:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].fs = dp->obj.fs;
 1379              	 .loc 1 977 0 is_stmt 1
 1380 0086 7B68     	 ldr r3,[r7,#4]
 1381 0088 1A68     	 ldr r2,[r3]
 1382 008a 2249     	 ldr r1,.L74
 1383 008c FB68     	 ldr r3,[r7,#12]
 1384 008e 1B01     	 lsls r3,r3,#4
 1385 0090 0B44     	 add r3,r3,r1
 1386 0092 1A60     	 str r2,[r3]
 978:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].clu = dp->obj.sclust;
 1387              	 .loc 1 978 0
 1388 0094 7B68     	 ldr r3,[r7,#4]
 1389 0096 9A68     	 ldr r2,[r3,#8]
 1390 0098 1E49     	 ldr r1,.L74
 1391 009a FB68     	 ldr r3,[r7,#12]
 1392 009c 1B01     	 lsls r3,r3,#4
 1393 009e 0B44     	 add r3,r3,r1
 1394 00a0 5A60     	 str r2,[r3,#4]
 979:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].ofs = dp->dptr;
 1395              	 .loc 1 979 0
 1396 00a2 7B68     	 ldr r3,[r7,#4]
 1397 00a4 5A69     	 ldr r2,[r3,#20]
 1398 00a6 1B49     	 ldr r1,.L74
 1399 00a8 FB68     	 ldr r3,[r7,#12]
 1400 00aa 1B01     	 lsls r3,r3,#4
 1401 00ac 0B44     	 add r3,r3,r1
 1402 00ae 0833     	 adds r3,r3,#8
 1403 00b0 1A60     	 str r2,[r3]
 980:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].ctr = 0;
 1404              	 .loc 1 980 0
 1405 00b2 184A     	 ldr r2,.L74
 1406 00b4 FB68     	 ldr r3,[r7,#12]
 1407 00b6 1B01     	 lsls r3,r3,#4
 1408 00b8 1344     	 add r3,r3,r2
 1409 00ba 0833     	 adds r3,r3,#8
 1410 00bc 0022     	 movs r2,#0
 1411 00be 9A80     	 strh r2,[r3,#4]
 1412              	.L65:
 981:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 982:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 983:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 1413              	 .loc 1 983 0
 1414 00c0 3B68     	 ldr r3,[r7]
 1415 00c2 002B     	 cmp r3,#0
 1416 00c4 09DD     	 ble .L71
 1417              	 .loc 1 983 0 is_stmt 0 discriminator 1
 1418 00c6 134A     	 ldr r2,.L74
 1419 00c8 FB68     	 ldr r3,[r7,#12]
 1420 00ca 1B01     	 lsls r3,r3,#4
 1421 00cc 1344     	 add r3,r3,r2
 1422 00ce 0833     	 adds r3,r3,#8
 1423 00d0 9B88     	 ldrh r3,[r3,#4]
 1424 00d2 002B     	 cmp r3,#0
 1425 00d4 01D0     	 beq .L71
 1426              	 .loc 1 983 0 discriminator 2
 1427 00d6 0023     	 movs r3,#0
 1428 00d8 15E0     	 b .L70
 1429              	.L71:
 984:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 985:../Dave/Generated/FATFS/ff_Src/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 1430              	 .loc 1 985 0 is_stmt 1
 1431 00da 3B68     	 ldr r3,[r7]
 1432 00dc 002B     	 cmp r3,#0
 1433 00de 08D1     	 bne .L72
 1434              	 .loc 1 985 0 is_stmt 0 discriminator 1
 1435 00e0 0C4A     	 ldr r2,.L74
 1436 00e2 FB68     	 ldr r3,[r7,#12]
 1437 00e4 1B01     	 lsls r3,r3,#4
 1438 00e6 1344     	 add r3,r3,r2
 1439 00e8 0833     	 adds r3,r3,#8
 1440 00ea 9B88     	 ldrh r3,[r3,#4]
 1441 00ec 0133     	 adds r3,r3,#1
 1442 00ee 9AB2     	 uxth r2,r3
 1443 00f0 01E0     	 b .L73
 1444              	.L72:
 1445              	 .loc 1 985 0 discriminator 2
 1446 00f2 4FF48072 	 mov r2,#256
 1447              	.L73:
 1448              	 .loc 1 985 0 discriminator 4
 1449 00f6 0749     	 ldr r1,.L74
 1450 00f8 FB68     	 ldr r3,[r7,#12]
 1451 00fa 1B01     	 lsls r3,r3,#4
 1452 00fc 0B44     	 add r3,r3,r1
 1453 00fe 0833     	 adds r3,r3,#8
 1454 0100 9A80     	 strh r2,[r3,#4]
 986:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 987:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return i + 1;	/* Index number origin from 1 */
 1455              	 .loc 1 987 0 is_stmt 1 discriminator 4
 1456 0102 FB68     	 ldr r3,[r7,#12]
 1457 0104 0133     	 adds r3,r3,#1
 1458              	.L70:
 988:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1459              	 .loc 1 988 0
 1460 0106 1846     	 mov r0,r3
 1461 0108 1437     	 adds r7,r7,#20
 1462              	.LCFI85:
 1463              	 .cfi_def_cfa_offset 4
 1464 010a BD46     	 mov sp,r7
 1465              	.LCFI86:
 1466              	 .cfi_def_cfa_register 13
 1467              	 
 1468 010c 5DF8047B 	 ldr r7,[sp],#4
 1469              	.LCFI87:
 1470              	 .cfi_restore 7
 1471              	 .cfi_def_cfa_offset 0
 1472 0110 7047     	 bx lr
 1473              	.L75:
 1474 0112 00BF     	 .align 2
 1475              	.L74:
 1476 0114 00000000 	 .word Files
 1477              	 .cfi_endproc
 1478              	.LFE14:
 1480              	 .section .text.dec_lock,"ax",%progbits
 1481              	 .align 2
 1482              	 .thumb
 1483              	 .thumb_func
 1485              	dec_lock:
 1486              	.LFB15:
 989:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 990:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 991:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dec_lock (	/* Decrement object open counter */
 992:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i			/* Semaphore index (1..) */
 993:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 994:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1487              	 .loc 1 994 0
 1488              	 .cfi_startproc
 1489              	 
 1490              	 
 1491              	 
 1492 0000 80B4     	 push {r7}
 1493              	.LCFI88:
 1494              	 .cfi_def_cfa_offset 4
 1495              	 .cfi_offset 7,-4
 1496 0002 85B0     	 sub sp,sp,#20
 1497              	.LCFI89:
 1498              	 .cfi_def_cfa_offset 24
 1499 0004 00AF     	 add r7,sp,#0
 1500              	.LCFI90:
 1501              	 .cfi_def_cfa_register 7
 1502 0006 7860     	 str r0,[r7,#4]
 995:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD n;
 996:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
 997:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 998:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 999:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 1503              	 .loc 1 999 0
 1504 0008 7B68     	 ldr r3,[r7,#4]
 1505 000a 013B     	 subs r3,r3,#1
 1506 000c 7B60     	 str r3,[r7,#4]
 1507 000e 7B68     	 ldr r3,[r7,#4]
 1508 0010 002B     	 cmp r3,#0
 1509 0012 25D1     	 bne .L77
1000:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n = Files[i].ctr;
 1510              	 .loc 1 1000 0
 1511 0014 174A     	 ldr r2,.L83
 1512 0016 7B68     	 ldr r3,[r7,#4]
 1513 0018 1B01     	 lsls r3,r3,#4
 1514 001a 1344     	 add r3,r3,r2
 1515 001c 0833     	 adds r3,r3,#8
 1516 001e 9B88     	 ldrh r3,[r3,#4]
 1517 0020 FB81     	 strh r3,[r7,#14]
1001:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 1518              	 .loc 1 1001 0
 1519 0022 FB89     	 ldrh r3,[r7,#14]
 1520 0024 B3F5807F 	 cmp r3,#256
 1521 0028 01D1     	 bne .L78
 1522              	 .loc 1 1001 0 is_stmt 0 discriminator 1
 1523 002a 0023     	 movs r3,#0
 1524 002c FB81     	 strh r3,[r7,#14]
 1525              	.L78:
1002:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
 1526              	 .loc 1 1002 0 is_stmt 1
 1527 002e FB89     	 ldrh r3,[r7,#14]
 1528 0030 002B     	 cmp r3,#0
 1529 0032 02D0     	 beq .L79
 1530              	 .loc 1 1002 0 is_stmt 0 discriminator 1
 1531 0034 FB89     	 ldrh r3,[r7,#14]
 1532 0036 013B     	 subs r3,r3,#1
 1533 0038 FB81     	 strh r3,[r7,#14]
 1534              	.L79:
1003:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].ctr = n;
 1535              	 .loc 1 1003 0 is_stmt 1
 1536 003a 0E4A     	 ldr r2,.L83
 1537 003c 7B68     	 ldr r3,[r7,#4]
 1538 003e 1B01     	 lsls r3,r3,#4
 1539 0040 1344     	 add r3,r3,r2
 1540 0042 0833     	 adds r3,r3,#8
 1541 0044 FA89     	 ldrh r2,[r7,#14]
 1542 0046 9A80     	 strh r2,[r3,#4]
1004:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 1543              	 .loc 1 1004 0
 1544 0048 FB89     	 ldrh r3,[r7,#14]
 1545 004a 002B     	 cmp r3,#0
 1546 004c 05D1     	 bne .L80
 1547              	 .loc 1 1004 0 is_stmt 0 discriminator 1
 1548 004e 094A     	 ldr r2,.L83
 1549 0050 7B68     	 ldr r3,[r7,#4]
 1550 0052 1B01     	 lsls r3,r3,#4
 1551 0054 1344     	 add r3,r3,r2
 1552 0056 0022     	 movs r2,#0
 1553 0058 1A60     	 str r2,[r3]
 1554              	.L80:
1005:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = FR_OK;
 1555              	 .loc 1 1005 0 is_stmt 1
 1556 005a 0023     	 movs r3,#0
 1557 005c 7B73     	 strb r3,[r7,#13]
 1558 005e 01E0     	 b .L81
 1559              	.L77:
1006:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
1007:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 1560              	 .loc 1 1007 0
 1561 0060 0223     	 movs r3,#2
 1562 0062 7B73     	 strb r3,[r7,#13]
 1563              	.L81:
1008:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1009:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1564              	 .loc 1 1009 0
 1565 0064 7B7B     	 ldrb r3,[r7,#13]
1010:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1566              	 .loc 1 1010 0
 1567 0066 1846     	 mov r0,r3
 1568 0068 1437     	 adds r7,r7,#20
 1569              	.LCFI91:
 1570              	 .cfi_def_cfa_offset 4
 1571 006a BD46     	 mov sp,r7
 1572              	.LCFI92:
 1573              	 .cfi_def_cfa_register 13
 1574              	 
 1575 006c 5DF8047B 	 ldr r7,[sp],#4
 1576              	.LCFI93:
 1577              	 .cfi_restore 7
 1578              	 .cfi_def_cfa_offset 0
 1579 0070 7047     	 bx lr
 1580              	.L84:
 1581 0072 00BF     	 .align 2
 1582              	.L83:
 1583 0074 00000000 	 .word Files
 1584              	 .cfi_endproc
 1585              	.LFE15:
 1587              	 .section .text.clear_lock,"ax",%progbits
 1588              	 .align 2
 1589              	 .thumb
 1590              	 .thumb_func
 1592              	clear_lock:
 1593              	.LFB16:
1011:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1012:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1013:../Dave/Generated/FATFS/ff_Src/ff.c **** static void clear_lock (	/* Clear lock entries of the volume */
1014:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs
1015:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1016:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1594              	 .loc 1 1016 0
 1595              	 .cfi_startproc
 1596              	 
 1597              	 
 1598              	 
 1599 0000 80B4     	 push {r7}
 1600              	.LCFI94:
 1601              	 .cfi_def_cfa_offset 4
 1602              	 .cfi_offset 7,-4
 1603 0002 85B0     	 sub sp,sp,#20
 1604              	.LCFI95:
 1605              	 .cfi_def_cfa_offset 24
 1606 0004 00AF     	 add r7,sp,#0
 1607              	.LCFI96:
 1608              	 .cfi_def_cfa_register 7
 1609 0006 7860     	 str r0,[r7,#4]
1017:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
1018:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1019:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {
 1610              	 .loc 1 1019 0
 1611 0008 0023     	 movs r3,#0
 1612 000a FB60     	 str r3,[r7,#12]
 1613 000c 10E0     	 b .L86
 1614              	.L88:
1020:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1615              	 .loc 1 1020 0
 1616 000e 0C4A     	 ldr r2,.L89
 1617 0010 FB68     	 ldr r3,[r7,#12]
 1618 0012 1B01     	 lsls r3,r3,#4
 1619 0014 1344     	 add r3,r3,r2
 1620 0016 1A68     	 ldr r2,[r3]
 1621 0018 7B68     	 ldr r3,[r7,#4]
 1622 001a 9A42     	 cmp r2,r3
 1623 001c 05D1     	 bne .L87
 1624              	 .loc 1 1020 0 is_stmt 0 discriminator 1
 1625 001e 084A     	 ldr r2,.L89
 1626 0020 FB68     	 ldr r3,[r7,#12]
 1627 0022 1B01     	 lsls r3,r3,#4
 1628 0024 1344     	 add r3,r3,r2
 1629 0026 0022     	 movs r2,#0
 1630 0028 1A60     	 str r2,[r3]
 1631              	.L87:
1019:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1632              	 .loc 1 1019 0 is_stmt 1 discriminator 2
 1633 002a FB68     	 ldr r3,[r7,#12]
 1634 002c 0133     	 adds r3,r3,#1
 1635 002e FB60     	 str r3,[r7,#12]
 1636              	.L86:
1019:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1637              	 .loc 1 1019 0 is_stmt 0 discriminator 1
 1638 0030 FB68     	 ldr r3,[r7,#12]
 1639 0032 002B     	 cmp r3,#0
 1640 0034 EBD0     	 beq .L88
1021:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1022:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1641              	 .loc 1 1022 0 is_stmt 1
 1642 0036 1437     	 adds r7,r7,#20
 1643              	.LCFI97:
 1644              	 .cfi_def_cfa_offset 4
 1645 0038 BD46     	 mov sp,r7
 1646              	.LCFI98:
 1647              	 .cfi_def_cfa_register 13
 1648              	 
 1649 003a 5DF8047B 	 ldr r7,[sp],#4
 1650              	.LCFI99:
 1651              	 .cfi_restore 7
 1652              	 .cfi_def_cfa_offset 0
 1653 003e 7047     	 bx lr
 1654              	.L90:
 1655              	 .align 2
 1656              	.L89:
 1657 0040 00000000 	 .word Files
 1658              	 .cfi_endproc
 1659              	.LFE16:
 1661              	 .section .text.sync_window,"ax",%progbits
 1662              	 .align 2
 1663              	 .thumb
 1664              	 .thumb_func
 1666              	sync_window:
 1667              	.LFB17:
1023:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1024:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_LOCK != 0 */
1025:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1026:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1027:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1028:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1029:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Move/Flush disk access window in the filesystem object                */
1030:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1031:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1032:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
1033:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs			/* Filesystem object */
1034:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1035:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1668              	 .loc 1 1035 0
 1669              	 .cfi_startproc
 1670              	 
 1671              	 
 1672 0000 80B5     	 push {r7,lr}
 1673              	.LCFI100:
 1674              	 .cfi_def_cfa_offset 8
 1675              	 .cfi_offset 7,-8
 1676              	 .cfi_offset 14,-4
 1677 0002 84B0     	 sub sp,sp,#16
 1678              	.LCFI101:
 1679              	 .cfi_def_cfa_offset 24
 1680 0004 00AF     	 add r7,sp,#0
 1681              	.LCFI102:
 1682              	 .cfi_def_cfa_register 7
 1683 0006 7860     	 str r0,[r7,#4]
1036:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_OK;
 1684              	 .loc 1 1036 0
 1685 0008 0023     	 movs r3,#0
 1686 000a FB73     	 strb r3,[r7,#15]
1037:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1038:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1039:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->wflag) {	/* Is the disk access window dirty */
 1687              	 .loc 1 1039 0
 1688 000c 7B68     	 ldr r3,[r7,#4]
 1689 000e DB78     	 ldrb r3,[r3,#3]
 1690 0010 002B     	 cmp r3,#0
 1691 0012 30D0     	 beq .L92
1040:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 1692              	 .loc 1 1040 0
 1693 0014 7B68     	 ldr r3,[r7,#4]
 1694 0016 5978     	 ldrb r1,[r3,#1]
 1695 0018 7B68     	 ldr r3,[r7,#4]
 1696 001a 03F13802 	 add r2,r3,#56
 1697 001e 7B68     	 ldr r3,[r7,#4]
 1698 0020 5B6B     	 ldr r3,[r3,#52]
 1699 0022 0846     	 mov r0,r1
 1700 0024 1146     	 mov r1,r2
 1701 0026 1A46     	 mov r2,r3
 1702 0028 0123     	 movs r3,#1
 1703 002a FFF7FEFF 	 bl disk_write
 1704 002e 0346     	 mov r3,r0
 1705 0030 002B     	 cmp r3,#0
 1706 0032 1ED1     	 bne .L93
1041:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 0;	/* Clear window dirty flag */
 1707              	 .loc 1 1041 0
 1708 0034 7B68     	 ldr r3,[r7,#4]
 1709 0036 0022     	 movs r2,#0
 1710 0038 DA70     	 strb r2,[r3,#3]
1042:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 1711              	 .loc 1 1042 0
 1712 003a 7B68     	 ldr r3,[r7,#4]
 1713 003c 5A6B     	 ldr r2,[r3,#52]
 1714 003e 7B68     	 ldr r3,[r7,#4]
 1715 0040 9B6A     	 ldr r3,[r3,#40]
 1716 0042 D21A     	 subs r2,r2,r3
 1717 0044 7B68     	 ldr r3,[r7,#4]
 1718 0046 1B6A     	 ldr r3,[r3,#32]
 1719 0048 9A42     	 cmp r2,r3
 1720 004a 14D2     	 bcs .L92
1043:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 1721              	 .loc 1 1043 0
 1722 004c 7B68     	 ldr r3,[r7,#4]
 1723 004e 9B78     	 ldrb r3,[r3,#2]
 1724 0050 022B     	 cmp r3,#2
 1725 0052 10D1     	 bne .L92
 1726              	 .loc 1 1043 0 is_stmt 0 discriminator 1
 1727 0054 7B68     	 ldr r3,[r7,#4]
 1728 0056 5878     	 ldrb r0,[r3,#1]
 1729 0058 7B68     	 ldr r3,[r7,#4]
 1730 005a 03F13801 	 add r1,r3,#56
 1731 005e 7B68     	 ldr r3,[r7,#4]
 1732 0060 5A6B     	 ldr r2,[r3,#52]
 1733 0062 7B68     	 ldr r3,[r7,#4]
 1734 0064 1B6A     	 ldr r3,[r3,#32]
 1735 0066 1344     	 add r3,r3,r2
 1736 0068 1A46     	 mov r2,r3
 1737 006a 0123     	 movs r3,#1
 1738 006c FFF7FEFF 	 bl disk_write
 1739 0070 01E0     	 b .L92
 1740              	.L93:
1044:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1045:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1046:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_DISK_ERR;
 1741              	 .loc 1 1046 0 is_stmt 1
 1742 0072 0123     	 movs r3,#1
 1743 0074 FB73     	 strb r3,[r7,#15]
 1744              	.L92:
1047:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1048:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1049:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1745              	 .loc 1 1049 0
 1746 0076 FB7B     	 ldrb r3,[r7,#15]
1050:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1747              	 .loc 1 1050 0
 1748 0078 1846     	 mov r0,r3
 1749 007a 1037     	 adds r7,r7,#16
 1750              	.LCFI103:
 1751              	 .cfi_def_cfa_offset 8
 1752 007c BD46     	 mov sp,r7
 1753              	.LCFI104:
 1754              	 .cfi_def_cfa_register 13
 1755              	 
 1756 007e 80BD     	 pop {r7,pc}
 1757              	 .cfi_endproc
 1758              	.LFE17:
 1760              	 .section .text.move_window,"ax",%progbits
 1761              	 .align 2
 1762              	 .thumb
 1763              	 .thumb_func
 1765              	move_window:
 1766              	.LFB18:
1051:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1052:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1053:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1054:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
1055:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Filesystem object */
1056:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sector		/* Sector number to make appearance in the fs->win[] */
1057:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1058:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1767              	 .loc 1 1058 0
 1768              	 .cfi_startproc
 1769              	 
 1770              	 
 1771 0000 80B5     	 push {r7,lr}
 1772              	.LCFI105:
 1773              	 .cfi_def_cfa_offset 8
 1774              	 .cfi_offset 7,-8
 1775              	 .cfi_offset 14,-4
 1776 0002 84B0     	 sub sp,sp,#16
 1777              	.LCFI106:
 1778              	 .cfi_def_cfa_offset 24
 1779 0004 00AF     	 add r7,sp,#0
 1780              	.LCFI107:
 1781              	 .cfi_def_cfa_register 7
 1782 0006 7860     	 str r0,[r7,#4]
 1783 0008 3960     	 str r1,[r7]
1059:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_OK;
 1784              	 .loc 1 1059 0
 1785 000a 0023     	 movs r3,#0
 1786 000c FB73     	 strb r3,[r7,#15]
1060:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1061:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1062:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sector != fs->winsect) {	/* Window offset changed? */
 1787              	 .loc 1 1062 0
 1788 000e 7B68     	 ldr r3,[r7,#4]
 1789 0010 5A6B     	 ldr r2,[r3,#52]
 1790 0012 3B68     	 ldr r3,[r7]
 1791 0014 9A42     	 cmp r2,r3
 1792 0016 1CD0     	 beq .L97
1063:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1064:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = sync_window(fs);		/* Write-back changes */
 1793              	 .loc 1 1064 0
 1794 0018 7868     	 ldr r0,[r7,#4]
 1795 001a FFF7FEFF 	 bl sync_window
 1796 001e 0346     	 mov r3,r0
 1797 0020 FB73     	 strb r3,[r7,#15]
1065:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1066:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 1798              	 .loc 1 1066 0
 1799 0022 FB7B     	 ldrb r3,[r7,#15]
 1800 0024 002B     	 cmp r3,#0
 1801 0026 14D1     	 bne .L97
1067:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 1802              	 .loc 1 1067 0
 1803 0028 7B68     	 ldr r3,[r7,#4]
 1804 002a 5A78     	 ldrb r2,[r3,#1]
 1805 002c 7B68     	 ldr r3,[r7,#4]
 1806 002e 3833     	 adds r3,r3,#56
 1807 0030 1046     	 mov r0,r2
 1808 0032 1946     	 mov r1,r3
 1809 0034 3A68     	 ldr r2,[r7]
 1810 0036 0123     	 movs r3,#1
 1811 0038 FFF7FEFF 	 bl disk_read
 1812 003c 0346     	 mov r3,r0
 1813 003e 002B     	 cmp r3,#0
 1814 0040 04D0     	 beq .L98
1068:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 1815              	 .loc 1 1068 0
 1816 0042 4FF0FF33 	 mov r3,#-1
 1817 0046 3B60     	 str r3,[r7]
1069:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_DISK_ERR;
 1818              	 .loc 1 1069 0
 1819 0048 0123     	 movs r3,#1
 1820 004a FB73     	 strb r3,[r7,#15]
 1821              	.L98:
1070:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1071:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->winsect = sector;
 1822              	 .loc 1 1071 0
 1823 004c 7B68     	 ldr r3,[r7,#4]
 1824 004e 3A68     	 ldr r2,[r7]
 1825 0050 5A63     	 str r2,[r3,#52]
 1826              	.L97:
1072:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1073:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1074:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1827              	 .loc 1 1074 0
 1828 0052 FB7B     	 ldrb r3,[r7,#15]
1075:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1829              	 .loc 1 1075 0
 1830 0054 1846     	 mov r0,r3
 1831 0056 1037     	 adds r7,r7,#16
 1832              	.LCFI108:
 1833              	 .cfi_def_cfa_offset 8
 1834 0058 BD46     	 mov sp,r7
 1835              	.LCFI109:
 1836              	 .cfi_def_cfa_register 13
 1837              	 
 1838 005a 80BD     	 pop {r7,pc}
 1839              	 .cfi_endproc
 1840              	.LFE18:
 1842              	 .section .text.sync_fs,"ax",%progbits
 1843              	 .align 2
 1844              	 .thumb
 1845              	 .thumb_func
 1847              	sync_fs:
 1848              	.LFB19:
1076:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1077:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1078:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1079:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1080:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1081:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1082:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Synchronize filesystem and data on the storage                        */
1083:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1084:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1085:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
1086:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs		/* Filesystem object */
1087:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1088:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1849              	 .loc 1 1088 0
 1850              	 .cfi_startproc
 1851              	 
 1852              	 
 1853 0000 80B5     	 push {r7,lr}
 1854              	.LCFI110:
 1855              	 .cfi_def_cfa_offset 8
 1856              	 .cfi_offset 7,-8
 1857              	 .cfi_offset 14,-4
 1858 0002 84B0     	 sub sp,sp,#16
 1859              	.LCFI111:
 1860              	 .cfi_def_cfa_offset 24
 1861 0004 00AF     	 add r7,sp,#0
 1862              	.LCFI112:
 1863              	 .cfi_def_cfa_register 7
 1864 0006 7860     	 str r0,[r7,#4]
1089:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1090:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1091:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1092:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = sync_window(fs);
 1865              	 .loc 1 1092 0
 1866 0008 7868     	 ldr r0,[r7,#4]
 1867 000a FFF7FEFF 	 bl sync_window
 1868 000e 0346     	 mov r3,r0
 1869 0010 FB73     	 strb r3,[r7,#15]
1093:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 1870              	 .loc 1 1093 0
 1871 0012 FB7B     	 ldrb r3,[r7,#15]
 1872 0014 002B     	 cmp r3,#0
 1873 0016 57D1     	 bne .L101
1094:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 1874              	 .loc 1 1094 0
 1875 0018 7B68     	 ldr r3,[r7,#4]
 1876 001a 1B78     	 ldrb r3,[r3]
 1877 001c 032B     	 cmp r3,#3
 1878 001e 47D1     	 bne .L102
 1879              	 .loc 1 1094 0 is_stmt 0 discriminator 1
 1880 0020 7B68     	 ldr r3,[r7,#4]
 1881 0022 1B79     	 ldrb r3,[r3,#4]
 1882 0024 012B     	 cmp r3,#1
 1883 0026 43D1     	 bne .L102
1095:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Create FSInfo structure */
1096:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(fs->win, 0, SS(fs));
 1884              	 .loc 1 1096 0 is_stmt 1
 1885 0028 7B68     	 ldr r3,[r7,#4]
 1886 002a 3833     	 adds r3,r3,#56
 1887 002c 1846     	 mov r0,r3
 1888 002e 0021     	 movs r1,#0
 1889 0030 4FF40072 	 mov r2,#512
 1890 0034 FFF7FEFF 	 bl mem_set
1097:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 1891              	 .loc 1 1097 0
 1892 0038 7B68     	 ldr r3,[r7,#4]
 1893 003a 03F23623 	 addw r3,r3,#566
 1894 003e 1846     	 mov r0,r3
 1895 0040 4AF65521 	 movw r1,#43605
 1896 0044 FFF7FEFF 	 bl st_word
1098:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 1897              	 .loc 1 1098 0
 1898 0048 7B68     	 ldr r3,[r7,#4]
 1899 004a 3833     	 adds r3,r3,#56
 1900 004c 1846     	 mov r0,r3
 1901 004e 2149     	 ldr r1,.L104
 1902 0050 FFF7FEFF 	 bl st_dword
1099:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 1903              	 .loc 1 1099 0
 1904 0054 7B68     	 ldr r3,[r7,#4]
 1905 0056 03F50773 	 add r3,r3,#540
 1906 005a 1846     	 mov r0,r3
 1907 005c 1E49     	 ldr r1,.L104+4
 1908 005e FFF7FEFF 	 bl st_dword
1100:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 1909              	 .loc 1 1100 0
 1910 0062 7B68     	 ldr r3,[r7,#4]
 1911 0064 03F50872 	 add r2,r3,#544
 1912 0068 7B68     	 ldr r3,[r7,#4]
 1913 006a 5B69     	 ldr r3,[r3,#20]
 1914 006c 1046     	 mov r0,r2
 1915 006e 1946     	 mov r1,r3
 1916 0070 FFF7FEFF 	 bl st_dword
1101:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 1917              	 .loc 1 1101 0
 1918 0074 7B68     	 ldr r3,[r7,#4]
 1919 0076 03F50972 	 add r2,r3,#548
 1920 007a 7B68     	 ldr r3,[r7,#4]
 1921 007c 1B69     	 ldr r3,[r3,#16]
 1922 007e 1046     	 mov r0,r2
 1923 0080 1946     	 mov r1,r3
 1924 0082 FFF7FEFF 	 bl st_dword
1102:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Write it into the FSInfo sector */
1103:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->winsect = fs->volbase + 1;
 1925              	 .loc 1 1103 0
 1926 0086 7B68     	 ldr r3,[r7,#4]
 1927 0088 5B6A     	 ldr r3,[r3,#36]
 1928 008a 5A1C     	 adds r2,r3,#1
 1929 008c 7B68     	 ldr r3,[r7,#4]
 1930 008e 5A63     	 str r2,[r3,#52]
1104:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 1931              	 .loc 1 1104 0
 1932 0090 7B68     	 ldr r3,[r7,#4]
 1933 0092 5978     	 ldrb r1,[r3,#1]
 1934 0094 7B68     	 ldr r3,[r7,#4]
 1935 0096 03F13802 	 add r2,r3,#56
 1936 009a 7B68     	 ldr r3,[r7,#4]
 1937 009c 5B6B     	 ldr r3,[r3,#52]
 1938 009e 0846     	 mov r0,r1
 1939 00a0 1146     	 mov r1,r2
 1940 00a2 1A46     	 mov r2,r3
 1941 00a4 0123     	 movs r3,#1
 1942 00a6 FFF7FEFF 	 bl disk_write
1105:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag = 0;
 1943              	 .loc 1 1105 0
 1944 00aa 7B68     	 ldr r3,[r7,#4]
 1945 00ac 0022     	 movs r2,#0
 1946 00ae 1A71     	 strb r2,[r3,#4]
 1947              	.L102:
1106:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1107:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Make sure that no pending write process in the lower layer */
1108:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 1948              	 .loc 1 1108 0
 1949 00b0 7B68     	 ldr r3,[r7,#4]
 1950 00b2 5B78     	 ldrb r3,[r3,#1]
 1951 00b4 1846     	 mov r0,r3
 1952 00b6 0021     	 movs r1,#0
 1953 00b8 0022     	 movs r2,#0
 1954 00ba FFF7FEFF 	 bl disk_ioctl
 1955 00be 0346     	 mov r3,r0
 1956 00c0 002B     	 cmp r3,#0
 1957 00c2 01D0     	 beq .L101
 1958              	 .loc 1 1108 0 is_stmt 0 discriminator 1
 1959 00c4 0123     	 movs r3,#1
 1960 00c6 FB73     	 strb r3,[r7,#15]
 1961              	.L101:
1109:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1110:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1111:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1962              	 .loc 1 1111 0 is_stmt 1
 1963 00c8 FB7B     	 ldrb r3,[r7,#15]
1112:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1964              	 .loc 1 1112 0
 1965 00ca 1846     	 mov r0,r3
 1966 00cc 1037     	 adds r7,r7,#16
 1967              	.LCFI113:
 1968              	 .cfi_def_cfa_offset 8
 1969 00ce BD46     	 mov sp,r7
 1970              	.LCFI114:
 1971              	 .cfi_def_cfa_register 13
 1972              	 
 1973 00d0 80BD     	 pop {r7,pc}
 1974              	.L105:
 1975 00d2 00BF     	 .align 2
 1976              	.L104:
 1977 00d4 52526141 	 .word 1096897106
 1978 00d8 72724161 	 .word 1631679090
 1979              	 .cfi_endproc
 1980              	.LFE19:
 1982              	 .section .text.clst2sect,"ax",%progbits
 1983              	 .align 2
 1984              	 .thumb
 1985              	 .thumb_func
 1987              	clst2sect:
 1988              	.LFB20:
1113:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1114:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1115:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1116:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1117:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1118:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1119:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get physical sector number from cluster number                        */
1120:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1121:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1122:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
1123:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
1124:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst		/* Cluster# to be converted */
1125:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1126:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1989              	 .loc 1 1126 0
 1990              	 .cfi_startproc
 1991              	 
 1992              	 
 1993              	 
 1994 0000 80B4     	 push {r7}
 1995              	.LCFI115:
 1996              	 .cfi_def_cfa_offset 4
 1997              	 .cfi_offset 7,-4
 1998 0002 83B0     	 sub sp,sp,#12
 1999              	.LCFI116:
 2000              	 .cfi_def_cfa_offset 16
 2001 0004 00AF     	 add r7,sp,#0
 2002              	.LCFI117:
 2003              	 .cfi_def_cfa_register 7
 2004 0006 7860     	 str r0,[r7,#4]
 2005 0008 3960     	 str r1,[r7]
1127:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst -= 2;		/* Cluster number is origin from 2 */
 2006              	 .loc 1 1127 0
 2007 000a 3B68     	 ldr r3,[r7]
 2008 000c 023B     	 subs r3,r3,#2
 2009 000e 3B60     	 str r3,[r7]
1128:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 2010              	 .loc 1 1128 0
 2011 0010 7B68     	 ldr r3,[r7,#4]
 2012 0012 DB69     	 ldr r3,[r3,#28]
 2013 0014 9A1E     	 subs r2,r3,#2
 2014 0016 3B68     	 ldr r3,[r7]
 2015 0018 9A42     	 cmp r2,r3
 2016 001a 01D8     	 bhi .L107
 2017              	 .loc 1 1128 0 is_stmt 0 discriminator 1
 2018 001c 0023     	 movs r3,#0
 2019 001e 08E0     	 b .L108
 2020              	.L107:
1129:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 2021              	 .loc 1 1129 0 is_stmt 1
 2022 0020 7B68     	 ldr r3,[r7,#4]
 2023 0022 1A6B     	 ldr r2,[r3,#48]
 2024 0024 7B68     	 ldr r3,[r7,#4]
 2025 0026 5B89     	 ldrh r3,[r3,#10]
 2026 0028 1946     	 mov r1,r3
 2027 002a 3B68     	 ldr r3,[r7]
 2028 002c 03FB01F3 	 mul r3,r3,r1
 2029 0030 1344     	 add r3,r3,r2
 2030              	.L108:
1130:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2031              	 .loc 1 1130 0
 2032 0032 1846     	 mov r0,r3
 2033 0034 0C37     	 adds r7,r7,#12
 2034              	.LCFI118:
 2035              	 .cfi_def_cfa_offset 4
 2036 0036 BD46     	 mov sp,r7
 2037              	.LCFI119:
 2038              	 .cfi_def_cfa_register 13
 2039              	 
 2040 0038 5DF8047B 	 ldr r7,[sp],#4
 2041              	.LCFI120:
 2042              	 .cfi_restore 7
 2043              	 .cfi_def_cfa_offset 0
 2044 003c 7047     	 bx lr
 2045              	 .cfi_endproc
 2046              	.LFE20:
 2048 003e 00BF     	 .section .text.get_fat,"ax",%progbits
 2049              	 .align 2
 2050              	 .thumb
 2051              	 .thumb_func
 2053              	get_fat:
 2054              	.LFB21:
1131:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1132:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1133:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1134:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1135:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1136:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT access - Read value of a FAT entry                                */
1137:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1138:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1139:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
1140:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,	/* Corresponding object */
1141:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst		/* Cluster number to get the value */
1142:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1143:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2055              	 .loc 1 1143 0
 2056              	 .cfi_startproc
 2057              	 
 2058              	 
 2059 0000 80B5     	 push {r7,lr}
 2060              	.LCFI121:
 2061              	 .cfi_def_cfa_offset 8
 2062              	 .cfi_offset 7,-8
 2063              	 .cfi_offset 14,-4
 2064 0002 86B0     	 sub sp,sp,#24
 2065              	.LCFI122:
 2066              	 .cfi_def_cfa_offset 32
 2067 0004 00AF     	 add r7,sp,#0
 2068              	.LCFI123:
 2069              	 .cfi_def_cfa_register 7
 2070 0006 7860     	 str r0,[r7,#4]
 2071 0008 3960     	 str r1,[r7]
1144:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT wc, bc;
1145:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD val;
1146:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = obj->fs;
 2072              	 .loc 1 1146 0
 2073 000a 7B68     	 ldr r3,[r7,#4]
 2074 000c 1B68     	 ldr r3,[r3]
 2075 000e 3B61     	 str r3,[r7,#16]
1147:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1148:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1149:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 2076              	 .loc 1 1149 0
 2077 0010 3B68     	 ldr r3,[r7]
 2078 0012 012B     	 cmp r3,#1
 2079 0014 04D9     	 bls .L110
 2080              	 .loc 1 1149 0 is_stmt 0 discriminator 1
 2081 0016 3B69     	 ldr r3,[r7,#16]
 2082 0018 DA69     	 ldr r2,[r3,#28]
 2083 001a 3B68     	 ldr r3,[r7]
 2084 001c 9A42     	 cmp r2,r3
 2085 001e 02D8     	 bhi .L111
 2086              	.L110:
1150:../Dave/Generated/FATFS/ff_Src/ff.c **** 		val = 1;	/* Internal error */
 2087              	 .loc 1 1150 0 is_stmt 1
 2088 0020 0123     	 movs r3,#1
 2089 0022 7B61     	 str r3,[r7,#20]
 2090 0024 86E0     	 b .L112
 2091              	.L111:
1151:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1152:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
1153:../Dave/Generated/FATFS/ff_Src/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 2092              	 .loc 1 1153 0
 2093 0026 4FF0FF33 	 mov r3,#-1
 2094 002a 7B61     	 str r3,[r7,#20]
1154:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1155:../Dave/Generated/FATFS/ff_Src/ff.c **** 		switch (fs->fs_type) {
 2095              	 .loc 1 1155 0
 2096 002c 3B69     	 ldr r3,[r7,#16]
 2097 002e 1B78     	 ldrb r3,[r3]
 2098 0030 022B     	 cmp r3,#2
 2099 0032 47D0     	 beq .L114
 2100 0034 032B     	 cmp r3,#3
 2101 0036 5FD0     	 beq .L115
 2102 0038 012B     	 cmp r3,#1
 2103 003a 79D1     	 bne .L124
1156:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT12 :
1157:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 2104              	 .loc 1 1157 0
 2105 003c 3B68     	 ldr r3,[r7]
 2106 003e FB60     	 str r3,[r7,#12]
 2107 0040 FB68     	 ldr r3,[r7,#12]
 2108 0042 5B08     	 lsrs r3,r3,#1
 2109 0044 FA68     	 ldr r2,[r7,#12]
 2110 0046 1344     	 add r3,r3,r2
 2111 0048 FB60     	 str r3,[r7,#12]
1158:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2112              	 .loc 1 1158 0
 2113 004a 3B69     	 ldr r3,[r7,#16]
 2114 004c 9A6A     	 ldr r2,[r3,#40]
 2115 004e FB68     	 ldr r3,[r7,#12]
 2116 0050 5B0A     	 lsrs r3,r3,#9
 2117 0052 1344     	 add r3,r3,r2
 2118 0054 3869     	 ldr r0,[r7,#16]
 2119 0056 1946     	 mov r1,r3
 2120 0058 FFF7FEFF 	 bl move_window
 2121 005c 0346     	 mov r3,r0
 2122 005e 002B     	 cmp r3,#0
 2123 0060 00D0     	 beq .L117
 2124 0062 67E0     	 b .L112
 2125              	.L117:
1159:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 2126              	 .loc 1 1159 0
 2127 0064 FB68     	 ldr r3,[r7,#12]
 2128 0066 5A1C     	 adds r2,r3,#1
 2129 0068 FA60     	 str r2,[r7,#12]
 2130 006a C3F30803 	 ubfx r3,r3,#0,#9
 2131 006e 3A69     	 ldr r2,[r7,#16]
 2132 0070 1344     	 add r3,r3,r2
 2133 0072 93F83830 	 ldrb r3,[r3,#56]
 2134 0076 BB60     	 str r3,[r7,#8]
1160:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2135              	 .loc 1 1160 0
 2136 0078 3B69     	 ldr r3,[r7,#16]
 2137 007a 9A6A     	 ldr r2,[r3,#40]
 2138 007c FB68     	 ldr r3,[r7,#12]
 2139 007e 5B0A     	 lsrs r3,r3,#9
 2140 0080 1344     	 add r3,r3,r2
 2141 0082 3869     	 ldr r0,[r7,#16]
 2142 0084 1946     	 mov r1,r3
 2143 0086 FFF7FEFF 	 bl move_window
 2144 008a 0346     	 mov r3,r0
 2145 008c 002B     	 cmp r3,#0
 2146 008e 00D0     	 beq .L118
 2147 0090 50E0     	 b .L112
 2148              	.L118:
1161:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 2149              	 .loc 1 1161 0
 2150 0092 FB68     	 ldr r3,[r7,#12]
 2151 0094 C3F30803 	 ubfx r3,r3,#0,#9
 2152 0098 3A69     	 ldr r2,[r7,#16]
 2153 009a 1344     	 add r3,r3,r2
 2154 009c 93F83830 	 ldrb r3,[r3,#56]
 2155 00a0 1B02     	 lsls r3,r3,#8
 2156 00a2 1A46     	 mov r2,r3
 2157 00a4 BB68     	 ldr r3,[r7,#8]
 2158 00a6 1343     	 orrs r3,r3,r2
 2159 00a8 BB60     	 str r3,[r7,#8]
1162:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 2160              	 .loc 1 1162 0
 2161 00aa 3B68     	 ldr r3,[r7]
 2162 00ac 03F00103 	 and r3,r3,#1
 2163 00b0 002B     	 cmp r3,#0
 2164 00b2 02D0     	 beq .L119
 2165              	 .loc 1 1162 0 is_stmt 0 discriminator 1
 2166 00b4 BB68     	 ldr r3,[r7,#8]
 2167 00b6 1B09     	 lsrs r3,r3,#4
 2168 00b8 02E0     	 b .L120
 2169              	.L119:
 2170              	 .loc 1 1162 0 discriminator 2
 2171 00ba BB68     	 ldr r3,[r7,#8]
 2172 00bc C3F30B03 	 ubfx r3,r3,#0,#12
 2173              	.L120:
 2174              	 .loc 1 1162 0 discriminator 4
 2175 00c0 7B61     	 str r3,[r7,#20]
1163:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2176              	 .loc 1 1163 0 is_stmt 1 discriminator 4
 2177 00c2 37E0     	 b .L112
 2178              	.L114:
1164:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1165:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT16 :
1166:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 2179              	 .loc 1 1166 0
 2180 00c4 3B69     	 ldr r3,[r7,#16]
 2181 00c6 9A6A     	 ldr r2,[r3,#40]
 2182 00c8 3B68     	 ldr r3,[r7]
 2183 00ca 1B0A     	 lsrs r3,r3,#8
 2184 00cc 1344     	 add r3,r3,r2
 2185 00ce 3869     	 ldr r0,[r7,#16]
 2186 00d0 1946     	 mov r1,r3
 2187 00d2 FFF7FEFF 	 bl move_window
 2188 00d6 0346     	 mov r3,r0
 2189 00d8 002B     	 cmp r3,#0
 2190 00da 00D0     	 beq .L121
 2191 00dc 2AE0     	 b .L112
 2192              	.L121:
1167:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 2193              	 .loc 1 1167 0
 2194 00de 3B68     	 ldr r3,[r7]
 2195 00e0 5B00     	 lsls r3,r3,#1
 2196 00e2 03F4FF73 	 and r3,r3,#510
 2197 00e6 3833     	 adds r3,r3,#56
 2198 00e8 3A69     	 ldr r2,[r7,#16]
 2199 00ea 1344     	 add r3,r3,r2
 2200 00ec 1846     	 mov r0,r3
 2201 00ee FFF7FEFF 	 bl ld_word
 2202 00f2 0346     	 mov r3,r0
 2203 00f4 7B61     	 str r3,[r7,#20]
1168:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2204              	 .loc 1 1168 0
 2205 00f6 1DE0     	 b .L112
 2206              	.L115:
1169:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1170:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT32 :
1171:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 2207              	 .loc 1 1171 0
 2208 00f8 3B69     	 ldr r3,[r7,#16]
 2209 00fa 9A6A     	 ldr r2,[r3,#40]
 2210 00fc 3B68     	 ldr r3,[r7]
 2211 00fe DB09     	 lsrs r3,r3,#7
 2212 0100 1344     	 add r3,r3,r2
 2213 0102 3869     	 ldr r0,[r7,#16]
 2214 0104 1946     	 mov r1,r3
 2215 0106 FFF7FEFF 	 bl move_window
 2216 010a 0346     	 mov r3,r0
 2217 010c 002B     	 cmp r3,#0
 2218 010e 00D0     	 beq .L122
 2219 0110 10E0     	 b .L112
 2220              	.L122:
1172:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
 2221              	 .loc 1 1172 0
 2222 0112 3B68     	 ldr r3,[r7]
 2223 0114 9B00     	 lsls r3,r3,#2
 2224 0116 03F4FE73 	 and r3,r3,#508
 2225 011a 3833     	 adds r3,r3,#56
 2226 011c 3A69     	 ldr r2,[r7,#16]
 2227 011e 1344     	 add r3,r3,r2
 2228 0120 1846     	 mov r0,r3
 2229 0122 FFF7FEFF 	 bl ld_dword
 2230 0126 0346     	 mov r3,r0
 2231 0128 23F07043 	 bic r3,r3,#-268435456
 2232 012c 7B61     	 str r3,[r7,#20]
1173:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2233              	 .loc 1 1173 0
 2234 012e 01E0     	 b .L112
 2235              	.L124:
1174:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1175:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_EXFAT :
1176:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must 
1177:../Dave/Generated/FATFS/ff_Src/ff.c **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1178:../Dave/Generated/FATFS/ff_Src/ff.c **** 				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1179:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1180:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1181:../Dave/Generated/FATFS/ff_Src/ff.c **** 					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1182:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
1183:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1184:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1185:../Dave/Generated/FATFS/ff_Src/ff.c **** 					val = clst + 1; 	/* Generate the value */
1186:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
1187:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1188:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1189:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1190:../Dave/Generated/FATFS/ff_Src/ff.c **** 						val = 0x7FFFFFFF;	/* Generate EOC */
1191:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {
1192:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1193:../Dave/Generated/FATFS/ff_Src/ff.c **** 						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1194:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
1195:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
1196:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1197:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1198:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* go to default */
1199:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1200:../Dave/Generated/FATFS/ff_Src/ff.c **** 		default:
1201:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = 1;	/* Internal error */
 2236              	 .loc 1 1201 0
 2237 0130 0123     	 movs r3,#1
 2238 0132 7B61     	 str r3,[r7,#20]
 2239              	.L112:
1202:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1203:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1204:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1205:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return val;
 2240              	 .loc 1 1205 0
 2241 0134 7B69     	 ldr r3,[r7,#20]
1206:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2242              	 .loc 1 1206 0
 2243 0136 1846     	 mov r0,r3
 2244 0138 1837     	 adds r7,r7,#24
 2245              	.LCFI124:
 2246              	 .cfi_def_cfa_offset 8
 2247 013a BD46     	 mov sp,r7
 2248              	.LCFI125:
 2249              	 .cfi_def_cfa_register 13
 2250              	 
 2251 013c 80BD     	 pop {r7,pc}
 2252              	 .cfi_endproc
 2253              	.LFE21:
 2255 013e 00BF     	 .section .text.put_fat,"ax",%progbits
 2256              	 .align 2
 2257              	 .thumb
 2258              	 .thumb_func
 2260              	put_fat:
 2261              	.LFB22:
1207:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1208:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1209:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1210:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1211:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1212:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1213:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT access - Change value of a FAT entry                              */
1214:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1215:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1216:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1217:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Corresponding filesystem object */
1218:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1219:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD val		/* New value to be set to the entry */
1220:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1221:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2262              	 .loc 1 1221 0
 2263              	 .cfi_startproc
 2264              	 
 2265              	 
 2266 0000 90B5     	 push {r4,r7,lr}
 2267              	.LCFI126:
 2268              	 .cfi_def_cfa_offset 12
 2269              	 .cfi_offset 4,-12
 2270              	 .cfi_offset 7,-8
 2271              	 .cfi_offset 14,-4
 2272 0002 89B0     	 sub sp,sp,#36
 2273              	.LCFI127:
 2274              	 .cfi_def_cfa_offset 48
 2275 0004 00AF     	 add r7,sp,#0
 2276              	.LCFI128:
 2277              	 .cfi_def_cfa_register 7
 2278 0006 F860     	 str r0,[r7,#12]
 2279 0008 B960     	 str r1,[r7,#8]
 2280 000a 7A60     	 str r2,[r7,#4]
1222:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT bc;
1223:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *p;
1224:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_INT_ERR;
 2281              	 .loc 1 1224 0
 2282 000c 0223     	 movs r3,#2
 2283 000e FB77     	 strb r3,[r7,#31]
1225:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1226:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1227:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 2284              	 .loc 1 1227 0
 2285 0010 BB68     	 ldr r3,[r7,#8]
 2286 0012 012B     	 cmp r3,#1
 2287 0014 40F2CD80 	 bls .L126
 2288              	 .loc 1 1227 0 is_stmt 0 discriminator 1
 2289 0018 FB68     	 ldr r3,[r7,#12]
 2290 001a DA69     	 ldr r2,[r3,#28]
 2291 001c BB68     	 ldr r3,[r7,#8]
 2292 001e 9A42     	 cmp r2,r3
 2293 0020 40F2C780 	 bls .L126
1228:../Dave/Generated/FATFS/ff_Src/ff.c **** 		switch (fs->fs_type) {
 2294              	 .loc 1 1228 0 is_stmt 1
 2295 0024 FB68     	 ldr r3,[r7,#12]
 2296 0026 1B78     	 ldrb r3,[r3]
 2297 0028 022B     	 cmp r3,#2
 2298 002a 72D0     	 beq .L127
 2299 002c 032B     	 cmp r3,#3
 2300 002e 00F09080 	 beq .L128
 2301 0032 012B     	 cmp r3,#1
 2302 0034 40F0BD80 	 bne .L126
1229:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT12 :
1230:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 2303              	 .loc 1 1230 0
 2304 0038 BB68     	 ldr r3,[r7,#8]
 2305 003a BB61     	 str r3,[r7,#24]
 2306 003c BB69     	 ldr r3,[r7,#24]
 2307 003e 5B08     	 lsrs r3,r3,#1
 2308 0040 BA69     	 ldr r2,[r7,#24]
 2309 0042 1344     	 add r3,r3,r2
 2310 0044 BB61     	 str r3,[r7,#24]
1231:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2311              	 .loc 1 1231 0
 2312 0046 FB68     	 ldr r3,[r7,#12]
 2313 0048 9A6A     	 ldr r2,[r3,#40]
 2314 004a BB69     	 ldr r3,[r7,#24]
 2315 004c 5B0A     	 lsrs r3,r3,#9
 2316 004e 1344     	 add r3,r3,r2
 2317 0050 F868     	 ldr r0,[r7,#12]
 2318 0052 1946     	 mov r1,r3
 2319 0054 FFF7FEFF 	 bl move_window
 2320 0058 0346     	 mov r3,r0
 2321 005a FB77     	 strb r3,[r7,#31]
1232:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2322              	 .loc 1 1232 0
 2323 005c FB7F     	 ldrb r3,[r7,#31]
 2324 005e 002B     	 cmp r3,#0
 2325 0060 00D0     	 beq .L130
 2326 0062 A6E0     	 b .L126
 2327              	.L130:
1233:../Dave/Generated/FATFS/ff_Src/ff.c **** 			p = fs->win + bc++ % SS(fs);
 2328              	 .loc 1 1233 0
 2329 0064 BB69     	 ldr r3,[r7,#24]
 2330 0066 5A1C     	 adds r2,r3,#1
 2331 0068 BA61     	 str r2,[r7,#24]
 2332 006a C3F30803 	 ubfx r3,r3,#0,#9
 2333 006e 3833     	 adds r3,r3,#56
 2334 0070 FA68     	 ldr r2,[r7,#12]
 2335 0072 1344     	 add r3,r3,r2
 2336 0074 7B61     	 str r3,[r7,#20]
1234:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 2337              	 .loc 1 1234 0
 2338 0076 BB68     	 ldr r3,[r7,#8]
 2339 0078 03F00103 	 and r3,r3,#1
 2340 007c 002B     	 cmp r3,#0
 2341 007e 0DD0     	 beq .L131
 2342              	 .loc 1 1234 0 is_stmt 0 discriminator 1
 2343 0080 7B69     	 ldr r3,[r7,#20]
 2344 0082 1B78     	 ldrb r3,[r3]
 2345 0084 DBB2     	 uxtb r3,r3
 2346 0086 03F00F03 	 and r3,r3,#15
 2347 008a DAB2     	 uxtb r2,r3
 2348 008c 7B68     	 ldr r3,[r7,#4]
 2349 008e DBB2     	 uxtb r3,r3
 2350 0090 1B01     	 lsls r3,r3,#4
 2351 0092 DBB2     	 uxtb r3,r3
 2352 0094 1343     	 orrs r3,r3,r2
 2353 0096 DBB2     	 uxtb r3,r3
 2354 0098 DBB2     	 uxtb r3,r3
 2355 009a 01E0     	 b .L132
 2356              	.L131:
 2357              	 .loc 1 1234 0 discriminator 2
 2358 009c 7B68     	 ldr r3,[r7,#4]
 2359 009e DBB2     	 uxtb r3,r3
 2360              	.L132:
 2361              	 .loc 1 1234 0 discriminator 4
 2362 00a0 7A69     	 ldr r2,[r7,#20]
 2363 00a2 1370     	 strb r3,[r2]
1235:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2364              	 .loc 1 1235 0 is_stmt 1 discriminator 4
 2365 00a4 FB68     	 ldr r3,[r7,#12]
 2366 00a6 0122     	 movs r2,#1
 2367 00a8 DA70     	 strb r2,[r3,#3]
1236:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2368              	 .loc 1 1236 0 discriminator 4
 2369 00aa FB68     	 ldr r3,[r7,#12]
 2370 00ac 9A6A     	 ldr r2,[r3,#40]
 2371 00ae BB69     	 ldr r3,[r7,#24]
 2372 00b0 5B0A     	 lsrs r3,r3,#9
 2373 00b2 1344     	 add r3,r3,r2
 2374 00b4 F868     	 ldr r0,[r7,#12]
 2375 00b6 1946     	 mov r1,r3
 2376 00b8 FFF7FEFF 	 bl move_window
 2377 00bc 0346     	 mov r3,r0
 2378 00be FB77     	 strb r3,[r7,#31]
1237:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2379              	 .loc 1 1237 0 discriminator 4
 2380 00c0 FB7F     	 ldrb r3,[r7,#31]
 2381 00c2 002B     	 cmp r3,#0
 2382 00c4 00D0     	 beq .L133
 2383              	 .loc 1 1237 0 is_stmt 0
 2384 00c6 74E0     	 b .L126
 2385              	.L133:
1238:../Dave/Generated/FATFS/ff_Src/ff.c **** 			p = fs->win + bc % SS(fs);
 2386              	 .loc 1 1238 0 is_stmt 1
 2387 00c8 BB69     	 ldr r3,[r7,#24]
 2388 00ca C3F30803 	 ubfx r3,r3,#0,#9
 2389 00ce 3833     	 adds r3,r3,#56
 2390 00d0 FA68     	 ldr r2,[r7,#12]
 2391 00d2 1344     	 add r3,r3,r2
 2392 00d4 7B61     	 str r3,[r7,#20]
1239:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte 
 2393              	 .loc 1 1239 0
 2394 00d6 BB68     	 ldr r3,[r7,#8]
 2395 00d8 03F00103 	 and r3,r3,#1
 2396 00dc 002B     	 cmp r3,#0
 2397 00de 03D0     	 beq .L134
 2398              	 .loc 1 1239 0 is_stmt 0 discriminator 1
 2399 00e0 7B68     	 ldr r3,[r7,#4]
 2400 00e2 1B09     	 lsrs r3,r3,#4
 2401 00e4 DBB2     	 uxtb r3,r3
 2402 00e6 0EE0     	 b .L135
 2403              	.L134:
 2404              	 .loc 1 1239 0 discriminator 2
 2405 00e8 7B69     	 ldr r3,[r7,#20]
 2406 00ea 1B78     	 ldrb r3,[r3]
 2407 00ec DBB2     	 uxtb r3,r3
 2408 00ee 23F00F03 	 bic r3,r3,#15
 2409 00f2 DAB2     	 uxtb r2,r3
 2410 00f4 7B68     	 ldr r3,[r7,#4]
 2411 00f6 1B0A     	 lsrs r3,r3,#8
 2412 00f8 DBB2     	 uxtb r3,r3
 2413 00fa 03F00F03 	 and r3,r3,#15
 2414 00fe DBB2     	 uxtb r3,r3
 2415 0100 1343     	 orrs r3,r3,r2
 2416 0102 DBB2     	 uxtb r3,r3
 2417 0104 DBB2     	 uxtb r3,r3
 2418              	.L135:
 2419              	 .loc 1 1239 0 discriminator 4
 2420 0106 7A69     	 ldr r2,[r7,#20]
 2421 0108 1370     	 strb r3,[r2]
1240:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2422              	 .loc 1 1240 0 is_stmt 1 discriminator 4
 2423 010a FB68     	 ldr r3,[r7,#12]
 2424 010c 0122     	 movs r2,#1
 2425 010e DA70     	 strb r2,[r3,#3]
1241:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2426              	 .loc 1 1241 0 discriminator 4
 2427 0110 4FE0     	 b .L126
 2428              	.L127:
1242:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1243:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT16 :
1244:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 2429              	 .loc 1 1244 0
 2430 0112 FB68     	 ldr r3,[r7,#12]
 2431 0114 9A6A     	 ldr r2,[r3,#40]
 2432 0116 BB68     	 ldr r3,[r7,#8]
 2433 0118 1B0A     	 lsrs r3,r3,#8
 2434 011a 1344     	 add r3,r3,r2
 2435 011c F868     	 ldr r0,[r7,#12]
 2436 011e 1946     	 mov r1,r3
 2437 0120 FFF7FEFF 	 bl move_window
 2438 0124 0346     	 mov r3,r0
 2439 0126 FB77     	 strb r3,[r7,#31]
1245:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2440              	 .loc 1 1245 0
 2441 0128 FB7F     	 ldrb r3,[r7,#31]
 2442 012a 002B     	 cmp r3,#0
 2443 012c 00D0     	 beq .L136
 2444 012e 40E0     	 b .L126
 2445              	.L136:
1246:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 2446              	 .loc 1 1246 0
 2447 0130 BB68     	 ldr r3,[r7,#8]
 2448 0132 5B00     	 lsls r3,r3,#1
 2449 0134 03F4FF73 	 and r3,r3,#510
 2450 0138 3833     	 adds r3,r3,#56
 2451 013a FA68     	 ldr r2,[r7,#12]
 2452 013c 1A44     	 add r2,r2,r3
 2453 013e 7B68     	 ldr r3,[r7,#4]
 2454 0140 9BB2     	 uxth r3,r3
 2455 0142 1046     	 mov r0,r2
 2456 0144 1946     	 mov r1,r3
 2457 0146 FFF7FEFF 	 bl st_word
1247:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2458              	 .loc 1 1247 0
 2459 014a FB68     	 ldr r3,[r7,#12]
 2460 014c 0122     	 movs r2,#1
 2461 014e DA70     	 strb r2,[r3,#3]
1248:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2462              	 .loc 1 1248 0
 2463 0150 2FE0     	 b .L126
 2464              	.L128:
1249:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1250:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT32 :
1251:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1252:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_EXFAT :
1253:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1254:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 2465              	 .loc 1 1254 0
 2466 0152 FB68     	 ldr r3,[r7,#12]
 2467 0154 9A6A     	 ldr r2,[r3,#40]
 2468 0156 BB68     	 ldr r3,[r7,#8]
 2469 0158 DB09     	 lsrs r3,r3,#7
 2470 015a 1344     	 add r3,r3,r2
 2471 015c F868     	 ldr r0,[r7,#12]
 2472 015e 1946     	 mov r1,r3
 2473 0160 FFF7FEFF 	 bl move_window
 2474 0164 0346     	 mov r3,r0
 2475 0166 FB77     	 strb r3,[r7,#31]
1255:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2476              	 .loc 1 1255 0
 2477 0168 FB7F     	 ldrb r3,[r7,#31]
 2478 016a 002B     	 cmp r3,#0
 2479 016c 00D0     	 beq .L137
 2480 016e 20E0     	 b .L126
 2481              	.L137:
1256:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1257:../Dave/Generated/FATFS/ff_Src/ff.c **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 2482              	 .loc 1 1257 0
 2483 0170 7B68     	 ldr r3,[r7,#4]
 2484 0172 23F07044 	 bic r4,r3,#-268435456
 2485 0176 BB68     	 ldr r3,[r7,#8]
 2486 0178 9B00     	 lsls r3,r3,#2
 2487 017a 03F4FE73 	 and r3,r3,#508
 2488 017e 3833     	 adds r3,r3,#56
 2489 0180 FA68     	 ldr r2,[r7,#12]
 2490 0182 1344     	 add r3,r3,r2
 2491 0184 1846     	 mov r0,r3
 2492 0186 FFF7FEFF 	 bl ld_dword
 2493 018a 0346     	 mov r3,r0
 2494 018c 03F07043 	 and r3,r3,#-268435456
 2495 0190 2343     	 orrs r3,r3,r4
 2496 0192 7B60     	 str r3,[r7,#4]
1258:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1259:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
 2497              	 .loc 1 1259 0
 2498 0194 BB68     	 ldr r3,[r7,#8]
 2499 0196 9B00     	 lsls r3,r3,#2
 2500 0198 03F4FE73 	 and r3,r3,#508
 2501 019c 3833     	 adds r3,r3,#56
 2502 019e FA68     	 ldr r2,[r7,#12]
 2503 01a0 1344     	 add r3,r3,r2
 2504 01a2 1846     	 mov r0,r3
 2505 01a4 7968     	 ldr r1,[r7,#4]
 2506 01a6 FFF7FEFF 	 bl st_dword
1260:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2507              	 .loc 1 1260 0
 2508 01aa FB68     	 ldr r3,[r7,#12]
 2509 01ac 0122     	 movs r2,#1
 2510 01ae DA70     	 strb r2,[r3,#3]
1261:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2511              	 .loc 1 1261 0
 2512 01b0 00BF     	 nop
 2513              	.L126:
1262:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1263:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1264:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 2514              	 .loc 1 1264 0
 2515 01b2 FB7F     	 ldrb r3,[r7,#31]
1265:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2516              	 .loc 1 1265 0
 2517 01b4 1846     	 mov r0,r3
 2518 01b6 2437     	 adds r7,r7,#36
 2519              	.LCFI129:
 2520              	 .cfi_def_cfa_offset 12
 2521 01b8 BD46     	 mov sp,r7
 2522              	.LCFI130:
 2523              	 .cfi_def_cfa_register 13
 2524              	 
 2525 01ba 90BD     	 pop {r4,r7,pc}
 2526              	 .cfi_endproc
 2527              	.LFE22:
 2529              	 .section .text.remove_chain,"ax",%progbits
 2530              	 .align 2
 2531              	 .thumb
 2532              	 .thumb_func
 2534              	remove_chain:
 2535              	.LFB23:
1266:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1267:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
1268:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1269:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1270:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1271:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1272:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT && !FF_FS_READONLY
1273:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1274:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1275:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1276:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1277:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------*/
1278:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Find a contiguous free cluster block */
1279:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------*/
1280:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1281:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
1282:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,	/* Filesystem object */
1283:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,	/* Cluster number to scan from */
1284:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1285:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1286:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1287:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE bm, bv;
1288:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
1289:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD val, scl, ctr;
1290:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1291:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1292:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1293:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1294:../Dave/Generated/FATFS/ff_Src/ff.c **** 	scl = val = clst; ctr = 0;
1295:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
1296:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bi
1297:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1298:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
1299:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {
1300:../Dave/Generated/FATFS/ff_Src/ff.c **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1301:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1302:../Dave/Generated/FATFS/ff_Src/ff.c **** 					val = 0; bm = 0; i = SS(fs);
1303:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1304:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (bv == 0) {	/* Is it a free cluster? */
1305:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1306:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
1307:../Dave/Generated/FATFS/ff_Src/ff.c **** 					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1308:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1309:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (val == clst) return 0;	/* All cluster scanned? */
1310:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (bm != 0);
1311:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bm = 1;
1312:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (++i < SS(fs));
1313:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1314:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1315:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1316:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1317:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
1318:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Set/Clear a block of allocation bitmap */
1319:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
1320:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1321:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT change_bitmap (
1322:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,	/* Filesystem object */
1323:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,	/* Cluster number to change from */
1324:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ncl,	/* Number of clusters to be changed */
1325:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int bv		/* bit value to be set (0 or 1) */
1326:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1327:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1328:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE bm;
1329:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
1330:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sect;
1331:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1332:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1333:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1334:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the 
1335:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1336:../Dave/Generated/FATFS/ff_Src/ff.c **** 	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1337:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
1338:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1339:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
1340:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {
1341:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1342:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->win[i] ^= bm;	/* Flip the bit */
1343:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
1344:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1345:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (bm <<= 1);		/* Next bit */
1346:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bm = 1;
1347:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (++i < SS(fs));		/* Next byte */
1348:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = 0;
1349:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1350:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1351:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1352:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1353:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1354:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Fill the first fragment of the FAT chain    */
1355:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1356:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1357:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT fill_first_frag (
1358:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj	/* Pointer to the corresponding object */
1359:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1360:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1361:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1362:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl, n;
1363:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1364:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1365:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1366:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1367:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = put_fat(obj->fs, cl, cl + 1);
1368:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
1369:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1370:../Dave/Generated/FATFS/ff_Src/ff.c **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1371:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1372:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
1373:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1374:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1375:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1376:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1377:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Fill the last fragment of the FAT chain     */
1378:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1379:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1380:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT fill_last_frag (
1381:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,	/* Pointer to the corresponding object */
1382:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD lcl,		/* Last cluster of the fragment */
1383:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD term		/* Value to set the last FAT entry */
1384:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1385:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1386:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1387:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1388:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1389:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1390:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1391:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
1392:../Dave/Generated/FATFS/ff_Src/ff.c **** 		obj->n_frag--;
1393:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1394:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
1395:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1396:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1397:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT && !FF_FS_READONLY */
1398:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1399:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1400:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1401:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1402:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1403:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1404:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1405:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1406:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1407:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,		/* Corresponding object */
1408:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,			/* Cluster to remove a chain from */
1409:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD pclst			/* Previous cluster of clst (0:entire chain) */
1410:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1411:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2536              	 .loc 1 1411 0
 2537              	 .cfi_startproc
 2538              	 
 2539              	 
 2540 0000 80B5     	 push {r7,lr}
 2541              	.LCFI131:
 2542              	 .cfi_def_cfa_offset 8
 2543              	 .cfi_offset 7,-8
 2544              	 .cfi_offset 14,-4
 2545 0002 88B0     	 sub sp,sp,#32
 2546              	.LCFI132:
 2547              	 .cfi_def_cfa_offset 40
 2548 0004 00AF     	 add r7,sp,#0
 2549              	.LCFI133:
 2550              	 .cfi_def_cfa_register 7
 2551 0006 F860     	 str r0,[r7,#12]
 2552 0008 B960     	 str r1,[r7,#8]
 2553 000a 7A60     	 str r2,[r7,#4]
1412:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_OK;
 2554              	 .loc 1 1412 0
 2555 000c 0023     	 movs r3,#0
 2556 000e FB77     	 strb r3,[r7,#31]
1413:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD nxt;
1414:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = obj->fs;
 2557              	 .loc 1 1414 0
 2558 0010 FB68     	 ldr r3,[r7,#12]
 2559 0012 1B68     	 ldr r3,[r3]
 2560 0014 BB61     	 str r3,[r7,#24]
1415:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT || FF_USE_TRIM
1416:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD scl = clst, ecl = clst;
1417:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1418:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
1419:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD rt[2];
1420:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1421:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1422:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 2561              	 .loc 1 1422 0
 2562 0016 BB68     	 ldr r3,[r7,#8]
 2563 0018 012B     	 cmp r3,#1
 2564 001a 04D9     	 bls .L140
 2565              	 .loc 1 1422 0 is_stmt 0 discriminator 2
 2566 001c BB69     	 ldr r3,[r7,#24]
 2567 001e DA69     	 ldr r2,[r3,#28]
 2568 0020 BB68     	 ldr r3,[r7,#8]
 2569 0022 9A42     	 cmp r2,r3
 2570 0024 01D8     	 bhi .L141
 2571              	.L140:
 2572              	 .loc 1 1422 0 discriminator 3
 2573 0026 0223     	 movs r3,#2
 2574 0028 4AE0     	 b .L142
 2575              	.L141:
1423:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1424:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1425:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 2576              	 .loc 1 1425 0 is_stmt 1
 2577 002a 7B68     	 ldr r3,[r7,#4]
 2578 002c 002B     	 cmp r3,#0
 2579 002e 0CD0     	 beq .L143
1426:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 2580              	 .loc 1 1426 0
 2581 0030 B869     	 ldr r0,[r7,#24]
 2582 0032 7968     	 ldr r1,[r7,#4]
 2583 0034 4FF0FF32 	 mov r2,#-1
 2584 0038 FFF7FEFF 	 bl put_fat
 2585 003c 0346     	 mov r3,r0
 2586 003e FB77     	 strb r3,[r7,#31]
1427:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
 2587              	 .loc 1 1427 0
 2588 0040 FB7F     	 ldrb r3,[r7,#31]
 2589 0042 002B     	 cmp r3,#0
 2590 0044 01D0     	 beq .L143
 2591              	 .loc 1 1427 0 is_stmt 0 discriminator 1
 2592 0046 FB7F     	 ldrb r3,[r7,#31]
 2593 0048 3AE0     	 b .L142
 2594              	.L143:
1428:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1429:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1430:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Remove the chain */
1431:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
1432:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
 2595              	 .loc 1 1432 0 is_stmt 1
 2596 004a F868     	 ldr r0,[r7,#12]
 2597 004c B968     	 ldr r1,[r7,#8]
 2598 004e FFF7FEFF 	 bl get_fat
 2599 0052 7861     	 str r0,[r7,#20]
1433:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
 2600              	 .loc 1 1433 0
 2601 0054 7B69     	 ldr r3,[r7,#20]
 2602 0056 002B     	 cmp r3,#0
 2603 0058 00D1     	 bne .L144
 2604 005a 30E0     	 b .L145
 2605              	.L144:
1434:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 2606              	 .loc 1 1434 0
 2607 005c 7B69     	 ldr r3,[r7,#20]
 2608 005e 012B     	 cmp r3,#1
 2609 0060 01D1     	 bne .L146
 2610              	 .loc 1 1434 0 is_stmt 0 discriminator 1
 2611 0062 0223     	 movs r3,#2
 2612 0064 2CE0     	 b .L142
 2613              	.L146:
1435:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 2614              	 .loc 1 1435 0 is_stmt 1
 2615 0066 7B69     	 ldr r3,[r7,#20]
 2616 0068 B3F1FF3F 	 cmp r3,#-1
 2617 006c 01D1     	 bne .L147
 2618              	 .loc 1 1435 0 is_stmt 0 discriminator 1
 2619 006e 0123     	 movs r3,#1
 2620 0070 26E0     	 b .L142
 2621              	.L147:
1436:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1437:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 2622              	 .loc 1 1437 0 is_stmt 1
 2623 0072 B869     	 ldr r0,[r7,#24]
 2624 0074 B968     	 ldr r1,[r7,#8]
 2625 0076 0022     	 movs r2,#0
 2626 0078 FFF7FEFF 	 bl put_fat
 2627 007c 0346     	 mov r3,r0
 2628 007e FB77     	 strb r3,[r7,#31]
1438:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
 2629              	 .loc 1 1438 0
 2630 0080 FB7F     	 ldrb r3,[r7,#31]
 2631 0082 002B     	 cmp r3,#0
 2632 0084 01D0     	 beq .L148
 2633              	 .loc 1 1438 0 is_stmt 0 discriminator 1
 2634 0086 FB7F     	 ldrb r3,[r7,#31]
 2635 0088 1AE0     	 b .L142
 2636              	.L148:
1439:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1440:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 2637              	 .loc 1 1440 0 is_stmt 1
 2638 008a BB69     	 ldr r3,[r7,#24]
 2639 008c 5A69     	 ldr r2,[r3,#20]
 2640 008e BB69     	 ldr r3,[r7,#24]
 2641 0090 DB69     	 ldr r3,[r3,#28]
 2642 0092 023B     	 subs r3,r3,#2
 2643 0094 9A42     	 cmp r2,r3
 2644 0096 0BD2     	 bcs .L149
1441:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->free_clst++;
 2645              	 .loc 1 1441 0
 2646 0098 BB69     	 ldr r3,[r7,#24]
 2647 009a 5B69     	 ldr r3,[r3,#20]
 2648 009c 5A1C     	 adds r2,r3,#1
 2649 009e BB69     	 ldr r3,[r7,#24]
 2650 00a0 5A61     	 str r2,[r3,#20]
1442:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag |= 1;
 2651              	 .loc 1 1442 0
 2652 00a2 BB69     	 ldr r3,[r7,#24]
 2653 00a4 1B79     	 ldrb r3,[r3,#4]
 2654 00a6 43F00103 	 orr r3,r3,#1
 2655 00aa DAB2     	 uxtb r2,r3
 2656 00ac BB69     	 ldr r3,[r7,#24]
 2657 00ae 1A71     	 strb r2,[r3,#4]
 2658              	.L149:
1443:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1444:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT || FF_USE_TRIM
1445:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1446:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ecl = nxt;
1447:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {				/* End of contiguous cluster block */
1448:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1449:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
1450:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1451:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) return res;
1452:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1453:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1454:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
1455:../Dave/Generated/FATFS/ff_Src/ff.c **** 			rt[0] = clst2sect(fs, scl);					/* Start of data area freed */
1456:../Dave/Generated/FATFS/ff_Src/ff.c **** 			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area freed */
1457:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed
1458:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1459:../Dave/Generated/FATFS/ff_Src/ff.c **** 			scl = ecl = nxt;
1460:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1461:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1462:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clst = nxt;					/* Next cluster */
 2659              	 .loc 1 1462 0
 2660 00b0 7B69     	 ldr r3,[r7,#20]
 2661 00b2 BB60     	 str r3,[r7,#8]
1463:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 2662              	 .loc 1 1463 0
 2663 00b4 BB69     	 ldr r3,[r7,#24]
 2664 00b6 DA69     	 ldr r2,[r3,#28]
 2665 00b8 BB68     	 ldr r3,[r7,#8]
 2666 00ba 9A42     	 cmp r2,r3
 2667 00bc C5D8     	 bhi .L143
 2668              	.L145:
1464:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1465:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1466:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Some post processes for chain status */
1467:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
1468:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pclst == 0) {	/* Has the entire chain been removed? */
1469:../Dave/Generated/FATFS/ff_Src/ff.c **** 			obj->stat = 0;		/* Change the chain status 'initial' */
1470:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1471:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1472:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1473:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (clst != pclst) {
1474:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nxt = get_fat(obj, clst);
1475:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nxt < 2) return FR_INT_ERR;
1476:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1477:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nxt != clst + 1) break;	/* Not contiguous? */
1478:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst++;
1479:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1480:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == pclst) {	/* Has the chain got contiguous again? */
1481:../Dave/Generated/FATFS/ff_Src/ff.c **** 					obj->stat = 2;		/* Change the chain status 'contiguous' */
1482:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1483:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
1484:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the 
1485:../Dave/Generated/FATFS/ff_Src/ff.c **** 					obj->stat = 2;	/* Change the chain status 'contiguous' */
1486:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1487:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1488:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1489:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1490:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1491:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 2669              	 .loc 1 1491 0
 2670 00be 0023     	 movs r3,#0
 2671              	.L142:
1492:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2672              	 .loc 1 1492 0
 2673 00c0 1846     	 mov r0,r3
 2674 00c2 2037     	 adds r7,r7,#32
 2675              	.LCFI134:
 2676              	 .cfi_def_cfa_offset 8
 2677 00c4 BD46     	 mov sp,r7
 2678              	.LCFI135:
 2679              	 .cfi_def_cfa_register 13
 2680              	 
 2681 00c6 80BD     	 pop {r7,pc}
 2682              	 .cfi_endproc
 2683              	.LFE23:
 2685              	 .section .text.create_chain,"ax",%progbits
 2686              	 .align 2
 2687              	 .thumb
 2688              	 .thumb_func
 2690              	create_chain:
 2691              	.LFB24:
1493:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1494:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1495:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1496:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1497:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1498:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT handling - Stretch a chain or Create a new chain                  */
1499:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1500:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1501:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New 
1502:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,		/* Corresponding object */
1503:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1504:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1505:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2692              	 .loc 1 1505 0
 2693              	 .cfi_startproc
 2694              	 
 2695              	 
 2696 0000 80B5     	 push {r7,lr}
 2697              	.LCFI136:
 2698              	 .cfi_def_cfa_offset 8
 2699              	 .cfi_offset 7,-8
 2700              	 .cfi_offset 14,-4
 2701 0002 88B0     	 sub sp,sp,#32
 2702              	.LCFI137:
 2703              	 .cfi_def_cfa_offset 40
 2704 0004 00AF     	 add r7,sp,#0
 2705              	.LCFI138:
 2706              	 .cfi_def_cfa_register 7
 2707 0006 7860     	 str r0,[r7,#4]
 2708 0008 3960     	 str r1,[r7]
1506:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cs, ncl, scl;
1507:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1508:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = obj->fs;
 2709              	 .loc 1 1508 0
 2710 000a 7B68     	 ldr r3,[r7,#4]
 2711 000c 1B68     	 ldr r3,[r3]
 2712 000e 3B61     	 str r3,[r7,#16]
1509:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1510:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1511:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst == 0) {	/* Create a new chain */
 2713              	 .loc 1 1511 0
 2714 0010 3B68     	 ldr r3,[r7]
 2715 0012 002B     	 cmp r3,#0
 2716 0014 0DD1     	 bne .L151
1512:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = fs->last_clst;				/* Suggested cluster to start to find */
 2717              	 .loc 1 1512 0
 2718 0016 3B69     	 ldr r3,[r7,#16]
 2719 0018 1B69     	 ldr r3,[r3,#16]
 2720 001a BB61     	 str r3,[r7,#24]
1513:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2721              	 .loc 1 1513 0
 2722 001c BB69     	 ldr r3,[r7,#24]
 2723 001e 002B     	 cmp r3,#0
 2724 0020 04D0     	 beq .L152
 2725              	 .loc 1 1513 0 is_stmt 0 discriminator 2
 2726 0022 3B69     	 ldr r3,[r7,#16]
 2727 0024 DA69     	 ldr r2,[r3,#28]
 2728 0026 BB69     	 ldr r3,[r7,#24]
 2729 0028 9A42     	 cmp r2,r3
 2730 002a 1BD8     	 bhi .L154
 2731              	.L152:
 2732              	 .loc 1 1513 0 discriminator 3
 2733 002c 0123     	 movs r3,#1
 2734 002e BB61     	 str r3,[r7,#24]
 2735 0030 18E0     	 b .L154
 2736              	.L151:
1514:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1515:../Dave/Generated/FATFS/ff_Src/ff.c **** 	else {				/* Stretch a chain */
1516:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
 2737              	 .loc 1 1516 0 is_stmt 1
 2738 0032 7868     	 ldr r0,[r7,#4]
 2739 0034 3968     	 ldr r1,[r7]
 2740 0036 FFF7FEFF 	 bl get_fat
 2741 003a F860     	 str r0,[r7,#12]
1517:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cs < 2) return 1;				/* Test for insanity */
 2742              	 .loc 1 1517 0
 2743 003c FB68     	 ldr r3,[r7,#12]
 2744 003e 012B     	 cmp r3,#1
 2745 0040 01D8     	 bhi .L155
 2746              	 .loc 1 1517 0 is_stmt 0 discriminator 1
 2747 0042 0123     	 movs r3,#1
 2748 0044 AAE0     	 b .L156
 2749              	.L155:
1518:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 2750              	 .loc 1 1518 0 is_stmt 1
 2751 0046 FB68     	 ldr r3,[r7,#12]
 2752 0048 B3F1FF3F 	 cmp r3,#-1
 2753 004c 01D1     	 bne .L157
 2754              	 .loc 1 1518 0 is_stmt 0 discriminator 1
 2755 004e FB68     	 ldr r3,[r7,#12]
 2756 0050 A4E0     	 b .L156
 2757              	.L157:
1519:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2758              	 .loc 1 1519 0 is_stmt 1
 2759 0052 3B69     	 ldr r3,[r7,#16]
 2760 0054 DA69     	 ldr r2,[r3,#28]
 2761 0056 FB68     	 ldr r3,[r7,#12]
 2762 0058 9A42     	 cmp r2,r3
 2763 005a 01D9     	 bls .L158
 2764              	 .loc 1 1519 0 is_stmt 0 discriminator 1
 2765 005c FB68     	 ldr r3,[r7,#12]
 2766 005e 9DE0     	 b .L156
 2767              	.L158:
1520:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = clst;							/* Cluster to start to find */
 2768              	 .loc 1 1520 0 is_stmt 1
 2769 0060 3B68     	 ldr r3,[r7]
 2770 0062 BB61     	 str r3,[r7,#24]
 2771              	.L154:
1521:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1522:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->free_clst == 0) return 0;		/* No free cluster */
 2772              	 .loc 1 1522 0
 2773 0064 3B69     	 ldr r3,[r7,#16]
 2774 0066 5B69     	 ldr r3,[r3,#20]
 2775 0068 002B     	 cmp r3,#0
 2776 006a 01D1     	 bne .L159
 2777              	 .loc 1 1522 0 is_stmt 0 discriminator 1
 2778 006c 0023     	 movs r3,#0
 2779 006e 95E0     	 b .L156
 2780              	.L159:
1523:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1524:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1525:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1526:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1527:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1528:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1529:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_INT_ERR) return 1;
1530:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1531:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (clst == 0) {							/* Is it a new chain? */
1532:../Dave/Generated/FATFS/ff_Src/ff.c **** 			obj->stat = 2;							/* Set status 'contiguous' */
1533:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {									/* It is a stretched chain */
1534:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1535:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1536:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1537:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1538:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1539:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1540:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1541:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1542:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {				/* New fragment */
1543:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->n_frag == 0) obj->n_frag = 1;
1544:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one *
1545:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) obj->n_frag = 1;
1546:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1547:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1548:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
1549:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1550:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* On the FAT/FAT32 volume */
1551:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = 0;
 2781              	 .loc 1 1551 0 is_stmt 1
 2782 0070 0023     	 movs r3,#0
 2783 0072 FB61     	 str r3,[r7,#28]
1552:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == clst) {						/* Stretching an existing chain? */
 2784              	 .loc 1 1552 0
 2785 0074 BA69     	 ldr r2,[r7,#24]
 2786 0076 3B68     	 ldr r3,[r7]
 2787 0078 9A42     	 cmp r2,r3
 2788 007a 29D1     	 bne .L160
1553:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ncl = scl + 1;						/* Test if next cluster is free */
 2789              	 .loc 1 1553 0
 2790 007c BB69     	 ldr r3,[r7,#24]
 2791 007e 0133     	 adds r3,r3,#1
 2792 0080 FB61     	 str r3,[r7,#28]
1554:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl >= fs->n_fatent) ncl = 2;
 2793              	 .loc 1 1554 0
 2794 0082 3B69     	 ldr r3,[r7,#16]
 2795 0084 DA69     	 ldr r2,[r3,#28]
 2796 0086 FB69     	 ldr r3,[r7,#28]
 2797 0088 9A42     	 cmp r2,r3
 2798 008a 01D8     	 bhi .L161
 2799              	 .loc 1 1554 0 is_stmt 0 discriminator 1
 2800 008c 0223     	 movs r3,#2
 2801 008e FB61     	 str r3,[r7,#28]
 2802              	.L161:
1555:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
 2803              	 .loc 1 1555 0 is_stmt 1
 2804 0090 7868     	 ldr r0,[r7,#4]
 2805 0092 F969     	 ldr r1,[r7,#28]
 2806 0094 FFF7FEFF 	 bl get_fat
 2807 0098 F860     	 str r0,[r7,#12]
1556:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2808              	 .loc 1 1556 0
 2809 009a FB68     	 ldr r3,[r7,#12]
 2810 009c 012B     	 cmp r3,#1
 2811 009e 03D0     	 beq .L162
 2812              	 .loc 1 1556 0 is_stmt 0 discriminator 2
 2813 00a0 FB68     	 ldr r3,[r7,#12]
 2814 00a2 B3F1FF3F 	 cmp r3,#-1
 2815 00a6 01D1     	 bne .L163
 2816              	.L162:
 2817              	 .loc 1 1556 0 discriminator 3
 2818 00a8 FB68     	 ldr r3,[r7,#12]
 2819 00aa 77E0     	 b .L156
 2820              	.L163:
1557:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cs != 0) {						/* Not free? */
 2821              	 .loc 1 1557 0 is_stmt 1
 2822 00ac FB68     	 ldr r3,[r7,#12]
 2823 00ae 002B     	 cmp r3,#0
 2824 00b0 0ED0     	 beq .L160
1558:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 2825              	 .loc 1 1558 0
 2826 00b2 3B69     	 ldr r3,[r7,#16]
 2827 00b4 1B69     	 ldr r3,[r3,#16]
 2828 00b6 FB60     	 str r3,[r7,#12]
1559:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 2829              	 .loc 1 1559 0
 2830 00b8 FB68     	 ldr r3,[r7,#12]
 2831 00ba 012B     	 cmp r3,#1
 2832 00bc 06D9     	 bls .L164
 2833              	 .loc 1 1559 0 is_stmt 0 discriminator 1
 2834 00be 3B69     	 ldr r3,[r7,#16]
 2835 00c0 DA69     	 ldr r2,[r3,#28]
 2836 00c2 FB68     	 ldr r3,[r7,#12]
 2837 00c4 9A42     	 cmp r2,r3
 2838 00c6 01D9     	 bls .L164
 2839              	 .loc 1 1559 0 discriminator 2
 2840 00c8 FB68     	 ldr r3,[r7,#12]
 2841 00ca BB61     	 str r3,[r7,#24]
 2842              	.L164:
1560:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ncl = 0;
 2843              	 .loc 1 1560 0 is_stmt 1
 2844 00cc 0023     	 movs r3,#0
 2845 00ce FB61     	 str r3,[r7,#28]
 2846              	.L160:
1561:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1562:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1563:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 2847              	 .loc 1 1563 0
 2848 00d0 FB69     	 ldr r3,[r7,#28]
 2849 00d2 002B     	 cmp r3,#0
 2850 00d4 2AD1     	 bne .L165
1564:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ncl = scl;	/* Start cluster */
 2851              	 .loc 1 1564 0
 2852 00d6 BB69     	 ldr r3,[r7,#24]
 2853 00d8 FB61     	 str r3,[r7,#28]
 2854              	.L171:
1565:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (;;) {
1566:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ncl++;							/* Next cluster */
 2855              	 .loc 1 1566 0
 2856 00da FB69     	 ldr r3,[r7,#28]
 2857 00dc 0133     	 adds r3,r3,#1
 2858 00de FB61     	 str r3,[r7,#28]
1567:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 2859              	 .loc 1 1567 0
 2860 00e0 3B69     	 ldr r3,[r7,#16]
 2861 00e2 DA69     	 ldr r2,[r3,#28]
 2862 00e4 FB69     	 ldr r3,[r7,#28]
 2863 00e6 9A42     	 cmp r2,r3
 2864 00e8 07D8     	 bhi .L166
1568:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ncl = 2;
 2865              	 .loc 1 1568 0
 2866 00ea 0223     	 movs r3,#2
 2867 00ec FB61     	 str r3,[r7,#28]
1569:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ncl > scl) return 0;	/* No free cluster found? */
 2868              	 .loc 1 1569 0
 2869 00ee FA69     	 ldr r2,[r7,#28]
 2870 00f0 BB69     	 ldr r3,[r7,#24]
 2871 00f2 9A42     	 cmp r2,r3
 2872 00f4 01D9     	 bls .L166
 2873              	 .loc 1 1569 0 is_stmt 0 discriminator 1
 2874 00f6 0023     	 movs r3,#0
 2875 00f8 50E0     	 b .L156
 2876              	.L166:
1570:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1571:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cs = get_fat(obj, ncl);			/* Get the cluster status */
 2877              	 .loc 1 1571 0 is_stmt 1
 2878 00fa 7868     	 ldr r0,[r7,#4]
 2879 00fc F969     	 ldr r1,[r7,#28]
 2880 00fe FFF7FEFF 	 bl get_fat
 2881 0102 F860     	 str r0,[r7,#12]
1572:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (cs == 0) break;				/* Found a free cluster? */
 2882              	 .loc 1 1572 0
 2883 0104 FB68     	 ldr r3,[r7,#12]
 2884 0106 002B     	 cmp r3,#0
 2885 0108 00D1     	 bne .L167
 2886 010a 0FE0     	 b .L165
 2887              	.L167:
1573:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2888              	 .loc 1 1573 0
 2889 010c FB68     	 ldr r3,[r7,#12]
 2890 010e 012B     	 cmp r3,#1
 2891 0110 03D0     	 beq .L168
 2892              	 .loc 1 1573 0 is_stmt 0 discriminator 2
 2893 0112 FB68     	 ldr r3,[r7,#12]
 2894 0114 B3F1FF3F 	 cmp r3,#-1
 2895 0118 01D1     	 bne .L169
 2896              	.L168:
 2897              	 .loc 1 1573 0 discriminator 3
 2898 011a FB68     	 ldr r3,[r7,#12]
 2899 011c 3EE0     	 b .L156
 2900              	.L169:
1574:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 2901              	 .loc 1 1574 0 is_stmt 1
 2902 011e FA69     	 ldr r2,[r7,#28]
 2903 0120 BB69     	 ldr r3,[r7,#24]
 2904 0122 9A42     	 cmp r2,r3
 2905 0124 01D1     	 bne .L170
 2906              	 .loc 1 1574 0 is_stmt 0 discriminator 1
 2907 0126 0023     	 movs r3,#0
 2908 0128 38E0     	 b .L156
 2909              	.L170:
1575:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
 2910              	 .loc 1 1575 0 is_stmt 1
 2911 012a D6E7     	 b .L171
 2912              	.L165:
1576:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1577:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 2913              	 .loc 1 1577 0
 2914 012c 3869     	 ldr r0,[r7,#16]
 2915 012e F969     	 ldr r1,[r7,#28]
 2916 0130 4FF0FF32 	 mov r2,#-1
 2917 0134 FFF7FEFF 	 bl put_fat
 2918 0138 0346     	 mov r3,r0
 2919 013a FB75     	 strb r3,[r7,#23]
1578:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && clst != 0) {
 2920              	 .loc 1 1578 0
 2921 013c FB7D     	 ldrb r3,[r7,#23]
 2922 013e 002B     	 cmp r3,#0
 2923 0140 09D1     	 bne .L172
 2924              	 .loc 1 1578 0 is_stmt 0 discriminator 1
 2925 0142 3B68     	 ldr r3,[r7]
 2926 0144 002B     	 cmp r3,#0
 2927 0146 06D0     	 beq .L172
1579:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 2928              	 .loc 1 1579 0 is_stmt 1
 2929 0148 3869     	 ldr r0,[r7,#16]
 2930 014a 3968     	 ldr r1,[r7]
 2931 014c FA69     	 ldr r2,[r7,#28]
 2932 014e FFF7FEFF 	 bl put_fat
 2933 0152 0346     	 mov r3,r0
 2934 0154 FB75     	 strb r3,[r7,#23]
 2935              	.L172:
1580:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1581:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1582:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1583:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 2936              	 .loc 1 1583 0
 2937 0156 FB7D     	 ldrb r3,[r7,#23]
 2938 0158 002B     	 cmp r3,#0
 2939 015a 16D1     	 bne .L173
1584:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = ncl;
 2940              	 .loc 1 1584 0
 2941 015c 3B69     	 ldr r3,[r7,#16]
 2942 015e FA69     	 ldr r2,[r7,#28]
 2943 0160 1A61     	 str r2,[r3,#16]
1585:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 2944              	 .loc 1 1585 0
 2945 0162 3B69     	 ldr r3,[r7,#16]
 2946 0164 5A69     	 ldr r2,[r3,#20]
 2947 0166 3B69     	 ldr r3,[r7,#16]
 2948 0168 DB69     	 ldr r3,[r3,#28]
 2949 016a 023B     	 subs r3,r3,#2
 2950 016c 9A42     	 cmp r2,r3
 2951 016e 04D8     	 bhi .L174
 2952              	 .loc 1 1585 0 is_stmt 0 discriminator 1
 2953 0170 3B69     	 ldr r3,[r7,#16]
 2954 0172 5B69     	 ldr r3,[r3,#20]
 2955 0174 5A1E     	 subs r2,r3,#1
 2956 0176 3B69     	 ldr r3,[r7,#16]
 2957 0178 5A61     	 str r2,[r3,#20]
 2958              	.L174:
1586:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsi_flag |= 1;
 2959              	 .loc 1 1586 0 is_stmt 1
 2960 017a 3B69     	 ldr r3,[r7,#16]
 2961 017c 1B79     	 ldrb r3,[r3,#4]
 2962 017e 43F00103 	 orr r3,r3,#1
 2963 0182 DAB2     	 uxtb r2,r3
 2964 0184 3B69     	 ldr r3,[r7,#16]
 2965 0186 1A71     	 strb r2,[r3,#4]
 2966 0188 07E0     	 b .L175
 2967              	.L173:
1587:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
1588:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 2968              	 .loc 1 1588 0
 2969 018a FB7D     	 ldrb r3,[r7,#23]
 2970 018c 012B     	 cmp r3,#1
 2971 018e 02D1     	 bne .L176
 2972              	 .loc 1 1588 0 is_stmt 0 discriminator 1
 2973 0190 4FF0FF33 	 mov r3,#-1
 2974 0194 00E0     	 b .L177
 2975              	.L176:
 2976              	 .loc 1 1588 0 discriminator 2
 2977 0196 0123     	 movs r3,#1
 2978              	.L177:
 2979              	 .loc 1 1588 0 discriminator 4
 2980 0198 FB61     	 str r3,[r7,#28]
 2981              	.L175:
1589:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1590:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1591:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return ncl;		/* Return new cluster number or error status */
 2982              	 .loc 1 1591 0 is_stmt 1
 2983 019a FB69     	 ldr r3,[r7,#28]
 2984              	.L156:
1592:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2985              	 .loc 1 1592 0
 2986 019c 1846     	 mov r0,r3
 2987 019e 2037     	 adds r7,r7,#32
 2988              	.LCFI139:
 2989              	 .cfi_def_cfa_offset 8
 2990 01a0 BD46     	 mov sp,r7
 2991              	.LCFI140:
 2992              	 .cfi_def_cfa_register 13
 2993              	 
 2994 01a2 80BD     	 pop {r7,pc}
 2995              	 .cfi_endproc
 2996              	.LFE24:
 2998              	 .section .text.dir_clear,"ax",%progbits
 2999              	 .align 2
 3000              	 .thumb
 3001              	 .thumb_func
 3003              	dir_clear:
 3004              	.LFB25:
1593:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1594:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
1595:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1596:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1597:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1598:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1599:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
1600:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1601:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1602:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1603:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1604:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1605:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1606:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1607:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1608:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1609:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl, ncl, *tbl;
1610:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = fp->obj.fs;
1611:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1612:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1613:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1614:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
1615:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
1616:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1617:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
1618:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
1619:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
1620:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1621:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
1622:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1623:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1624:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_FASTSEEK */
1625:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1626:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1627:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1628:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1629:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1630:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Fill a cluster with zeros                        */
1631:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1632:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1633:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1634:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
1635:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs,		/* Filesystem object */
1636:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst		/* Directory table to clear */
1637:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1638:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3005              	 .loc 1 1638 0
 3006              	 .cfi_startproc
 3007              	 
 3008              	 
 3009 0000 80B5     	 push {r7,lr}
 3010              	.LCFI141:
 3011              	 .cfi_def_cfa_offset 8
 3012              	 .cfi_offset 7,-8
 3013              	 .cfi_offset 14,-4
 3014 0002 86B0     	 sub sp,sp,#24
 3015              	.LCFI142:
 3016              	 .cfi_def_cfa_offset 32
 3017 0004 00AF     	 add r7,sp,#0
 3018              	.LCFI143:
 3019              	 .cfi_def_cfa_register 7
 3020 0006 7860     	 str r0,[r7,#4]
 3021 0008 3960     	 str r1,[r7]
1639:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sect;
1640:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n, szb;
1641:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *ibuf;
1642:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1643:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1644:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 3022              	 .loc 1 1644 0
 3023 000a 7868     	 ldr r0,[r7,#4]
 3024 000c FFF7FEFF 	 bl sync_window
 3025 0010 0346     	 mov r3,r0
 3026 0012 002B     	 cmp r3,#0
 3027 0014 01D0     	 beq .L179
 3028              	 .loc 1 1644 0 is_stmt 0 discriminator 1
 3029 0016 0123     	 movs r3,#1
 3030 0018 38E0     	 b .L180
 3031              	.L179:
1645:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 3032              	 .loc 1 1645 0 is_stmt 1
 3033 001a 7868     	 ldr r0,[r7,#4]
 3034 001c 3968     	 ldr r1,[r7]
 3035 001e FFF7FEFF 	 bl clst2sect
 3036 0022 3861     	 str r0,[r7,#16]
1646:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->winsect = sect;				/* Set window to top of the cluster */
 3037              	 .loc 1 1646 0
 3038 0024 7B68     	 ldr r3,[r7,#4]
 3039 0026 3A69     	 ldr r2,[r7,#16]
 3040 0028 5A63     	 str r2,[r3,#52]
1647:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
 3041              	 .loc 1 1647 0
 3042 002a 7B68     	 ldr r3,[r7,#4]
 3043 002c 3833     	 adds r3,r3,#56
 3044 002e 1846     	 mov r0,r3
 3045 0030 0021     	 movs r1,#0
 3046 0032 4FF40072 	 mov r2,#512
 3047 0036 FFF7FEFF 	 bl mem_set
1648:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
1649:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Allocate a temporary buffer */
1650:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MALLOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; 
1651:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb > SS(fs)) {		/* Buffer allocated? */
1652:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(ibuf, 0, szb);
1653:../Dave/Generated/FATFS/ff_Src/ff.c **** 		szb /= SS(fs);		/* Bytes -> Sectors */
1654:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
1655:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ff_memfree(ibuf);
1656:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
1657:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1658:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
1659:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 3048              	 .loc 1 1659 0
 3049 003a 7B68     	 ldr r3,[r7,#4]
 3050 003c 3833     	 adds r3,r3,#56
 3051 003e FB60     	 str r3,[r7,#12]
 3052 0040 0123     	 movs r3,#1
 3053 0042 BB60     	 str r3,[r7,#8]
1660:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
 3054              	 .loc 1 1660 0
 3055 0044 0023     	 movs r3,#0
 3056 0046 7B61     	 str r3,[r7,#20]
 3057 0048 03E0     	 b .L181
 3058              	.L183:
 3059              	 .loc 1 1660 0 is_stmt 0 discriminator 4
 3060 004a 7A69     	 ldr r2,[r7,#20]
 3061 004c BB68     	 ldr r3,[r7,#8]
 3062 004e 1344     	 add r3,r3,r2
 3063 0050 7B61     	 str r3,[r7,#20]
 3064              	.L181:
 3065              	 .loc 1 1660 0 discriminator 1
 3066 0052 7B68     	 ldr r3,[r7,#4]
 3067 0054 5B89     	 ldrh r3,[r3,#10]
 3068 0056 1A46     	 mov r2,r3
 3069 0058 7B69     	 ldr r3,[r7,#20]
 3070 005a 9A42     	 cmp r2,r3
 3071 005c 0DD9     	 bls .L182
 3072              	 .loc 1 1660 0 discriminator 3
 3073 005e 7B68     	 ldr r3,[r7,#4]
 3074 0060 5978     	 ldrb r1,[r3,#1]
 3075 0062 3A69     	 ldr r2,[r7,#16]
 3076 0064 7B69     	 ldr r3,[r7,#20]
 3077 0066 1344     	 add r3,r3,r2
 3078 0068 0846     	 mov r0,r1
 3079 006a F968     	 ldr r1,[r7,#12]
 3080 006c 1A46     	 mov r2,r3
 3081 006e BB68     	 ldr r3,[r7,#8]
 3082 0070 FFF7FEFF 	 bl disk_write
 3083 0074 0346     	 mov r3,r0
 3084 0076 002B     	 cmp r3,#0
 3085 0078 E7D0     	 beq .L183
 3086              	.L182:
1661:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1662:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 3087              	 .loc 1 1662 0 is_stmt 1
 3088 007a 7B68     	 ldr r3,[r7,#4]
 3089 007c 5B89     	 ldrh r3,[r3,#10]
 3090 007e 1A46     	 mov r2,r3
 3091 0080 7B69     	 ldr r3,[r7,#20]
 3092 0082 9A42     	 cmp r2,r3
 3093 0084 14BF     	 ite ne
 3094 0086 0123     	 movne r3,#1
 3095 0088 0023     	 moveq r3,#0
 3096 008a DBB2     	 uxtb r3,r3
 3097              	.L180:
1663:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3098              	 .loc 1 1663 0
 3099 008c 1846     	 mov r0,r3
 3100 008e 1837     	 adds r7,r7,#24
 3101              	.LCFI144:
 3102              	 .cfi_def_cfa_offset 8
 3103 0090 BD46     	 mov sp,r7
 3104              	.LCFI145:
 3105              	 .cfi_def_cfa_register 13
 3106              	 
 3107 0092 80BD     	 pop {r7,pc}
 3108              	 .cfi_endproc
 3109              	.LFE25:
 3111              	 .section .text.dir_sdi,"ax",%progbits
 3112              	 .align 2
 3113              	 .thumb
 3114              	 .thumb_func
 3116              	dir_sdi:
 3117              	.LFB26:
1664:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
1665:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1666:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1667:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1668:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1669:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1670:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Set directory index                              */
1671:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1672:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1673:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1674:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1675:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ofs		/* Offset of directory table */
1676:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1677:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3118              	 .loc 1 1677 0
 3119              	 .cfi_startproc
 3120              	 
 3121              	 
 3122 0000 80B5     	 push {r7,lr}
 3123              	.LCFI146:
 3124              	 .cfi_def_cfa_offset 8
 3125              	 .cfi_offset 7,-8
 3126              	 .cfi_offset 14,-4
 3127 0002 86B0     	 sub sp,sp,#24
 3128              	.LCFI147:
 3129              	 .cfi_def_cfa_offset 32
 3130 0004 00AF     	 add r7,sp,#0
 3131              	.LCFI148:
 3132              	 .cfi_def_cfa_register 7
 3133 0006 7860     	 str r0,[r7,#4]
 3134 0008 3960     	 str r1,[r7]
1678:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD csz, clst;
1679:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3135              	 .loc 1 1679 0
 3136 000a 7B68     	 ldr r3,[r7,#4]
 3137 000c 1B68     	 ldr r3,[r3]
 3138 000e 3B61     	 str r3,[r7,#16]
1680:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1681:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1682:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIR
 3139              	 .loc 1 1682 0
 3140 0010 3B68     	 ldr r3,[r7]
 3141 0012 B3F5001F 	 cmp r3,#2097152
 3142 0016 04D2     	 bcs .L185
 3143              	 .loc 1 1682 0 is_stmt 0 discriminator 1
 3144 0018 3B68     	 ldr r3,[r7]
 3145 001a 03F01F03 	 and r3,r3,#31
 3146 001e 002B     	 cmp r3,#0
 3147 0020 01D0     	 beq .L186
 3148              	.L185:
1683:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_INT_ERR;
 3149              	 .loc 1 1683 0 is_stmt 1
 3150 0022 0223     	 movs r3,#2
 3151 0024 62E0     	 b .L187
 3152              	.L186:
1684:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1685:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dptr = ofs;				/* Set current offset */
 3153              	 .loc 1 1685 0
 3154 0026 7B68     	 ldr r3,[r7,#4]
 3155 0028 3A68     	 ldr r2,[r7]
 3156 002a 5A61     	 str r2,[r3,#20]
1686:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 3157              	 .loc 1 1686 0
 3158 002c 7B68     	 ldr r3,[r7,#4]
 3159 002e 9B68     	 ldr r3,[r3,#8]
 3160 0030 7B61     	 str r3,[r7,#20]
1687:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 3161              	 .loc 1 1687 0
 3162 0032 7B69     	 ldr r3,[r7,#20]
 3163 0034 002B     	 cmp r3,#0
 3164 0036 06D1     	 bne .L188
 3165              	 .loc 1 1687 0 is_stmt 0 discriminator 1
 3166 0038 3B69     	 ldr r3,[r7,#16]
 3167 003a 1B78     	 ldrb r3,[r3]
 3168 003c 022B     	 cmp r3,#2
 3169 003e 02D9     	 bls .L188
1688:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clst = fs->dirbase;
 3170              	 .loc 1 1688 0 is_stmt 1
 3171 0040 3B69     	 ldr r3,[r7,#16]
 3172 0042 DB6A     	 ldr r3,[r3,#44]
 3173 0044 7B61     	 str r3,[r7,#20]
 3174              	.L188:
1689:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1690:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1691:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1692:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 3175              	 .loc 1 1692 0
 3176 0046 7B69     	 ldr r3,[r7,#20]
 3177 0048 002B     	 cmp r3,#0
 3178 004a 0CD1     	 bne .L189
1693:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 3179              	 .loc 1 1693 0
 3180 004c 3B68     	 ldr r3,[r7]
 3181 004e 5B09     	 lsrs r3,r3,#5
 3182 0050 3A69     	 ldr r2,[r7,#16]
 3183 0052 1289     	 ldrh r2,[r2,#8]
 3184 0054 9342     	 cmp r3,r2
 3185 0056 01D3     	 bcc .L190
 3186              	 .loc 1 1693 0 is_stmt 0 discriminator 1
 3187 0058 0223     	 movs r3,#2
 3188 005a 47E0     	 b .L187
 3189              	.L190:
1694:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->sect = fs->dirbase;
 3190              	 .loc 1 1694 0 is_stmt 1
 3191 005c 3B69     	 ldr r3,[r7,#16]
 3192 005e DA6A     	 ldr r2,[r3,#44]
 3193 0060 7B68     	 ldr r3,[r7,#4]
 3194 0062 DA61     	 str r2,[r3,#28]
 3195 0064 29E0     	 b .L191
 3196              	.L189:
1695:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1696:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
1697:../Dave/Generated/FATFS/ff_Src/ff.c **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 3197              	 .loc 1 1697 0
 3198 0066 3B69     	 ldr r3,[r7,#16]
 3199 0068 5B89     	 ldrh r3,[r3,#10]
 3200 006a 5B02     	 lsls r3,r3,#9
 3201 006c FB60     	 str r3,[r7,#12]
1698:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
 3202              	 .loc 1 1698 0
 3203 006e 19E0     	 b .L192
 3204              	.L196:
1699:../Dave/Generated/FATFS/ff_Src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 3205              	 .loc 1 1699 0
 3206 0070 7B68     	 ldr r3,[r7,#4]
 3207 0072 1846     	 mov r0,r3
 3208 0074 7969     	 ldr r1,[r7,#20]
 3209 0076 FFF7FEFF 	 bl get_fat
 3210 007a 7861     	 str r0,[r7,#20]
1700:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3211              	 .loc 1 1700 0
 3212 007c 7B69     	 ldr r3,[r7,#20]
 3213 007e B3F1FF3F 	 cmp r3,#-1
 3214 0082 01D1     	 bne .L193
 3215              	 .loc 1 1700 0 is_stmt 0 discriminator 1
 3216 0084 0123     	 movs r3,#1
 3217 0086 31E0     	 b .L187
 3218              	.L193:
1701:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 3219              	 .loc 1 1701 0 is_stmt 1
 3220 0088 7B69     	 ldr r3,[r7,#20]
 3221 008a 012B     	 cmp r3,#1
 3222 008c 04D9     	 bls .L194
 3223              	 .loc 1 1701 0 is_stmt 0 discriminator 2
 3224 008e 3B69     	 ldr r3,[r7,#16]
 3225 0090 DA69     	 ldr r2,[r3,#28]
 3226 0092 7B69     	 ldr r3,[r7,#20]
 3227 0094 9A42     	 cmp r2,r3
 3228 0096 01D8     	 bhi .L195
 3229              	.L194:
 3230              	 .loc 1 1701 0 discriminator 3
 3231 0098 0223     	 movs r3,#2
 3232 009a 27E0     	 b .L187
 3233              	.L195:
1702:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ofs -= csz;
 3234              	 .loc 1 1702 0 is_stmt 1
 3235 009c 3A68     	 ldr r2,[r7]
 3236 009e FB68     	 ldr r3,[r7,#12]
 3237 00a0 D31A     	 subs r3,r2,r3
 3238 00a2 3B60     	 str r3,[r7]
 3239              	.L192:
1698:../Dave/Generated/FATFS/ff_Src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 3240              	 .loc 1 1698 0
 3241 00a4 3A68     	 ldr r2,[r7]
 3242 00a6 FB68     	 ldr r3,[r7,#12]
 3243 00a8 9A42     	 cmp r2,r3
 3244 00aa E1D2     	 bcs .L196
1703:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1704:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->sect = clst2sect(fs, clst);
 3245              	 .loc 1 1704 0
 3246 00ac 3869     	 ldr r0,[r7,#16]
 3247 00ae 7969     	 ldr r1,[r7,#20]
 3248 00b0 FFF7FEFF 	 bl clst2sect
 3249 00b4 0246     	 mov r2,r0
 3250 00b6 7B68     	 ldr r3,[r7,#4]
 3251 00b8 DA61     	 str r2,[r3,#28]
 3252              	.L191:
1705:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1706:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->clust = clst;					/* Current cluster# */
 3253              	 .loc 1 1706 0
 3254 00ba 7B68     	 ldr r3,[r7,#4]
 3255 00bc 7A69     	 ldr r2,[r7,#20]
 3256 00be 9A61     	 str r2,[r3,#24]
1707:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->sect == 0) return FR_INT_ERR;
 3257              	 .loc 1 1707 0
 3258 00c0 7B68     	 ldr r3,[r7,#4]
 3259 00c2 DB69     	 ldr r3,[r3,#28]
 3260 00c4 002B     	 cmp r3,#0
 3261 00c6 01D1     	 bne .L197
 3262              	 .loc 1 1707 0 is_stmt 0 discriminator 1
 3263 00c8 0223     	 movs r3,#2
 3264 00ca 0FE0     	 b .L187
 3265              	.L197:
1708:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 3266              	 .loc 1 1708 0 is_stmt 1
 3267 00cc 7B68     	 ldr r3,[r7,#4]
 3268 00ce DA69     	 ldr r2,[r3,#28]
 3269 00d0 3B68     	 ldr r3,[r7]
 3270 00d2 5B0A     	 lsrs r3,r3,#9
 3271 00d4 1A44     	 add r2,r2,r3
 3272 00d6 7B68     	 ldr r3,[r7,#4]
 3273 00d8 DA61     	 str r2,[r3,#28]
1709:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 3274              	 .loc 1 1709 0
 3275 00da 3B68     	 ldr r3,[r7]
 3276 00dc C3F30803 	 ubfx r3,r3,#0,#9
 3277 00e0 3833     	 adds r3,r3,#56
 3278 00e2 3A69     	 ldr r2,[r7,#16]
 3279 00e4 1A44     	 add r2,r2,r3
 3280 00e6 7B68     	 ldr r3,[r7,#4]
 3281 00e8 1A62     	 str r2,[r3,#32]
1710:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1711:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 3282              	 .loc 1 1711 0
 3283 00ea 0023     	 movs r3,#0
 3284              	.L187:
1712:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3285              	 .loc 1 1712 0
 3286 00ec 1846     	 mov r0,r3
 3287 00ee 1837     	 adds r7,r7,#24
 3288              	.LCFI149:
 3289              	 .cfi_def_cfa_offset 8
 3290 00f0 BD46     	 mov sp,r7
 3291              	.LCFI150:
 3292              	 .cfi_def_cfa_register 13
 3293              	 
 3294 00f2 80BD     	 pop {r7,pc}
 3295              	 .cfi_endproc
 3296              	.LFE26:
 3298              	 .section .text.dir_next,"ax",%progbits
 3299              	 .align 2
 3300              	 .thumb
 3301              	 .thumb_func
 3303              	dir_next:
 3304              	.LFB27:
1713:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1714:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1715:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1716:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1717:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1718:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Move directory table index next                  */
1719:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1720:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1721:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stret
1722:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,				/* Pointer to the directory object */
1723:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
1724:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1725:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3305              	 .loc 1 1725 0
 3306              	 .cfi_startproc
 3307              	 
 3308              	 
 3309 0000 80B5     	 push {r7,lr}
 3310              	.LCFI151:
 3311              	 .cfi_def_cfa_offset 8
 3312              	 .cfi_offset 7,-8
 3313              	 .cfi_offset 14,-4
 3314 0002 86B0     	 sub sp,sp,#24
 3315              	.LCFI152:
 3316              	 .cfi_def_cfa_offset 32
 3317 0004 00AF     	 add r7,sp,#0
 3318              	.LCFI153:
 3319              	 .cfi_def_cfa_register 7
 3320 0006 7860     	 str r0,[r7,#4]
 3321 0008 3960     	 str r1,[r7]
1726:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ofs, clst;
1727:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3322              	 .loc 1 1727 0
 3323 000a 7B68     	 ldr r3,[r7,#4]
 3324 000c 1B68     	 ldr r3,[r3]
 3325 000e 3B61     	 str r3,[r7,#16]
1728:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1729:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1730:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
 3326              	 .loc 1 1730 0
 3327 0010 7B68     	 ldr r3,[r7,#4]
 3328 0012 5B69     	 ldr r3,[r3,#20]
 3329 0014 2033     	 adds r3,r3,#32
 3330 0016 FB60     	 str r3,[r7,#12]
1731:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
 3331              	 .loc 1 1731 0
 3332 0018 FB68     	 ldr r3,[r7,#12]
 3333 001a B3F5001F 	 cmp r3,#2097152
 3334 001e 02D3     	 bcc .L199
 3335              	 .loc 1 1731 0 is_stmt 0 discriminator 1
 3336 0020 7B68     	 ldr r3,[r7,#4]
 3337 0022 0022     	 movs r2,#0
 3338 0024 DA61     	 str r2,[r3,#28]
 3339              	.L199:
1732:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 3340              	 .loc 1 1732 0 is_stmt 1
 3341 0026 7B68     	 ldr r3,[r7,#4]
 3342 0028 DB69     	 ldr r3,[r3,#28]
 3343 002a 002B     	 cmp r3,#0
 3344 002c 01D1     	 bne .L200
 3345              	 .loc 1 1732 0 is_stmt 0 discriminator 1
 3346 002e 0423     	 movs r3,#4
 3347 0030 77E0     	 b .L201
 3348              	.L200:
1733:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1734:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 3349              	 .loc 1 1734 0 is_stmt 1
 3350 0032 FB68     	 ldr r3,[r7,#12]
 3351 0034 C3F30803 	 ubfx r3,r3,#0,#9
 3352 0038 002B     	 cmp r3,#0
 3353 003a 66D1     	 bne .L202
1735:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->sect++;				/* Next sector */
 3354              	 .loc 1 1735 0
 3355 003c 7B68     	 ldr r3,[r7,#4]
 3356 003e DB69     	 ldr r3,[r3,#28]
 3357 0040 5A1C     	 adds r2,r3,#1
 3358 0042 7B68     	 ldr r3,[r7,#4]
 3359 0044 DA61     	 str r2,[r3,#28]
1736:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1737:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->clust == 0) {	/* Static table */
 3360              	 .loc 1 1737 0
 3361 0046 7B68     	 ldr r3,[r7,#4]
 3362 0048 9B69     	 ldr r3,[r3,#24]
 3363 004a 002B     	 cmp r3,#0
 3364 004c 0AD1     	 bne .L203
1738:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3365              	 .loc 1 1738 0
 3366 004e FB68     	 ldr r3,[r7,#12]
 3367 0050 5B09     	 lsrs r3,r3,#5
 3368 0052 3A69     	 ldr r2,[r7,#16]
 3369 0054 1289     	 ldrh r2,[r2,#8]
 3370 0056 9342     	 cmp r3,r2
 3371 0058 57D3     	 bcc .L202
1739:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
 3372              	 .loc 1 1739 0
 3373 005a 7B68     	 ldr r3,[r7,#4]
 3374 005c 0022     	 movs r2,#0
 3375 005e DA61     	 str r2,[r3,#28]
 3376 0060 0423     	 movs r3,#4
 3377 0062 5EE0     	 b .L201
 3378              	.L203:
1740:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1741:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1742:../Dave/Generated/FATFS/ff_Src/ff.c **** 		else {					/* Dynamic table */
1743:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 3379              	 .loc 1 1743 0
 3380 0064 FB68     	 ldr r3,[r7,#12]
 3381 0066 5B0A     	 lsrs r3,r3,#9
 3382 0068 3A69     	 ldr r2,[r7,#16]
 3383 006a 5289     	 ldrh r2,[r2,#10]
 3384 006c 013A     	 subs r2,r2,#1
 3385 006e 1340     	 ands r3,r3,r2
 3386 0070 002B     	 cmp r3,#0
 3387 0072 4AD1     	 bne .L202
1744:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 3388              	 .loc 1 1744 0
 3389 0074 7A68     	 ldr r2,[r7,#4]
 3390 0076 7B68     	 ldr r3,[r7,#4]
 3391 0078 9B69     	 ldr r3,[r3,#24]
 3392 007a 1046     	 mov r0,r2
 3393 007c 1946     	 mov r1,r3
 3394 007e FFF7FEFF 	 bl get_fat
 3395 0082 7861     	 str r0,[r7,#20]
1745:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 3396              	 .loc 1 1745 0
 3397 0084 7B69     	 ldr r3,[r7,#20]
 3398 0086 012B     	 cmp r3,#1
 3399 0088 01D8     	 bhi .L204
 3400              	 .loc 1 1745 0 is_stmt 0 discriminator 1
 3401 008a 0223     	 movs r3,#2
 3402 008c 49E0     	 b .L201
 3403              	.L204:
1746:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3404              	 .loc 1 1746 0 is_stmt 1
 3405 008e 7B69     	 ldr r3,[r7,#20]
 3406 0090 B3F1FF3F 	 cmp r3,#-1
 3407 0094 01D1     	 bne .L205
 3408              	 .loc 1 1746 0 is_stmt 0 discriminator 1
 3409 0096 0123     	 movs r3,#1
 3410 0098 43E0     	 b .L201
 3411              	.L205:
1747:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 3412              	 .loc 1 1747 0 is_stmt 1
 3413 009a 3B69     	 ldr r3,[r7,#16]
 3414 009c DA69     	 ldr r2,[r3,#28]
 3415 009e 7B69     	 ldr r3,[r7,#20]
 3416 00a0 9A42     	 cmp r2,r3
 3417 00a2 28D8     	 bhi .L206
1748:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1749:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (!stretch) {								/* If no stretch, report EOT */
 3418              	 .loc 1 1749 0
 3419 00a4 3B68     	 ldr r3,[r7]
 3420 00a6 002B     	 cmp r3,#0
 3421 00a8 04D1     	 bne .L207
1750:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
 3422              	 .loc 1 1750 0
 3423 00aa 7B68     	 ldr r3,[r7,#4]
 3424 00ac 0022     	 movs r2,#0
 3425 00ae DA61     	 str r2,[r3,#28]
 3426 00b0 0423     	 movs r3,#4
 3427 00b2 36E0     	 b .L201
 3428              	.L207:
1751:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
1752:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 3429              	 .loc 1 1752 0
 3430 00b4 7A68     	 ldr r2,[r7,#4]
 3431 00b6 7B68     	 ldr r3,[r7,#4]
 3432 00b8 9B69     	 ldr r3,[r3,#24]
 3433 00ba 1046     	 mov r0,r2
 3434 00bc 1946     	 mov r1,r3
 3435 00be FFF7FEFF 	 bl create_chain
 3436 00c2 7861     	 str r0,[r7,#20]
1753:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3437              	 .loc 1 1753 0
 3438 00c4 7B69     	 ldr r3,[r7,#20]
 3439 00c6 002B     	 cmp r3,#0
 3440 00c8 01D1     	 bne .L208
 3441              	 .loc 1 1753 0 is_stmt 0 discriminator 1
 3442 00ca 0723     	 movs r3,#7
 3443 00cc 29E0     	 b .L201
 3444              	.L208:
1754:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3445              	 .loc 1 1754 0 is_stmt 1
 3446 00ce 7B69     	 ldr r3,[r7,#20]
 3447 00d0 012B     	 cmp r3,#1
 3448 00d2 01D1     	 bne .L209
 3449              	 .loc 1 1754 0 is_stmt 0 discriminator 1
 3450 00d4 0223     	 movs r3,#2
 3451 00d6 24E0     	 b .L201
 3452              	.L209:
1755:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3453              	 .loc 1 1755 0 is_stmt 1
 3454 00d8 7B69     	 ldr r3,[r7,#20]
 3455 00da B3F1FF3F 	 cmp r3,#-1
 3456 00de 01D1     	 bne .L210
 3457              	 .loc 1 1755 0 is_stmt 0 discriminator 1
 3458 00e0 0123     	 movs r3,#1
 3459 00e2 1EE0     	 b .L201
 3460              	.L210:
1756:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 3461              	 .loc 1 1756 0 is_stmt 1
 3462 00e4 3869     	 ldr r0,[r7,#16]
 3463 00e6 7969     	 ldr r1,[r7,#20]
 3464 00e8 FFF7FEFF 	 bl dir_clear
 3465 00ec 0346     	 mov r3,r0
 3466 00ee 002B     	 cmp r3,#0
 3467 00f0 01D0     	 beq .L206
 3468              	 .loc 1 1756 0 is_stmt 0 discriminator 1
 3469 00f2 0123     	 movs r3,#1
 3470 00f4 15E0     	 b .L201
 3471              	.L206:
1757:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1758:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
1759:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
1760:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1761:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1762:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1763:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->clust = clst;		/* Initialize data for new cluster */
 3472              	 .loc 1 1763 0 is_stmt 1
 3473 00f6 7B68     	 ldr r3,[r7,#4]
 3474 00f8 7A69     	 ldr r2,[r7,#20]
 3475 00fa 9A61     	 str r2,[r3,#24]
1764:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->sect = clst2sect(fs, clst);
 3476              	 .loc 1 1764 0
 3477 00fc 3869     	 ldr r0,[r7,#16]
 3478 00fe 7969     	 ldr r1,[r7,#20]
 3479 0100 FFF7FEFF 	 bl clst2sect
 3480 0104 0246     	 mov r2,r0
 3481 0106 7B68     	 ldr r3,[r7,#4]
 3482 0108 DA61     	 str r2,[r3,#28]
 3483              	.L202:
1765:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1766:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1767:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1768:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dptr = ofs;						/* Current entry */
 3484              	 .loc 1 1768 0
 3485 010a 7B68     	 ldr r3,[r7,#4]
 3486 010c FA68     	 ldr r2,[r7,#12]
 3487 010e 5A61     	 str r2,[r3,#20]
1769:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 3488              	 .loc 1 1769 0
 3489 0110 FB68     	 ldr r3,[r7,#12]
 3490 0112 C3F30803 	 ubfx r3,r3,#0,#9
 3491 0116 3833     	 adds r3,r3,#56
 3492 0118 3A69     	 ldr r2,[r7,#16]
 3493 011a 1A44     	 add r2,r2,r3
 3494 011c 7B68     	 ldr r3,[r7,#4]
 3495 011e 1A62     	 str r2,[r3,#32]
1770:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1771:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 3496              	 .loc 1 1771 0
 3497 0120 0023     	 movs r3,#0
 3498              	.L201:
1772:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3499              	 .loc 1 1772 0
 3500 0122 1846     	 mov r0,r3
 3501 0124 1837     	 adds r7,r7,#24
 3502              	.LCFI154:
 3503              	 .cfi_def_cfa_offset 8
 3504 0126 BD46     	 mov sp,r7
 3505              	.LCFI155:
 3506              	 .cfi_def_cfa_register 13
 3507              	 
 3508 0128 80BD     	 pop {r7,pc}
 3509              	 .cfi_endproc
 3510              	.LFE27:
 3512 012a 00BF     	 .section .text.dir_alloc,"ax",%progbits
 3513              	 .align 2
 3514              	 .thumb
 3515              	 .thumb_func
 3517              	dir_alloc:
 3518              	.LFB28:
1773:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1774:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1775:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1776:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1777:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1778:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1779:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Reserve a block of directory entries             */
1780:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1781:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1782:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1783:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,				/* Pointer to the directory object */
1784:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT nent				/* Number of contiguous entries to allocate */
1785:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1786:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3519              	 .loc 1 1786 0
 3520              	 .cfi_startproc
 3521              	 
 3522              	 
 3523 0000 80B5     	 push {r7,lr}
 3524              	.LCFI156:
 3525              	 .cfi_def_cfa_offset 8
 3526              	 .cfi_offset 7,-8
 3527              	 .cfi_offset 14,-4
 3528 0002 86B0     	 sub sp,sp,#24
 3529              	.LCFI157:
 3530              	 .cfi_def_cfa_offset 32
 3531 0004 00AF     	 add r7,sp,#0
 3532              	.LCFI158:
 3533              	 .cfi_def_cfa_register 7
 3534 0006 7860     	 str r0,[r7,#4]
 3535 0008 3960     	 str r1,[r7]
1787:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1788:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n;
1789:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3536              	 .loc 1 1789 0
 3537 000a 7B68     	 ldr r3,[r7,#4]
 3538 000c 1B68     	 ldr r3,[r3]
 3539 000e FB60     	 str r3,[r7,#12]
1790:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1791:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1792:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, 0);
 3540              	 .loc 1 1792 0
 3541 0010 7868     	 ldr r0,[r7,#4]
 3542 0012 0021     	 movs r1,#0
 3543 0014 FFF7FEFF 	 bl dir_sdi
 3544 0018 0346     	 mov r3,r0
 3545 001a FB75     	 strb r3,[r7,#23]
1793:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 3546              	 .loc 1 1793 0
 3547 001c FB7D     	 ldrb r3,[r7,#23]
 3548 001e 002B     	 cmp r3,#0
 3549 0020 2BD1     	 bne .L212
1794:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n = 0;
 3550              	 .loc 1 1794 0
 3551 0022 0023     	 movs r3,#0
 3552 0024 3B61     	 str r3,[r7,#16]
 3553              	.L218:
1795:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
1796:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, dp->sect);
 3554              	 .loc 1 1796 0
 3555 0026 7B68     	 ldr r3,[r7,#4]
 3556 0028 DB69     	 ldr r3,[r3,#28]
 3557 002a F868     	 ldr r0,[r7,#12]
 3558 002c 1946     	 mov r1,r3
 3559 002e FFF7FEFF 	 bl move_window
 3560 0032 0346     	 mov r3,r0
 3561 0034 FB75     	 strb r3,[r7,#23]
1797:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 3562              	 .loc 1 1797 0
 3563 0036 FB7D     	 ldrb r3,[r7,#23]
 3564 0038 002B     	 cmp r3,#0
 3565 003a 00D0     	 beq .L213
 3566 003c 1DE0     	 b .L212
 3567              	.L213:
1798:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1799:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1800:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
1801:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 3568              	 .loc 1 1801 0
 3569 003e 7B68     	 ldr r3,[r7,#4]
 3570 0040 1B6A     	 ldr r3,[r3,#32]
 3571 0042 1B78     	 ldrb r3,[r3]
 3572 0044 E52B     	 cmp r3,#229
 3573 0046 04D0     	 beq .L214
 3574              	 .loc 1 1801 0 is_stmt 0 discriminator 1
 3575 0048 7B68     	 ldr r3,[r7,#4]
 3576 004a 1B6A     	 ldr r3,[r3,#32]
 3577 004c 1B78     	 ldrb r3,[r3]
 3578 004e 002B     	 cmp r3,#0
 3579 0050 08D1     	 bne .L215
 3580              	.L214:
1802:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1803:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 3581              	 .loc 1 1803 0 is_stmt 1
 3582 0052 3B69     	 ldr r3,[r7,#16]
 3583 0054 0133     	 adds r3,r3,#1
 3584 0056 3B61     	 str r3,[r7,#16]
 3585 0058 3A69     	 ldr r2,[r7,#16]
 3586 005a 3B68     	 ldr r3,[r7]
 3587 005c 9A42     	 cmp r2,r3
 3588 005e 00D1     	 bne .L216
 3589 0060 0BE0     	 b .L212
 3590              	.L216:
 3591 0062 01E0     	 b .L217
 3592              	.L215:
1804:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
1805:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
 3593              	 .loc 1 1805 0
 3594 0064 0023     	 movs r3,#0
 3595 0066 3B61     	 str r3,[r7,#16]
 3596              	.L217:
1806:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1807:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_next(dp, 1);
 3597              	 .loc 1 1807 0
 3598 0068 7868     	 ldr r0,[r7,#4]
 3599 006a 0121     	 movs r1,#1
 3600 006c FFF7FEFF 	 bl dir_next
 3601 0070 0346     	 mov r3,r0
 3602 0072 FB75     	 strb r3,[r7,#23]
1808:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 3603              	 .loc 1 1808 0
 3604 0074 FB7D     	 ldrb r3,[r7,#23]
 3605 0076 002B     	 cmp r3,#0
 3606 0078 D5D0     	 beq .L218
 3607              	.L212:
1809:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1810:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1811:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 3608              	 .loc 1 1811 0
 3609 007a FB7D     	 ldrb r3,[r7,#23]
 3610 007c 042B     	 cmp r3,#4
 3611 007e 01D1     	 bne .L219
 3612              	 .loc 1 1811 0 is_stmt 0 discriminator 1
 3613 0080 0723     	 movs r3,#7
 3614 0082 FB75     	 strb r3,[r7,#23]
 3615              	.L219:
1812:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3616              	 .loc 1 1812 0 is_stmt 1
 3617 0084 FB7D     	 ldrb r3,[r7,#23]
1813:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3618              	 .loc 1 1813 0
 3619 0086 1846     	 mov r0,r3
 3620 0088 1837     	 adds r7,r7,#24
 3621              	.LCFI159:
 3622              	 .cfi_def_cfa_offset 8
 3623 008a BD46     	 mov sp,r7
 3624              	.LCFI160:
 3625              	 .cfi_def_cfa_register 13
 3626              	 
 3627 008c 80BD     	 pop {r7,pc}
 3628              	 .cfi_endproc
 3629              	.LFE28:
 3631 008e 00BF     	 .section .text.ld_clust,"ax",%progbits
 3632              	 .align 2
 3633              	 .thumb
 3634              	 .thumb_func
 3636              	ld_clust:
 3637              	.LFB29:
1814:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1815:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
1816:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1817:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1818:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1819:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1820:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1821:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT: Directory handling - Load/Store start cluster number             */
1822:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1823:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1824:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1825:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Pointer to the fs object */
1826:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* dir		/* Pointer to the key entry */
1827:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1828:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3638              	 .loc 1 1828 0
 3639              	 .cfi_startproc
 3640              	 
 3641              	 
 3642 0000 80B5     	 push {r7,lr}
 3643              	.LCFI161:
 3644              	 .cfi_def_cfa_offset 8
 3645              	 .cfi_offset 7,-8
 3646              	 .cfi_offset 14,-4
 3647 0002 84B0     	 sub sp,sp,#16
 3648              	.LCFI162:
 3649              	 .cfi_def_cfa_offset 24
 3650 0004 00AF     	 add r7,sp,#0
 3651              	.LCFI163:
 3652              	 .cfi_def_cfa_register 7
 3653 0006 7860     	 str r0,[r7,#4]
 3654 0008 3960     	 str r1,[r7]
1829:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl;
1830:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1831:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cl = ld_word(dir + DIR_FstClusLO);
 3655              	 .loc 1 1831 0
 3656 000a 3B68     	 ldr r3,[r7]
 3657 000c 1A33     	 adds r3,r3,#26
 3658 000e 1846     	 mov r0,r3
 3659 0010 FFF7FEFF 	 bl ld_word
 3660 0014 0346     	 mov r3,r0
 3661 0016 FB60     	 str r3,[r7,#12]
1832:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 3662              	 .loc 1 1832 0
 3663 0018 7B68     	 ldr r3,[r7,#4]
 3664 001a 1B78     	 ldrb r3,[r3]
 3665 001c 032B     	 cmp r3,#3
 3666 001e 09D1     	 bne .L222
1833:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 3667              	 .loc 1 1833 0
 3668 0020 3B68     	 ldr r3,[r7]
 3669 0022 1433     	 adds r3,r3,#20
 3670 0024 1846     	 mov r0,r3
 3671 0026 FFF7FEFF 	 bl ld_word
 3672 002a 0346     	 mov r3,r0
 3673 002c 1B04     	 lsls r3,r3,#16
 3674 002e FA68     	 ldr r2,[r7,#12]
 3675 0030 1343     	 orrs r3,r3,r2
 3676 0032 FB60     	 str r3,[r7,#12]
 3677              	.L222:
1834:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1835:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1836:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return cl;
 3678              	 .loc 1 1836 0
 3679 0034 FB68     	 ldr r3,[r7,#12]
1837:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3680              	 .loc 1 1837 0
 3681 0036 1846     	 mov r0,r3
 3682 0038 1037     	 adds r7,r7,#16
 3683              	.LCFI164:
 3684              	 .cfi_def_cfa_offset 8
 3685 003a BD46     	 mov sp,r7
 3686              	.LCFI165:
 3687              	 .cfi_def_cfa_register 13
 3688              	 
 3689 003c 80BD     	 pop {r7,pc}
 3690              	 .cfi_endproc
 3691              	.LFE29:
 3693 003e 00BF     	 .section .text.st_clust,"ax",%progbits
 3694              	 .align 2
 3695              	 .thumb
 3696              	 .thumb_func
 3698              	st_clust:
 3699              	.LFB30:
1838:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1839:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1840:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1841:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_clust (
1842:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1843:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir,	/* Pointer to the key entry */
1844:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl	/* Value to be set */
1845:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1846:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3700              	 .loc 1 1846 0
 3701              	 .cfi_startproc
 3702              	 
 3703              	 
 3704 0000 80B5     	 push {r7,lr}
 3705              	.LCFI166:
 3706              	 .cfi_def_cfa_offset 8
 3707              	 .cfi_offset 7,-8
 3708              	 .cfi_offset 14,-4
 3709 0002 84B0     	 sub sp,sp,#16
 3710              	.LCFI167:
 3711              	 .cfi_def_cfa_offset 24
 3712 0004 00AF     	 add r7,sp,#0
 3713              	.LCFI168:
 3714              	 .cfi_def_cfa_register 7
 3715 0006 F860     	 str r0,[r7,#12]
 3716 0008 B960     	 str r1,[r7,#8]
 3717 000a 7A60     	 str r2,[r7,#4]
1847:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 3718              	 .loc 1 1847 0
 3719 000c BB68     	 ldr r3,[r7,#8]
 3720 000e 03F11A02 	 add r2,r3,#26
 3721 0012 7B68     	 ldr r3,[r7,#4]
 3722 0014 9BB2     	 uxth r3,r3
 3723 0016 1046     	 mov r0,r2
 3724 0018 1946     	 mov r1,r3
 3725 001a FFF7FEFF 	 bl st_word
1848:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 3726              	 .loc 1 1848 0
 3727 001e FB68     	 ldr r3,[r7,#12]
 3728 0020 1B78     	 ldrb r3,[r3]
 3729 0022 032B     	 cmp r3,#3
 3730 0024 09D1     	 bne .L224
1849:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 3731              	 .loc 1 1849 0
 3732 0026 BB68     	 ldr r3,[r7,#8]
 3733 0028 03F11402 	 add r2,r3,#20
 3734 002c 7B68     	 ldr r3,[r7,#4]
 3735 002e 1B0C     	 lsrs r3,r3,#16
 3736 0030 9BB2     	 uxth r3,r3
 3737 0032 1046     	 mov r0,r2
 3738 0034 1946     	 mov r1,r3
 3739 0036 FFF7FEFF 	 bl st_word
 3740              	.L224:
1850:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1851:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3741              	 .loc 1 1851 0
 3742 003a 1037     	 adds r7,r7,#16
 3743              	.LCFI169:
 3744              	 .cfi_def_cfa_offset 8
 3745 003c BD46     	 mov sp,r7
 3746              	.LCFI170:
 3747              	 .cfi_def_cfa_register 13
 3748              	 
 3749 003e 80BD     	 pop {r7,pc}
 3750              	 .cfi_endproc
 3751              	.LFE30:
 3753              	 .section .text.cmp_lfn,"ax",%progbits
 3754              	 .align 2
 3755              	 .thumb
 3756              	 .thumb_func
 3758              	cmp_lfn:
 3759              	.LFB31:
1852:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1853:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1854:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1855:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1856:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
1857:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------*/
1858:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1859:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------*/
1860:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1861:../Dave/Generated/FATFS/ff_Src/ff.c **** static int cmp_lfn (		/* 1:matched, 0:not matched */
1862:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1863:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1864:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1865:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3760              	 .loc 1 1865 0
 3761              	 .cfi_startproc
 3762              	 
 3763              	 
 3764 0000 90B5     	 push {r4,r7,lr}
 3765              	.LCFI171:
 3766              	 .cfi_def_cfa_offset 12
 3767              	 .cfi_offset 4,-12
 3768              	 .cfi_offset 7,-8
 3769              	 .cfi_offset 14,-4
 3770 0002 87B0     	 sub sp,sp,#28
 3771              	.LCFI172:
 3772              	 .cfi_def_cfa_offset 40
 3773 0004 00AF     	 add r7,sp,#0
 3774              	.LCFI173:
 3775              	 .cfi_def_cfa_register 7
 3776 0006 7860     	 str r0,[r7,#4]
 3777 0008 3960     	 str r1,[r7]
1866:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, s;
1867:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, uc;
1868:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1869:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1870:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 3778              	 .loc 1 1870 0
 3779 000a 3B68     	 ldr r3,[r7]
 3780 000c 1A33     	 adds r3,r3,#26
 3781 000e 1846     	 mov r0,r3
 3782 0010 FFF7FEFF 	 bl ld_word
 3783 0014 0346     	 mov r3,r0
 3784 0016 002B     	 cmp r3,#0
 3785 0018 01D0     	 beq .L227
 3786              	 .loc 1 1870 0 is_stmt 0 discriminator 1
 3787 001a 0023     	 movs r3,#0
 3788 001c 58E0     	 b .L228
 3789              	.L227:
1871:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1872:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 3790              	 .loc 1 1872 0 is_stmt 1
 3791 001e 3B68     	 ldr r3,[r7]
 3792 0020 1B78     	 ldrb r3,[r3]
 3793 0022 03F03F03 	 and r3,r3,#63
 3794 0026 5A1E     	 subs r2,r3,#1
 3795 0028 1346     	 mov r3,r2
 3796 002a 5B00     	 lsls r3,r3,#1
 3797 002c 1344     	 add r3,r3,r2
 3798 002e 9B00     	 lsls r3,r3,#2
 3799 0030 1344     	 add r3,r3,r2
 3800 0032 7B61     	 str r3,[r7,#20]
1873:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1874:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 3801              	 .loc 1 1874 0
 3802 0034 0123     	 movs r3,#1
 3803 0036 FB81     	 strh r3,[r7,#14]
 3804 0038 0023     	 movs r3,#0
 3805 003a 3B61     	 str r3,[r7,#16]
 3806 003c 32E0     	 b .L229
 3807              	.L234:
1875:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 3808              	 .loc 1 1875 0
 3809 003e 264A     	 ldr r2,.L236
 3810 0040 3B69     	 ldr r3,[r7,#16]
 3811 0042 1344     	 add r3,r3,r2
 3812 0044 1B78     	 ldrb r3,[r3]
 3813 0046 1A46     	 mov r2,r3
 3814 0048 3B68     	 ldr r3,[r7]
 3815 004a 1344     	 add r3,r3,r2
 3816 004c 1846     	 mov r0,r3
 3817 004e FFF7FEFF 	 bl ld_word
 3818 0052 0346     	 mov r3,r0
 3819 0054 BB81     	 strh r3,[r7,#12]
1876:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != 0) {
 3820              	 .loc 1 1876 0
 3821 0056 FB89     	 ldrh r3,[r7,#14]
 3822 0058 002B     	 cmp r3,#0
 3823 005a 19D0     	 beq .L230
1877:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 3824              	 .loc 1 1877 0
 3825 005c 7B69     	 ldr r3,[r7,#20]
 3826 005e FE2B     	 cmp r3,#254
 3827 0060 11D8     	 bhi .L231
 3828              	 .loc 1 1877 0 is_stmt 0 discriminator 1
 3829 0062 BB89     	 ldrh r3,[r7,#12]
 3830 0064 1846     	 mov r0,r3
 3831 0066 FFF7FEFF 	 bl ff_wtoupper
 3832 006a 0446     	 mov r4,r0
 3833 006c 7B69     	 ldr r3,[r7,#20]
 3834 006e 5A1C     	 adds r2,r3,#1
 3835 0070 7A61     	 str r2,[r7,#20]
 3836 0072 5B00     	 lsls r3,r3,#1
 3837 0074 7A68     	 ldr r2,[r7,#4]
 3838 0076 1344     	 add r3,r3,r2
 3839 0078 1B88     	 ldrh r3,[r3]
 3840 007a 1846     	 mov r0,r3
 3841 007c FFF7FEFF 	 bl ff_wtoupper
 3842 0080 0346     	 mov r3,r0
 3843 0082 9C42     	 cmp r4,r3
 3844 0084 01D0     	 beq .L232
 3845              	.L231:
1878:../Dave/Generated/FATFS/ff_Src/ff.c **** 				return 0;					/* Not matched */
 3846              	 .loc 1 1878 0 is_stmt 1
 3847 0086 0023     	 movs r3,#0
 3848 0088 22E0     	 b .L228
 3849              	.L232:
1879:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1880:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = uc;
 3850              	 .loc 1 1880 0
 3851 008a BB89     	 ldrh r3,[r7,#12]
 3852 008c FB81     	 strh r3,[r7,#14]
 3853 008e 06E0     	 b .L233
 3854              	.L230:
1881:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1882:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
 3855              	 .loc 1 1882 0
 3856 0090 BB89     	 ldrh r3,[r7,#12]
 3857 0092 4FF6FF72 	 movw r2,#65535
 3858 0096 9342     	 cmp r3,r2
 3859 0098 01D0     	 beq .L233
 3860              	 .loc 1 1882 0 is_stmt 0 discriminator 1
 3861 009a 0023     	 movs r3,#0
 3862 009c 18E0     	 b .L228
 3863              	.L233:
1874:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 3864              	 .loc 1 1874 0 is_stmt 1 discriminator 2
 3865 009e 3B69     	 ldr r3,[r7,#16]
 3866 00a0 0133     	 adds r3,r3,#1
 3867 00a2 3B61     	 str r3,[r7,#16]
 3868              	.L229:
1874:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 3869              	 .loc 1 1874 0 is_stmt 0 discriminator 1
 3870 00a4 3B69     	 ldr r3,[r7,#16]
 3871 00a6 0C2B     	 cmp r3,#12
 3872 00a8 C9D9     	 bls .L234
1883:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1884:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1885:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1886:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
 3873              	 .loc 1 1886 0 is_stmt 1
 3874 00aa 3B68     	 ldr r3,[r7]
 3875 00ac 1B78     	 ldrb r3,[r3]
 3876 00ae 03F04003 	 and r3,r3,#64
 3877 00b2 002B     	 cmp r3,#0
 3878 00b4 0BD0     	 beq .L235
 3879              	 .loc 1 1886 0 is_stmt 0 discriminator 1
 3880 00b6 FB89     	 ldrh r3,[r7,#14]
 3881 00b8 002B     	 cmp r3,#0
 3882 00ba 08D0     	 beq .L235
 3883              	 .loc 1 1886 0 discriminator 2
 3884 00bc 7B69     	 ldr r3,[r7,#20]
 3885 00be 5B00     	 lsls r3,r3,#1
 3886 00c0 7A68     	 ldr r2,[r7,#4]
 3887 00c2 1344     	 add r3,r3,r2
 3888 00c4 1B88     	 ldrh r3,[r3]
 3889 00c6 002B     	 cmp r3,#0
 3890 00c8 01D0     	 beq .L235
 3891              	 .loc 1 1886 0 discriminator 3
 3892 00ca 0023     	 movs r3,#0
 3893 00cc 00E0     	 b .L228
 3894              	.L235:
1887:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1888:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;		/* The part of LFN matched */
 3895              	 .loc 1 1888 0 is_stmt 1
 3896 00ce 0123     	 movs r3,#1
 3897              	.L228:
1889:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3898              	 .loc 1 1889 0
 3899 00d0 1846     	 mov r0,r3
 3900 00d2 1C37     	 adds r7,r7,#28
 3901              	.LCFI174:
 3902              	 .cfi_def_cfa_offset 12
 3903 00d4 BD46     	 mov sp,r7
 3904              	.LCFI175:
 3905              	 .cfi_def_cfa_register 13
 3906              	 
 3907 00d6 90BD     	 pop {r4,r7,pc}
 3908              	.L237:
 3909              	 .align 2
 3910              	.L236:
 3911 00d8 00000000 	 .word LfnOfs
 3912              	 .cfi_endproc
 3913              	.LFE31:
 3915              	 .section .text.pick_lfn,"ax",%progbits
 3916              	 .align 2
 3917              	 .thumb
 3918              	 .thumb_func
 3920              	pick_lfn:
 3921              	.LFB32:
1890:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1891:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1892:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
1893:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------*/
1894:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1895:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------*/
1896:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1897:../Dave/Generated/FATFS/ff_Src/ff.c **** static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1898:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1899:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir			/* Pointer to the LFN entry */
1900:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1901:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3922              	 .loc 1 1901 0
 3923              	 .cfi_startproc
 3924              	 
 3925              	 
 3926 0000 80B5     	 push {r7,lr}
 3927              	.LCFI176:
 3928              	 .cfi_def_cfa_offset 8
 3929              	 .cfi_offset 7,-8
 3930              	 .cfi_offset 14,-4
 3931 0002 86B0     	 sub sp,sp,#24
 3932              	.LCFI177:
 3933              	 .cfi_def_cfa_offset 32
 3934 0004 00AF     	 add r7,sp,#0
 3935              	.LCFI178:
 3936              	 .cfi_def_cfa_register 7
 3937 0006 7860     	 str r0,[r7,#4]
 3938 0008 3960     	 str r1,[r7]
1902:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, s;
1903:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, uc;
1904:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1905:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1906:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 3939              	 .loc 1 1906 0
 3940 000a 3B68     	 ldr r3,[r7]
 3941 000c 1A33     	 adds r3,r3,#26
 3942 000e 1846     	 mov r0,r3
 3943 0010 FFF7FEFF 	 bl ld_word
 3944 0014 0346     	 mov r3,r0
 3945 0016 002B     	 cmp r3,#0
 3946 0018 01D0     	 beq .L239
 3947              	 .loc 1 1906 0 is_stmt 0 discriminator 1
 3948 001a 0023     	 movs r3,#0
 3949 001c 4DE0     	 b .L240
 3950              	.L239:
1907:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1908:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 3951              	 .loc 1 1908 0 is_stmt 1
 3952 001e 3B68     	 ldr r3,[r7]
 3953 0020 1B78     	 ldrb r3,[r3]
 3954 0022 23F04003 	 bic r3,r3,#64
 3955 0026 5A1E     	 subs r2,r3,#1
 3956 0028 1346     	 mov r3,r2
 3957 002a 5B00     	 lsls r3,r3,#1
 3958 002c 1344     	 add r3,r3,r2
 3959 002e 9B00     	 lsls r3,r3,#2
 3960 0030 1344     	 add r3,r3,r2
 3961 0032 7B61     	 str r3,[r7,#20]
1909:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1910:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 3962              	 .loc 1 1910 0
 3963 0034 0123     	 movs r3,#1
 3964 0036 FB81     	 strh r3,[r7,#14]
 3965 0038 0023     	 movs r3,#0
 3966 003a 3B61     	 str r3,[r7,#16]
 3967 003c 28E0     	 b .L241
 3968              	.L245:
1911:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 3969              	 .loc 1 1911 0
 3970 003e 214A     	 ldr r2,.L248
 3971 0040 3B69     	 ldr r3,[r7,#16]
 3972 0042 1344     	 add r3,r3,r2
 3973 0044 1B78     	 ldrb r3,[r3]
 3974 0046 1A46     	 mov r2,r3
 3975 0048 3B68     	 ldr r3,[r7]
 3976 004a 1344     	 add r3,r3,r2
 3977 004c 1846     	 mov r0,r3
 3978 004e FFF7FEFF 	 bl ld_word
 3979 0052 0346     	 mov r3,r0
 3980 0054 BB81     	 strh r3,[r7,#12]
1912:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != 0) {
 3981              	 .loc 1 1912 0
 3982 0056 FB89     	 ldrh r3,[r7,#14]
 3983 0058 002B     	 cmp r3,#0
 3984 005a 0FD0     	 beq .L242
1913:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
 3985              	 .loc 1 1913 0
 3986 005c 7B69     	 ldr r3,[r7,#20]
 3987 005e FE2B     	 cmp r3,#254
 3988 0060 01D9     	 bls .L243
 3989              	 .loc 1 1913 0 is_stmt 0 discriminator 1
 3990 0062 0023     	 movs r3,#0
 3991 0064 29E0     	 b .L240
 3992              	.L243:
1914:../Dave/Generated/FATFS/ff_Src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 3993              	 .loc 1 1914 0 is_stmt 1
 3994 0066 7B69     	 ldr r3,[r7,#20]
 3995 0068 5A1C     	 adds r2,r3,#1
 3996 006a 7A61     	 str r2,[r7,#20]
 3997 006c 5B00     	 lsls r3,r3,#1
 3998 006e 7A68     	 ldr r2,[r7,#4]
 3999 0070 1344     	 add r3,r3,r2
 4000 0072 BA89     	 ldrh r2,[r7,#12]
 4001 0074 FA81     	 strh r2,[r7,#14]
 4002 0076 FA89     	 ldrh r2,[r7,#14]
 4003 0078 1A80     	 strh r2,[r3]
 4004 007a 06E0     	 b .L244
 4005              	.L242:
1915:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1916:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
 4006              	 .loc 1 1916 0
 4007 007c BB89     	 ldrh r3,[r7,#12]
 4008 007e 4FF6FF72 	 movw r2,#65535
 4009 0082 9342     	 cmp r3,r2
 4010 0084 01D0     	 beq .L244
 4011              	 .loc 1 1916 0 is_stmt 0 discriminator 1
 4012 0086 0023     	 movs r3,#0
 4013 0088 17E0     	 b .L240
 4014              	.L244:
1910:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4015              	 .loc 1 1910 0 is_stmt 1 discriminator 2
 4016 008a 3B69     	 ldr r3,[r7,#16]
 4017 008c 0133     	 adds r3,r3,#1
 4018 008e 3B61     	 str r3,[r7,#16]
 4019              	.L241:
1910:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 4020              	 .loc 1 1910 0 is_stmt 0 discriminator 1
 4021 0090 3B69     	 ldr r3,[r7,#16]
 4022 0092 0C2B     	 cmp r3,#12
 4023 0094 D3D9     	 bls .L245
1917:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1918:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1919:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1920:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 4024              	 .loc 1 1920 0 is_stmt 1
 4025 0096 3B68     	 ldr r3,[r7]
 4026 0098 1B78     	 ldrb r3,[r3]
 4027 009a 03F04003 	 and r3,r3,#64
 4028 009e 002B     	 cmp r3,#0
 4029 00a0 0AD0     	 beq .L246
1921:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
 4030              	 .loc 1 1921 0
 4031 00a2 7B69     	 ldr r3,[r7,#20]
 4032 00a4 FE2B     	 cmp r3,#254
 4033 00a6 01D9     	 bls .L247
 4034              	 .loc 1 1921 0 is_stmt 0 discriminator 1
 4035 00a8 0023     	 movs r3,#0
 4036 00aa 06E0     	 b .L240
 4037              	.L247:
1922:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lfnbuf[i] = 0;
 4038              	 .loc 1 1922 0 is_stmt 1
 4039 00ac 7B69     	 ldr r3,[r7,#20]
 4040 00ae 5B00     	 lsls r3,r3,#1
 4041 00b0 7A68     	 ldr r2,[r7,#4]
 4042 00b2 1344     	 add r3,r3,r2
 4043 00b4 0022     	 movs r2,#0
 4044 00b6 1A80     	 strh r2,[r3]
 4045              	.L246:
1923:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1924:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1925:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;		/* The part of LFN is valid */
 4046              	 .loc 1 1925 0
 4047 00b8 0123     	 movs r3,#1
 4048              	.L240:
1926:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4049              	 .loc 1 1926 0
 4050 00ba 1846     	 mov r0,r3
 4051 00bc 1837     	 adds r7,r7,#24
 4052              	.LCFI179:
 4053              	 .cfi_def_cfa_offset 8
 4054 00be BD46     	 mov sp,r7
 4055              	.LCFI180:
 4056              	 .cfi_def_cfa_register 13
 4057              	 
 4058 00c0 80BD     	 pop {r7,pc}
 4059              	.L249:
 4060 00c2 00BF     	 .align 2
 4061              	.L248:
 4062 00c4 00000000 	 .word LfnOfs
 4063              	 .cfi_endproc
 4064              	.LFE32:
 4066              	 .section .text.put_lfn,"ax",%progbits
 4067              	 .align 2
 4068              	 .thumb
 4069              	 .thumb_func
 4071              	put_lfn:
 4072              	.LFB33:
1927:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1928:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1929:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1930:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1931:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------*/
1932:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Create an entry of LFN entries */
1933:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------*/
1934:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1935:../Dave/Generated/FATFS/ff_Src/ff.c **** static void put_lfn (
1936:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1937:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1938:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ord,			/* LFN order (1-20) */
1939:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE sum			/* Checksum of the corresponding SFN */
1940:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1941:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4073              	 .loc 1 1941 0
 4074              	 .cfi_startproc
 4075              	 
 4076              	 
 4077 0000 80B5     	 push {r7,lr}
 4078              	.LCFI181:
 4079              	 .cfi_def_cfa_offset 8
 4080              	 .cfi_offset 7,-8
 4081              	 .cfi_offset 14,-4
 4082 0002 88B0     	 sub sp,sp,#32
 4083              	.LCFI182:
 4084              	 .cfi_def_cfa_offset 40
 4085 0004 00AF     	 add r7,sp,#0
 4086              	.LCFI183:
 4087              	 .cfi_def_cfa_register 7
 4088 0006 F860     	 str r0,[r7,#12]
 4089 0008 B960     	 str r1,[r7,#8]
 4090 000a 1146     	 mov r1,r2
 4091 000c 1A46     	 mov r2,r3
 4092 000e 0B46     	 mov r3,r1
 4093 0010 FB71     	 strb r3,[r7,#7]
 4094 0012 1346     	 mov r3,r2
 4095 0014 BB71     	 strb r3,[r7,#6]
1942:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, s;
1943:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
1944:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1945:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1946:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
 4096              	 .loc 1 1946 0
 4097 0016 BB68     	 ldr r3,[r7,#8]
 4098 0018 0D33     	 adds r3,r3,#13
 4099 001a BA79     	 ldrb r2,[r7,#6]
 4100 001c 1A70     	 strb r2,[r3]
1947:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 4101              	 .loc 1 1947 0
 4102 001e BB68     	 ldr r3,[r7,#8]
 4103 0020 0B33     	 adds r3,r3,#11
 4104 0022 0F22     	 movs r2,#15
 4105 0024 1A70     	 strb r2,[r3]
1948:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Type] = 0;
 4106              	 .loc 1 1948 0
 4107 0026 BB68     	 ldr r3,[r7,#8]
 4108 0028 0C33     	 adds r3,r3,#12
 4109 002a 0022     	 movs r2,#0
 4110 002c 1A70     	 strb r2,[r3]
1949:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dir + LDIR_FstClusLO, 0);
 4111              	 .loc 1 1949 0
 4112 002e BB68     	 ldr r3,[r7,#8]
 4113 0030 1A33     	 adds r3,r3,#26
 4114 0032 1846     	 mov r0,r3
 4115 0034 0021     	 movs r1,#0
 4116 0036 FFF7FEFF 	 bl st_word
1950:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1951:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 4117              	 .loc 1 1951 0
 4118 003a FB79     	 ldrb r3,[r7,#7]
 4119 003c 5A1E     	 subs r2,r3,#1
 4120 003e 1346     	 mov r3,r2
 4121 0040 5B00     	 lsls r3,r3,#1
 4122 0042 1344     	 add r3,r3,r2
 4123 0044 9B00     	 lsls r3,r3,#2
 4124 0046 1344     	 add r3,r3,r2
 4125 0048 FB61     	 str r3,[r7,#28]
1952:../Dave/Generated/FATFS/ff_Src/ff.c **** 	s = wc = 0;
 4126              	 .loc 1 1952 0
 4127 004a 0023     	 movs r3,#0
 4128 004c FB82     	 strh r3,[r7,#22]
 4129 004e 0023     	 movs r3,#0
 4130 0050 BB61     	 str r3,[r7,#24]
 4131              	.L253:
1953:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
1954:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 4132              	 .loc 1 1954 0
 4133 0052 FB8A     	 ldrh r3,[r7,#22]
 4134 0054 4FF6FF72 	 movw r2,#65535
 4135 0058 9342     	 cmp r3,r2
 4136 005a 07D0     	 beq .L251
 4137              	 .loc 1 1954 0 is_stmt 0 discriminator 1
 4138 005c FB69     	 ldr r3,[r7,#28]
 4139 005e 5A1C     	 adds r2,r3,#1
 4140 0060 FA61     	 str r2,[r7,#28]
 4141 0062 5B00     	 lsls r3,r3,#1
 4142 0064 FA68     	 ldr r2,[r7,#12]
 4143 0066 1344     	 add r3,r3,r2
 4144 0068 1B88     	 ldrh r3,[r3]
 4145 006a FB82     	 strh r3,[r7,#22]
 4146              	.L251:
1955:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
 4147              	 .loc 1 1955 0 is_stmt 1
 4148 006c 164A     	 ldr r2,.L256
 4149 006e BB69     	 ldr r3,[r7,#24]
 4150 0070 1344     	 add r3,r3,r2
 4151 0072 1B78     	 ldrb r3,[r3]
 4152 0074 1A46     	 mov r2,r3
 4153 0076 BB68     	 ldr r3,[r7,#8]
 4154 0078 1A44     	 add r2,r2,r3
 4155 007a FB8A     	 ldrh r3,[r7,#22]
 4156 007c 1046     	 mov r0,r2
 4157 007e 1946     	 mov r1,r3
 4158 0080 FFF7FEFF 	 bl st_word
1956:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 4159              	 .loc 1 1956 0
 4160 0084 FB8A     	 ldrh r3,[r7,#22]
 4161 0086 002B     	 cmp r3,#0
 4162 0088 02D1     	 bne .L252
 4163              	 .loc 1 1956 0 is_stmt 0 discriminator 1
 4164 008a 4FF6FF73 	 movw r3,#65535
 4165 008e FB82     	 strh r3,[r7,#22]
 4166              	.L252:
1957:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (++s < 13);
 4167              	 .loc 1 1957 0 is_stmt 1
 4168 0090 BB69     	 ldr r3,[r7,#24]
 4169 0092 0133     	 adds r3,r3,#1
 4170 0094 BB61     	 str r3,[r7,#24]
 4171 0096 BB69     	 ldr r3,[r7,#24]
 4172 0098 0C2B     	 cmp r3,#12
 4173 009a DAD9     	 bls .L253
1958:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 4174              	 .loc 1 1958 0
 4175 009c FB8A     	 ldrh r3,[r7,#22]
 4176 009e 4FF6FF72 	 movw r2,#65535
 4177 00a2 9342     	 cmp r3,r2
 4178 00a4 06D0     	 beq .L254
 4179              	 .loc 1 1958 0 is_stmt 0 discriminator 2
 4180 00a6 FB69     	 ldr r3,[r7,#28]
 4181 00a8 5B00     	 lsls r3,r3,#1
 4182 00aa FA68     	 ldr r2,[r7,#12]
 4183 00ac 1344     	 add r3,r3,r2
 4184 00ae 1B88     	 ldrh r3,[r3]
 4185 00b0 002B     	 cmp r3,#0
 4186 00b2 03D1     	 bne .L255
 4187              	.L254:
 4188              	 .loc 1 1958 0 discriminator 3
 4189 00b4 FB79     	 ldrb r3,[r7,#7]
 4190 00b6 43F04003 	 orr r3,r3,#64
 4191 00ba FB71     	 strb r3,[r7,#7]
 4192              	.L255:
1959:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 4193              	 .loc 1 1959 0 is_stmt 1
 4194 00bc BB68     	 ldr r3,[r7,#8]
 4195 00be FA79     	 ldrb r2,[r7,#7]
 4196 00c0 1A70     	 strb r2,[r3]
1960:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4197              	 .loc 1 1960 0
 4198 00c2 2037     	 adds r7,r7,#32
 4199              	.LCFI184:
 4200              	 .cfi_def_cfa_offset 8
 4201 00c4 BD46     	 mov sp,r7
 4202              	.LCFI185:
 4203              	 .cfi_def_cfa_register 13
 4204              	 
 4205 00c6 80BD     	 pop {r7,pc}
 4206              	.L257:
 4207              	 .align 2
 4208              	.L256:
 4209 00c8 00000000 	 .word LfnOfs
 4210              	 .cfi_endproc
 4211              	.LFE33:
 4213              	 .section .text.gen_numname,"ax",%progbits
 4214              	 .align 2
 4215              	 .thumb
 4216              	 .thumb_func
 4218              	gen_numname:
 4219              	.LFB34:
1961:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1962:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
1963:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN */
1964:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1965:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1966:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1967:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && !FF_FS_READONLY
1968:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1969:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Create a Numbered SFN                                        */
1970:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1971:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1972:../Dave/Generated/FATFS/ff_Src/ff.c **** static void gen_numname (
1973:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1974:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
1975:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1976:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT seq			/* Sequence number */
1977:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1978:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4220              	 .loc 1 1978 0
 4221              	 .cfi_startproc
 4222              	 
 4223              	 
 4224 0000 80B5     	 push {r7,lr}
 4225              	.LCFI186:
 4226              	 .cfi_def_cfa_offset 8
 4227              	 .cfi_offset 7,-8
 4228              	 .cfi_offset 14,-4
 4229 0002 8CB0     	 sub sp,sp,#48
 4230              	.LCFI187:
 4231              	 .cfi_def_cfa_offset 56
 4232 0004 00AF     	 add r7,sp,#0
 4233              	.LCFI188:
 4234              	 .cfi_def_cfa_register 7
 4235 0006 F860     	 str r0,[r7,#12]
 4236 0008 B960     	 str r1,[r7,#8]
 4237 000a 7A60     	 str r2,[r7,#4]
 4238 000c 3B60     	 str r3,[r7]
1979:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ns[8], c;
1980:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, j;
1981:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
1982:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sr;
1983:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1984:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1985:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(dst, src, 11);
 4239              	 .loc 1 1985 0
 4240 000e F868     	 ldr r0,[r7,#12]
 4241 0010 B968     	 ldr r1,[r7,#8]
 4242 0012 0B22     	 movs r2,#11
 4243 0014 FFF7FEFF 	 bl mem_cpy
1986:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1987:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
 4244              	 .loc 1 1987 0
 4245 0018 3B68     	 ldr r3,[r7]
 4246 001a 052B     	 cmp r3,#5
 4247 001c 2BD9     	 bls .L259
1988:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sr = seq;
 4248              	 .loc 1 1988 0
 4249 001e 3B68     	 ldr r3,[r7]
 4250 0020 FB61     	 str r3,[r7,#28]
1989:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (*lfn) {	/* Create a CRC as hash value */
 4251              	 .loc 1 1989 0
 4252 0022 22E0     	 b .L260
 4253              	.L264:
1990:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = *lfn++;
 4254              	 .loc 1 1990 0
 4255 0024 7B68     	 ldr r3,[r7,#4]
 4256 0026 9A1C     	 adds r2,r3,#2
 4257 0028 7A60     	 str r2,[r7,#4]
 4258 002a 1B88     	 ldrh r3,[r3]
 4259 002c 7B84     	 strh r3,[r7,#34]
1991:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = 0; i < 16; i++) {
 4260              	 .loc 1 1991 0
 4261 002e 0023     	 movs r3,#0
 4262 0030 BB62     	 str r3,[r7,#40]
 4263 0032 17E0     	 b .L261
 4264              	.L263:
1992:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4265              	 .loc 1 1992 0
 4266 0034 FB69     	 ldr r3,[r7,#28]
 4267 0036 5A00     	 lsls r2,r3,#1
 4268 0038 7B8C     	 ldrh r3,[r7,#34]
 4269 003a 03F00103 	 and r3,r3,#1
 4270 003e 1344     	 add r3,r3,r2
 4271 0040 FB61     	 str r3,[r7,#28]
1993:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc >>= 1;
 4272              	 .loc 1 1993 0
 4273 0042 7B8C     	 ldrh r3,[r7,#34]
 4274 0044 5B08     	 lsrs r3,r3,#1
 4275 0046 7B84     	 strh r3,[r7,#34]
1994:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
 4276              	 .loc 1 1994 0
 4277 0048 FB69     	 ldr r3,[r7,#28]
 4278 004a 03F48033 	 and r3,r3,#65536
 4279 004e 002B     	 cmp r3,#0
 4280 0050 05D0     	 beq .L262
 4281              	 .loc 1 1994 0 is_stmt 0 discriminator 1
 4282 0052 FB69     	 ldr r3,[r7,#28]
 4283 0054 83F48833 	 eor r3,r3,#69632
 4284 0058 83F02103 	 eor r3,r3,#33
 4285 005c FB61     	 str r3,[r7,#28]
 4286              	.L262:
1991:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4287              	 .loc 1 1991 0 is_stmt 1 discriminator 2
 4288 005e BB6A     	 ldr r3,[r7,#40]
 4289 0060 0133     	 adds r3,r3,#1
 4290 0062 BB62     	 str r3,[r7,#40]
 4291              	.L261:
1991:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sr = (sr << 1) + (wc & 1);
 4292              	 .loc 1 1991 0 is_stmt 0 discriminator 1
 4293 0064 BB6A     	 ldr r3,[r7,#40]
 4294 0066 0F2B     	 cmp r3,#15
 4295 0068 E4D9     	 bls .L263
 4296              	.L260:
1989:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = *lfn++;
 4297              	 .loc 1 1989 0 is_stmt 1
 4298 006a 7B68     	 ldr r3,[r7,#4]
 4299 006c 1B88     	 ldrh r3,[r3]
 4300 006e 002B     	 cmp r3,#0
 4301 0070 D8D1     	 bne .L264
1995:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1996:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1997:../Dave/Generated/FATFS/ff_Src/ff.c **** 		seq = (UINT)sr;
 4302              	 .loc 1 1997 0
 4303 0072 FB69     	 ldr r3,[r7,#28]
 4304 0074 3B60     	 str r3,[r7]
 4305              	.L259:
1998:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1999:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2000:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* itoa (hexdecimal) */
2001:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = 7;
 4306              	 .loc 1 2001 0
 4307 0076 0723     	 movs r3,#7
 4308 0078 BB62     	 str r3,[r7,#40]
 4309              	.L266:
2002:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2003:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (BYTE)((seq % 16) + '0');
 4310              	 .loc 1 2003 0
 4311 007a 3B68     	 ldr r3,[r7]
 4312 007c DBB2     	 uxtb r3,r3
 4313 007e 03F00F03 	 and r3,r3,#15
 4314 0082 DBB2     	 uxtb r3,r3
 4315 0084 3033     	 adds r3,r3,#48
 4316 0086 87F82F30 	 strb r3,[r7,#47]
2004:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c > '9') c += 7;
 4317              	 .loc 1 2004 0
 4318 008a 97F82F30 	 ldrb r3,[r7,#47]
 4319 008e 392B     	 cmp r3,#57
 4320 0090 04D9     	 bls .L265
 4321              	 .loc 1 2004 0 is_stmt 0 discriminator 1
 4322 0092 97F82F30 	 ldrb r3,[r7,#47]
 4323 0096 0733     	 adds r3,r3,#7
 4324 0098 87F82F30 	 strb r3,[r7,#47]
 4325              	.L265:
2005:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ns[i--] = c;
 4326              	 .loc 1 2005 0 is_stmt 1
 4327 009c BB6A     	 ldr r3,[r7,#40]
 4328 009e 5A1E     	 subs r2,r3,#1
 4329 00a0 BA62     	 str r2,[r7,#40]
 4330 00a2 07F13002 	 add r2,r7,#48
 4331 00a6 1344     	 add r3,r3,r2
 4332 00a8 97F82F20 	 ldrb r2,[r7,#47]
 4333 00ac 03F81C2C 	 strb r2,[r3,#-28]
2006:../Dave/Generated/FATFS/ff_Src/ff.c **** 		seq /= 16;
 4334              	 .loc 1 2006 0
 4335 00b0 3B68     	 ldr r3,[r7]
 4336 00b2 1B09     	 lsrs r3,r3,#4
 4337 00b4 3B60     	 str r3,[r7]
2007:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (seq);
 4338              	 .loc 1 2007 0
 4339 00b6 3B68     	 ldr r3,[r7]
 4340 00b8 002B     	 cmp r3,#0
 4341 00ba DED1     	 bne .L266
2008:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ns[i] = '~';
 4342              	 .loc 1 2008 0
 4343 00bc 07F11402 	 add r2,r7,#20
 4344 00c0 BB6A     	 ldr r3,[r7,#40]
 4345 00c2 1344     	 add r3,r3,r2
 4346 00c4 7E22     	 movs r2,#126
 4347 00c6 1A70     	 strb r2,[r3]
2009:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2010:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Append the number to the SFN body */
2011:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
 4348              	 .loc 1 2011 0
 4349 00c8 0023     	 movs r3,#0
 4350 00ca 7B62     	 str r3,[r7,#36]
 4351 00cc 15E0     	 b .L267
 4352              	.L271:
2012:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st(dst[j])) {
 4353              	 .loc 1 2012 0
 4354 00ce FA68     	 ldr r2,[r7,#12]
 4355 00d0 7B6A     	 ldr r3,[r7,#36]
 4356 00d2 1344     	 add r3,r3,r2
 4357 00d4 1B78     	 ldrb r3,[r3]
 4358 00d6 1846     	 mov r0,r3
 4359 00d8 FFF7FEFF 	 bl dbc_1st
 4360 00dc 0346     	 mov r3,r0
 4361 00de 002B     	 cmp r3,#0
 4362 00e0 08D0     	 beq .L268
2013:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (j == i - 1) break;
 4363              	 .loc 1 2013 0
 4364 00e2 BB6A     	 ldr r3,[r7,#40]
 4365 00e4 5A1E     	 subs r2,r3,#1
 4366 00e6 7B6A     	 ldr r3,[r7,#36]
 4367 00e8 9A42     	 cmp r2,r3
 4368 00ea 00D1     	 bne .L269
 4369 00ec 0FE0     	 b .L270
 4370              	.L269:
2014:../Dave/Generated/FATFS/ff_Src/ff.c **** 			j++;
 4371              	 .loc 1 2014 0
 4372 00ee 7B6A     	 ldr r3,[r7,#36]
 4373 00f0 0133     	 adds r3,r3,#1
 4374 00f2 7B62     	 str r3,[r7,#36]
 4375              	.L268:
2011:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st(dst[j])) {
 4376              	 .loc 1 2011 0 discriminator 2
 4377 00f4 7B6A     	 ldr r3,[r7,#36]
 4378 00f6 0133     	 adds r3,r3,#1
 4379 00f8 7B62     	 str r3,[r7,#36]
 4380              	.L267:
2011:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st(dst[j])) {
 4381              	 .loc 1 2011 0 is_stmt 0 discriminator 1
 4382 00fa 7A6A     	 ldr r2,[r7,#36]
 4383 00fc BB6A     	 ldr r3,[r7,#40]
 4384 00fe 9A42     	 cmp r2,r3
 4385 0100 05D2     	 bcs .L270
2011:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st(dst[j])) {
 4386              	 .loc 1 2011 0 discriminator 3
 4387 0102 FA68     	 ldr r2,[r7,#12]
 4388 0104 7B6A     	 ldr r3,[r7,#36]
 4389 0106 1344     	 add r3,r3,r2
 4390 0108 1B78     	 ldrb r3,[r3]
 4391 010a 202B     	 cmp r3,#32
 4392 010c DFD1     	 bne .L271
 4393              	.L270:
2015:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2016:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2017:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2018:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
 4394              	 .loc 1 2018 0 is_stmt 1
 4395 010e 7B6A     	 ldr r3,[r7,#36]
 4396 0110 5A1C     	 adds r2,r3,#1
 4397 0112 7A62     	 str r2,[r7,#36]
 4398 0114 FA68     	 ldr r2,[r7,#12]
 4399 0116 1A44     	 add r2,r2,r3
 4400 0118 BB6A     	 ldr r3,[r7,#40]
 4401 011a 072B     	 cmp r3,#7
 4402 011c 08D8     	 bhi .L272
 4403              	 .loc 1 2018 0 is_stmt 0 discriminator 1
 4404 011e BB6A     	 ldr r3,[r7,#40]
 4405 0120 591C     	 adds r1,r3,#1
 4406 0122 B962     	 str r1,[r7,#40]
 4407 0124 07F13001 	 add r1,r7,#48
 4408 0128 0B44     	 add r3,r3,r1
 4409 012a 13F81C3C 	 ldrb r3,[r3,#-28]
 4410 012e 00E0     	 b .L273
 4411              	.L272:
 4412              	 .loc 1 2018 0 discriminator 2
 4413 0130 2023     	 movs r3,#32
 4414              	.L273:
 4415              	 .loc 1 2018 0 discriminator 4
 4416 0132 1370     	 strb r3,[r2]
2019:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (j < 8);
 4417              	 .loc 1 2019 0 is_stmt 1 discriminator 4
 4418 0134 7B6A     	 ldr r3,[r7,#36]
 4419 0136 072B     	 cmp r3,#7
 4420 0138 E9D9     	 bls .L270
2020:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4421              	 .loc 1 2020 0
 4422 013a 3037     	 adds r7,r7,#48
 4423              	.LCFI189:
 4424              	 .cfi_def_cfa_offset 8
 4425 013c BD46     	 mov sp,r7
 4426              	.LCFI190:
 4427              	 .cfi_def_cfa_register 13
 4428              	 
 4429 013e 80BD     	 pop {r7,pc}
 4430              	 .cfi_endproc
 4431              	.LFE34:
 4433              	 .section .text.sum_sfn,"ax",%progbits
 4434              	 .align 2
 4435              	 .thumb
 4436              	 .thumb_func
 4438              	sum_sfn:
 4439              	.LFB35:
2021:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN && !FF_FS_READONLY */
2022:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2023:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2024:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2025:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2026:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2027:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
2028:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2029:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2030:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE sum_sfn (
2031:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
2032:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2033:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4440              	 .loc 1 2033 0
 4441              	 .cfi_startproc
 4442              	 
 4443              	 
 4444              	 
 4445 0000 80B4     	 push {r7}
 4446              	.LCFI191:
 4447              	 .cfi_def_cfa_offset 4
 4448              	 .cfi_offset 7,-4
 4449 0002 85B0     	 sub sp,sp,#20
 4450              	.LCFI192:
 4451              	 .cfi_def_cfa_offset 24
 4452 0004 00AF     	 add r7,sp,#0
 4453              	.LCFI193:
 4454              	 .cfi_def_cfa_register 7
 4455 0006 7860     	 str r0,[r7,#4]
2034:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE sum = 0;
 4456              	 .loc 1 2034 0
 4457 0008 0023     	 movs r3,#0
 4458 000a FB73     	 strb r3,[r7,#15]
2035:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n = 11;
 4459              	 .loc 1 2035 0
 4460 000c 0B23     	 movs r3,#11
 4461 000e BB60     	 str r3,[r7,#8]
 4462              	.L275:
2036:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2037:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2038:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = (sum >> 1) + (sum << 7) + *dir++;
 4463              	 .loc 1 2038 0 discriminator 1
 4464 0010 FB7B     	 ldrb r3,[r7,#15]
 4465 0012 DAB2     	 uxtb r2,r3
 4466 0014 5208     	 lsrs r2,r2,#1
 4467 0016 DB01     	 lsls r3,r3,#7
 4468 0018 1343     	 orrs r3,r3,r2
 4469 001a DAB2     	 uxtb r2,r3
 4470 001c 7B68     	 ldr r3,[r7,#4]
 4471 001e 591C     	 adds r1,r3,#1
 4472 0020 7960     	 str r1,[r7,#4]
 4473 0022 1B78     	 ldrb r3,[r3]
 4474 0024 1344     	 add r3,r3,r2
 4475 0026 FB73     	 strb r3,[r7,#15]
2039:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (--n);
 4476              	 .loc 1 2039 0 discriminator 1
 4477 0028 BB68     	 ldr r3,[r7,#8]
 4478 002a 013B     	 subs r3,r3,#1
 4479 002c BB60     	 str r3,[r7,#8]
 4480 002e BB68     	 ldr r3,[r7,#8]
 4481 0030 002B     	 cmp r3,#0
 4482 0032 EDD1     	 bne .L275
2040:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
 4483              	 .loc 1 2040 0
 4484 0034 FB7B     	 ldrb r3,[r7,#15]
2041:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4485              	 .loc 1 2041 0
 4486 0036 1846     	 mov r0,r3
 4487 0038 1437     	 adds r7,r7,#20
 4488              	.LCFI194:
 4489              	 .cfi_def_cfa_offset 4
 4490 003a BD46     	 mov sp,r7
 4491              	.LCFI195:
 4492              	 .cfi_def_cfa_register 13
 4493              	 
 4494 003c 5DF8047B 	 ldr r7,[sp],#4
 4495              	.LCFI196:
 4496              	 .cfi_restore 7
 4497              	 .cfi_def_cfa_offset 0
 4498 0040 7047     	 bx lr
 4499              	 .cfi_endproc
 4500              	.LFE35:
 4502              	 .section .text.dir_read,"ax",%progbits
 4503              	 .align 2
 4504              	 .thumb
 4505              	 .thumb_func
 4507              	dir_read:
 4508              	.LFB36:
2042:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2043:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN */
2044:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2045:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2046:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2047:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2048:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2049:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Checksum                                                       */
2050:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2051:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2052:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD xdir_sum (	/* Get checksum of the directoly entry block */
2053:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* dir		/* Directory entry block to be calculated */
2054:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2055:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2056:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, szblk;
2057:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD sum;
2058:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2059:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2060:../Dave/Generated/FATFS/ff_Src/ff.c **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
2061:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = sum = 0; i < szblk; i++) {
2062:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
2063:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i++;
2064:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
2065:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
2066:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2067:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2068:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2069:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2070:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2071:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2072:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2073:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
2074:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* name	/* File name to be calculated */
2075:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2076:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2077:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR chr;
2078:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD sum = 0;
2079:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2080:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2081:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while ((chr = *name++) != 0) {
2082:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
2083:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
2084:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
2085:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2086:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2087:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2088:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2089:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2090:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_USE_MKFS
2091:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD xsum32 (	/* Returns 32-bit checksum */
2092:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE  dat,			/* Byte to be calculated (byte-by-byte processing) */
2093:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sum			/* Previous sum value */
2094:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2095:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2096:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
2097:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2098:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2099:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2100:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2101:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2102:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
2103:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------*/
2104:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Get object information from a directory block */
2105:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------*/
2106:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2107:../Dave/Generated/FATFS/ff_Src/ff.c **** static void get_xfileinfo (
2108:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
2109:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Buffer to store the extracted file information */
2110:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2111:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2112:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, hs;
2113:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT di, si, nc;
2114:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2115:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get file name from the entry block */
2116:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = SZDIRE * 2;	/* 1st C1 entry */
2117:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nc = 0; hs = 0; di = 0;
2118:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (nc < dirb[XDIR_NumName]) {
2119:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
2120:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
2121:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
2122:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
2123:../Dave/Generated/FATFS/ff_Src/ff.c **** 			hs = wc; continue;	/* Get low surrogate */
2124:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2125:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding
2126:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
2127:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di += wc;
2128:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = 0;
2129:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2130:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) di = 0;					/* Broken surrogate pair? */
2131:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
2132:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fname[di] = 0;						/* Terminate the name */
2133:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->altname[0] = 0;					/* exFAT does not support SFN */
2134:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2135:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
2136:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
2137:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
2138:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
2139:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2140:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2141:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 */
2142:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2143:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2144:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------*/
2145:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Get a directry entry block */
2146:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------*/
2147:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2148:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
2149:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
2150:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2151:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2152:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2153:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, sz_ent;
2154:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
2155:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2156:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2157:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Load 85 entry */
2158:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
2159:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
2160:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;	/* Invalid order */
2161:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
2162:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
2163:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
2164:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2165:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Load C0 entry */
2166:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_next(dp, 0);
2167:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2168:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
2169:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
2170:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
2171:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;	/* Invalid order */
2172:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
2173:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
2174:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2175:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Load C1 entries */
2176:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = 2 * SZDIRE;	/* C1 offset to load */
2177:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2178:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);
2179:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2180:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
2181:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2182:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
2183:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
2184:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
2185:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while ((i += SZDIRE) < sz_ent);
2186:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2187:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Sanity check (do it for only accessible object) */
2188:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i <= MAXDIRB(FF_MAX_LFN)) {
2189:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
2190:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2191:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
2192:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2193:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2194:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2195:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------------------*/
2196:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Initialize object allocation info with loaded entry block */
2197:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------------------*/
2198:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2199:../Dave/Generated/FATFS/ff_Src/ff.c **** static void init_alloc_info (
2200:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
2201:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj	/* Object allocation information to be initialized */
2202:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2203:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2204:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
2205:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
2206:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
2207:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->n_frag = 0;										/* No last fragment info */
2208:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2209:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2210:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2211:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2212:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY || FF_FS_RPATH != 0
2213:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------*/
2214:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Load the object's directory entry block */
2215:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------*/
2216:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2217:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT load_obj_xdir (
2218:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
2219:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const FFOBJID* obj	/* Object with its containing directory information */
2220:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2221:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2222:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2223:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2224:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Open object containing directory */
2225:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.fs = obj->fs;
2226:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.sclust = obj->c_scl;
2227:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.stat = (BYTE)obj->c_size;
2228:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2229:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.n_frag = 0;
2230:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->blk_ofs = obj->c_ofs;
2231:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2232:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
2233:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
2234:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = load_xdir(dp);		/* Load the object's entry block */
2235:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2236:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
2237:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2238:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2239:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2240:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2241:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
2242:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
2243:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Store the directory entry block */
2244:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
2245:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2246:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT store_xdir (
2247:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp				/* Pointer to the direcotry object */
2248:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2249:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2250:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2251:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT nent;
2252:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2253:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2254:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create set sum */
2255:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2256:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nent = dirb[XDIR_NumSec] + 1;
2257:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2258:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Store the direcotry entry block to the directory */
2259:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);
2260:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (res == FR_OK) {
2261:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2262:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
2263:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(dp->dir, dirb, SZDIRE);
2264:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.fs->wflag = 1;
2265:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (--nent == 0) break;
2266:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dirb += SZDIRE;
2267:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);
2268:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2269:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2270:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2271:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2272:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2273:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2274:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-------------------------------------------*/
2275:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Create a new directory enrty block */
2276:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-------------------------------------------*/
2277:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2278:../Dave/Generated/FATFS/ff_Src/ff.c **** static void create_xdir (
2279:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2280:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfn	/* Pointer to the object name */
2281:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2282:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2283:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
2284:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE nc1, nlen;
2285:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
2286:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2287:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2288:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create 85,C0 entry */
2289:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(dirb, 0, 2 * SZDIRE);
2290:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[0 * SZDIRE + XDIR_Type] = 0x85;	/* 85 entry */
2291:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[1 * SZDIRE + XDIR_Type] = 0xC0;	/* C0 entry */
2292:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2293:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create C1 entries */
2294:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = SZDIRE * 2;	/* Top of C1 entries */
2295:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nlen = nc1 = 0; wc = 1;
2296:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2297:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
2298:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {	/* Fill name field */
2299:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
2300:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(dirb + i, wc); 		/* Store it */
2301:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i += 2;
2302:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (i % SZDIRE != 0);
2303:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc1++;
2304:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (lfn[nlen]);	/* Fill next entry if any char follows */
2305:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2306:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[XDIR_NumName] = nlen;		/* Set name length */
2307:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
2308:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2309:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2310:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2311:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
2312:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT */
2313:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2314:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2315:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2316:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
2317:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2318:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Read an object from the directory                                     */
2319:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2320:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2321:../Dave/Generated/FATFS/ff_Src/ff.c **** #define dir_read_file(dp) dir_read(dp, 0)
2322:../Dave/Generated/FATFS/ff_Src/ff.c **** #define dir_read_label(dp) dir_read(dp, 1)
2323:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2324:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_read (
2325:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
2326:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2327:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2328:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4509              	 .loc 1 2328 0
 4510              	 .cfi_startproc
 4511              	 
 4512              	 
 4513 0000 80B5     	 push {r7,lr}
 4514              	.LCFI197:
 4515              	 .cfi_def_cfa_offset 8
 4516              	 .cfi_offset 7,-8
 4517              	 .cfi_offset 14,-4
 4518 0002 86B0     	 sub sp,sp,#24
 4519              	.LCFI198:
 4520              	 .cfi_def_cfa_offset 32
 4521 0004 00AF     	 add r7,sp,#0
 4522              	.LCFI199:
 4523              	 .cfi_def_cfa_register 7
 4524 0006 7860     	 str r0,[r7,#4]
 4525 0008 3960     	 str r1,[r7]
2329:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_NO_FILE;
 4526              	 .loc 1 2329 0
 4527 000a 0423     	 movs r3,#4
 4528 000c FB75     	 strb r3,[r7,#23]
2330:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 4529              	 .loc 1 2330 0
 4530 000e 7B68     	 ldr r3,[r7,#4]
 4531 0010 1B68     	 ldr r3,[r3]
 4532 0012 3B61     	 str r3,[r7,#16]
2331:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE a, c;
2332:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2333:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
 4533              	 .loc 1 2333 0
 4534 0014 FF23     	 movs r3,#255
 4535 0016 7B75     	 strb r3,[r7,#21]
 4536 0018 FF23     	 movs r3,#255
 4537 001a 3B75     	 strb r3,[r7,#20]
2334:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2335:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2336:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (dp->sect) {
 4538              	 .loc 1 2336 0
 4539 001c 84E0     	 b .L278
 4540              	.L291:
2337:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 4541              	 .loc 1 2337 0
 4542 001e 7B68     	 ldr r3,[r7,#4]
 4543 0020 DB69     	 ldr r3,[r3,#28]
 4544 0022 3869     	 ldr r0,[r7,#16]
 4545 0024 1946     	 mov r1,r3
 4546 0026 FFF7FEFF 	 bl move_window
 4547 002a 0346     	 mov r3,r0
 4548 002c FB75     	 strb r3,[r7,#23]
2338:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
 4549              	 .loc 1 2338 0
 4550 002e FB7D     	 ldrb r3,[r7,#23]
 4551 0030 002B     	 cmp r3,#0
 4552 0032 00D0     	 beq .L279
 4553 0034 7DE0     	 b .L280
 4554              	.L279:
2339:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
 4555              	 .loc 1 2339 0
 4556 0036 7B68     	 ldr r3,[r7,#4]
 4557 0038 1B6A     	 ldr r3,[r3,#32]
 4558 003a 1B78     	 ldrb r3,[r3]
 4559 003c BB75     	 strb r3,[r7,#22]
2340:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 0) {
 4560              	 .loc 1 2340 0
 4561 003e BB7D     	 ldrb r3,[r7,#22]
 4562 0040 002B     	 cmp r3,#0
 4563 0042 02D1     	 bne .L281
2341:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 4564              	 .loc 1 2341 0
 4565 0044 0423     	 movs r3,#4
 4566 0046 FB75     	 strb r3,[r7,#23]
 4567 0048 73E0     	 b .L280
 4568              	.L281:
2342:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2343:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2344:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2345:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_USE_LABEL && vol) {
2346:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (c == 0x83) break;	/* Volume label entry? */
2347:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
2348:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (c == 0x85) {		/* Start of the file entry block? */
2349:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2350:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = load_xdir(dp);	/* Load the entry block */
2351:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
2352:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2353:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2354:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
2355:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2356:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2357:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else
2358:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2359:../Dave/Generated/FATFS/ff_Src/ff.c **** 		{	/* On the FAT/FAT32 volume */
2360:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 4569              	 .loc 1 2360 0
 4570 004a 7B68     	 ldr r3,[r7,#4]
 4571 004c 1B6A     	 ldr r3,[r3,#32]
 4572 004e 0B33     	 adds r3,r3,#11
 4573 0050 1B78     	 ldrb r3,[r3]
 4574 0052 03F03F03 	 and r3,r3,#63
 4575 0056 FB73     	 strb r3,[r7,#15]
 4576 0058 7B68     	 ldr r3,[r7,#4]
 4577 005a FA7B     	 ldrb r2,[r7,#15]
 4578 005c 9A71     	 strb r2,[r3,#6]
2361:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2362:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid 
 4579              	 .loc 1 2362 0
 4580 005e BB7D     	 ldrb r3,[r7,#22]
 4581 0060 E52B     	 cmp r3,#229
 4582 0062 0ED0     	 beq .L282
 4583              	 .loc 1 2362 0 is_stmt 0 discriminator 1
 4584 0064 BB7D     	 ldrb r3,[r7,#22]
 4585 0066 2E2B     	 cmp r3,#46
 4586 0068 0BD0     	 beq .L282
 4587              	 .loc 1 2362 0 discriminator 2
 4588 006a FB7B     	 ldrb r3,[r7,#15]
 4589 006c 23F02003 	 bic r3,r3,#32
 4590 0070 082B     	 cmp r3,#8
 4591 0072 0CBF     	 ite eq
 4592 0074 0123     	 moveq r3,#1
 4593 0076 0023     	 movne r3,#0
 4594 0078 DBB2     	 uxtb r3,r3
 4595 007a 1A46     	 mov r2,r3
 4596 007c 3B68     	 ldr r3,[r7]
 4597 007e 9A42     	 cmp r2,r3
 4598 0080 02D0     	 beq .L283
 4599              	.L282:
2363:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ord = 0xFF;
 4600              	 .loc 1 2363 0 is_stmt 1
 4601 0082 FF23     	 movs r3,#255
 4602 0084 7B75     	 strb r3,[r7,#21]
 4603 0086 45E0     	 b .L284
 4604              	.L283:
2364:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
2365:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (a == AM_LFN) {			/* An LFN entry is found */
 4605              	 .loc 1 2365 0
 4606 0088 FB7B     	 ldrb r3,[r7,#15]
 4607 008a 0F2B     	 cmp r3,#15
 4608 008c 2FD1     	 bne .L285
2366:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 4609              	 .loc 1 2366 0
 4610 008e BB7D     	 ldrb r3,[r7,#22]
 4611 0090 03F04003 	 and r3,r3,#64
 4612 0094 002B     	 cmp r3,#0
 4613 0096 0DD0     	 beq .L286
2367:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
 4614              	 .loc 1 2367 0
 4615 0098 7B68     	 ldr r3,[r7,#4]
 4616 009a 1B6A     	 ldr r3,[r3,#32]
 4617 009c 5B7B     	 ldrb r3,[r3,#13]
 4618 009e 3B75     	 strb r3,[r7,#20]
2368:../Dave/Generated/FATFS/ff_Src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;
 4619              	 .loc 1 2368 0
 4620 00a0 BB7D     	 ldrb r3,[r7,#22]
 4621 00a2 23F04003 	 bic r3,r3,#64
 4622 00a6 BB75     	 strb r3,[r7,#22]
 4623 00a8 BB7D     	 ldrb r3,[r7,#22]
 4624 00aa 7B75     	 strb r3,[r7,#21]
2369:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->blk_ofs = dp->dptr;
 4625              	 .loc 1 2369 0
 4626 00ac 7B68     	 ldr r3,[r7,#4]
 4627 00ae 5A69     	 ldr r2,[r3,#20]
 4628 00b0 7B68     	 ldr r3,[r7,#4]
 4629 00b2 1A63     	 str r2,[r3,#48]
 4630              	.L286:
2370:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2371:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Check LFN validity and capture it */
2372:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
 4631              	 .loc 1 2372 0
 4632 00b4 BA7D     	 ldrb r2,[r7,#22]
 4633 00b6 7B7D     	 ldrb r3,[r7,#21]
 4634 00b8 9A42     	 cmp r2,r3
 4635 00ba 15D1     	 bne .L287
 4636              	 .loc 1 2372 0 is_stmt 0 discriminator 1
 4637 00bc 7B68     	 ldr r3,[r7,#4]
 4638 00be 1B6A     	 ldr r3,[r3,#32]
 4639 00c0 0D33     	 adds r3,r3,#13
 4640 00c2 1B78     	 ldrb r3,[r3]
 4641 00c4 3A7D     	 ldrb r2,[r7,#20]
 4642 00c6 9A42     	 cmp r2,r3
 4643 00c8 0ED1     	 bne .L287
 4644              	 .loc 1 2372 0 discriminator 3
 4645 00ca 3B69     	 ldr r3,[r7,#16]
 4646 00cc DA68     	 ldr r2,[r3,#12]
 4647 00ce 7B68     	 ldr r3,[r7,#4]
 4648 00d0 1B6A     	 ldr r3,[r3,#32]
 4649 00d2 1046     	 mov r0,r2
 4650 00d4 1946     	 mov r1,r3
 4651 00d6 FFF7FEFF 	 bl pick_lfn
 4652 00da 0346     	 mov r3,r0
 4653 00dc 002B     	 cmp r3,#0
 4654 00de 03D0     	 beq .L287
 4655              	 .loc 1 2372 0 discriminator 5
 4656 00e0 7B7D     	 ldrb r3,[r7,#21]
 4657 00e2 013B     	 subs r3,r3,#1
 4658 00e4 DBB2     	 uxtb r3,r3
 4659 00e6 00E0     	 b .L288
 4660              	.L287:
 4661              	 .loc 1 2372 0 discriminator 6
 4662 00e8 FF23     	 movs r3,#255
 4663              	.L288:
 4664              	 .loc 1 2372 0 discriminator 8
 4665 00ea 7B75     	 strb r3,[r7,#21]
 4666 00ec 12E0     	 b .L284
 4667              	.L285:
2373:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {					/* An SFN entry is found */
2374:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 4668              	 .loc 1 2374 0 is_stmt 1
 4669 00ee 7B7D     	 ldrb r3,[r7,#21]
 4670 00f0 002B     	 cmp r3,#0
 4671 00f2 09D1     	 bne .L289
 4672              	 .loc 1 2374 0 is_stmt 0 discriminator 1
 4673 00f4 7B68     	 ldr r3,[r7,#4]
 4674 00f6 1B6A     	 ldr r3,[r3,#32]
 4675 00f8 1846     	 mov r0,r3
 4676 00fa FFF7FEFF 	 bl sum_sfn
 4677 00fe 0346     	 mov r3,r0
 4678 0100 1A46     	 mov r2,r3
 4679 0102 3B7D     	 ldrb r3,[r7,#20]
 4680 0104 9342     	 cmp r3,r2
 4681 0106 04D0     	 beq .L290
 4682              	.L289:
2375:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 4683              	 .loc 1 2375 0 is_stmt 1
 4684 0108 7B68     	 ldr r3,[r7,#4]
 4685 010a 4FF0FF32 	 mov r2,#-1
 4686 010e 1A63     	 str r2,[r3,#48]
2376:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2377:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
 4687              	 .loc 1 2377 0
 4688 0110 0FE0     	 b .L280
 4689              	.L290:
 4690 0112 0EE0     	 b .L280
 4691              	.L284:
2378:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2379:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2380:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* Non LFN configuration */
2381:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a 
2382:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
2383:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2384:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2385:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2386:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
 4692              	 .loc 1 2386 0
 4693 0114 7868     	 ldr r0,[r7,#4]
 4694 0116 0021     	 movs r1,#0
 4695 0118 FFF7FEFF 	 bl dir_next
 4696 011c 0346     	 mov r3,r0
 4697 011e FB75     	 strb r3,[r7,#23]
2387:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
 4698              	 .loc 1 2387 0
 4699 0120 FB7D     	 ldrb r3,[r7,#23]
 4700 0122 002B     	 cmp r3,#0
 4701 0124 00D0     	 beq .L278
 4702 0126 04E0     	 b .L280
 4703              	.L278:
2336:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 4704              	 .loc 1 2336 0
 4705 0128 7B68     	 ldr r3,[r7,#4]
 4706 012a DB69     	 ldr r3,[r3,#28]
 4707 012c 002B     	 cmp r3,#0
 4708 012e 7FF476AF 	 bne .L291
 4709              	.L280:
2388:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2389:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2390:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 4710              	 .loc 1 2390 0
 4711 0132 FB7D     	 ldrb r3,[r7,#23]
 4712 0134 002B     	 cmp r3,#0
 4713 0136 02D0     	 beq .L292
 4714              	 .loc 1 2390 0 is_stmt 0 discriminator 1
 4715 0138 7B68     	 ldr r3,[r7,#4]
 4716 013a 0022     	 movs r2,#0
 4717 013c DA61     	 str r2,[r3,#28]
 4718              	.L292:
2391:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 4719              	 .loc 1 2391 0 is_stmt 1
 4720 013e FB7D     	 ldrb r3,[r7,#23]
2392:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4721              	 .loc 1 2392 0
 4722 0140 1846     	 mov r0,r3
 4723 0142 1837     	 adds r7,r7,#24
 4724              	.LCFI200:
 4725              	 .cfi_def_cfa_offset 8
 4726 0144 BD46     	 mov sp,r7
 4727              	.LCFI201:
 4728              	 .cfi_def_cfa_register 13
 4729              	 
 4730 0146 80BD     	 pop {r7,pc}
 4731              	 .cfi_endproc
 4732              	.LFE36:
 4734              	 .section .text.dir_find,"ax",%progbits
 4735              	 .align 2
 4736              	 .thumb
 4737              	 .thumb_func
 4739              	dir_find:
 4740              	.LFB37:
2393:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2394:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_MINIMIZE <= 1 || FF_USE_LABEL || FF_FS_RPATH >= 2 */
2395:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2396:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2397:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2398:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2399:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Find an object in the directory                  */
2400:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2401:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2402:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2403:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp					/* Pointer to the directory object with the file name */
2404:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2405:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4741              	 .loc 1 2405 0
 4742              	 .cfi_startproc
 4743              	 
 4744              	 
 4745 0000 80B5     	 push {r7,lr}
 4746              	.LCFI202:
 4747              	 .cfi_def_cfa_offset 8
 4748              	 .cfi_offset 7,-8
 4749              	 .cfi_offset 14,-4
 4750 0002 86B0     	 sub sp,sp,#24
 4751              	.LCFI203:
 4752              	 .cfi_def_cfa_offset 32
 4753 0004 00AF     	 add r7,sp,#0
 4754              	.LCFI204:
 4755              	 .cfi_def_cfa_register 7
 4756 0006 7860     	 str r0,[r7,#4]
2406:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2407:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 4757              	 .loc 1 2407 0
 4758 0008 7B68     	 ldr r3,[r7,#4]
 4759 000a 1B68     	 ldr r3,[r3]
 4760 000c 3B61     	 str r3,[r7,#16]
2408:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE c;
2409:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2410:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE a, ord, sum;
2411:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2412:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2413:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
 4761              	 .loc 1 2413 0
 4762 000e 7868     	 ldr r0,[r7,#4]
 4763 0010 0021     	 movs r1,#0
 4764 0012 FFF7FEFF 	 bl dir_sdi
 4765 0016 0346     	 mov r3,r0
 4766 0018 FB75     	 strb r3,[r7,#23]
2414:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
 4767              	 .loc 1 2414 0
 4768 001a FB7D     	 ldrb r3,[r7,#23]
 4769 001c 002B     	 cmp r3,#0
 4770 001e 01D0     	 beq .L295
 4771              	 .loc 1 2414 0 is_stmt 0 discriminator 1
 4772 0020 FB7D     	 ldrb r3,[r7,#23]
 4773 0022 A6E0     	 b .L296
 4774              	.L295:
2415:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2416:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2417:../Dave/Generated/FATFS/ff_Src/ff.c **** 		BYTE nc;
2418:../Dave/Generated/FATFS/ff_Src/ff.c **** 		UINT di, ni;
2419:../Dave/Generated/FATFS/ff_Src/ff.c **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2420:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2421:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
2422:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_LFN < 255
2423:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;			/* Skip comparison if inaccessible object
2424:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2425:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched
2426:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2427:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((di % SZDIRE) == 0) di += 2;
2428:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2429:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2430:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2431:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2432:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return res;
2433:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2434:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2435:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* On the FAT/FAT32 volume */
2436:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2437:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4775              	 .loc 1 2437 0 is_stmt 1
 4776 0024 FF23     	 movs r3,#255
 4777 0026 3B75     	 strb r3,[r7,#20]
 4778 0028 3B7D     	 ldrb r3,[r7,#20]
 4779 002a 7B75     	 strb r3,[r7,#21]
 4780 002c 7B68     	 ldr r3,[r7,#4]
 4781 002e 4FF0FF32 	 mov r2,#-1
 4782 0032 1A63     	 str r2,[r3,#48]
 4783              	.L310:
2438:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2439:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2440:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 4784              	 .loc 1 2440 0
 4785 0034 7B68     	 ldr r3,[r7,#4]
 4786 0036 DB69     	 ldr r3,[r3,#28]
 4787 0038 3869     	 ldr r0,[r7,#16]
 4788 003a 1946     	 mov r1,r3
 4789 003c FFF7FEFF 	 bl move_window
 4790 0040 0346     	 mov r3,r0
 4791 0042 FB75     	 strb r3,[r7,#23]
2441:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
 4792              	 .loc 1 2441 0
 4793 0044 FB7D     	 ldrb r3,[r7,#23]
 4794 0046 002B     	 cmp r3,#0
 4795 0048 00D0     	 beq .L297
 4796 004a 91E0     	 b .L298
 4797              	.L297:
2442:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = dp->dir[DIR_Name];
 4798              	 .loc 1 2442 0
 4799 004c 7B68     	 ldr r3,[r7,#4]
 4800 004e 1B6A     	 ldr r3,[r3,#32]
 4801 0050 1B78     	 ldrb r3,[r3]
 4802 0052 BB75     	 strb r3,[r7,#22]
2443:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 4803              	 .loc 1 2443 0
 4804 0054 BB7D     	 ldrb r3,[r7,#22]
 4805 0056 002B     	 cmp r3,#0
 4806 0058 02D1     	 bne .L299
 4807              	 .loc 1 2443 0 is_stmt 0 discriminator 1
 4808 005a 0423     	 movs r3,#4
 4809 005c FB75     	 strb r3,[r7,#23]
 4810 005e 87E0     	 b .L298
 4811              	.L299:
2444:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2445:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 4812              	 .loc 1 2445 0 is_stmt 1
 4813 0060 7B68     	 ldr r3,[r7,#4]
 4814 0062 1B6A     	 ldr r3,[r3,#32]
 4815 0064 0B33     	 adds r3,r3,#11
 4816 0066 1B78     	 ldrb r3,[r3]
 4817 0068 03F03F03 	 and r3,r3,#63
 4818 006c FB73     	 strb r3,[r7,#15]
 4819 006e 7B68     	 ldr r3,[r7,#4]
 4820 0070 FA7B     	 ldrb r2,[r7,#15]
 4821 0072 9A71     	 strb r2,[r3,#6]
2446:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 4822              	 .loc 1 2446 0
 4823 0074 BB7D     	 ldrb r3,[r7,#22]
 4824 0076 E52B     	 cmp r3,#229
 4825 0078 07D0     	 beq .L300
 4826              	 .loc 1 2446 0 is_stmt 0 discriminator 1
 4827 007a FB7B     	 ldrb r3,[r7,#15]
 4828 007c 03F00803 	 and r3,r3,#8
 4829 0080 002B     	 cmp r3,#0
 4830 0082 09D0     	 beq .L301
 4831              	 .loc 1 2446 0 discriminator 2
 4832 0084 FB7B     	 ldrb r3,[r7,#15]
 4833 0086 0F2B     	 cmp r3,#15
 4834 0088 06D0     	 beq .L301
 4835              	.L300:
2447:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4836              	 .loc 1 2447 0 is_stmt 1
 4837 008a FF23     	 movs r3,#255
 4838 008c 7B75     	 strb r3,[r7,#21]
 4839 008e 7B68     	 ldr r3,[r7,#4]
 4840 0090 4FF0FF32 	 mov r2,#-1
 4841 0094 1A63     	 str r2,[r3,#48]
 4842 0096 61E0     	 b .L302
 4843              	.L301:
2448:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
2449:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
 4844              	 .loc 1 2449 0
 4845 0098 FB7B     	 ldrb r3,[r7,#15]
 4846 009a 0F2B     	 cmp r3,#15
 4847 009c 36D1     	 bne .L303
2450:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 4848              	 .loc 1 2450 0
 4849 009e 7B68     	 ldr r3,[r7,#4]
 4850 00a0 93F82F30 	 ldrb r3,[r3,#47]
 4851 00a4 03F04003 	 and r3,r3,#64
 4852 00a8 002B     	 cmp r3,#0
 4853 00aa 57D1     	 bne .L302
2451:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
 4854              	 .loc 1 2451 0
 4855 00ac BB7D     	 ldrb r3,[r7,#22]
 4856 00ae 03F04003 	 and r3,r3,#64
 4857 00b2 002B     	 cmp r3,#0
 4858 00b4 0DD0     	 beq .L305
2452:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
 4859              	 .loc 1 2452 0
 4860 00b6 7B68     	 ldr r3,[r7,#4]
 4861 00b8 1B6A     	 ldr r3,[r3,#32]
 4862 00ba 5B7B     	 ldrb r3,[r3,#13]
 4863 00bc 3B75     	 strb r3,[r7,#20]
2453:../Dave/Generated/FATFS/ff_Src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 4864              	 .loc 1 2453 0
 4865 00be BB7D     	 ldrb r3,[r7,#22]
 4866 00c0 23F04003 	 bic r3,r3,#64
 4867 00c4 BB75     	 strb r3,[r7,#22]
 4868 00c6 BB7D     	 ldrb r3,[r7,#22]
 4869 00c8 7B75     	 strb r3,[r7,#21]
2454:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 4870              	 .loc 1 2454 0
 4871 00ca 7B68     	 ldr r3,[r7,#4]
 4872 00cc 5A69     	 ldr r2,[r3,#20]
 4873 00ce 7B68     	 ldr r3,[r7,#4]
 4874 00d0 1A63     	 str r2,[r3,#48]
 4875              	.L305:
2455:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2456:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
2457:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
 4876              	 .loc 1 2457 0
 4877 00d2 BA7D     	 ldrb r2,[r7,#22]
 4878 00d4 7B7D     	 ldrb r3,[r7,#21]
 4879 00d6 9A42     	 cmp r2,r3
 4880 00d8 15D1     	 bne .L306
 4881              	 .loc 1 2457 0 is_stmt 0 discriminator 1
 4882 00da 7B68     	 ldr r3,[r7,#4]
 4883 00dc 1B6A     	 ldr r3,[r3,#32]
 4884 00de 0D33     	 adds r3,r3,#13
 4885 00e0 1B78     	 ldrb r3,[r3]
 4886 00e2 3A7D     	 ldrb r2,[r7,#20]
 4887 00e4 9A42     	 cmp r2,r3
 4888 00e6 0ED1     	 bne .L306
 4889              	 .loc 1 2457 0 discriminator 3
 4890 00e8 3B69     	 ldr r3,[r7,#16]
 4891 00ea DA68     	 ldr r2,[r3,#12]
 4892 00ec 7B68     	 ldr r3,[r7,#4]
 4893 00ee 1B6A     	 ldr r3,[r3,#32]
 4894 00f0 1046     	 mov r0,r2
 4895 00f2 1946     	 mov r1,r3
 4896 00f4 FFF7FEFF 	 bl cmp_lfn
 4897 00f8 0346     	 mov r3,r0
 4898 00fa 002B     	 cmp r3,#0
 4899 00fc 03D0     	 beq .L306
 4900              	 .loc 1 2457 0 discriminator 5
 4901 00fe 7B7D     	 ldrb r3,[r7,#21]
 4902 0100 013B     	 subs r3,r3,#1
 4903 0102 DBB2     	 uxtb r3,r3
 4904 0104 00E0     	 b .L307
 4905              	.L306:
 4906              	 .loc 1 2457 0 discriminator 6
 4907 0106 FF23     	 movs r3,#255
 4908              	.L307:
 4909              	 .loc 1 2457 0 discriminator 8
 4910 0108 7B75     	 strb r3,[r7,#21]
 4911 010a 27E0     	 b .L302
 4912              	.L303:
2458:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2459:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {					/* An SFN entry is found */
2460:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 4913              	 .loc 1 2460 0 is_stmt 1
 4914 010c 7B7D     	 ldrb r3,[r7,#21]
 4915 010e 002B     	 cmp r3,#0
 4916 0110 0AD1     	 bne .L308
 4917              	 .loc 1 2460 0 is_stmt 0 discriminator 1
 4918 0112 7B68     	 ldr r3,[r7,#4]
 4919 0114 1B6A     	 ldr r3,[r3,#32]
 4920 0116 1846     	 mov r0,r3
 4921 0118 FFF7FEFF 	 bl sum_sfn
 4922 011c 0346     	 mov r3,r0
 4923 011e 1A46     	 mov r2,r3
 4924 0120 3B7D     	 ldrb r3,[r7,#20]
 4925 0122 9342     	 cmp r3,r2
 4926 0124 00D1     	 bne .L308
 4927              	 .loc 1 2460 0
 4928 0126 23E0     	 b .L298
 4929              	.L308:
2461:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 4930              	 .loc 1 2461 0 is_stmt 1
 4931 0128 7B68     	 ldr r3,[r7,#4]
 4932 012a 93F82F30 	 ldrb r3,[r3,#47]
 4933 012e 03F00103 	 and r3,r3,#1
 4934 0132 002B     	 cmp r3,#0
 4935 0134 0CD1     	 bne .L309
 4936              	 .loc 1 2461 0 is_stmt 0 discriminator 1
 4937 0136 7B68     	 ldr r3,[r7,#4]
 4938 0138 1A6A     	 ldr r2,[r3,#32]
 4939 013a 7B68     	 ldr r3,[r7,#4]
 4940 013c 2433     	 adds r3,r3,#36
 4941 013e 1046     	 mov r0,r2
 4942 0140 1946     	 mov r1,r3
 4943 0142 0B22     	 movs r2,#11
 4944 0144 FFF7FEFF 	 bl mem_cmp
 4945 0148 0346     	 mov r3,r0
 4946 014a 002B     	 cmp r3,#0
 4947 014c 00D1     	 bne .L309
 4948              	 .loc 1 2461 0
 4949 014e 0FE0     	 b .L298
 4950              	.L309:
2462:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 4951              	 .loc 1 2462 0 is_stmt 1
 4952 0150 FF23     	 movs r3,#255
 4953 0152 7B75     	 strb r3,[r7,#21]
 4954 0154 7B68     	 ldr r3,[r7,#4]
 4955 0156 4FF0FF32 	 mov r2,#-1
 4956 015a 1A63     	 str r2,[r3,#48]
 4957              	.L302:
2463:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2464:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2465:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* Non LFN configuration */
2466:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
2467:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
2468:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2469:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);	/* Next entry */
 4958              	 .loc 1 2469 0
 4959 015c 7868     	 ldr r0,[r7,#4]
 4960 015e 0021     	 movs r1,#0
 4961 0160 FFF7FEFF 	 bl dir_next
 4962 0164 0346     	 mov r3,r0
 4963 0166 FB75     	 strb r3,[r7,#23]
2470:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (res == FR_OK);
 4964              	 .loc 1 2470 0
 4965 0168 FB7D     	 ldrb r3,[r7,#23]
 4966 016a 002B     	 cmp r3,#0
 4967 016c 3FF462AF 	 beq .L310
 4968              	.L298:
2471:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2472:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 4969              	 .loc 1 2472 0
 4970 0170 FB7D     	 ldrb r3,[r7,#23]
 4971              	.L296:
2473:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4972              	 .loc 1 2473 0
 4973 0172 1846     	 mov r0,r3
 4974 0174 1837     	 adds r7,r7,#24
 4975              	.LCFI205:
 4976              	 .cfi_def_cfa_offset 8
 4977 0176 BD46     	 mov sp,r7
 4978              	.LCFI206:
 4979              	 .cfi_def_cfa_register 13
 4980              	 
 4981 0178 80BD     	 pop {r7,pc}
 4982              	 .cfi_endproc
 4983              	.LFE37:
 4985 017a 00BF     	 .section .text.dir_register,"ax",%progbits
 4986              	 .align 2
 4987              	 .thumb
 4988              	 .thumb_func
 4990              	dir_register:
 4991              	.LFB38:
2474:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2475:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2476:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2477:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2478:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
2479:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2480:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Register an object to the directory                                   */
2481:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2482:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2483:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision
2484:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp						/* Target directory with object name to be created */
2485:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2486:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4992              	 .loc 1 2486 0
 4993              	 .cfi_startproc
 4994              	 
 4995              	 
 4996 0000 80B5     	 push {r7,lr}
 4997              	.LCFI207:
 4998              	 .cfi_def_cfa_offset 8
 4999              	 .cfi_offset 7,-8
 5000              	 .cfi_offset 14,-4
 5001 0002 8CB0     	 sub sp,sp,#48
 5002              	.LCFI208:
 5003              	 .cfi_def_cfa_offset 56
 5004 0004 00AF     	 add r7,sp,#0
 5005              	.LCFI209:
 5006              	 .cfi_def_cfa_register 7
 5007 0006 7860     	 str r0,[r7,#4]
2487:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2488:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 5008              	 .loc 1 2488 0
 5009 0008 7B68     	 ldr r3,[r7,#4]
 5010 000a 1B68     	 ldr r3,[r3]
 5011 000c FB61     	 str r3,[r7,#28]
2489:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2490:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n, nlen, nent;
2491:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE sn[12], sum;
2492:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2493:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2494:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 5012              	 .loc 1 2494 0
 5013 000e 7B68     	 ldr r3,[r7,#4]
 5014 0010 93F82F30 	 ldrb r3,[r3,#47]
 5015 0014 03F0A003 	 and r3,r3,#160
 5016 0018 002B     	 cmp r3,#0
 5017 001a 01D0     	 beq .L312
 5018              	 .loc 1 2494 0 is_stmt 0 discriminator 1
 5019 001c 0623     	 movs r3,#6
 5020 001e E2E0     	 b .L329
 5021              	.L312:
2495:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 5022              	 .loc 1 2495 0 is_stmt 1
 5023 0020 0023     	 movs r3,#0
 5024 0022 7B62     	 str r3,[r7,#36]
 5025 0024 02E0     	 b .L314
 5026              	.L315:
 5027              	 .loc 1 2495 0 is_stmt 0 discriminator 3
 5028 0026 7B6A     	 ldr r3,[r7,#36]
 5029 0028 0133     	 adds r3,r3,#1
 5030 002a 7B62     	 str r3,[r7,#36]
 5031              	.L314:
 5032              	 .loc 1 2495 0 discriminator 1
 5033 002c FB69     	 ldr r3,[r7,#28]
 5034 002e DA68     	 ldr r2,[r3,#12]
 5035 0030 7B6A     	 ldr r3,[r7,#36]
 5036 0032 5B00     	 lsls r3,r3,#1
 5037 0034 1344     	 add r3,r3,r2
 5038 0036 1B88     	 ldrh r3,[r3]
 5039 0038 002B     	 cmp r3,#0
 5040 003a F4D1     	 bne .L315
2496:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2497:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2498:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2499:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2500:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_alloc(dp, nent);		/* Allocate entries */
2501:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
2502:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
2503:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2504:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->obj.stat & 4) {			/* Has the directory been stretched? */
2505:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->obj.stat &= ~4;
2506:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
2507:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
2508:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if n
2509:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
2510:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dp->obj.sclust != 0) {		/* Is it a sub directory? */
2511:../Dave/Generated/FATFS/ff_Src/ff.c **** 				DIR dj;
2512:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2513:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
2514:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) return res;
2515:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size 
2516:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
2517:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2518:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
2519:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = store_xdir(&dj);				/* Store the object status */
2520:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) return res;
2521:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2522:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2523:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2524:../Dave/Generated/FATFS/ff_Src/ff.c **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2525:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_OK;
2526:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2527:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2528:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* On the FAT/FAT32 volume */
2529:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(sn, dp->fn, 12);
 5041              	 .loc 1 2529 0 is_stmt 1
 5042 003c 7B68     	 ldr r3,[r7,#4]
 5043 003e 2433     	 adds r3,r3,#36
 5044 0040 07F10C02 	 add r2,r7,#12
 5045 0044 1046     	 mov r0,r2
 5046 0046 1946     	 mov r1,r3
 5047 0048 0C22     	 movs r2,#12
 5048 004a FFF7FEFF 	 bl mem_cpy
2530:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 5049              	 .loc 1 2530 0
 5050 004e FB7D     	 ldrb r3,[r7,#23]
 5051 0050 03F00103 	 and r3,r3,#1
 5052 0054 002B     	 cmp r3,#0
 5053 0056 34D0     	 beq .L316
2531:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 5054              	 .loc 1 2531 0
 5055 0058 7B68     	 ldr r3,[r7,#4]
 5056 005a 4022     	 movs r2,#64
 5057 005c 83F82F20 	 strb r2,[r3,#47]
2532:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 1; n < 100; n++) {
 5058              	 .loc 1 2532 0
 5059 0060 0123     	 movs r3,#1
 5060 0062 BB62     	 str r3,[r7,#40]
 5061 0064 1AE0     	 b .L317
 5062              	.L320:
2533:../Dave/Generated/FATFS/ff_Src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 5063              	 .loc 1 2533 0
 5064 0066 7B68     	 ldr r3,[r7,#4]
 5065 0068 03F12401 	 add r1,r3,#36
 5066 006c FB69     	 ldr r3,[r7,#28]
 5067 006e DB68     	 ldr r3,[r3,#12]
 5068 0070 07F10C02 	 add r2,r7,#12
 5069 0074 0846     	 mov r0,r1
 5070 0076 1146     	 mov r1,r2
 5071 0078 1A46     	 mov r2,r3
 5072 007a BB6A     	 ldr r3,[r7,#40]
 5073 007c FFF7FEFF 	 bl gen_numname
2534:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 5074              	 .loc 1 2534 0
 5075 0080 7868     	 ldr r0,[r7,#4]
 5076 0082 FFF7FEFF 	 bl dir_find
 5077 0086 0346     	 mov r3,r0
 5078 0088 87F82F30 	 strb r3,[r7,#47]
2535:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 5079              	 .loc 1 2535 0
 5080 008c 97F82F30 	 ldrb r3,[r7,#47]
 5081 0090 002B     	 cmp r3,#0
 5082 0092 00D0     	 beq .L318
 5083 0094 05E0     	 b .L319
 5084              	.L318:
2532:../Dave/Generated/FATFS/ff_Src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 5085              	 .loc 1 2532 0 discriminator 2
 5086 0096 BB6A     	 ldr r3,[r7,#40]
 5087 0098 0133     	 adds r3,r3,#1
 5088 009a BB62     	 str r3,[r7,#40]
 5089              	.L317:
2532:../Dave/Generated/FATFS/ff_Src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 5090              	 .loc 1 2532 0 is_stmt 0 discriminator 1
 5091 009c BB6A     	 ldr r3,[r7,#40]
 5092 009e 632B     	 cmp r3,#99
 5093 00a0 E1D9     	 bls .L320
 5094              	.L319:
2536:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2537:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 5095              	 .loc 1 2537 0 is_stmt 1
 5096 00a2 BB6A     	 ldr r3,[r7,#40]
 5097 00a4 642B     	 cmp r3,#100
 5098 00a6 01D1     	 bne .L321
 5099              	 .loc 1 2537 0 is_stmt 0 discriminator 1
 5100 00a8 0723     	 movs r3,#7
 5101 00aa 9CE0     	 b .L329
 5102              	.L321:
2538:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 5103              	 .loc 1 2538 0 is_stmt 1
 5104 00ac 97F82F30 	 ldrb r3,[r7,#47]
 5105 00b0 042B     	 cmp r3,#4
 5106 00b2 02D0     	 beq .L322
 5107              	 .loc 1 2538 0 is_stmt 0 discriminator 1
 5108 00b4 97F82F30 	 ldrb r3,[r7,#47]
 5109 00b8 95E0     	 b .L329
 5110              	.L322:
2539:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[NSFLAG] = sn[NSFLAG];
 5111              	 .loc 1 2539 0 is_stmt 1
 5112 00ba FA7D     	 ldrb r2,[r7,#23]
 5113 00bc 7B68     	 ldr r3,[r7,#4]
 5114 00be 83F82F20 	 strb r2,[r3,#47]
 5115              	.L316:
2540:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2541:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2542:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create an SFN with/without LFNs. */
2543:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 5116              	 .loc 1 2543 0
 5117 00c2 FB7D     	 ldrb r3,[r7,#23]
 5118 00c4 03F00203 	 and r3,r3,#2
 5119 00c8 002B     	 cmp r3,#0
 5120 00ca 07D0     	 beq .L323
 5121              	 .loc 1 2543 0 is_stmt 0 discriminator 1
 5122 00cc 7B6A     	 ldr r3,[r7,#36]
 5123 00ce 0C33     	 adds r3,r3,#12
 5124 00d0 474A     	 ldr r2,.L330
 5125 00d2 A2FB0323 	 umull r2,r3,r2,r3
 5126 00d6 9B08     	 lsrs r3,r3,#2
 5127 00d8 0133     	 adds r3,r3,#1
 5128 00da 00E0     	 b .L324
 5129              	.L323:
 5130              	 .loc 1 2543 0 discriminator 2
 5131 00dc 0123     	 movs r3,#1
 5132              	.L324:
 5133              	 .loc 1 2543 0 discriminator 4
 5134 00de 3B62     	 str r3,[r7,#32]
2544:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
 5135              	 .loc 1 2544 0 is_stmt 1 discriminator 4
 5136 00e0 7868     	 ldr r0,[r7,#4]
 5137 00e2 396A     	 ldr r1,[r7,#32]
 5138 00e4 FFF7FEFF 	 bl dir_alloc
 5139 00e8 0346     	 mov r3,r0
 5140 00ea 87F82F30 	 strb r3,[r7,#47]
2545:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 5141              	 .loc 1 2545 0 discriminator 4
 5142 00ee 97F82F30 	 ldrb r3,[r7,#47]
 5143 00f2 002B     	 cmp r3,#0
 5144 00f4 47D1     	 bne .L325
 5145              	 .loc 1 2545 0 is_stmt 0 discriminator 1
 5146 00f6 3B6A     	 ldr r3,[r7,#32]
 5147 00f8 013B     	 subs r3,r3,#1
 5148 00fa 3B62     	 str r3,[r7,#32]
 5149 00fc 3B6A     	 ldr r3,[r7,#32]
 5150 00fe 002B     	 cmp r3,#0
 5151 0100 41D0     	 beq .L325
2546:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 5152              	 .loc 1 2546 0 is_stmt 1
 5153 0102 7B68     	 ldr r3,[r7,#4]
 5154 0104 5A69     	 ldr r2,[r3,#20]
 5155 0106 3B6A     	 ldr r3,[r7,#32]
 5156 0108 5B01     	 lsls r3,r3,#5
 5157 010a D31A     	 subs r3,r2,r3
 5158 010c 7868     	 ldr r0,[r7,#4]
 5159 010e 1946     	 mov r1,r3
 5160 0110 FFF7FEFF 	 bl dir_sdi
 5161 0114 0346     	 mov r3,r0
 5162 0116 87F82F30 	 strb r3,[r7,#47]
2547:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 5163              	 .loc 1 2547 0
 5164 011a 97F82F30 	 ldrb r3,[r7,#47]
 5165 011e 002B     	 cmp r3,#0
 5166 0120 31D1     	 bne .L325
2548:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 5167              	 .loc 1 2548 0
 5168 0122 7B68     	 ldr r3,[r7,#4]
 5169 0124 2433     	 adds r3,r3,#36
 5170 0126 1846     	 mov r0,r3
 5171 0128 FFF7FEFF 	 bl sum_sfn
 5172 012c 0346     	 mov r3,r0
 5173 012e FB76     	 strb r3,[r7,#27]
 5174              	.L327:
2549:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {					/* Store LFN entries in bottom first */
2550:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = move_window(fs, dp->sect);
 5175              	 .loc 1 2550 0
 5176 0130 7B68     	 ldr r3,[r7,#4]
 5177 0132 DB69     	 ldr r3,[r3,#28]
 5178 0134 F869     	 ldr r0,[r7,#28]
 5179 0136 1946     	 mov r1,r3
 5180 0138 FFF7FEFF 	 bl move_window
 5181 013c 0346     	 mov r3,r0
 5182 013e 87F82F30 	 strb r3,[r7,#47]
2551:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 5183              	 .loc 1 2551 0
 5184 0142 97F82F30 	 ldrb r3,[r7,#47]
 5185 0146 002B     	 cmp r3,#0
 5186 0148 00D0     	 beq .L326
 5187 014a 1CE0     	 b .L325
 5188              	.L326:
2552:../Dave/Generated/FATFS/ff_Src/ff.c **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 5189              	 .loc 1 2552 0
 5190 014c FB69     	 ldr r3,[r7,#28]
 5191 014e D868     	 ldr r0,[r3,#12]
 5192 0150 7B68     	 ldr r3,[r7,#4]
 5193 0152 196A     	 ldr r1,[r3,#32]
 5194 0154 3B6A     	 ldr r3,[r7,#32]
 5195 0156 DAB2     	 uxtb r2,r3
 5196 0158 FB7E     	 ldrb r3,[r7,#27]
 5197 015a FFF7FEFF 	 bl put_lfn
2553:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
 5198              	 .loc 1 2553 0
 5199 015e FB69     	 ldr r3,[r7,#28]
 5200 0160 0122     	 movs r2,#1
 5201 0162 DA70     	 strb r2,[r3,#3]
2554:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
 5202              	 .loc 1 2554 0
 5203 0164 7868     	 ldr r0,[r7,#4]
 5204 0166 0021     	 movs r1,#0
 5205 0168 FFF7FEFF 	 bl dir_next
 5206 016c 0346     	 mov r3,r0
 5207 016e 87F82F30 	 strb r3,[r7,#47]
2555:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (res == FR_OK && --nent);
 5208              	 .loc 1 2555 0
 5209 0172 97F82F30 	 ldrb r3,[r7,#47]
 5210 0176 002B     	 cmp r3,#0
 5211 0178 05D1     	 bne .L325
 5212              	 .loc 1 2555 0 is_stmt 0 discriminator 1
 5213 017a 3B6A     	 ldr r3,[r7,#32]
 5214 017c 013B     	 subs r3,r3,#1
 5215 017e 3B62     	 str r3,[r7,#32]
 5216 0180 3B6A     	 ldr r3,[r7,#32]
 5217 0182 002B     	 cmp r3,#0
 5218 0184 D4D1     	 bne .L327
 5219              	.L325:
2556:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2557:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2558:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2559:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* Non LFN configuration */
2560:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
2561:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2562:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2563:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2564:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Set SFN entry */
2565:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 5220              	 .loc 1 2565 0 is_stmt 1
 5221 0186 97F82F30 	 ldrb r3,[r7,#47]
 5222 018a 002B     	 cmp r3,#0
 5223 018c 29D1     	 bne .L328
2566:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 5224              	 .loc 1 2566 0
 5225 018e 7B68     	 ldr r3,[r7,#4]
 5226 0190 DB69     	 ldr r3,[r3,#28]
 5227 0192 F869     	 ldr r0,[r7,#28]
 5228 0194 1946     	 mov r1,r3
 5229 0196 FFF7FEFF 	 bl move_window
 5230 019a 0346     	 mov r3,r0
 5231 019c 87F82F30 	 strb r3,[r7,#47]
2567:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 5232              	 .loc 1 2567 0
 5233 01a0 97F82F30 	 ldrb r3,[r7,#47]
 5234 01a4 002B     	 cmp r3,#0
 5235 01a6 1CD1     	 bne .L328
2568:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 5236              	 .loc 1 2568 0
 5237 01a8 7B68     	 ldr r3,[r7,#4]
 5238 01aa 1B6A     	 ldr r3,[r3,#32]
 5239 01ac 1846     	 mov r0,r3
 5240 01ae 0021     	 movs r1,#0
 5241 01b0 2022     	 movs r2,#32
 5242 01b2 FFF7FEFF 	 bl mem_set
2569:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 5243              	 .loc 1 2569 0
 5244 01b6 7B68     	 ldr r3,[r7,#4]
 5245 01b8 1A6A     	 ldr r2,[r3,#32]
 5246 01ba 7B68     	 ldr r3,[r7,#4]
 5247 01bc 2433     	 adds r3,r3,#36
 5248 01be 1046     	 mov r0,r2
 5249 01c0 1946     	 mov r1,r3
 5250 01c2 0B22     	 movs r2,#11
 5251 01c4 FFF7FEFF 	 bl mem_cpy
2570:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2571:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 5252              	 .loc 1 2571 0
 5253 01c8 7B68     	 ldr r3,[r7,#4]
 5254 01ca 1B6A     	 ldr r3,[r3,#32]
 5255 01cc 0C33     	 adds r3,r3,#12
 5256 01ce 7A68     	 ldr r2,[r7,#4]
 5257 01d0 92F82F20 	 ldrb r2,[r2,#47]
 5258 01d4 02F01802 	 and r2,r2,#24
 5259 01d8 D2B2     	 uxtb r2,r2
 5260 01da 1A70     	 strb r2,[r3]
2572:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2573:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 5261              	 .loc 1 2573 0
 5262 01dc FB69     	 ldr r3,[r7,#28]
 5263 01de 0122     	 movs r2,#1
 5264 01e0 DA70     	 strb r2,[r3,#3]
 5265              	.L328:
2574:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2575:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2576:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2577:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 5266              	 .loc 1 2577 0
 5267 01e2 97F82F30 	 ldrb r3,[r7,#47]
 5268              	.L329:
2578:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 5269              	 .loc 1 2578 0 discriminator 1
 5270 01e6 1846     	 mov r0,r3
 5271 01e8 3037     	 adds r7,r7,#48
 5272              	.LCFI210:
 5273              	 .cfi_def_cfa_offset 8
 5274 01ea BD46     	 mov sp,r7
 5275              	.LCFI211:
 5276              	 .cfi_def_cfa_register 13
 5277              	 
 5278 01ec 80BD     	 pop {r7,pc}
 5279              	.L331:
 5280 01ee 00BF     	 .align 2
 5281              	.L330:
 5282 01f0 4FECC44E 	 .word 1321528399
 5283              	 .cfi_endproc
 5284              	.LFE38:
 5286              	 .section .text.dir_remove,"ax",%progbits
 5287              	 .align 2
 5288              	 .thumb
 5289              	 .thumb_func
 5291              	dir_remove:
 5292              	.LFB39:
2579:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2580:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
2581:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2582:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2583:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2584:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_FS_MINIMIZE == 0
2585:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2586:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Remove an object from the directory                                   */
2587:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2588:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2589:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2590:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp					/* Directory object pointing the entry to be removed */
2591:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2592:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 5293              	 .loc 1 2592 0
 5294              	 .cfi_startproc
 5295              	 
 5296              	 
 5297 0000 80B5     	 push {r7,lr}
 5298              	.LCFI212:
 5299              	 .cfi_def_cfa_offset 8
 5300              	 .cfi_offset 7,-8
 5301              	 .cfi_offset 14,-4
 5302 0002 86B0     	 sub sp,sp,#24
 5303              	.LCFI213:
 5304              	 .cfi_def_cfa_offset 32
 5305 0004 00AF     	 add r7,sp,#0
 5306              	.LCFI214:
 5307              	 .cfi_def_cfa_register 7
 5308 0006 7860     	 str r0,[r7,#4]
2593:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2594:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 5309              	 .loc 1 2594 0
 5310 0008 7B68     	 ldr r3,[r7,#4]
 5311 000a 1B68     	 ldr r3,[r3]
 5312 000c 3B61     	 str r3,[r7,#16]
2595:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2596:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD last = dp->dptr;
 5313              	 .loc 1 2596 0
 5314 000e 7B68     	 ldr r3,[r7,#4]
 5315 0010 5B69     	 ldr r3,[r3,#20]
 5316 0012 FB60     	 str r3,[r7,#12]
2597:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2598:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
 5317              	 .loc 1 2598 0
 5318 0014 7B68     	 ldr r3,[r7,#4]
 5319 0016 1B6B     	 ldr r3,[r3,#48]
 5320 0018 B3F1FF3F 	 cmp r3,#-1
 5321 001c 07D0     	 beq .L333
 5322              	 .loc 1 2598 0 is_stmt 0 discriminator 1
 5323 001e 7B68     	 ldr r3,[r7,#4]
 5324 0020 1B6B     	 ldr r3,[r3,#48]
 5325 0022 7868     	 ldr r0,[r7,#4]
 5326 0024 1946     	 mov r1,r3
 5327 0026 FFF7FEFF 	 bl dir_sdi
 5328 002a 0346     	 mov r3,r0
 5329 002c 00E0     	 b .L334
 5330              	.L333:
 5331              	 .loc 1 2598 0 discriminator 2
 5332 002e 0023     	 movs r3,#0
 5333              	.L334:
 5334              	 .loc 1 2598 0 discriminator 4
 5335 0030 FB75     	 strb r3,[r7,#23]
2599:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 5336              	 .loc 1 2599 0 is_stmt 1 discriminator 4
 5337 0032 FB7D     	 ldrb r3,[r7,#23]
 5338 0034 002B     	 cmp r3,#0
 5339 0036 26D1     	 bne .L335
 5340              	.L339:
2600:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
2601:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, dp->sect);
 5341              	 .loc 1 2601 0
 5342 0038 7B68     	 ldr r3,[r7,#4]
 5343 003a DB69     	 ldr r3,[r3,#28]
 5344 003c 3869     	 ldr r0,[r7,#16]
 5345 003e 1946     	 mov r1,r3
 5346 0040 FFF7FEFF 	 bl move_window
 5347 0044 0346     	 mov r3,r0
 5348 0046 FB75     	 strb r3,[r7,#23]
2602:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 5349              	 .loc 1 2602 0
 5350 0048 FB7D     	 ldrb r3,[r7,#23]
 5351 004a 002B     	 cmp r3,#0
 5352 004c 00D0     	 beq .L336
 5353 004e 15E0     	 b .L337
 5354              	.L336:
2603:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2604:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
2605:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {									/* On the FAT/FAT32 volume */
2606:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
 5355              	 .loc 1 2606 0
 5356 0050 7B68     	 ldr r3,[r7,#4]
 5357 0052 1B6A     	 ldr r3,[r3,#32]
 5358 0054 E522     	 movs r2,#229
 5359 0056 1A70     	 strb r2,[r3]
2607:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2608:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 5360              	 .loc 1 2608 0
 5361 0058 3B69     	 ldr r3,[r7,#16]
 5362 005a 0122     	 movs r2,#1
 5363 005c DA70     	 strb r2,[r3,#3]
2609:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
 5364              	 .loc 1 2609 0
 5365 005e 7B68     	 ldr r3,[r7,#4]
 5366 0060 5A69     	 ldr r2,[r3,#20]
 5367 0062 FB68     	 ldr r3,[r7,#12]
 5368 0064 9A42     	 cmp r2,r3
 5369 0066 00D3     	 bcc .L338
 5370 0068 08E0     	 b .L337
 5371              	.L338:
2610:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_next(dp, 0);	/* Next entry */
 5372              	 .loc 1 2610 0
 5373 006a 7868     	 ldr r0,[r7,#4]
 5374 006c 0021     	 movs r1,#0
 5375 006e FFF7FEFF 	 bl dir_next
 5376 0072 0346     	 mov r3,r0
 5377 0074 FB75     	 strb r3,[r7,#23]
2611:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (res == FR_OK);
 5378              	 .loc 1 2611 0
 5379 0076 FB7D     	 ldrb r3,[r7,#23]
 5380 0078 002B     	 cmp r3,#0
 5381 007a DDD0     	 beq .L339
 5382              	.L337:
2612:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
 5383              	 .loc 1 2612 0
 5384 007c FB7D     	 ldrb r3,[r7,#23]
 5385 007e 042B     	 cmp r3,#4
 5386 0080 01D1     	 bne .L335
 5387              	 .loc 1 2612 0 is_stmt 0 discriminator 1
 5388 0082 0223     	 movs r3,#2
 5389 0084 FB75     	 strb r3,[r7,#23]
 5390              	.L335:
2613:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2614:../Dave/Generated/FATFS/ff_Src/ff.c **** #else			/* Non LFN configuration */
2615:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2616:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = move_window(fs, dp->sect);
2617:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
2618:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
2619:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->wflag = 1;
2620:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2621:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2622:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2623:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 5391              	 .loc 1 2623 0 is_stmt 1
 5392 0086 FB7D     	 ldrb r3,[r7,#23]
2624:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 5393              	 .loc 1 2624 0
 5394 0088 1846     	 mov r0,r3
 5395 008a 1837     	 adds r7,r7,#24
 5396              	.LCFI215:
 5397              	 .cfi_def_cfa_offset 8
 5398 008c BD46     	 mov sp,r7
 5399              	.LCFI216:
 5400              	 .cfi_def_cfa_register 13
 5401              	 
 5402 008e 80BD     	 pop {r7,pc}
 5403              	 .cfi_endproc
 5404              	.LFE39:
 5406              	 .section .text.get_fileinfo,"ax",%progbits
 5407              	 .align 2
 5408              	 .thumb
 5409              	 .thumb_func
 5411              	get_fileinfo:
 5412              	.LFB40:
2625:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2626:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY && FF_FS_MINIMIZE == 0 */
2627:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2628:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2629:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2630:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
2631:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2632:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get file information from directory entry                             */
2633:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2634:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2635:../Dave/Generated/FATFS/ff_Src/ff.c **** static void get_fileinfo (
2636:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2637:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Pointer to the file information to be filled */
2638:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2639:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 5413              	 .loc 1 2639 0
 5414              	 .cfi_startproc
 5415              	 
 5416              	 
 5417 0000 80B5     	 push {r7,lr}
 5418              	.LCFI217:
 5419              	 .cfi_def_cfa_offset 8
 5420              	 .cfi_offset 7,-8
 5421              	 .cfi_offset 14,-4
 5422 0002 86B0     	 sub sp,sp,#24
 5423              	.LCFI218:
 5424              	 .cfi_def_cfa_offset 32
 5425 0004 00AF     	 add r7,sp,#0
 5426              	.LCFI219:
 5427              	 .cfi_def_cfa_register 7
 5428 0006 7860     	 str r0,[r7,#4]
 5429 0008 3960     	 str r1,[r7]
2640:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT si, di;
2641:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2642:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, hs;
2643:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 5430              	 .loc 1 2643 0
 5431 000a 7B68     	 ldr r3,[r7,#4]
 5432 000c 1B68     	 ldr r3,[r3]
 5433 000e BB60     	 str r3,[r7,#8]
2644:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
2645:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c;
2646:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2647:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2648:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2649:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fname[0] = 0;			/* Invaidate file info */
 5434              	 .loc 1 2649 0
 5435 0010 3B68     	 ldr r3,[r7]
 5436 0012 0022     	 movs r2,#0
 5437 0014 9A75     	 strb r2,[r3,#22]
2650:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 5438              	 .loc 1 2650 0
 5439 0016 7B68     	 ldr r3,[r7,#4]
 5440 0018 DB69     	 ldr r3,[r3,#28]
 5441 001a 002B     	 cmp r3,#0
 5442 001c 00D1     	 bne .L342
 5443 001e 01E1     	 b .L341
 5444              	.L342:
2651:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2652:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2653:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2654:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2655:../Dave/Generated/FATFS/ff_Src/ff.c **** 		get_xfileinfo(fs->dirbuf, fno);
2656:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return;
2657:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
2658:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2659:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* On the FAT/FAT32 volume */
2660:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 5445              	 .loc 1 2660 0
 5446 0020 7B68     	 ldr r3,[r7,#4]
 5447 0022 1B6B     	 ldr r3,[r3,#48]
 5448 0024 B3F1FF3F 	 cmp r3,#-1
 5449 0028 50D0     	 beq .L344
2661:../Dave/Generated/FATFS/ff_Src/ff.c **** 			si = di = hs = 0;
 5450              	 .loc 1 2661 0
 5451 002a 0023     	 movs r3,#0
 5452 002c BB81     	 strh r3,[r7,#12]
 5453 002e 0023     	 movs r3,#0
 5454 0030 3B61     	 str r3,[r7,#16]
 5455 0032 3B69     	 ldr r3,[r7,#16]
 5456 0034 7B61     	 str r3,[r7,#20]
2662:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (fs->lfnbuf[si] != 0) {
 5457              	 .loc 1 2662 0
 5458 0036 36E0     	 b .L345
 5459              	.L349:
2663:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 5460              	 .loc 1 2663 0
 5461 0038 BB68     	 ldr r3,[r7,#8]
 5462 003a DA68     	 ldr r2,[r3,#12]
 5463 003c 7B69     	 ldr r3,[r7,#20]
 5464 003e 591C     	 adds r1,r3,#1
 5465 0040 7961     	 str r1,[r7,#20]
 5466 0042 5B00     	 lsls r3,r3,#1
 5467 0044 1344     	 add r3,r3,r2
 5468 0046 1B88     	 ldrh r3,[r3]
 5469 0048 FB81     	 strh r3,[r7,#14]
2664:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 5470              	 .loc 1 2664 0
 5471 004a BB89     	 ldrh r3,[r7,#12]
 5472 004c 002B     	 cmp r3,#0
 5473 004e 0AD1     	 bne .L346
 5474              	 .loc 1 2664 0 is_stmt 0 discriminator 1
 5475 0050 FB89     	 ldrh r3,[r7,#14]
 5476 0052 B3F5584F 	 cmp r3,#55296
 5477 0056 06D3     	 bcc .L346
 5478              	 .loc 1 2664 0 discriminator 2
 5479 0058 FB89     	 ldrh r3,[r7,#14]
 5480 005a B3F5604F 	 cmp r3,#57344
 5481 005e 02D2     	 bcs .L346
2665:../Dave/Generated/FATFS/ff_Src/ff.c **** 					hs = wc; continue;		/* Get low surrogate */
 5482              	 .loc 1 2665 0 is_stmt 1
 5483 0060 FB89     	 ldrh r3,[r7,#14]
 5484 0062 BB81     	 strh r3,[r7,#12]
 5485 0064 1FE0     	 b .L345
 5486              	.L346:
2666:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2667:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or 
 5487              	 .loc 1 2667 0
 5488 0066 BB89     	 ldrh r3,[r7,#12]
 5489 0068 1A04     	 lsls r2,r3,#16
 5490 006a FB89     	 ldrh r3,[r7,#14]
 5491 006c 42EA0301 	 orr r1,r2,r3
 5492 0070 3B69     	 ldr r3,[r7,#16]
 5493 0072 1033     	 adds r3,r3,#16
 5494 0074 3A68     	 ldr r2,[r7]
 5495 0076 1344     	 add r3,r3,r2
 5496 0078 9A1D     	 adds r2,r3,#6
 5497 007a 3B69     	 ldr r3,[r7,#16]
 5498 007c C3F1FF03 	 rsb r3,r3,#255
 5499 0080 0846     	 mov r0,r1
 5500 0082 1146     	 mov r1,r2
 5501 0084 1A46     	 mov r2,r3
 5502 0086 FFF7FEFF 	 bl put_utf
 5503 008a 0346     	 mov r3,r0
 5504 008c FB81     	 strh r3,[r7,#14]
2668:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
 5505              	 .loc 1 2668 0
 5506 008e FB89     	 ldrh r3,[r7,#14]
 5507 0090 002B     	 cmp r3,#0
 5508 0092 02D1     	 bne .L347
 5509              	 .loc 1 2668 0 is_stmt 0 discriminator 1
 5510 0094 0023     	 movs r3,#0
 5511 0096 3B61     	 str r3,[r7,#16]
 5512 0098 0DE0     	 b .L348
 5513              	.L347:
2669:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di += wc;
 5514              	 .loc 1 2669 0 is_stmt 1
 5515 009a FB89     	 ldrh r3,[r7,#14]
 5516 009c 3A69     	 ldr r2,[r7,#16]
 5517 009e 1344     	 add r3,r3,r2
 5518 00a0 3B61     	 str r3,[r7,#16]
2670:../Dave/Generated/FATFS/ff_Src/ff.c **** 				hs = 0;
 5519              	 .loc 1 2670 0
 5520 00a2 0023     	 movs r3,#0
 5521 00a4 BB81     	 strh r3,[r7,#12]
 5522              	.L345:
2662:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 5523              	 .loc 1 2662 0
 5524 00a6 BB68     	 ldr r3,[r7,#8]
 5525 00a8 DA68     	 ldr r2,[r3,#12]
 5526 00aa 7B69     	 ldr r3,[r7,#20]
 5527 00ac 5B00     	 lsls r3,r3,#1
 5528 00ae 1344     	 add r3,r3,r2
 5529 00b0 1B88     	 ldrh r3,[r3]
 5530 00b2 002B     	 cmp r3,#0
 5531 00b4 C0D1     	 bne .L349
 5532              	.L348:
2671:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2672:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 5533              	 .loc 1 2672 0
 5534 00b6 BB89     	 ldrh r3,[r7,#12]
 5535 00b8 002B     	 cmp r3,#0
 5536 00ba 01D0     	 beq .L350
 5537              	 .loc 1 2672 0 is_stmt 0 discriminator 1
 5538 00bc 0023     	 movs r3,#0
 5539 00be 3B61     	 str r3,[r7,#16]
 5540              	.L350:
2673:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 5541              	 .loc 1 2673 0 is_stmt 1
 5542 00c0 3A68     	 ldr r2,[r7]
 5543 00c2 3B69     	 ldr r3,[r7,#16]
 5544 00c4 1344     	 add r3,r3,r2
 5545 00c6 1033     	 adds r3,r3,#16
 5546 00c8 0022     	 movs r2,#0
 5547 00ca 9A71     	 strb r2,[r3,#6]
 5548              	.L344:
2674:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2675:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2676:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2677:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = di = 0;
 5549              	 .loc 1 2677 0
 5550 00cc 0023     	 movs r3,#0
 5551 00ce 3B61     	 str r3,[r7,#16]
 5552 00d0 3B69     	 ldr r3,[r7,#16]
 5553 00d2 7B61     	 str r3,[r7,#20]
2678:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (si < 11) {		/* Get SFN from SFN entry */
 5554              	 .loc 1 2678 0
 5555 00d4 26E0     	 b .L351
 5556              	.L355:
2679:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = dp->dir[si++];			/* Get a char */
 5557              	 .loc 1 2679 0
 5558 00d6 7B68     	 ldr r3,[r7,#4]
 5559 00d8 1A6A     	 ldr r2,[r3,#32]
 5560 00da 7B69     	 ldr r3,[r7,#20]
 5561 00dc 591C     	 adds r1,r3,#1
 5562 00de 7961     	 str r1,[r7,#20]
 5563 00e0 1344     	 add r3,r3,r2
 5564 00e2 1B78     	 ldrb r3,[r3]
 5565 00e4 FB81     	 strh r3,[r7,#14]
2680:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == ' ') continue;	/* Skip padding spaces */
 5566              	 .loc 1 2680 0
 5567 00e6 FB89     	 ldrh r3,[r7,#14]
 5568 00e8 202B     	 cmp r3,#32
 5569 00ea 00D1     	 bne .L352
 5570              	 .loc 1 2680 0 is_stmt 0 discriminator 1
 5571 00ec 1AE0     	 b .L351
 5572              	.L352:
2681:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 5573              	 .loc 1 2681 0 is_stmt 1
 5574 00ee FB89     	 ldrh r3,[r7,#14]
 5575 00f0 052B     	 cmp r3,#5
 5576 00f2 01D1     	 bne .L353
 5577              	 .loc 1 2681 0 is_stmt 0 discriminator 1
 5578 00f4 E523     	 movs r3,#229
 5579 00f6 FB81     	 strh r3,[r7,#14]
 5580              	.L353:
2682:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 5581              	 .loc 1 2682 0 is_stmt 1
 5582 00f8 7B69     	 ldr r3,[r7,#20]
 5583 00fa 092B     	 cmp r3,#9
 5584 00fc 09D1     	 bne .L354
 5585              	 .loc 1 2682 0 is_stmt 0 discriminator 1
 5586 00fe 3B69     	 ldr r3,[r7,#16]
 5587 0100 0B2B     	 cmp r3,#11
 5588 0102 06D8     	 bhi .L354
 5589              	 .loc 1 2682 0 discriminator 2
 5590 0104 3B69     	 ldr r3,[r7,#16]
 5591 0106 5A1C     	 adds r2,r3,#1
 5592 0108 3A61     	 str r2,[r7,#16]
 5593 010a 3A68     	 ldr r2,[r7]
 5594 010c 1344     	 add r3,r3,r2
 5595 010e 2E22     	 movs r2,#46
 5596 0110 5A72     	 strb r2,[r3,#9]
 5597              	.L354:
2683:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
2684:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st((BYTE)wc) && si != 8 && si != 11 && dbc_2nd(dp->dir[si])) {	/* Make a DBC if needed *
2685:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = wc << 8 | dp->dir[si++];
2686:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2687:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = ff_oem2uni(wc, CODEPAGE);		/* ANSI/OEM -> Unicode */
2688:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
2689:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
2690:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
2691:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di += wc;
2692:../Dave/Generated/FATFS/ff_Src/ff.c **** #else					/* ANSI/OEM output */
2693:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 5598              	 .loc 1 2693 0 is_stmt 1
 5599 0112 3B69     	 ldr r3,[r7,#16]
 5600 0114 5A1C     	 adds r2,r3,#1
 5601 0116 3A61     	 str r2,[r7,#16]
 5602 0118 FA89     	 ldrh r2,[r7,#14]
 5603 011a D1B2     	 uxtb r1,r2
 5604 011c 3A68     	 ldr r2,[r7]
 5605 011e 1344     	 add r3,r3,r2
 5606 0120 0A46     	 mov r2,r1
 5607 0122 5A72     	 strb r2,[r3,#9]
 5608              	.L351:
2678:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = dp->dir[si++];			/* Get a char */
 5609              	 .loc 1 2678 0
 5610 0124 7B69     	 ldr r3,[r7,#20]
 5611 0126 0A2B     	 cmp r3,#10
 5612 0128 D5D9     	 bls .L355
2694:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2695:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2696:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 5613              	 .loc 1 2696 0
 5614 012a 3A68     	 ldr r2,[r7]
 5615 012c 3B69     	 ldr r3,[r7,#16]
 5616 012e 1344     	 add r3,r3,r2
 5617 0130 0833     	 adds r3,r3,#8
 5618 0132 0022     	 movs r2,#0
 5619 0134 5A70     	 strb r2,[r3,#1]
2697:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2698:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 5620              	 .loc 1 2698 0
 5621 0136 3B68     	 ldr r3,[r7]
 5622 0138 9B7D     	 ldrb r3,[r3,#22]
 5623 013a 002B     	 cmp r3,#0
 5624 013c 50D1     	 bne .L356
2699:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 5625              	 .loc 1 2699 0
 5626 013e 3B69     	 ldr r3,[r7,#16]
 5627 0140 002B     	 cmp r3,#0
 5628 0142 07D1     	 bne .L357
2700:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fno->fname[di++] = '?';
 5629              	 .loc 1 2700 0
 5630 0144 3B69     	 ldr r3,[r7,#16]
 5631 0146 5A1C     	 adds r2,r3,#1
 5632 0148 3A61     	 str r2,[r7,#16]
 5633 014a 3A68     	 ldr r2,[r7]
 5634 014c 1344     	 add r3,r3,r2
 5635 014e 3F22     	 movs r2,#63
 5636 0150 9A75     	 strb r2,[r3,#22]
 5637 0152 36E0     	 b .L358
 5638              	.L357:
2701:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
2702:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case informa
 5639              	 .loc 1 2702 0
 5640 0154 0023     	 movs r3,#0
 5641 0156 3B61     	 str r3,[r7,#16]
 5642 0158 3B69     	 ldr r3,[r7,#16]
 5643 015a 7B61     	 str r3,[r7,#20]
 5644 015c 2AE0     	 b .L359
 5645              	.L363:
2703:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = (WCHAR)fno->altname[si];
 5646              	 .loc 1 2703 0
 5647 015e 3A68     	 ldr r2,[r7]
 5648 0160 7B69     	 ldr r3,[r7,#20]
 5649 0162 1344     	 add r3,r3,r2
 5650 0164 0833     	 adds r3,r3,#8
 5651 0166 5B78     	 ldrb r3,[r3,#1]
 5652 0168 FB81     	 strh r3,[r7,#14]
2704:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsUpper(wc) && (dp->dir[DIR_NTres] & ((si >= 9) ? NS_EXT : NS_BODY))) wc += 0x20;
 5653              	 .loc 1 2704 0
 5654 016a FB89     	 ldrh r3,[r7,#14]
 5655 016c 402B     	 cmp r3,#64
 5656 016e 13D9     	 bls .L360
 5657              	 .loc 1 2704 0 is_stmt 0 discriminator 1
 5658 0170 FB89     	 ldrh r3,[r7,#14]
 5659 0172 5A2B     	 cmp r3,#90
 5660 0174 10D8     	 bhi .L360
 5661              	 .loc 1 2704 0 discriminator 2
 5662 0176 7B68     	 ldr r3,[r7,#4]
 5663 0178 1B6A     	 ldr r3,[r3,#32]
 5664 017a 0C33     	 adds r3,r3,#12
 5665 017c 1B78     	 ldrb r3,[r3]
 5666 017e 1A46     	 mov r2,r3
 5667 0180 7B69     	 ldr r3,[r7,#20]
 5668 0182 082B     	 cmp r3,#8
 5669 0184 01D9     	 bls .L361
 5670              	 .loc 1 2704 0 discriminator 3
 5671 0186 1023     	 movs r3,#16
 5672 0188 00E0     	 b .L362
 5673              	.L361:
 5674              	 .loc 1 2704 0 discriminator 4
 5675 018a 0823     	 movs r3,#8
 5676              	.L362:
 5677              	 .loc 1 2704 0 discriminator 6
 5678 018c 1340     	 ands r3,r3,r2
 5679 018e 002B     	 cmp r3,#0
 5680 0190 02D0     	 beq .L360
 5681              	 .loc 1 2704 0 discriminator 7
 5682 0192 FB89     	 ldrh r3,[r7,#14]
 5683 0194 2033     	 adds r3,r3,#32
 5684 0196 FB81     	 strh r3,[r7,#14]
 5685              	.L360:
2705:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fno->fname[di] = (TCHAR)wc;
 5686              	 .loc 1 2705 0 is_stmt 1 discriminator 2
 5687 0198 FB89     	 ldrh r3,[r7,#14]
 5688 019a D9B2     	 uxtb r1,r3
 5689 019c 3A68     	 ldr r2,[r7]
 5690 019e 3B69     	 ldr r3,[r7,#16]
 5691 01a0 1344     	 add r3,r3,r2
 5692 01a2 1033     	 adds r3,r3,#16
 5693 01a4 0A46     	 mov r2,r1
 5694 01a6 9A71     	 strb r2,[r3,#6]
2702:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = (WCHAR)fno->altname[si];
 5695              	 .loc 1 2702 0 discriminator 2
 5696 01a8 7B69     	 ldr r3,[r7,#20]
 5697 01aa 0133     	 adds r3,r3,#1
 5698 01ac 7B61     	 str r3,[r7,#20]
 5699 01ae 3B69     	 ldr r3,[r7,#16]
 5700 01b0 0133     	 adds r3,r3,#1
 5701 01b2 3B61     	 str r3,[r7,#16]
 5702              	.L359:
2702:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = (WCHAR)fno->altname[si];
 5703              	 .loc 1 2702 0 is_stmt 0 discriminator 1
 5704 01b4 3A68     	 ldr r2,[r7]
 5705 01b6 7B69     	 ldr r3,[r7,#20]
 5706 01b8 1344     	 add r3,r3,r2
 5707 01ba 0833     	 adds r3,r3,#8
 5708 01bc 5B78     	 ldrb r3,[r3,#1]
 5709 01be 002B     	 cmp r3,#0
 5710 01c0 CDD1     	 bne .L363
 5711              	.L358:
2706:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2707:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2708:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fno->fname[di] = 0;	/* Terminate the LFN */
 5712              	 .loc 1 2708 0 is_stmt 1
 5713 01c2 3A68     	 ldr r2,[r7]
 5714 01c4 3B69     	 ldr r3,[r7,#16]
 5715 01c6 1344     	 add r3,r3,r2
 5716 01c8 1033     	 adds r3,r3,#16
 5717 01ca 0022     	 movs r2,#0
 5718 01cc 9A71     	 strb r2,[r3,#6]
2709:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case in
 5719              	 .loc 1 2709 0
 5720 01ce 7B68     	 ldr r3,[r7,#4]
 5721 01d0 1B6A     	 ldr r3,[r3,#32]
 5722 01d2 0C33     	 adds r3,r3,#12
 5723 01d4 1B78     	 ldrb r3,[r3]
 5724 01d6 002B     	 cmp r3,#0
 5725 01d8 02D1     	 bne .L356
 5726              	 .loc 1 2709 0 is_stmt 0 discriminator 1
 5727 01da 3B68     	 ldr r3,[r7]
 5728 01dc 0022     	 movs r2,#0
 5729 01de 5A72     	 strb r2,[r3,#9]
 5730              	.L356:
2710:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2711:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2712:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* Non-LFN configuration */
2713:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = di = 0;
2714:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (si < 11) {		/* Copy name body and extension */
2715:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (TCHAR)dp->dir[si++];
2716:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == ' ') continue;		/* Skip padding spaces */
2717:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
2718:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
2719:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fno->fname[di++] = c;
2720:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2721:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fname[di] = 0;
2722:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2723:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2724:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 5731              	 .loc 1 2724 0 is_stmt 1
 5732 01e0 7B68     	 ldr r3,[r7,#4]
 5733 01e2 1B6A     	 ldr r3,[r3,#32]
 5734 01e4 DA7A     	 ldrb r2,[r3,#11]
 5735 01e6 3B68     	 ldr r3,[r7]
 5736 01e8 1A72     	 strb r2,[r3,#8]
2725:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 5737              	 .loc 1 2725 0
 5738 01ea 7B68     	 ldr r3,[r7,#4]
 5739 01ec 1B6A     	 ldr r3,[r3,#32]
 5740 01ee 1C33     	 adds r3,r3,#28
 5741 01f0 1846     	 mov r0,r3
 5742 01f2 FFF7FEFF 	 bl ld_dword
 5743 01f6 0246     	 mov r2,r0
 5744 01f8 3B68     	 ldr r3,[r7]
 5745 01fa 1A60     	 str r2,[r3]
2726:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 5746              	 .loc 1 2726 0
 5747 01fc 7B68     	 ldr r3,[r7,#4]
 5748 01fe 1B6A     	 ldr r3,[r3,#32]
 5749 0200 1633     	 adds r3,r3,#22
 5750 0202 1846     	 mov r0,r3
 5751 0204 FFF7FEFF 	 bl ld_word
 5752 0208 0346     	 mov r3,r0
 5753 020a 1A46     	 mov r2,r3
 5754 020c 3B68     	 ldr r3,[r7]
 5755 020e DA80     	 strh r2,[r3,#6]
2727:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 5756              	 .loc 1 2727 0
 5757 0210 7B68     	 ldr r3,[r7,#4]
 5758 0212 1B6A     	 ldr r3,[r3,#32]
 5759 0214 1833     	 adds r3,r3,#24
 5760 0216 1846     	 mov r0,r3
 5761 0218 FFF7FEFF 	 bl ld_word
 5762 021c 0346     	 mov r3,r0
 5763 021e 1A46     	 mov r2,r3
 5764 0220 3B68     	 ldr r3,[r7]
 5765 0222 9A80     	 strh r2,[r3,#4]
 5766              	.L341:
2728:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 5767              	 .loc 1 2728 0
 5768 0224 1837     	 adds r7,r7,#24
 5769              	.LCFI220:
 5770              	 .cfi_def_cfa_offset 8
 5771 0226 BD46     	 mov sp,r7
 5772              	.LCFI221:
 5773              	 .cfi_def_cfa_register 13
 5774              	 
 5775 0228 80BD     	 pop {r7,pc}
 5776              	 .cfi_endproc
 5777              	.LFE40:
 5779 022a 00BF     	 .section .rodata
 5780              	 .align 2
 5781              	.LC0:
 5782 0000 222A3A3C 	 .ascii "\"*:<>?|\177\000"
 5782      3E3F7C7F 
 5782      00
 5783 0009 000000   	 .align 2
 5784              	.LC1:
 5785 000c 2B2C3B3D 	 .ascii "+,;=[]\000"
 5785      5B5D00
 5786              	 .section .text.create_name,"ax",%progbits
 5787              	 .align 2
 5788              	 .thumb
 5789              	 .thumb_func
 5791              	create_name:
 5792              	.LFB41:
2729:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2730:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 */
2731:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2732:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2733:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2734:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FIND && FF_FS_MINIMIZE <= 1
2735:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2736:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Pattern matching                                                      */
2737:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2738:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2739:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD get_achar (	/* Get a character and advances ptr */
2740:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** ptr		/* Pointer to pointer to the ANSI/OEM or Unicode string */
2741:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2742:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2743:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD chr;
2744:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2745:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2746:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1	/* Unicode input */
2747:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = tchar2uni(ptr);
2748:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr == 0xFFFFFFFF) chr = 0;		/* Wrong UTF encoding is recognized as end of the string */
2749:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = ff_wtoupper(chr);
2750:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2751:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM input */
2752:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = (BYTE)*(*ptr)++;				/* Get a byte */
2753:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsLower(chr)) chr -= 0x20;		/* To upper ASCII char */
2754:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
2755:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2756:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900
2757:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2758:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2759:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
2760:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd byte if needed */
2761:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | (BYTE)*(*ptr)++ : 0;
2762:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2763:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2764:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2765:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2766:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return chr;
2767:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2768:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2769:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2770:../Dave/Generated/FATFS/ff_Src/ff.c **** static int pattern_matching (	/* 0:not matched, 1:matched */
2771:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
2772:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* nam,	/* String to be tested */
2773:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
2774:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int inf				/* Infinite search (* specified) */
2775:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2776:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2777:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *pp, *np;
2778:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD pc, nc;
2779:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int nm, nx;
2780:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2781:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2782:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (skip--) {				/* Pre-skip name chars */
2783:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2784:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2785:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (*pat == 0 && inf) return 1;	/* (short circuit) */
2786:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2787:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2788:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
2789:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {
2790:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2791:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nm = nx = 0;
2792:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {				/* Analyze the wildcard block */
2793:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (*pp++ == '?') nm++; else nx = 1;
2794:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (*pp == '?' || *pp == '*');
2795:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
2796:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc = *np; break;	/* Branch mismatched */
2797:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2798:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pc = get_achar(&pp);	/* Get a pattern char */
2799:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nc = get_achar(&np);	/* Get a name char */
2800:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (pc != nc) break;	/* Branch mismatched? */
2801:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2802:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2803:../Dave/Generated/FATFS/ff_Src/ff.c **** 		get_achar(&nam);			/* nam++ */
2804:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2805:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2806:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 0;
2807:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2808:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2809:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_FIND && FF_FS_MINIMIZE <= 1 */
2810:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2811:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2812:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2813:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2814:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Pick a top segment and create the object name in directory form       */
2815:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2816:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2817:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2818:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,					/* Pointer to the directory object */
2819:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
2820:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2821:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 5793              	 .loc 1 2821 0
 5794              	 .cfi_startproc
 5795              	 
 5796              	 
 5797 0000 80B5     	 push {r7,lr}
 5798              	.LCFI222:
 5799              	 .cfi_def_cfa_offset 8
 5800              	 .cfi_offset 7,-8
 5801              	 .cfi_offset 14,-4
 5802 0002 8AB0     	 sub sp,sp,#40
 5803              	.LCFI223:
 5804              	 .cfi_def_cfa_offset 48
 5805 0004 00AF     	 add r7,sp,#0
 5806              	.LCFI224:
 5807              	 .cfi_def_cfa_register 7
 5808 0006 7860     	 str r0,[r7,#4]
 5809 0008 3960     	 str r1,[r7]
2822:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2823:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b, cf;
2824:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, *lfn;
2825:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD uc;
2826:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, ni, si, di;
2827:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *p;
2828:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2829:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2830:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create LFN into LFN working buffer */
2831:../Dave/Generated/FATFS/ff_Src/ff.c **** 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 5810              	 .loc 1 2831 0
 5811 000a 3B68     	 ldr r3,[r7]
 5812 000c 1B68     	 ldr r3,[r3]
 5813 000e BB60     	 str r3,[r7,#8]
 5814 0010 7B68     	 ldr r3,[r7,#4]
 5815 0012 1B68     	 ldr r3,[r3]
 5816 0014 DB68     	 ldr r3,[r3,#12]
 5817 0016 3B61     	 str r3,[r7,#16]
 5818 0018 0023     	 movs r3,#0
 5819 001a 7B61     	 str r3,[r7,#20]
 5820              	.L371:
2832:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
2833:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = tchar2uni(&p);			/* Get a character */
 5821              	 .loc 1 2833 0
 5822 001c 07F10803 	 add r3,r7,#8
 5823 0020 1846     	 mov r0,r3
 5824 0022 FFF7FEFF 	 bl tchar2uni
 5825 0026 F860     	 str r0,[r7,#12]
2834:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 5826              	 .loc 1 2834 0
 5827 0028 FB68     	 ldr r3,[r7,#12]
 5828 002a B3F1FF3F 	 cmp r3,#-1
 5829 002e 01D1     	 bne .L365
 5830              	 .loc 1 2834 0 is_stmt 0 discriminator 1
 5831 0030 0623     	 movs r3,#6
 5832 0032 FFE1     	 b .L419
 5833              	.L365:
2835:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 5834              	 .loc 1 2835 0 is_stmt 1
 5835 0034 FB68     	 ldr r3,[r7,#12]
 5836 0036 B3F5803F 	 cmp r3,#65536
 5837 003a 09D3     	 bcc .L367
 5838              	 .loc 1 2835 0 is_stmt 0 discriminator 1
 5839 003c 7B69     	 ldr r3,[r7,#20]
 5840 003e 5A1C     	 adds r2,r3,#1
 5841 0040 7A61     	 str r2,[r7,#20]
 5842 0042 5B00     	 lsls r3,r3,#1
 5843 0044 3A69     	 ldr r2,[r7,#16]
 5844 0046 1344     	 add r3,r3,r2
 5845 0048 FA68     	 ldr r2,[r7,#12]
 5846 004a 120C     	 lsrs r2,r2,#16
 5847 004c 92B2     	 uxth r2,r2
 5848 004e 1A80     	 strh r2,[r3]
 5849              	.L367:
2836:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = (WCHAR)uc;
 5850              	 .loc 1 2836 0 is_stmt 1
 5851 0050 FB68     	 ldr r3,[r7,#12]
 5852 0052 BB84     	 strh r3,[r7,#36]
2837:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is fou
 5853              	 .loc 1 2837 0
 5854 0054 BB8C     	 ldrh r3,[r7,#36]
 5855 0056 1F2B     	 cmp r3,#31
 5856 0058 20D9     	 bls .L368
 5857              	 .loc 1 2837 0 is_stmt 0 discriminator 1
 5858 005a BB8C     	 ldrh r3,[r7,#36]
 5859 005c 2F2B     	 cmp r3,#47
 5860 005e 1DD0     	 beq .L368
 5861              	 .loc 1 2837 0 discriminator 2
 5862 0060 BB8C     	 ldrh r3,[r7,#36]
 5863 0062 5C2B     	 cmp r3,#92
 5864 0064 1AD0     	 beq .L368
2838:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characte
 5865              	 .loc 1 2838 0 is_stmt 1
 5866 0066 BB8C     	 ldrh r3,[r7,#36]
 5867 0068 7F2B     	 cmp r3,#127
 5868 006a 09D8     	 bhi .L369
 5869              	 .loc 1 2838 0 is_stmt 0 discriminator 1
 5870 006c BB8C     	 ldrh r3,[r7,#36]
 5871 006e A848     	 ldr r0,.L420
 5872 0070 1946     	 mov r1,r3
 5873 0072 FFF7FEFF 	 bl chk_chr
 5874 0076 0346     	 mov r3,r0
 5875 0078 002B     	 cmp r3,#0
 5876 007a 01D0     	 beq .L369
 5877              	 .loc 1 2838 0 discriminator 2
 5878 007c 0623     	 movs r3,#6
 5879 007e D9E1     	 b .L419
 5880              	.L369:
2839:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 5881              	 .loc 1 2839 0 is_stmt 1
 5882 0080 7B69     	 ldr r3,[r7,#20]
 5883 0082 FE2B     	 cmp r3,#254
 5884 0084 01D9     	 bls .L370
 5885              	 .loc 1 2839 0 is_stmt 0 discriminator 1
 5886 0086 0623     	 movs r3,#6
 5887 0088 D4E1     	 b .L419
 5888              	.L370:
2840:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lfn[di++] = wc;					/* Store the Unicode character */
 5889              	 .loc 1 2840 0 is_stmt 1
 5890 008a 7B69     	 ldr r3,[r7,#20]
 5891 008c 5A1C     	 adds r2,r3,#1
 5892 008e 7A61     	 str r2,[r7,#20]
 5893 0090 5B00     	 lsls r3,r3,#1
 5894 0092 3A69     	 ldr r2,[r7,#16]
 5895 0094 1344     	 add r3,r3,r2
 5896 0096 BA8C     	 ldrh r2,[r7,#36]
 5897 0098 1A80     	 strh r2,[r3]
2841:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 5898              	 .loc 1 2841 0
 5899 009a BFE7     	 b .L371
 5900              	.L368:
2842:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 5901              	 .loc 1 2842 0
 5902 009c 02E0     	 b .L372
 5903              	.L373:
 5904              	 .loc 1 2842 0 is_stmt 0 discriminator 4
 5905 009e BB68     	 ldr r3,[r7,#8]
 5906 00a0 0133     	 adds r3,r3,#1
 5907 00a2 BB60     	 str r3,[r7,#8]
 5908              	.L372:
 5909              	 .loc 1 2842 0 discriminator 1
 5910 00a4 BB68     	 ldr r3,[r7,#8]
 5911 00a6 1B78     	 ldrb r3,[r3]
 5912 00a8 2F2B     	 cmp r3,#47
 5913 00aa F8D0     	 beq .L373
 5914              	 .loc 1 2842 0 discriminator 3
 5915 00ac BB68     	 ldr r3,[r7,#8]
 5916 00ae 1B78     	 ldrb r3,[r3]
 5917 00b0 5C2B     	 cmp r3,#92
 5918 00b2 F4D0     	 beq .L373
2843:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*path = p;							/* Return pointer to the next segment */
 5919              	 .loc 1 2843 0 is_stmt 1
 5920 00b4 BA68     	 ldr r2,[r7,#8]
 5921 00b6 3B68     	 ldr r3,[r7]
 5922 00b8 1A60     	 str r2,[r3]
2844:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 5923              	 .loc 1 2844 0
 5924 00ba BB8C     	 ldrh r3,[r7,#36]
 5925 00bc 1F2B     	 cmp r3,#31
 5926 00be 01D8     	 bhi .L374
 5927              	 .loc 1 2844 0 is_stmt 0 discriminator 1
 5928 00c0 0423     	 movs r3,#4
 5929 00c2 00E0     	 b .L375
 5930              	.L374:
 5931              	 .loc 1 2844 0 discriminator 2
 5932 00c4 0023     	 movs r3,#0
 5933              	.L375:
 5934              	 .loc 1 2844 0 discriminator 4
 5935 00c6 87F82630 	 strb r3,[r7,#38]
2845:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2846:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
2847:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') ||
 5936              	 .loc 1 2847 0 is_stmt 1 discriminator 4
 5937 00ca 7B69     	 ldr r3,[r7,#20]
 5938 00cc 012B     	 cmp r3,#1
 5939 00ce 09D1     	 bne .L376
 5940              	 .loc 1 2847 0 is_stmt 0 discriminator 1
 5941 00d0 7B69     	 ldr r3,[r7,#20]
 5942 00d2 03F10043 	 add r3,r3,#-2147483648
 5943 00d6 013B     	 subs r3,r3,#1
 5944 00d8 5B00     	 lsls r3,r3,#1
 5945 00da 3A69     	 ldr r2,[r7,#16]
 5946 00dc 1344     	 add r3,r3,r2
 5947 00de 1B88     	 ldrh r3,[r3]
 5948 00e0 2E2B     	 cmp r3,#46
 5949 00e2 16D0     	 beq .L377
 5950              	.L376:
 5951              	 .loc 1 2847 0 discriminator 3
 5952 00e4 7B69     	 ldr r3,[r7,#20]
 5953 00e6 022B     	 cmp r3,#2
 5954 00e8 3CD1     	 bne .L378
2848:../Dave/Generated/FATFS/ff_Src/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 5955              	 .loc 1 2848 0 is_stmt 1
 5956 00ea 7B69     	 ldr r3,[r7,#20]
 5957 00ec 03F10043 	 add r3,r3,#-2147483648
 5958 00f0 013B     	 subs r3,r3,#1
 5959 00f2 5B00     	 lsls r3,r3,#1
 5960 00f4 3A69     	 ldr r2,[r7,#16]
 5961 00f6 1344     	 add r3,r3,r2
 5962 00f8 1B88     	 ldrh r3,[r3]
 5963 00fa 2E2B     	 cmp r3,#46
 5964 00fc 32D1     	 bne .L378
 5965              	 .loc 1 2848 0 is_stmt 0 discriminator 1
 5966 00fe 7B69     	 ldr r3,[r7,#20]
 5967 0100 03F10043 	 add r3,r3,#-2147483648
 5968 0104 023B     	 subs r3,r3,#2
 5969 0106 5B00     	 lsls r3,r3,#1
 5970 0108 3A69     	 ldr r2,[r7,#16]
 5971 010a 1344     	 add r3,r3,r2
 5972 010c 1B88     	 ldrh r3,[r3]
 5973 010e 2E2B     	 cmp r3,#46
 5974 0110 28D1     	 bne .L378
 5975              	.L377:
2849:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lfn[di] = 0;
 5976              	 .loc 1 2849 0 is_stmt 1
 5977 0112 7B69     	 ldr r3,[r7,#20]
 5978 0114 5B00     	 lsls r3,r3,#1
 5979 0116 3A69     	 ldr r2,[r7,#16]
 5980 0118 1344     	 add r3,r3,r2
 5981 011a 0022     	 movs r2,#0
 5982 011c 1A80     	 strh r2,[r3]
2850:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 5983              	 .loc 1 2850 0
 5984 011e 0023     	 movs r3,#0
 5985 0120 3B62     	 str r3,[r7,#32]
 5986 0122 0FE0     	 b .L379
 5987              	.L382:
2851:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
 5988              	 .loc 1 2851 0
 5989 0124 3A6A     	 ldr r2,[r7,#32]
 5990 0126 7B69     	 ldr r3,[r7,#20]
 5991 0128 9A42     	 cmp r2,r3
 5992 012a 01D2     	 bcs .L380
 5993              	 .loc 1 2851 0 is_stmt 0 discriminator 1
 5994 012c 2E21     	 movs r1,#46
 5995 012e 00E0     	 b .L381
 5996              	.L380:
 5997              	 .loc 1 2851 0 discriminator 2
 5998 0130 2021     	 movs r1,#32
 5999              	.L381:
 6000              	 .loc 1 2851 0 discriminator 4
 6001 0132 7A68     	 ldr r2,[r7,#4]
 6002 0134 3B6A     	 ldr r3,[r7,#32]
 6003 0136 1344     	 add r3,r3,r2
 6004 0138 2033     	 adds r3,r3,#32
 6005 013a 0A46     	 mov r2,r1
 6006 013c 1A71     	 strb r2,[r3,#4]
2850:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 6007              	 .loc 1 2850 0 is_stmt 1 discriminator 4
 6008 013e 3B6A     	 ldr r3,[r7,#32]
 6009 0140 0133     	 adds r3,r3,#1
 6010 0142 3B62     	 str r3,[r7,#32]
 6011              	.L379:
2850:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 6012              	 .loc 1 2850 0 is_stmt 0 discriminator 2
 6013 0144 3B6A     	 ldr r3,[r7,#32]
 6014 0146 0A2B     	 cmp r3,#10
 6015 0148 ECD9     	 bls .L382
2852:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2853:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 6016              	 .loc 1 2853 0 is_stmt 1
 6017 014a 97F82630 	 ldrb r3,[r7,#38]
 6018 014e 43F02003 	 orr r3,r3,#32
 6019 0152 D9B2     	 uxtb r1,r3
 6020 0154 7A68     	 ldr r2,[r7,#4]
 6021 0156 3B6A     	 ldr r3,[r7,#32]
 6022 0158 1344     	 add r3,r3,r2
 6023 015a 2033     	 adds r3,r3,#32
 6024 015c 0A46     	 mov r2,r1
 6025 015e 1A71     	 strb r2,[r3,#4]
2854:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_OK;
 6026              	 .loc 1 2854 0
 6027 0160 0023     	 movs r3,#0
 6028 0162 67E1     	 b .L419
 6029              	.L378:
2855:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2856:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2857:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (di) {						/* Snip off trailing spaces and dots if exist */
 6030              	 .loc 1 2857 0
 6031 0164 12E0     	 b .L383
 6032              	.L386:
2858:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = lfn[di - 1];
 6033              	 .loc 1 2858 0
 6034 0166 7B69     	 ldr r3,[r7,#20]
 6035 0168 03F10043 	 add r3,r3,#-2147483648
 6036 016c 013B     	 subs r3,r3,#1
 6037 016e 5B00     	 lsls r3,r3,#1
 6038 0170 3A69     	 ldr r2,[r7,#16]
 6039 0172 1344     	 add r3,r3,r2
 6040 0174 1B88     	 ldrh r3,[r3]
 6041 0176 BB84     	 strh r3,[r7,#36]
2859:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != ' ' && wc != '.') break;
 6042              	 .loc 1 2859 0
 6043 0178 BB8C     	 ldrh r3,[r7,#36]
 6044 017a 202B     	 cmp r3,#32
 6045 017c 03D0     	 beq .L384
 6046              	 .loc 1 2859 0 is_stmt 0 discriminator 1
 6047 017e BB8C     	 ldrh r3,[r7,#36]
 6048 0180 2E2B     	 cmp r3,#46
 6049 0182 00D0     	 beq .L384
 6050              	 .loc 1 2859 0
 6051 0184 05E0     	 b .L385
 6052              	.L384:
2860:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di--;
 6053              	 .loc 1 2860 0 is_stmt 1
 6054 0186 7B69     	 ldr r3,[r7,#20]
 6055 0188 013B     	 subs r3,r3,#1
 6056 018a 7B61     	 str r3,[r7,#20]
 6057              	.L383:
2857:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = lfn[di - 1];
 6058              	 .loc 1 2857 0
 6059 018c 7B69     	 ldr r3,[r7,#20]
 6060 018e 002B     	 cmp r3,#0
 6061 0190 E9D1     	 bne .L386
 6062              	.L385:
2861:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2862:../Dave/Generated/FATFS/ff_Src/ff.c **** 	lfn[di] = 0;							/* LFN is created into the working buffer */
 6063              	 .loc 1 2862 0
 6064 0192 7B69     	 ldr r3,[r7,#20]
 6065 0194 5B00     	 lsls r3,r3,#1
 6066 0196 3A69     	 ldr r2,[r7,#16]
 6067 0198 1344     	 add r3,r3,r2
 6068 019a 0022     	 movs r2,#0
 6069 019c 1A80     	 strh r2,[r3]
2863:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 6070              	 .loc 1 2863 0
 6071 019e 7B69     	 ldr r3,[r7,#20]
 6072 01a0 002B     	 cmp r3,#0
 6073 01a2 01D1     	 bne .L387
 6074              	 .loc 1 2863 0 is_stmt 0 discriminator 1
 6075 01a4 0623     	 movs r3,#6
 6076 01a6 45E1     	 b .L419
 6077              	.L387:
2864:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2865:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create SFN in directory form */
2866:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 6078              	 .loc 1 2866 0 is_stmt 1
 6079 01a8 0023     	 movs r3,#0
 6080 01aa BB61     	 str r3,[r7,#24]
 6081 01ac 02E0     	 b .L388
 6082              	.L389:
 6083              	 .loc 1 2866 0 is_stmt 0 discriminator 3
 6084 01ae BB69     	 ldr r3,[r7,#24]
 6085 01b0 0133     	 adds r3,r3,#1
 6086 01b2 BB61     	 str r3,[r7,#24]
 6087              	.L388:
 6088              	 .loc 1 2866 0 discriminator 1
 6089 01b4 BB69     	 ldr r3,[r7,#24]
 6090 01b6 5B00     	 lsls r3,r3,#1
 6091 01b8 3A69     	 ldr r2,[r7,#16]
 6092 01ba 1344     	 add r3,r3,r2
 6093 01bc 1B88     	 ldrh r3,[r3]
 6094 01be 202B     	 cmp r3,#32
 6095 01c0 F5D0     	 beq .L389
2867:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 6096              	 .loc 1 2867 0 is_stmt 1
 6097 01c2 BB69     	 ldr r3,[r7,#24]
 6098 01c4 002B     	 cmp r3,#0
 6099 01c6 06D1     	 bne .L390
 6100              	 .loc 1 2867 0 is_stmt 0 discriminator 2
 6101 01c8 BB69     	 ldr r3,[r7,#24]
 6102 01ca 5B00     	 lsls r3,r3,#1
 6103 01cc 3A69     	 ldr r2,[r7,#16]
 6104 01ce 1344     	 add r3,r3,r2
 6105 01d0 1B88     	 ldrh r3,[r3]
 6106 01d2 2E2B     	 cmp r3,#46
 6107 01d4 05D1     	 bne .L391
 6108              	.L390:
 6109              	 .loc 1 2867 0 discriminator 3
 6110 01d6 97F82630 	 ldrb r3,[r7,#38]
 6111 01da 43F00303 	 orr r3,r3,#3
 6112 01de 87F82630 	 strb r3,[r7,#38]
 6113              	.L391:
2868:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 6114              	 .loc 1 2868 0 is_stmt 1
 6115 01e2 02E0     	 b .L392
 6116              	.L394:
 6117              	 .loc 1 2868 0 is_stmt 0 discriminator 3
 6118 01e4 7B69     	 ldr r3,[r7,#20]
 6119 01e6 013B     	 subs r3,r3,#1
 6120 01e8 7B61     	 str r3,[r7,#20]
 6121              	.L392:
 6122              	 .loc 1 2868 0 discriminator 1
 6123 01ea 7B69     	 ldr r3,[r7,#20]
 6124 01ec 002B     	 cmp r3,#0
 6125 01ee 09D0     	 beq .L393
 6126              	 .loc 1 2868 0 discriminator 2
 6127 01f0 7B69     	 ldr r3,[r7,#20]
 6128 01f2 03F10043 	 add r3,r3,#-2147483648
 6129 01f6 013B     	 subs r3,r3,#1
 6130 01f8 5B00     	 lsls r3,r3,#1
 6131 01fa 3A69     	 ldr r2,[r7,#16]
 6132 01fc 1344     	 add r3,r3,r2
 6133 01fe 1B88     	 ldrh r3,[r3]
 6134 0200 2E2B     	 cmp r3,#46
 6135 0202 EFD1     	 bne .L394
 6136              	.L393:
2869:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2870:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(dp->fn, ' ', 11);
 6137              	 .loc 1 2870 0 is_stmt 1
 6138 0204 7B68     	 ldr r3,[r7,#4]
 6139 0206 2433     	 adds r3,r3,#36
 6140 0208 1846     	 mov r0,r3
 6141 020a 2021     	 movs r1,#32
 6142 020c 0B22     	 movs r2,#11
 6143 020e FFF7FEFF 	 bl mem_set
2871:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = b = 0; ni = 8;
 6144              	 .loc 1 2871 0
 6145 0212 0023     	 movs r3,#0
 6146 0214 87F82730 	 strb r3,[r7,#39]
 6147 0218 0023     	 movs r3,#0
 6148 021a 3B62     	 str r3,[r7,#32]
 6149 021c 0823     	 movs r3,#8
 6150 021e FB61     	 str r3,[r7,#28]
 6151              	.L412:
2872:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
2873:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = lfn[si++];					/* Get an LFN character */
 6152              	 .loc 1 2873 0
 6153 0220 BB69     	 ldr r3,[r7,#24]
 6154 0222 5A1C     	 adds r2,r3,#1
 6155 0224 BA61     	 str r2,[r7,#24]
 6156 0226 5B00     	 lsls r3,r3,#1
 6157 0228 3A69     	 ldr r2,[r7,#16]
 6158 022a 1344     	 add r3,r3,r2
 6159 022c 1B88     	 ldrh r3,[r3]
 6160 022e BB84     	 strh r3,[r7,#36]
2874:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) break;				/* Break on end of the LFN */
 6161              	 .loc 1 2874 0
 6162 0230 BB8C     	 ldrh r3,[r7,#36]
 6163 0232 002B     	 cmp r3,#0
 6164 0234 00D1     	 bne .L395
 6165 0236 B6E0     	 b .L396
 6166              	.L395:
2875:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 6167              	 .loc 1 2875 0
 6168 0238 BB8C     	 ldrh r3,[r7,#36]
 6169 023a 202B     	 cmp r3,#32
 6170 023c 06D0     	 beq .L397
 6171              	 .loc 1 2875 0 is_stmt 0 discriminator 1
 6172 023e BB8C     	 ldrh r3,[r7,#36]
 6173 0240 2E2B     	 cmp r3,#46
 6174 0242 0AD1     	 bne .L398
 6175              	 .loc 1 2875 0 discriminator 2
 6176 0244 BA69     	 ldr r2,[r7,#24]
 6177 0246 7B69     	 ldr r3,[r7,#20]
 6178 0248 9A42     	 cmp r2,r3
 6179 024a 06D0     	 beq .L398
 6180              	.L397:
2876:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cf |= NS_LOSS | NS_LFN;
 6181              	 .loc 1 2876 0 is_stmt 1
 6182 024c 97F82630 	 ldrb r3,[r7,#38]
 6183 0250 43F00303 	 orr r3,r3,#3
 6184 0254 87F82630 	 strb r3,[r7,#38]
2877:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 6185              	 .loc 1 2877 0
 6186 0258 A4E0     	 b .L399
 6187              	.L398:
2878:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2879:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2880:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i >= ni || si == di) {		/* End of field? */
 6188              	 .loc 1 2880 0
 6189 025a 3A6A     	 ldr r2,[r7,#32]
 6190 025c FB69     	 ldr r3,[r7,#28]
 6191 025e 9A42     	 cmp r2,r3
 6192 0260 03D2     	 bcs .L400
 6193              	 .loc 1 2880 0 is_stmt 0 discriminator 1
 6194 0262 BA69     	 ldr r2,[r7,#24]
 6195 0264 7B69     	 ldr r3,[r7,#20]
 6196 0266 9A42     	 cmp r2,r3
 6197 0268 24D1     	 bne .L401
 6198              	.L400:
2881:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ni == 11) {				/* Name extension overflow? */
 6199              	 .loc 1 2881 0 is_stmt 1
 6200 026a FB69     	 ldr r3,[r7,#28]
 6201 026c 0B2B     	 cmp r3,#11
 6202 026e 06D1     	 bne .L402
2882:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cf |= NS_LOSS | NS_LFN;
 6203              	 .loc 1 2882 0
 6204 0270 97F82630 	 ldrb r3,[r7,#38]
 6205 0274 43F00303 	 orr r3,r3,#3
 6206 0278 87F82630 	 strb r3,[r7,#38]
2883:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
 6207              	 .loc 1 2883 0
 6208 027c 93E0     	 b .L396
 6209              	.L402:
2884:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2885:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 6210              	 .loc 1 2885 0
 6211 027e BA69     	 ldr r2,[r7,#24]
 6212 0280 7B69     	 ldr r3,[r7,#20]
 6213 0282 9A42     	 cmp r2,r3
 6214 0284 05D0     	 beq .L403
 6215              	 .loc 1 2885 0 is_stmt 0 discriminator 1
 6216 0286 97F82630 	 ldrb r3,[r7,#38]
 6217 028a 43F00303 	 orr r3,r3,#3
 6218 028e 87F82630 	 strb r3,[r7,#38]
 6219              	.L403:
2886:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (si > di) break;						/* No name extension? */
 6220              	 .loc 1 2886 0 is_stmt 1
 6221 0292 BA69     	 ldr r2,[r7,#24]
 6222 0294 7B69     	 ldr r3,[r7,#20]
 6223 0296 9A42     	 cmp r2,r3
 6224 0298 00D9     	 bls .L404
 6225 029a 84E0     	 b .L396
 6226              	.L404:
2887:../Dave/Generated/FATFS/ff_Src/ff.c **** 			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 6227              	 .loc 1 2887 0
 6228 029c 7B69     	 ldr r3,[r7,#20]
 6229 029e BB61     	 str r3,[r7,#24]
 6230 02a0 0823     	 movs r3,#8
 6231 02a2 3B62     	 str r3,[r7,#32]
 6232 02a4 0B23     	 movs r3,#11
 6233 02a6 FB61     	 str r3,[r7,#28]
 6234 02a8 97F82730 	 ldrb r3,[r7,#39]
 6235 02ac 9B00     	 lsls r3,r3,#2
 6236 02ae 87F82730 	 strb r3,[r7,#39]
2888:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 6237              	 .loc 1 2888 0
 6238 02b2 77E0     	 b .L399
 6239              	.L401:
2889:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2890:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2891:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 6240              	 .loc 1 2891 0
 6241 02b4 BB8C     	 ldrh r3,[r7,#36]
 6242 02b6 7F2B     	 cmp r3,#127
 6243 02b8 18D9     	 bls .L405
2892:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cf |= NS_LFN;	/* LFN entry needs to be created */
 6244              	 .loc 1 2892 0
 6245 02ba 97F82630 	 ldrb r3,[r7,#38]
 6246 02be 43F00203 	 orr r3,r3,#2
 6247 02c2 87F82630 	 strb r3,[r7,#38]
2893:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
2894:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ExCvt) {	/* At SBCS */
2895:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2896:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2897:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {		/* At DBCS */
2898:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
2899:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2900:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900	/* SBCS cfg */
2901:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 6248              	 .loc 1 2901 0
 6249 02c6 BB8C     	 ldrh r3,[r7,#36]
 6250 02c8 1846     	 mov r0,r3
 6251 02ca 40F25231 	 movw r1,#850
 6252 02ce FFF7FEFF 	 bl ff_uni2oem
 6253 02d2 0346     	 mov r3,r0
 6254 02d4 BB84     	 strh r3,[r7,#36]
2902:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 6255              	 .loc 1 2902 0
 6256 02d6 BB8C     	 ldrh r3,[r7,#36]
 6257 02d8 03F08003 	 and r3,r3,#128
 6258 02dc 002B     	 cmp r3,#0
 6259 02de 05D0     	 beq .L405
 6260              	 .loc 1 2902 0 is_stmt 0 discriminator 1
 6261 02e0 BB8C     	 ldrh r3,[r7,#36]
 6262 02e2 03F07F03 	 and r3,r3,#127
 6263 02e6 0B4A     	 ldr r2,.L420+4
 6264 02e8 D35C     	 ldrb r3,[r2,r3]
 6265 02ea BB84     	 strh r3,[r7,#36]
 6266              	.L405:
2903:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* DBCS cfg */
2904:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
2905:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2906:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2907:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2908:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc >= 0x100) {				/* Is this a DBC? */
 6267              	 .loc 1 2908 0 is_stmt 1
 6268 02ec BB8C     	 ldrh r3,[r7,#36]
 6269 02ee FF2B     	 cmp r3,#255
 6270 02f0 1FD9     	 bls .L406
2909:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= ni - 1) {			/* Field overflow? */
 6271              	 .loc 1 2909 0
 6272 02f2 FB69     	 ldr r3,[r7,#28]
 6273 02f4 5A1E     	 subs r2,r3,#1
 6274 02f6 3B6A     	 ldr r3,[r7,#32]
 6275 02f8 9A42     	 cmp r2,r3
 6276 02fa 0DD8     	 bhi .L407
2910:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cf |= NS_LOSS | NS_LFN;
 6277              	 .loc 1 2910 0
 6278 02fc 97F82630 	 ldrb r3,[r7,#38]
 6279 0300 43F00303 	 orr r3,r3,#3
 6280 0304 87F82630 	 strb r3,[r7,#38]
2911:../Dave/Generated/FATFS/ff_Src/ff.c **** 				i = ni; continue;		/* Next field */
 6281              	 .loc 1 2911 0
 6282 0308 FB69     	 ldr r3,[r7,#28]
 6283 030a 3B62     	 str r3,[r7,#32]
 6284 030c 4AE0     	 b .L399
 6285              	.L421:
 6286 030e 00BF     	 .align 2
 6287              	.L420:
 6288 0310 00000000 	 .word .LC0
 6289 0314 00000000 	 .word ExCvt
 6290              	.L407:
2912:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2913:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 6291              	 .loc 1 2913 0
 6292 0318 3B6A     	 ldr r3,[r7,#32]
 6293 031a 5A1C     	 adds r2,r3,#1
 6294 031c 3A62     	 str r2,[r7,#32]
 6295 031e BA8C     	 ldrh r2,[r7,#36]
 6296 0320 120A     	 lsrs r2,r2,#8
 6297 0322 92B2     	 uxth r2,r2
 6298 0324 D1B2     	 uxtb r1,r2
 6299 0326 7A68     	 ldr r2,[r7,#4]
 6300 0328 1344     	 add r3,r3,r2
 6301 032a 0A46     	 mov r2,r1
 6302 032c 83F82420 	 strb r2,[r3,#36]
 6303 0330 2EE0     	 b .L408
 6304              	.L406:
2914:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {						/* SBC */
2915:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 6305              	 .loc 1 2915 0
 6306 0332 BB8C     	 ldrh r3,[r7,#36]
 6307 0334 002B     	 cmp r3,#0
 6308 0336 07D0     	 beq .L409
 6309              	 .loc 1 2915 0 is_stmt 0 discriminator 1
 6310 0338 BB8C     	 ldrh r3,[r7,#36]
 6311 033a 4048     	 ldr r0,.L422
 6312 033c 1946     	 mov r1,r3
 6313 033e FFF7FEFF 	 bl chk_chr
 6314 0342 0346     	 mov r3,r0
 6315 0344 002B     	 cmp r3,#0
 6316 0346 08D0     	 beq .L410
 6317              	.L409:
2916:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 6318              	 .loc 1 2916 0 is_stmt 1
 6319 0348 5F23     	 movs r3,#95
 6320 034a BB84     	 strh r3,[r7,#36]
 6321 034c 97F82630 	 ldrb r3,[r7,#38]
 6322 0350 43F00303 	 orr r3,r3,#3
 6323 0354 87F82630 	 strb r3,[r7,#38]
 6324 0358 1AE0     	 b .L408
 6325              	.L410:
2917:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
2918:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsUpper(wc)) {		/* ASCII upper case? */
 6326              	 .loc 1 2918 0
 6327 035a BB8C     	 ldrh r3,[r7,#36]
 6328 035c 402B     	 cmp r3,#64
 6329 035e 08D9     	 bls .L411
 6330              	 .loc 1 2918 0 is_stmt 0 discriminator 1
 6331 0360 BB8C     	 ldrh r3,[r7,#36]
 6332 0362 5A2B     	 cmp r3,#90
 6333 0364 05D8     	 bhi .L411
2919:../Dave/Generated/FATFS/ff_Src/ff.c **** 					b |= 2;
 6334              	 .loc 1 2919 0 is_stmt 1
 6335 0366 97F82730 	 ldrb r3,[r7,#39]
 6336 036a 43F00203 	 orr r3,r3,#2
 6337 036e 87F82730 	 strb r3,[r7,#39]
 6338              	.L411:
2920:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2921:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsLower(wc)) {		/* ASCII lower case? */
 6339              	 .loc 1 2921 0
 6340 0372 BB8C     	 ldrh r3,[r7,#36]
 6341 0374 602B     	 cmp r3,#96
 6342 0376 0BD9     	 bls .L408
 6343              	 .loc 1 2921 0 is_stmt 0 discriminator 1
 6344 0378 BB8C     	 ldrh r3,[r7,#36]
 6345 037a 7A2B     	 cmp r3,#122
 6346 037c 08D8     	 bhi .L408
2922:../Dave/Generated/FATFS/ff_Src/ff.c **** 					b |= 1; wc -= 0x20;
 6347              	 .loc 1 2922 0 is_stmt 1
 6348 037e 97F82730 	 ldrb r3,[r7,#39]
 6349 0382 43F00103 	 orr r3,r3,#1
 6350 0386 87F82730 	 strb r3,[r7,#39]
 6351 038a BB8C     	 ldrh r3,[r7,#36]
 6352 038c 203B     	 subs r3,r3,#32
 6353 038e BB84     	 strh r3,[r7,#36]
 6354              	.L408:
2923:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2924:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2925:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2926:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[i++] = (BYTE)wc;
 6355              	 .loc 1 2926 0
 6356 0390 3B6A     	 ldr r3,[r7,#32]
 6357 0392 5A1C     	 adds r2,r3,#1
 6358 0394 3A62     	 str r2,[r7,#32]
 6359 0396 BA8C     	 ldrh r2,[r7,#36]
 6360 0398 D1B2     	 uxtb r1,r2
 6361 039a 7A68     	 ldr r2,[r7,#4]
 6362 039c 1344     	 add r3,r3,r2
 6363 039e 0A46     	 mov r2,r1
 6364 03a0 83F82420 	 strb r2,[r3,#36]
 6365              	.L399:
2927:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 6366              	 .loc 1 2927 0
 6367 03a4 3CE7     	 b .L412
 6368              	.L396:
2928:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2929:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
 6369              	 .loc 1 2929 0
 6370 03a6 7B68     	 ldr r3,[r7,#4]
 6371 03a8 93F82430 	 ldrb r3,[r3,#36]
 6372 03ac E52B     	 cmp r3,#229
 6373 03ae 03D1     	 bne .L413
 6374              	 .loc 1 2929 0 is_stmt 0 discriminator 1
 6375 03b0 7B68     	 ldr r3,[r7,#4]
 6376 03b2 0522     	 movs r2,#5
 6377 03b4 83F82420 	 strb r2,[r3,#36]
 6378              	.L413:
2930:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2931:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 6379              	 .loc 1 2931 0 is_stmt 1
 6380 03b8 FB69     	 ldr r3,[r7,#28]
 6381 03ba 082B     	 cmp r3,#8
 6382 03bc 04D1     	 bne .L414
 6383              	 .loc 1 2931 0 is_stmt 0 discriminator 1
 6384 03be 97F82730 	 ldrb r3,[r7,#39]
 6385 03c2 9B00     	 lsls r3,r3,#2
 6386 03c4 87F82730 	 strb r3,[r7,#39]
 6387              	.L414:
2932:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
 6388              	 .loc 1 2932 0 is_stmt 1
 6389 03c8 97F82730 	 ldrb r3,[r7,#39]
 6390 03cc 03F00C03 	 and r3,r3,#12
 6391 03d0 0C2B     	 cmp r3,#12
 6392 03d2 05D0     	 beq .L415
 6393              	 .loc 1 2932 0 is_stmt 0 discriminator 2
 6394 03d4 97F82730 	 ldrb r3,[r7,#39]
 6395 03d8 03F00303 	 and r3,r3,#3
 6396 03dc 032B     	 cmp r3,#3
 6397 03de 05D1     	 bne .L416
 6398              	.L415:
 6399              	 .loc 1 2932 0 discriminator 3
 6400 03e0 97F82630 	 ldrb r3,[r7,#38]
 6401 03e4 43F00203 	 orr r3,r3,#2
 6402 03e8 87F82630 	 strb r3,[r7,#38]
 6403              	.L416:
2933:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
 6404              	 .loc 1 2933 0 is_stmt 1
 6405 03ec 97F82630 	 ldrb r3,[r7,#38]
 6406 03f0 03F00203 	 and r3,r3,#2
 6407 03f4 002B     	 cmp r3,#0
 6408 03f6 17D1     	 bne .L417
2934:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 6409              	 .loc 1 2934 0
 6410 03f8 97F82730 	 ldrb r3,[r7,#39]
 6411 03fc 03F00103 	 and r3,r3,#1
 6412 0400 002B     	 cmp r3,#0
 6413 0402 05D0     	 beq .L418
 6414              	 .loc 1 2934 0 is_stmt 0 discriminator 1
 6415 0404 97F82630 	 ldrb r3,[r7,#38]
 6416 0408 43F01003 	 orr r3,r3,#16
 6417 040c 87F82630 	 strb r3,[r7,#38]
 6418              	.L418:
2935:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 6419              	 .loc 1 2935 0 is_stmt 1
 6420 0410 97F82730 	 ldrb r3,[r7,#39]
 6421 0414 03F00403 	 and r3,r3,#4
 6422 0418 002B     	 cmp r3,#0
 6423 041a 05D0     	 beq .L417
 6424              	 .loc 1 2935 0 is_stmt 0 discriminator 1
 6425 041c 97F82630 	 ldrb r3,[r7,#38]
 6426 0420 43F00803 	 orr r3,r3,#8
 6427 0424 87F82630 	 strb r3,[r7,#38]
 6428              	.L417:
2936:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2937:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2938:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 6429              	 .loc 1 2938 0 is_stmt 1
 6430 0428 7B68     	 ldr r3,[r7,#4]
 6431 042a 97F82620 	 ldrb r2,[r7,#38]
 6432 042e 83F82F20 	 strb r2,[r3,#47]
2939:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2940:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 6433              	 .loc 1 2940 0
 6434 0432 0023     	 movs r3,#0
 6435              	.L419:
2941:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2942:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2943:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* FF_USE_LFN : Non-LFN configuration */
2944:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE c, d, *sfn;
2945:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT ni, si, i;
2946:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const char *p;
2947:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2948:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create file name in directory form */
2949:../Dave/Generated/FATFS/ff_Src/ff.c **** 	p = *path; sfn = dp->fn;
2950:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(sfn, ' ', 11);
2951:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = i = 0; ni = 8;
2952:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
2953:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
2954:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {
2955:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = (BYTE)p[si++];
2956:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (c != '.' || si >= 3) break;
2957:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = c;
2958:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2959:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
2960:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*path = p + si;								/* Return pointer to the next segment */
2961:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
2962:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_OK;
2963:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2964:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2965:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
2966:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (BYTE)p[si++];				/* Get a byte */
2967:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
2968:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
2969:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2970:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
2971:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2972:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
2973:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
2974:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = 8; ni = 11;				/* Enter file extension field */
2975:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
2976:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2977:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
2978:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
2979:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
2980:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2981:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900
2982:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= 0x80) {				/* Is SBC extended character? */
2983:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
2984:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2985:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2986:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
2987:../Dave/Generated/FATFS/ff_Src/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
2988:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
2989:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = c;
2990:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = d;
2991:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {						/* SBC */
2992:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
2993:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
2994:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = c;
2995:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2996:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2997:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*path = p + si;						/* Return pointer to the next segment */
2998:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
2999:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3000:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
3001:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
3002:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3003:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
3004:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_LFN */
3005:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 6436              	 .loc 1 3005 0 discriminator 1
 6437 0434 1846     	 mov r0,r3
 6438 0436 2837     	 adds r7,r7,#40
 6439              	.LCFI225:
 6440              	 .cfi_def_cfa_offset 8
 6441 0438 BD46     	 mov sp,r7
 6442              	.LCFI226:
 6443              	 .cfi_def_cfa_register 13
 6444              	 
 6445 043a 80BD     	 pop {r7,pc}
 6446              	.L423:
 6447              	 .align 2
 6448              	.L422:
 6449 043c 0C000000 	 .word .LC1
 6450              	 .cfi_endproc
 6451              	.LFE41:
 6453              	 .section .text.follow_path,"ax",%progbits
 6454              	 .align 2
 6455              	 .thumb
 6456              	 .thumb_func
 6458              	follow_path:
 6459              	.LFB42:
3006:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3007:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3008:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3009:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3010:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3011:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Follow a file path                                                    */
3012:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3013:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3014:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
3015:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,					/* Directory object to return last directory and found object */
3016:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path			/* Full-path string to find a file or directory */
3017:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3018:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 6460              	 .loc 1 3018 0
 6461              	 .cfi_startproc
 6462              	 
 6463              	 
 6464 0000 80B5     	 push {r7,lr}
 6465              	.LCFI227:
 6466              	 .cfi_def_cfa_offset 8
 6467              	 .cfi_offset 7,-8
 6468              	 .cfi_offset 14,-4
 6469 0002 86B0     	 sub sp,sp,#24
 6470              	.LCFI228:
 6471              	 .cfi_def_cfa_offset 32
 6472 0004 00AF     	 add r7,sp,#0
 6473              	.LCFI229:
 6474              	 .cfi_def_cfa_register 7
 6475 0006 7860     	 str r0,[r7,#4]
 6476 0008 3960     	 str r1,[r7]
3019:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3020:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ns;
3021:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 6477              	 .loc 1 3021 0
 6478 000a 7B68     	 ldr r3,[r7,#4]
 6479 000c 1B68     	 ldr r3,[r3]
 6480 000e 3B61     	 str r3,[r7,#16]
3022:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3023:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3024:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3025:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 6481              	 .loc 1 3025 0
 6482 0010 3B68     	 ldr r3,[r7]
 6483 0012 1B78     	 ldrb r3,[r3]
 6484 0014 2F2B     	 cmp r3,#47
 6485 0016 08D0     	 beq .L425
 6486              	 .loc 1 3025 0 is_stmt 0 discriminator 1
 6487 0018 3B68     	 ldr r3,[r7]
 6488 001a 1B78     	 ldrb r3,[r3]
 6489 001c 5C2B     	 cmp r3,#92
 6490 001e 04D0     	 beq .L425
3026:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 6491              	 .loc 1 3026 0 is_stmt 1
 6492 0020 3B69     	 ldr r3,[r7,#16]
 6493 0022 9A69     	 ldr r2,[r3,#24]
 6494 0024 7B68     	 ldr r3,[r7,#4]
 6495 0026 9A60     	 str r2,[r3,#8]
 6496 0028 0EE0     	 b .L426
 6497              	.L425:
3027:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
3028:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3029:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{										/* With heading separator */
3030:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 6498              	 .loc 1 3030 0
 6499 002a 02E0     	 b .L427
 6500              	.L428:
 6501              	 .loc 1 3030 0 is_stmt 0 discriminator 4
 6502 002c 3B68     	 ldr r3,[r7]
 6503 002e 0133     	 adds r3,r3,#1
 6504 0030 3B60     	 str r3,[r7]
 6505              	.L427:
 6506              	 .loc 1 3030 0 discriminator 1
 6507 0032 3B68     	 ldr r3,[r7]
 6508 0034 1B78     	 ldrb r3,[r3]
 6509 0036 2F2B     	 cmp r3,#47
 6510 0038 F8D0     	 beq .L428
 6511              	 .loc 1 3030 0 discriminator 3
 6512 003a 3B68     	 ldr r3,[r7]
 6513 003c 1B78     	 ldrb r3,[r3]
 6514 003e 5C2B     	 cmp r3,#92
 6515 0040 F4D0     	 beq .L428
3031:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.sclust = 0;					/* Start from root directory */
 6516              	 .loc 1 3031 0 is_stmt 1
 6517 0042 7B68     	 ldr r3,[r7,#4]
 6518 0044 0022     	 movs r2,#0
 6519 0046 9A60     	 str r2,[r3,#8]
 6520              	.L426:
3032:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3033:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3034:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
3035:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3036:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
3037:../Dave/Generated/FATFS/ff_Src/ff.c **** 		DIR dj;
3038:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3039:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.c_scl = fs->cdc_scl;
3040:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.c_size = fs->cdc_size;
3041:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.c_ofs = fs->cdc_ofs;
3042:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = load_obj_xdir(&dj, &dp->obj);
3043:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
3044:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
3045:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3046:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3047:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3048:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3049:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3050:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 6521              	 .loc 1 3050 0
 6522 0048 3B68     	 ldr r3,[r7]
 6523 004a 1B78     	 ldrb r3,[r3]
 6524 004c 1F2B     	 cmp r3,#31
 6525 004e 0AD8     	 bhi .L429
3051:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
 6526              	 .loc 1 3051 0
 6527 0050 7B68     	 ldr r3,[r7,#4]
 6528 0052 8022     	 movs r2,#128
 6529 0054 83F82F20 	 strb r2,[r3,#47]
3052:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_sdi(dp, 0);
 6530              	 .loc 1 3052 0
 6531 0058 7868     	 ldr r0,[r7,#4]
 6532 005a 0021     	 movs r1,#0
 6533 005c FFF7FEFF 	 bl dir_sdi
 6534 0060 0346     	 mov r3,r0
 6535 0062 FB75     	 strb r3,[r7,#23]
 6536 0064 52E0     	 b .L430
 6537              	.L429:
3053:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3054:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {								/* Follow path */
3055:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {
3056:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 6538              	 .loc 1 3056 0
 6539 0066 3B46     	 mov r3,r7
 6540 0068 7868     	 ldr r0,[r7,#4]
 6541 006a 1946     	 mov r1,r3
 6542 006c FFF7FEFF 	 bl create_name
 6543 0070 0346     	 mov r3,r0
 6544 0072 FB75     	 strb r3,[r7,#23]
3057:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 6545              	 .loc 1 3057 0
 6546 0074 FB7D     	 ldrb r3,[r7,#23]
 6547 0076 002B     	 cmp r3,#0
 6548 0078 00D0     	 beq .L431
 6549 007a 47E0     	 b .L430
 6550              	.L431:
3058:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
 6551              	 .loc 1 3058 0
 6552 007c 7868     	 ldr r0,[r7,#4]
 6553 007e FFF7FEFF 	 bl dir_find
 6554 0082 0346     	 mov r3,r0
 6555 0084 FB75     	 strb r3,[r7,#23]
3059:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ns = dp->fn[NSFLAG];
 6556              	 .loc 1 3059 0
 6557 0086 7B68     	 ldr r3,[r7,#4]
 6558 0088 93F82F30 	 ldrb r3,[r3,#47]
 6559 008c FB73     	 strb r3,[r7,#15]
3060:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 6560              	 .loc 1 3060 0
 6561 008e FB7D     	 ldrb r3,[r7,#23]
 6562 0090 002B     	 cmp r3,#0
 6563 0092 1DD0     	 beq .L432
3061:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 6564              	 .loc 1 3061 0
 6565 0094 FB7D     	 ldrb r3,[r7,#23]
 6566 0096 042B     	 cmp r3,#4
 6567 0098 19D1     	 bne .L433
3062:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 6568              	 .loc 1 3062 0
 6569 009a FB7B     	 ldrb r3,[r7,#15]
 6570 009c 03F02003 	 and r3,r3,#32
 6571 00a0 002B     	 cmp r3,#0
 6572 00a2 0CD0     	 beq .L434
3063:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 6573              	 .loc 1 3063 0
 6574 00a4 FB7B     	 ldrb r3,[r7,#15]
 6575 00a6 03F00403 	 and r3,r3,#4
 6576 00aa 002B     	 cmp r3,#0
 6577 00ac 00D1     	 bne .L435
 6578              	 .loc 1 3063 0 is_stmt 0 discriminator 1
 6579 00ae 2CE0     	 b .L436
 6580              	.L435:
3064:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
 6581              	 .loc 1 3064 0 is_stmt 1
 6582 00b0 7B68     	 ldr r3,[r7,#4]
 6583 00b2 8022     	 movs r2,#128
 6584 00b4 83F82F20 	 strb r2,[r3,#47]
3065:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_OK;
 6585              	 .loc 1 3065 0
 6586 00b8 0023     	 movs r3,#0
 6587 00ba FB75     	 strb r3,[r7,#23]
 6588 00bc 07E0     	 b .L433
 6589              	.L434:
3066:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {							/* Could not find the object */
3067:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 6590              	 .loc 1 3067 0
 6591 00be FB7B     	 ldrb r3,[r7,#15]
 6592 00c0 03F00403 	 and r3,r3,#4
 6593 00c4 002B     	 cmp r3,#0
 6594 00c6 02D1     	 bne .L433
 6595              	 .loc 1 3067 0 is_stmt 0 discriminator 1
 6596 00c8 0523     	 movs r3,#5
 6597 00ca FB75     	 strb r3,[r7,#23]
3068:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3069:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3070:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
 6598              	 .loc 1 3070 0 is_stmt 1 discriminator 1
 6599 00cc 1EE0     	 b .L430
 6600              	.L433:
 6601              	 .loc 1 3070 0 is_stmt 0
 6602 00ce 1DE0     	 b .L430
 6603              	.L432:
3071:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3072:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 6604              	 .loc 1 3072 0 is_stmt 1
 6605 00d0 FB7B     	 ldrb r3,[r7,#15]
 6606 00d2 03F00403 	 and r3,r3,#4
 6607 00d6 002B     	 cmp r3,#0
 6608 00d8 00D0     	 beq .L437
 6609 00da 17E0     	 b .L430
 6610              	.L437:
3073:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Get into the sub-directory */
3074:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 6611              	 .loc 1 3074 0
 6612 00dc 7B68     	 ldr r3,[r7,#4]
 6613 00de 9B79     	 ldrb r3,[r3,#6]
 6614 00e0 03F01003 	 and r3,r3,#16
 6615 00e4 002B     	 cmp r3,#0
 6616 00e6 02D1     	 bne .L438
3075:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_NO_PATH; break;
 6617              	 .loc 1 3075 0
 6618 00e8 0523     	 movs r3,#5
 6619 00ea FB75     	 strb r3,[r7,#23]
 6620 00ec 0EE0     	 b .L430
 6621              	.L438:
3076:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3077:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3078:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
3079:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.c_scl = dp->obj.sclust;
3080:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
3081:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.c_ofs = dp->blk_ofs;
3082:../Dave/Generated/FATFS/ff_Src/ff.c **** 				init_alloc_info(fs, &dp->obj);	/* Open next directory */
3083:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
3084:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3085:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
3086:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 6622              	 .loc 1 3086 0
 6623 00ee 7B68     	 ldr r3,[r7,#4]
 6624 00f0 5B69     	 ldr r3,[r3,#20]
 6625 00f2 C3F30803 	 ubfx r3,r3,#0,#9
 6626 00f6 3833     	 adds r3,r3,#56
 6627 00f8 3A69     	 ldr r2,[r7,#16]
 6628 00fa 1344     	 add r3,r3,r2
 6629 00fc 3869     	 ldr r0,[r7,#16]
 6630 00fe 1946     	 mov r1,r3
 6631 0100 FFF7FEFF 	 bl ld_clust
 6632 0104 0246     	 mov r2,r0
 6633 0106 7B68     	 ldr r3,[r7,#4]
 6634 0108 9A60     	 str r2,[r3,#8]
 6635              	.L436:
3087:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3088:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 6636              	 .loc 1 3088 0
 6637 010a ACE7     	 b .L429
 6638              	.L430:
3089:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3090:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3091:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 6639              	 .loc 1 3091 0
 6640 010c FB7D     	 ldrb r3,[r7,#23]
3092:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 6641              	 .loc 1 3092 0
 6642 010e 1846     	 mov r0,r3
 6643 0110 1837     	 adds r7,r7,#24
 6644              	.LCFI230:
 6645              	 .cfi_def_cfa_offset 8
 6646 0112 BD46     	 mov sp,r7
 6647              	.LCFI231:
 6648              	 .cfi_def_cfa_register 13
 6649              	 
 6650 0114 80BD     	 pop {r7,pc}
 6651              	 .cfi_endproc
 6652              	.LFE42:
 6654 0116 00BF     	 .section .text.get_ldnumber,"ax",%progbits
 6655              	 .align 2
 6656              	 .thumb
 6657              	 .thumb_func
 6659              	get_ldnumber:
 6660              	.LFB43:
3093:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3094:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3095:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3096:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3097:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3098:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get logical drive number from path name                               */
3099:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3100:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3101:../Dave/Generated/FATFS/ff_Src/ff.c **** static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer)
3102:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** path		/* Pointer to pointer to the path name */
3103:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3104:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 6661              	 .loc 1 3104 0
 6662              	 .cfi_startproc
 6663              	 
 6664              	 
 6665              	 
 6666 0000 80B4     	 push {r7}
 6667              	.LCFI232:
 6668              	 .cfi_def_cfa_offset 4
 6669              	 .cfi_offset 7,-4
 6670 0002 89B0     	 sub sp,sp,#36
 6671              	.LCFI233:
 6672              	 .cfi_def_cfa_offset 40
 6673 0004 00AF     	 add r7,sp,#0
 6674              	.LCFI234:
 6675              	 .cfi_def_cfa_register 7
 6676 0006 7860     	 str r0,[r7,#4]
3105:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *tp, *tt;
3106:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR tc;
3107:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int i, vol = -1;
 6677              	 .loc 1 3107 0
 6678 0008 4FF0FF33 	 mov r3,#-1
 6679 000c 7B61     	 str r3,[r7,#20]
3108:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
3109:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const char *sp;
3110:../Dave/Generated/FATFS/ff_Src/ff.c **** 	char c;
3111:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3112:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3113:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tt = tp = *path;
 6680              	 .loc 1 3113 0
 6681 000e 7B68     	 ldr r3,[r7,#4]
 6682 0010 1B68     	 ldr r3,[r3]
 6683 0012 3B61     	 str r3,[r7,#16]
 6684 0014 3B69     	 ldr r3,[r7,#16]
 6685 0016 FB61     	 str r3,[r7,#28]
3114:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!tp) return vol;	/* Invalid path name? */
 6686              	 .loc 1 3114 0
 6687 0018 3B69     	 ldr r3,[r7,#16]
 6688 001a 002B     	 cmp r3,#0
 6689 001c 01D1     	 bne .L441
 6690              	 .loc 1 3114 0 is_stmt 0 discriminator 1
 6691 001e 7B69     	 ldr r3,[r7,#20]
 6692 0020 2EE0     	 b .L442
 6693              	.L441:
3115:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the p
 6694              	 .loc 1 3115 0 is_stmt 1 discriminator 2
 6695 0022 FB69     	 ldr r3,[r7,#28]
 6696 0024 5A1C     	 adds r2,r3,#1
 6697 0026 FA61     	 str r2,[r7,#28]
 6698 0028 1B78     	 ldrb r3,[r3]
 6699 002a FB73     	 strb r3,[r7,#15]
 6700 002c FB7B     	 ldrb r3,[r7,#15]
 6701 002e 1F2B     	 cmp r3,#31
 6702 0030 02D9     	 bls .L443
 6703              	 .loc 1 3115 0 is_stmt 0 discriminator 1
 6704 0032 FB7B     	 ldrb r3,[r7,#15]
 6705 0034 3A2B     	 cmp r3,#58
 6706 0036 F4D1     	 bne .L441
 6707              	.L443:
3116:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3117:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (tc == ':') {	/* DOS/Windows style volume ID? */
 6708              	 .loc 1 3117 0 is_stmt 1
 6709 0038 FB7B     	 ldrb r3,[r7,#15]
 6710 003a 3A2B     	 cmp r3,#58
 6711 003c 1CD1     	 bne .L444
3118:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = FF_VOLUMES;
 6712              	 .loc 1 3118 0
 6713 003e 0123     	 movs r3,#1
 6714 0040 BB61     	 str r3,[r7,#24]
3119:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 6715              	 .loc 1 3119 0
 6716 0042 3B69     	 ldr r3,[r7,#16]
 6717 0044 1B78     	 ldrb r3,[r3]
 6718 0046 2F2B     	 cmp r3,#47
 6719 0048 0CD9     	 bls .L445
 6720              	 .loc 1 3119 0 is_stmt 0 discriminator 1
 6721 004a 3B69     	 ldr r3,[r7,#16]
 6722 004c 1B78     	 ldrb r3,[r3]
 6723 004e 392B     	 cmp r3,#57
 6724 0050 08D8     	 bhi .L445
 6725              	 .loc 1 3119 0 discriminator 2
 6726 0052 3B69     	 ldr r3,[r7,#16]
 6727 0054 9A1C     	 adds r2,r3,#2
 6728 0056 FB69     	 ldr r3,[r7,#28]
 6729 0058 9A42     	 cmp r2,r3
 6730 005a 03D1     	 bne .L445
3120:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = (int)*tp - '0';	/* Get the LD number */
 6731              	 .loc 1 3120 0 is_stmt 1
 6732 005c 3B69     	 ldr r3,[r7,#16]
 6733 005e 1B78     	 ldrb r3,[r3]
 6734 0060 303B     	 subs r3,r3,#48
 6735 0062 BB61     	 str r3,[r7,#24]
 6736              	.L445:
3121:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3122:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
3123:../Dave/Generated/FATFS/ff_Src/ff.c **** 		else {
3124:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = 0;
3125:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {
3126:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
3127:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {	/* Compare the volume ID with path name */
3128:../Dave/Generated/FATFS/ff_Src/ff.c **** 					c = *sp++; tc = *tp++;
3129:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (IsLower(c)) c -= 0x20;
3130:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (IsLower(tc)) tc -= 0x20;
3131:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (c && (TCHAR)c == tc);
3132:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
3133:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3134:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3135:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 6737              	 .loc 1 3135 0
 6738 0064 BB69     	 ldr r3,[r7,#24]
 6739 0066 002B     	 cmp r3,#0
 6740 0068 04D1     	 bne .L446
3136:../Dave/Generated/FATFS/ff_Src/ff.c **** 			vol = i;		/* Drive number */
 6741              	 .loc 1 3136 0
 6742 006a BB69     	 ldr r3,[r7,#24]
 6743 006c 7B61     	 str r3,[r7,#20]
3137:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*path = tt;		/* Snip the drive prefix off */
 6744              	 .loc 1 3137 0
 6745 006e 7B68     	 ldr r3,[r7,#4]
 6746 0070 FA69     	 ldr r2,[r7,#28]
 6747 0072 1A60     	 str r2,[r3]
 6748              	.L446:
3138:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3139:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return vol;
 6749              	 .loc 1 3139 0
 6750 0074 7B69     	 ldr r3,[r7,#20]
 6751 0076 03E0     	 b .L442
 6752              	.L444:
3140:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3141:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
3142:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (*tp == '/') {
3143:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = 0;
3144:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
3145:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
3146:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {	/* Compare the volume ID with path name */
3147:../Dave/Generated/FATFS/ff_Src/ff.c **** 				c = *sp++; tc = *(++tp);
3148:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsLower(c)) c -= 0x20;
3149:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsLower(tc)) tc -= 0x20;
3150:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (c && (TCHAR)c == tc);
3151:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while ((c || (tc != '/' && (UINT)tc >= (FF_USE_LFN ? ' ' : '!'))) && ++i < FF_VOLUMES);	/* Repe
3152:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
3153:../Dave/Generated/FATFS/ff_Src/ff.c **** 			vol = i;		/* Drive number */
3154:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*path = tp;		/* Snip the drive prefix off */
3155:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return vol;
3156:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3157:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3158:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3159:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* No drive prefix is found */
3160:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3161:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = CurrVol;	/* Default drive is current drive */
 6753              	 .loc 1 3161 0
 6754 0078 044B     	 ldr r3,.L447
 6755 007a 1B78     	 ldrb r3,[r3]
 6756 007c 7B61     	 str r3,[r7,#20]
3162:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3163:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = 0;		/* Default drive is 0 */
3164:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3165:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return vol;		/* Return the default drive */
 6757              	 .loc 1 3165 0
 6758 007e 7B69     	 ldr r3,[r7,#20]
 6759              	.L442:
3166:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 6760              	 .loc 1 3166 0
 6761 0080 1846     	 mov r0,r3
 6762 0082 2437     	 adds r7,r7,#36
 6763              	.LCFI235:
 6764              	 .cfi_def_cfa_offset 4
 6765 0084 BD46     	 mov sp,r7
 6766              	.LCFI236:
 6767              	 .cfi_def_cfa_register 13
 6768              	 
 6769 0086 5DF8047B 	 ldr r7,[sp],#4
 6770              	.LCFI237:
 6771              	 .cfi_restore 7
 6772              	 .cfi_def_cfa_offset 0
 6773 008a 7047     	 bx lr
 6774              	.L448:
 6775              	 .align 2
 6776              	.L447:
 6777 008c 00000000 	 .word CurrVol
 6778              	 .cfi_endproc
 6779              	.LFE43:
 6781              	 .section .rodata
 6782 0013 00       	 .align 2
 6783              	.LC2:
 6784 0014 46415400 	 .ascii "FAT\000"
 6785              	 .align 2
 6786              	.LC3:
 6787 0018 46415433 	 .ascii "FAT32\000"
 6787      3200
 6788 001e 0000     	 .section .text.check_fs,"ax",%progbits
 6789              	 .align 2
 6790              	 .thumb
 6791              	 .thumb_func
 6793              	check_fs:
 6794              	.LFB44:
3167:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3168:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3169:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3170:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3171:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3172:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Load a sector and check if it is an FAT VBR                           */
3173:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3174:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3175:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
3176:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Filesystem object */
3177:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
3178:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3179:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 6795              	 .loc 1 3179 0
 6796              	 .cfi_startproc
 6797              	 
 6798              	 
 6799 0000 80B5     	 push {r7,lr}
 6800              	.LCFI238:
 6801              	 .cfi_def_cfa_offset 8
 6802              	 .cfi_offset 7,-8
 6803              	 .cfi_offset 14,-4
 6804 0002 82B0     	 sub sp,sp,#8
 6805              	.LCFI239:
 6806              	 .cfi_def_cfa_offset 16
 6807 0004 00AF     	 add r7,sp,#0
 6808              	.LCFI240:
 6809              	 .cfi_def_cfa_register 7
 6810 0006 7860     	 str r0,[r7,#4]
 6811 0008 3960     	 str r1,[r7]
3180:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 6812              	 .loc 1 3180 0
 6813 000a 7B68     	 ldr r3,[r7,#4]
 6814 000c 0022     	 movs r2,#0
 6815 000e DA70     	 strb r2,[r3,#3]
 6816 0010 7B68     	 ldr r3,[r7,#4]
 6817 0012 4FF0FF32 	 mov r2,#-1
 6818 0016 5A63     	 str r2,[r3,#52]
3181:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 6819              	 .loc 1 3181 0
 6820 0018 7868     	 ldr r0,[r7,#4]
 6821 001a 3968     	 ldr r1,[r7]
 6822 001c FFF7FEFF 	 bl move_window
 6823 0020 0346     	 mov r3,r0
 6824 0022 002B     	 cmp r3,#0
 6825 0024 01D0     	 beq .L450
 6826              	 .loc 1 3181 0 is_stmt 0 discriminator 1
 6827 0026 0423     	 movs r3,#4
 6828 0028 35E0     	 b .L451
 6829              	.L450:
3182:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3183:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here re
 6830              	 .loc 1 3183 0 is_stmt 1
 6831 002a 7B68     	 ldr r3,[r7,#4]
 6832 002c 03F23623 	 addw r3,r3,#566
 6833 0030 1846     	 mov r0,r3
 6834 0032 FFF7FEFF 	 bl ld_word
 6835 0036 0346     	 mov r3,r0
 6836 0038 1A46     	 mov r2,r3
 6837 003a 4AF65523 	 movw r3,#43605
 6838 003e 9A42     	 cmp r2,r3
 6839 0040 01D0     	 beq .L452
 6840              	 .loc 1 3183 0 is_stmt 0 discriminator 1
 6841 0042 0323     	 movs r3,#3
 6842 0044 27E0     	 b .L451
 6843              	.L452:
3184:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3185:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3186:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR
3187:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3188:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/
 6844              	 .loc 1 3188 0 is_stmt 1
 6845 0046 7B68     	 ldr r3,[r7,#4]
 6846 0048 93F83830 	 ldrb r3,[r3,#56]
 6847 004c E92B     	 cmp r3,#233
 6848 004e 09D0     	 beq .L453
 6849              	 .loc 1 3188 0 is_stmt 0 discriminator 1
 6850 0050 7B68     	 ldr r3,[r7,#4]
 6851 0052 93F83830 	 ldrb r3,[r3,#56]
 6852 0056 EB2B     	 cmp r3,#235
 6853 0058 04D0     	 beq .L453
 6854              	 .loc 1 3188 0 discriminator 2
 6855 005a 7B68     	 ldr r3,[r7,#4]
 6856 005c 93F83830 	 ldrb r3,[r3,#56]
 6857 0060 E82B     	 cmp r3,#232
 6858 0062 17D1     	 bne .L454
 6859              	.L453:
3189:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 6860              	 .loc 1 3189 0 is_stmt 1
 6861 0064 7B68     	 ldr r3,[r7,#4]
 6862 0066 6E33     	 adds r3,r3,#110
 6863 0068 1846     	 mov r0,r3
 6864 006a 0D49     	 ldr r1,.L456
 6865 006c 0322     	 movs r2,#3
 6866 006e FFF7FEFF 	 bl mem_cmp
 6867 0072 0346     	 mov r3,r0
 6868 0074 002B     	 cmp r3,#0
 6869 0076 01D1     	 bne .L455
 6870              	 .loc 1 3189 0 is_stmt 0 discriminator 1
 6871 0078 0023     	 movs r3,#0
 6872 007a 0CE0     	 b .L451
 6873              	.L455:
3190:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 6874              	 .loc 1 3190 0 is_stmt 1
 6875 007c 7B68     	 ldr r3,[r7,#4]
 6876 007e 8A33     	 adds r3,r3,#138
 6877 0080 1846     	 mov r0,r3
 6878 0082 0849     	 ldr r1,.L456+4
 6879 0084 0522     	 movs r2,#5
 6880 0086 FFF7FEFF 	 bl mem_cmp
 6881 008a 0346     	 mov r3,r0
 6882 008c 002B     	 cmp r3,#0
 6883 008e 01D1     	 bne .L454
 6884              	 .loc 1 3190 0 is_stmt 0 discriminator 1
 6885 0090 0023     	 movs r3,#0
 6886 0092 00E0     	 b .L451
 6887              	.L454:
3191:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3192:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 2;	/* Valid BS but not FAT */
 6888              	 .loc 1 3192 0 is_stmt 1
 6889 0094 0223     	 movs r3,#2
 6890              	.L451:
3193:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 6891              	 .loc 1 3193 0
 6892 0096 1846     	 mov r0,r3
 6893 0098 0837     	 adds r7,r7,#8
 6894              	.LCFI241:
 6895              	 .cfi_def_cfa_offset 8
 6896 009a BD46     	 mov sp,r7
 6897              	.LCFI242:
 6898              	 .cfi_def_cfa_register 13
 6899              	 
 6900 009c 80BD     	 pop {r7,pc}
 6901              	.L457:
 6902 009e 00BF     	 .align 2
 6903              	.L456:
 6904 00a0 14000000 	 .word .LC2
 6905 00a4 18000000 	 .word .LC3
 6906              	 .cfi_endproc
 6907              	.LFE44:
 6909              	 .section .text.find_volume,"ax",%progbits
 6910              	 .align 2
 6911              	 .thumb
 6912              	 .thumb_func
 6914              	find_volume:
 6915              	.LFB45:
3194:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3195:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3196:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3197:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3198:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3199:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Determine logical drive number and mount the volume if needed         */
3200:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3201:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3202:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
3203:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
3204:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
3205:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE mode					/* !=0: Check write protection for write access */
3206:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3207:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 6916              	 .loc 1 3207 0
 6917              	 .cfi_startproc
 6918              	 
 6919              	 
 6920 0000 80B5     	 push {r7,lr}
 6921              	.LCFI243:
 6922              	 .cfi_def_cfa_offset 8
 6923              	 .cfi_offset 7,-8
 6924              	 .cfi_offset 14,-4
 6925 0002 96B0     	 sub sp,sp,#88
 6926              	.LCFI244:
 6927              	 .cfi_def_cfa_offset 96
 6928 0004 00AF     	 add r7,sp,#0
 6929              	.LCFI245:
 6930              	 .cfi_def_cfa_register 7
 6931 0006 F860     	 str r0,[r7,#12]
 6932 0008 B960     	 str r1,[r7,#8]
 6933 000a 1346     	 mov r3,r2
 6934 000c FB71     	 strb r3,[r7,#7]
3208:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE fmt, *pt;
3209:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
3210:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DSTATUS stat;
3211:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
3212:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD nrsv;
3213:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3214:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
3215:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3216:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3217:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
3218:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*rfs = 0;
 6935              	 .loc 1 3218 0
 6936 000e BB68     	 ldr r3,[r7,#8]
 6937 0010 0022     	 movs r2,#0
 6938 0012 1A60     	 str r2,[r3]
3219:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(path);
 6939              	 .loc 1 3219 0
 6940 0014 F868     	 ldr r0,[r7,#12]
 6941 0016 FFF7FEFF 	 bl get_ldnumber
 6942 001a F863     	 str r0,[r7,#60]
3220:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 6943              	 .loc 1 3220 0
 6944 001c FB6B     	 ldr r3,[r7,#60]
 6945 001e 002B     	 cmp r3,#0
 6946 0020 01DA     	 bge .L459
 6947              	 .loc 1 3220 0 is_stmt 0 discriminator 1
 6948 0022 0B23     	 movs r3,#11
 6949 0024 29E2     	 b .L499
 6950              	.L459:
3221:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3222:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check if the filesystem object is valid or not */
3223:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 6951              	 .loc 1 3223 0 is_stmt 1
 6952 0026 A44A     	 ldr r2,.L500
 6953 0028 FB6B     	 ldr r3,[r7,#60]
 6954 002a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 6955 002e BB63     	 str r3,[r7,#56]
3224:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 6956              	 .loc 1 3224 0
 6957 0030 BB6B     	 ldr r3,[r7,#56]
 6958 0032 002B     	 cmp r3,#0
 6959 0034 01D1     	 bne .L461
 6960              	 .loc 1 3224 0 is_stmt 0 discriminator 1
 6961 0036 0C23     	 movs r3,#12
 6962 0038 1FE2     	 b .L499
 6963              	.L461:
3225:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
3226:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
3227:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3228:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*rfs = fs;							/* Return pointer to the filesystem object */
 6964              	 .loc 1 3228 0 is_stmt 1
 6965 003a BB68     	 ldr r3,[r7,#8]
 6966 003c BA6B     	 ldr r2,[r7,#56]
 6967 003e 1A60     	 str r2,[r3]
3229:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3230:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 6968              	 .loc 1 3230 0
 6969 0040 FB79     	 ldrb r3,[r7,#7]
 6970 0042 23F00103 	 bic r3,r3,#1
 6971 0046 FB71     	 strb r3,[r7,#7]
3231:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 6972              	 .loc 1 3231 0
 6973 0048 BB6B     	 ldr r3,[r7,#56]
 6974 004a 1B78     	 ldrb r3,[r3]
 6975 004c 002B     	 cmp r3,#0
 6976 004e 1AD0     	 beq .L462
3232:../Dave/Generated/FATFS/ff_Src/ff.c **** 		stat = disk_status(fs->pdrv);
 6977              	 .loc 1 3232 0
 6978 0050 BB6B     	 ldr r3,[r7,#56]
 6979 0052 5B78     	 ldrb r3,[r3,#1]
 6980 0054 1846     	 mov r0,r3
 6981 0056 FFF7FEFF 	 bl disk_status
 6982 005a 0346     	 mov r3,r0
 6983 005c 87F83730 	 strb r3,[r7,#55]
3233:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 6984              	 .loc 1 3233 0
 6985 0060 97F83730 	 ldrb r3,[r7,#55]
 6986 0064 03F00103 	 and r3,r3,#1
 6987 0068 002B     	 cmp r3,#0
 6988 006a 0CD1     	 bne .L462
3234:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 6989              	 .loc 1 3234 0
 6990 006c FB79     	 ldrb r3,[r7,#7]
 6991 006e 002B     	 cmp r3,#0
 6992 0070 07D0     	 beq .L463
 6993              	 .loc 1 3234 0 is_stmt 0 discriminator 1
 6994 0072 97F83730 	 ldrb r3,[r7,#55]
 6995 0076 03F00403 	 and r3,r3,#4
 6996 007a 002B     	 cmp r3,#0
 6997 007c 01D0     	 beq .L463
3235:../Dave/Generated/FATFS/ff_Src/ff.c **** 				return FR_WRITE_PROTECTED;
 6998              	 .loc 1 3235 0 is_stmt 1
 6999 007e 0A23     	 movs r3,#10
 7000 0080 FBE1     	 b .L499
 7001              	.L463:
3236:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3237:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return FR_OK;				/* The filesystem object is valid */
 7002              	 .loc 1 3237 0
 7003 0082 0023     	 movs r3,#0
 7004 0084 F9E1     	 b .L499
 7005              	.L462:
3238:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3239:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3240:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3241:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* The filesystem object is not valid. */
3242:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object)
3243:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3244:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->fs_type = 0;					/* Clear the filesystem object */
 7006              	 .loc 1 3244 0
 7007 0086 BB6B     	 ldr r3,[r7,#56]
 7008 0088 0022     	 movs r2,#0
 7009 008a 1A70     	 strb r2,[r3]
3245:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 7010              	 .loc 1 3245 0
 7011 008c FB6B     	 ldr r3,[r7,#60]
 7012 008e DAB2     	 uxtb r2,r3
 7013 0090 BB6B     	 ldr r3,[r7,#56]
 7014 0092 5A70     	 strb r2,[r3,#1]
3246:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 7015              	 .loc 1 3246 0
 7016 0094 BB6B     	 ldr r3,[r7,#56]
 7017 0096 5B78     	 ldrb r3,[r3,#1]
 7018 0098 1846     	 mov r0,r3
 7019 009a FFF7FEFF 	 bl disk_initialize
 7020 009e 0346     	 mov r3,r0
 7021 00a0 87F83730 	 strb r3,[r7,#55]
3247:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 7022              	 .loc 1 3247 0
 7023 00a4 97F83730 	 ldrb r3,[r7,#55]
 7024 00a8 03F00103 	 and r3,r3,#1
 7025 00ac 002B     	 cmp r3,#0
 7026 00ae 01D0     	 beq .L464
3248:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 7027              	 .loc 1 3248 0
 7028 00b0 0323     	 movs r3,#3
 7029 00b2 E2E1     	 b .L499
 7030              	.L464:
3249:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3250:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 7031              	 .loc 1 3250 0
 7032 00b4 FB79     	 ldrb r3,[r7,#7]
 7033 00b6 002B     	 cmp r3,#0
 7034 00b8 07D0     	 beq .L465
 7035              	 .loc 1 3250 0 is_stmt 0 discriminator 1
 7036 00ba 97F83730 	 ldrb r3,[r7,#55]
 7037 00be 03F00403 	 and r3,r3,#4
 7038 00c2 002B     	 cmp r3,#0
 7039 00c4 01D0     	 beq .L465
3251:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_WRITE_PROTECTED;
 7040              	 .loc 1 3251 0 is_stmt 1
 7041 00c6 0A23     	 movs r3,#10
 7042 00c8 D7E1     	 b .L499
 7043              	.L465:
3252:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3253:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
3254:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
3255:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
3256:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3257:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3258:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
3259:../Dave/Generated/FATFS/ff_Src/ff.c **** 	bsect = 0;
 7044              	 .loc 1 3259 0
 7045 00ca 0023     	 movs r3,#0
 7046 00cc 3B65     	 str r3,[r7,#80]
3260:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 7047              	 .loc 1 3260 0
 7048 00ce B86B     	 ldr r0,[r7,#56]
 7049 00d0 396D     	 ldr r1,[r7,#80]
 7050 00d2 FFF7FEFF 	 bl check_fs
 7051 00d6 0346     	 mov r3,r0
 7052 00d8 87F85730 	 strb r3,[r7,#87]
3261:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 7053              	 .loc 1 3261 0
 7054 00dc 97F85730 	 ldrb r3,[r7,#87]
 7055 00e0 022B     	 cmp r3,#2
 7056 00e2 4AD1     	 bne .L466
3262:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 7057              	 .loc 1 3262 0
 7058 00e4 0023     	 movs r3,#0
 7059 00e6 3B64     	 str r3,[r7,#64]
 7060 00e8 1EE0     	 b .L467
 7061              	.L470:
3263:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 7062              	 .loc 1 3263 0
 7063 00ea 3B6C     	 ldr r3,[r7,#64]
 7064 00ec 1B01     	 lsls r3,r3,#4
 7065 00ee 03F5DF73 	 add r3,r3,#446
 7066 00f2 3833     	 adds r3,r3,#56
 7067 00f4 BA6B     	 ldr r2,[r7,#56]
 7068 00f6 1344     	 add r3,r3,r2
 7069 00f8 3B63     	 str r3,[r7,#48]
3264:../Dave/Generated/FATFS/ff_Src/ff.c **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 7070              	 .loc 1 3264 0
 7071 00fa 3B6B     	 ldr r3,[r7,#48]
 7072 00fc 0433     	 adds r3,r3,#4
 7073 00fe 1B78     	 ldrb r3,[r3]
 7074 0100 002B     	 cmp r3,#0
 7075 0102 06D0     	 beq .L468
 7076              	 .loc 1 3264 0 is_stmt 0 discriminator 1
 7077 0104 3B6B     	 ldr r3,[r7,#48]
 7078 0106 0833     	 adds r3,r3,#8
 7079 0108 1846     	 mov r0,r3
 7080 010a FFF7FEFF 	 bl ld_dword
 7081 010e 0246     	 mov r2,r0
 7082 0110 00E0     	 b .L469
 7083              	.L468:
 7084              	 .loc 1 3264 0 discriminator 2
 7085 0112 0022     	 movs r2,#0
 7086              	.L469:
 7087              	 .loc 1 3264 0 discriminator 4
 7088 0114 3B6C     	 ldr r3,[r7,#64]
 7089 0116 9B00     	 lsls r3,r3,#2
 7090 0118 07F15801 	 add r1,r7,#88
 7091 011c 0B44     	 add r3,r3,r1
 7092 011e 43F8442C 	 str r2,[r3,#-68]
3262:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 7093              	 .loc 1 3262 0 is_stmt 1 discriminator 4
 7094 0122 3B6C     	 ldr r3,[r7,#64]
 7095 0124 0133     	 adds r3,r3,#1
 7096 0126 3B64     	 str r3,[r7,#64]
 7097              	.L467:
3262:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 7098              	 .loc 1 3262 0 is_stmt 0 discriminator 2
 7099 0128 3B6C     	 ldr r3,[r7,#64]
 7100 012a 032B     	 cmp r3,#3
 7101 012c DDD9     	 bls .L470
3265:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3266:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 7102              	 .loc 1 3266 0 is_stmt 1
 7103 012e 0023     	 movs r3,#0
 7104 0130 3B64     	 str r3,[r7,#64]
3267:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i != 0) i--;
 7105              	 .loc 1 3267 0
 7106 0132 3B6C     	 ldr r3,[r7,#64]
 7107 0134 002B     	 cmp r3,#0
 7108 0136 02D0     	 beq .L471
 7109              	 .loc 1 3267 0 is_stmt 0 discriminator 1
 7110 0138 3B6C     	 ldr r3,[r7,#64]
 7111 013a 013B     	 subs r3,r3,#1
 7112 013c 3B64     	 str r3,[r7,#64]
 7113              	.L471:
3268:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {							/* Find an FAT volume */
3269:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bsect = br[i];
 7114              	 .loc 1 3269 0 is_stmt 1
 7115 013e 3B6C     	 ldr r3,[r7,#64]
 7116 0140 9B00     	 lsls r3,r3,#2
 7117 0142 07F15802 	 add r2,r7,#88
 7118 0146 1344     	 add r3,r3,r2
 7119 0148 53F8443C 	 ldr r3,[r3,#-68]
 7120 014c 3B65     	 str r3,[r7,#80]
3270:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 7121              	 .loc 1 3270 0
 7122 014e 3B6D     	 ldr r3,[r7,#80]
 7123 0150 002B     	 cmp r3,#0
 7124 0152 05D0     	 beq .L472
 7125              	 .loc 1 3270 0 is_stmt 0 discriminator 1
 7126 0154 B86B     	 ldr r0,[r7,#56]
 7127 0156 396D     	 ldr r1,[r7,#80]
 7128 0158 FFF7FEFF 	 bl check_fs
 7129 015c 0346     	 mov r3,r0
 7130 015e 00E0     	 b .L473
 7131              	.L472:
 7132              	 .loc 1 3270 0 discriminator 2
 7133 0160 0323     	 movs r3,#3
 7134              	.L473:
 7135              	 .loc 1 3270 0 discriminator 4
 7136 0162 87F85730 	 strb r3,[r7,#87]
3271:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 7137              	 .loc 1 3271 0 is_stmt 1 discriminator 4
 7138 0166 97F85730 	 ldrb r3,[r7,#87]
 7139 016a 012B     	 cmp r3,#1
 7140 016c 05D9     	 bls .L466
 7141              	 .loc 1 3271 0 is_stmt 0 discriminator 1
 7142 016e 3B6C     	 ldr r3,[r7,#64]
 7143 0170 0133     	 adds r3,r3,#1
 7144 0172 3B64     	 str r3,[r7,#64]
 7145 0174 3B6C     	 ldr r3,[r7,#64]
 7146 0176 032B     	 cmp r3,#3
 7147 0178 E1D9     	 bls .L471
 7148              	.L466:
3272:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3273:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 7149              	 .loc 1 3273 0 is_stmt 1
 7150 017a 97F85730 	 ldrb r3,[r7,#87]
 7151 017e 042B     	 cmp r3,#4
 7152 0180 01D1     	 bne .L474
 7153              	 .loc 1 3273 0 is_stmt 0 discriminator 1
 7154 0182 0123     	 movs r3,#1
 7155 0184 79E1     	 b .L499
 7156              	.L474:
3274:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 7157              	 .loc 1 3274 0 is_stmt 1
 7158 0186 97F85730 	 ldrb r3,[r7,#87]
 7159 018a 012B     	 cmp r3,#1
 7160 018c 01D9     	 bls .L475
 7161              	 .loc 1 3274 0 is_stmt 0 discriminator 1
 7162 018e 0D23     	 movs r3,#13
 7163 0190 73E1     	 b .L499
 7164              	.L475:
3275:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3276:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* An FAT volume is found (bsect). Following code initializes the filesystem object */
3277:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3278:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3279:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt == 1) {
3280:../Dave/Generated/FATFS/ff_Src/ff.c **** 		QWORD maxlba;
3281:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3282:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3283:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3284:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3285:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (mus
3286:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3287:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physica
3288:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return FR_NO_FILESYSTEM;
3289:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3290:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3291:../Dave/Generated/FATFS/ff_Src/ff.c **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
3292:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
3293:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3294:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3295:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3296:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3297:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3298:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3299:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3300:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
3301:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3302:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3303:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3304:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fatent = nclst + 2;
3305:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3306:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Boundaries and Limits */
3307:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->volbase = bsect;
3308:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3309:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3310:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3311:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3312:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3313:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Check if bitmap location is in assumption (at the first cluster) */
3314:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
3315:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < SS(fs); i += SZDIRE) {
3316:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? *
3317:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3318:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i == SS(fs)) return FR_NO_FILESYSTEM;
3319:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3320:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3321:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3322:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3323:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
3324:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT */
3325:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
3326:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
 7165              	 .loc 1 3326 0 is_stmt 1
 7166 0192 BB6B     	 ldr r3,[r7,#56]
 7167 0194 4333     	 adds r3,r3,#67
 7168 0196 1846     	 mov r0,r3
 7169 0198 FFF7FEFF 	 bl ld_word
 7170 019c 0346     	 mov r3,r0
 7171 019e B3F5007F 	 cmp r3,#512
 7172 01a2 01D0     	 beq .L476
 7173              	 .loc 1 3326 0 is_stmt 0 discriminator 1
 7174 01a4 0D23     	 movs r3,#13
 7175 01a6 68E1     	 b .L499
 7176              	.L476:
3327:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3328:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 7177              	 .loc 1 3328 0 is_stmt 1
 7178 01a8 BB6B     	 ldr r3,[r7,#56]
 7179 01aa 4E33     	 adds r3,r3,#78
 7180 01ac 1846     	 mov r0,r3
 7181 01ae FFF7FEFF 	 bl ld_word
 7182 01b2 0346     	 mov r3,r0
 7183 01b4 FB64     	 str r3,[r7,#76]
3329:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 7184              	 .loc 1 3329 0
 7185 01b6 FB6C     	 ldr r3,[r7,#76]
 7186 01b8 002B     	 cmp r3,#0
 7187 01ba 05D1     	 bne .L477
 7188              	 .loc 1 3329 0 is_stmt 0 discriminator 1
 7189 01bc BB6B     	 ldr r3,[r7,#56]
 7190 01be 5C33     	 adds r3,r3,#92
 7191 01c0 1846     	 mov r0,r3
 7192 01c2 FFF7FEFF 	 bl ld_dword
 7193 01c6 F864     	 str r0,[r7,#76]
 7194              	.L477:
3330:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsize = fasize;
 7195              	 .loc 1 3330 0 is_stmt 1
 7196 01c8 BB6B     	 ldr r3,[r7,#56]
 7197 01ca FA6C     	 ldr r2,[r7,#76]
 7198 01cc 1A62     	 str r2,[r3,#32]
3331:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3332:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 7199              	 .loc 1 3332 0
 7200 01ce BB6B     	 ldr r3,[r7,#56]
 7201 01d0 93F84820 	 ldrb r2,[r3,#72]
 7202 01d4 BB6B     	 ldr r3,[r7,#56]
 7203 01d6 9A70     	 strb r2,[r3,#2]
3333:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 7204              	 .loc 1 3333 0
 7205 01d8 BB6B     	 ldr r3,[r7,#56]
 7206 01da 9B78     	 ldrb r3,[r3,#2]
 7207 01dc 012B     	 cmp r3,#1
 7208 01de 05D0     	 beq .L478
 7209              	 .loc 1 3333 0 is_stmt 0 discriminator 1
 7210 01e0 BB6B     	 ldr r3,[r7,#56]
 7211 01e2 9B78     	 ldrb r3,[r3,#2]
 7212 01e4 022B     	 cmp r3,#2
 7213 01e6 01D0     	 beq .L478
 7214              	 .loc 1 3333 0 discriminator 2
 7215 01e8 0D23     	 movs r3,#13
 7216 01ea 46E1     	 b .L499
 7217              	.L478:
3334:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 7218              	 .loc 1 3334 0 is_stmt 1
 7219 01ec BB6B     	 ldr r3,[r7,#56]
 7220 01ee 9B78     	 ldrb r3,[r3,#2]
 7221 01f0 1A46     	 mov r2,r3
 7222 01f2 FB6C     	 ldr r3,[r7,#76]
 7223 01f4 02FB03F3 	 mul r3,r2,r3
 7224 01f8 FB64     	 str r3,[r7,#76]
3335:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3336:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 7225              	 .loc 1 3336 0
 7226 01fa BB6B     	 ldr r3,[r7,#56]
 7227 01fc 93F84530 	 ldrb r3,[r3,#69]
 7228 0200 9AB2     	 uxth r2,r3
 7229 0202 BB6B     	 ldr r3,[r7,#56]
 7230 0204 5A81     	 strh r2,[r3,#10]
3337:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 7231              	 .loc 1 3337 0
 7232 0206 BB6B     	 ldr r3,[r7,#56]
 7233 0208 5B89     	 ldrh r3,[r3,#10]
 7234 020a 002B     	 cmp r3,#0
 7235 020c 08D0     	 beq .L479
 7236              	 .loc 1 3337 0 is_stmt 0 discriminator 2
 7237 020e BB6B     	 ldr r3,[r7,#56]
 7238 0210 5B89     	 ldrh r3,[r3,#10]
 7239 0212 1A46     	 mov r2,r3
 7240 0214 BB6B     	 ldr r3,[r7,#56]
 7241 0216 5B89     	 ldrh r3,[r3,#10]
 7242 0218 013B     	 subs r3,r3,#1
 7243 021a 1340     	 ands r3,r3,r2
 7244 021c 002B     	 cmp r3,#0
 7245 021e 01D0     	 beq .L480
 7246              	.L479:
 7247              	 .loc 1 3337 0 discriminator 3
 7248 0220 0D23     	 movs r3,#13
 7249 0222 2AE1     	 b .L499
 7250              	.L480:
3338:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3339:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 7251              	 .loc 1 3339 0 is_stmt 1
 7252 0224 BB6B     	 ldr r3,[r7,#56]
 7253 0226 4933     	 adds r3,r3,#73
 7254 0228 1846     	 mov r0,r3
 7255 022a FFF7FEFF 	 bl ld_word
 7256 022e 0346     	 mov r3,r0
 7257 0230 1A46     	 mov r2,r3
 7258 0232 BB6B     	 ldr r3,[r7,#56]
 7259 0234 1A81     	 strh r2,[r3,#8]
3340:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 7260              	 .loc 1 3340 0
 7261 0236 BB6B     	 ldr r3,[r7,#56]
 7262 0238 1B89     	 ldrh r3,[r3,#8]
 7263 023a 03F00F03 	 and r3,r3,#15
 7264 023e 9BB2     	 uxth r3,r3
 7265 0240 002B     	 cmp r3,#0
 7266 0242 01D0     	 beq .L481
 7267              	 .loc 1 3340 0 is_stmt 0 discriminator 1
 7268 0244 0D23     	 movs r3,#13
 7269 0246 18E1     	 b .L499
 7270              	.L481:
3341:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3342:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 7271              	 .loc 1 3342 0 is_stmt 1
 7272 0248 BB6B     	 ldr r3,[r7,#56]
 7273 024a 4B33     	 adds r3,r3,#75
 7274 024c 1846     	 mov r0,r3
 7275 024e FFF7FEFF 	 bl ld_word
 7276 0252 0346     	 mov r3,r0
 7277 0254 BB64     	 str r3,[r7,#72]
3343:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 7278              	 .loc 1 3343 0
 7279 0256 BB6C     	 ldr r3,[r7,#72]
 7280 0258 002B     	 cmp r3,#0
 7281 025a 05D1     	 bne .L482
 7282              	 .loc 1 3343 0 is_stmt 0 discriminator 1
 7283 025c BB6B     	 ldr r3,[r7,#56]
 7284 025e 5833     	 adds r3,r3,#88
 7285 0260 1846     	 mov r0,r3
 7286 0262 FFF7FEFF 	 bl ld_dword
 7287 0266 B864     	 str r0,[r7,#72]
 7288              	.L482:
3344:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3345:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 7289              	 .loc 1 3345 0 is_stmt 1
 7290 0268 BB6B     	 ldr r3,[r7,#56]
 7291 026a 4633     	 adds r3,r3,#70
 7292 026c 1846     	 mov r0,r3
 7293 026e FFF7FEFF 	 bl ld_word
 7294 0272 0346     	 mov r3,r0
 7295 0274 FB85     	 strh r3,[r7,#46]
3346:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 7296              	 .loc 1 3346 0
 7297 0276 FB8D     	 ldrh r3,[r7,#46]
 7298 0278 002B     	 cmp r3,#0
 7299 027a 01D1     	 bne .L483
 7300              	 .loc 1 3346 0 is_stmt 0 discriminator 1
 7301 027c 0D23     	 movs r3,#13
 7302 027e FCE0     	 b .L499
 7303              	.L483:
3347:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3348:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Determine the FAT sub type */
3349:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 7304              	 .loc 1 3349 0 is_stmt 1
 7305 0280 FA8D     	 ldrh r2,[r7,#46]
 7306 0282 FB6C     	 ldr r3,[r7,#76]
 7307 0284 1344     	 add r3,r3,r2
 7308 0286 BA6B     	 ldr r2,[r7,#56]
 7309 0288 1289     	 ldrh r2,[r2,#8]
 7310 028a 1209     	 lsrs r2,r2,#4
 7311 028c 92B2     	 uxth r2,r2
 7312 028e 1344     	 add r3,r3,r2
 7313 0290 BB62     	 str r3,[r7,#40]
3350:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 7314              	 .loc 1 3350 0
 7315 0292 BA6C     	 ldr r2,[r7,#72]
 7316 0294 BB6A     	 ldr r3,[r7,#40]
 7317 0296 9A42     	 cmp r2,r3
 7318 0298 01D2     	 bcs .L484
 7319              	 .loc 1 3350 0 is_stmt 0 discriminator 1
 7320 029a 0D23     	 movs r3,#13
 7321 029c EDE0     	 b .L499
 7322              	.L484:
3351:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 7323              	 .loc 1 3351 0 is_stmt 1
 7324 029e BA6C     	 ldr r2,[r7,#72]
 7325 02a0 BB6A     	 ldr r3,[r7,#40]
 7326 02a2 D31A     	 subs r3,r2,r3
 7327 02a4 BA6B     	 ldr r2,[r7,#56]
 7328 02a6 5289     	 ldrh r2,[r2,#10]
 7329 02a8 B3FBF2F3 	 udiv r3,r3,r2
 7330 02ac 7B62     	 str r3,[r7,#36]
3352:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 7331              	 .loc 1 3352 0
 7332 02ae 7B6A     	 ldr r3,[r7,#36]
 7333 02b0 002B     	 cmp r3,#0
 7334 02b2 03D1     	 bne .L485
 7335              	 .loc 1 3352 0 is_stmt 0 discriminator 1
 7336 02b4 0D23     	 movs r3,#13
 7337 02b6 E0E0     	 b .L499
 7338              	.L501:
 7339              	 .align 2
 7340              	.L500:
 7341 02b8 00000000 	 .word FatFs
 7342              	.L485:
3353:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fmt = 0;
 7343              	 .loc 1 3353 0 is_stmt 1
 7344 02bc 0023     	 movs r3,#0
 7345 02be 87F85730 	 strb r3,[r7,#87]
3354:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 7346              	 .loc 1 3354 0
 7347 02c2 7B6A     	 ldr r3,[r7,#36]
 7348 02c4 6F4A     	 ldr r2,.L502
 7349 02c6 9342     	 cmp r3,r2
 7350 02c8 02D8     	 bhi .L486
 7351              	 .loc 1 3354 0 is_stmt 0 discriminator 1
 7352 02ca 0323     	 movs r3,#3
 7353 02cc 87F85730 	 strb r3,[r7,#87]
 7354              	.L486:
3355:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 7355              	 .loc 1 3355 0 is_stmt 1
 7356 02d0 7B6A     	 ldr r3,[r7,#36]
 7357 02d2 4FF6F572 	 movw r2,#65525
 7358 02d6 9342     	 cmp r3,r2
 7359 02d8 02D8     	 bhi .L487
 7360              	 .loc 1 3355 0 is_stmt 0 discriminator 1
 7361 02da 0223     	 movs r3,#2
 7362 02dc 87F85730 	 strb r3,[r7,#87]
 7363              	.L487:
3356:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 7364              	 .loc 1 3356 0 is_stmt 1
 7365 02e0 7B6A     	 ldr r3,[r7,#36]
 7366 02e2 40F6F572 	 movw r2,#4085
 7367 02e6 9342     	 cmp r3,r2
 7368 02e8 02D8     	 bhi .L488
 7369              	 .loc 1 3356 0 is_stmt 0 discriminator 1
 7370 02ea 0123     	 movs r3,#1
 7371 02ec 87F85730 	 strb r3,[r7,#87]
 7372              	.L488:
3357:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
 7373              	 .loc 1 3357 0 is_stmt 1
 7374 02f0 97F85730 	 ldrb r3,[r7,#87]
 7375 02f4 002B     	 cmp r3,#0
 7376 02f6 01D1     	 bne .L489
 7377              	 .loc 1 3357 0 is_stmt 0 discriminator 1
 7378 02f8 0D23     	 movs r3,#13
 7379 02fa BEE0     	 b .L499
 7380              	.L489:
3358:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3359:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Boundaries and Limits */
3360:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 7381              	 .loc 1 3360 0 is_stmt 1
 7382 02fc 7B6A     	 ldr r3,[r7,#36]
 7383 02fe 9A1C     	 adds r2,r3,#2
 7384 0300 BB6B     	 ldr r3,[r7,#56]
 7385 0302 DA61     	 str r2,[r3,#28]
3361:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
 7386              	 .loc 1 3361 0
 7387 0304 BB6B     	 ldr r3,[r7,#56]
 7388 0306 3A6D     	 ldr r2,[r7,#80]
 7389 0308 5A62     	 str r2,[r3,#36]
3362:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 7390              	 .loc 1 3362 0
 7391 030a FA8D     	 ldrh r2,[r7,#46]
 7392 030c 3B6D     	 ldr r3,[r7,#80]
 7393 030e 1A44     	 add r2,r2,r3
 7394 0310 BB6B     	 ldr r3,[r7,#56]
 7395 0312 9A62     	 str r2,[r3,#40]
3363:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
 7396              	 .loc 1 3363 0
 7397 0314 3A6D     	 ldr r2,[r7,#80]
 7398 0316 BB6A     	 ldr r3,[r7,#40]
 7399 0318 1A44     	 add r2,r2,r3
 7400 031a BB6B     	 ldr r3,[r7,#56]
 7401 031c 1A63     	 str r2,[r3,#48]
3364:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32) {
 7402              	 .loc 1 3364 0
 7403 031e 97F85730 	 ldrb r3,[r7,#87]
 7404 0322 032B     	 cmp r3,#3
 7405 0324 1CD1     	 bne .L490
3365:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 7406              	 .loc 1 3365 0
 7407 0326 BB6B     	 ldr r3,[r7,#56]
 7408 0328 6233     	 adds r3,r3,#98
 7409 032a 1846     	 mov r0,r3
 7410 032c FFF7FEFF 	 bl ld_word
 7411 0330 0346     	 mov r3,r0
 7412 0332 002B     	 cmp r3,#0
 7413 0334 01D0     	 beq .L491
 7414              	 .loc 1 3365 0 is_stmt 0 discriminator 1
 7415 0336 0D23     	 movs r3,#13
 7416 0338 9FE0     	 b .L499
 7417              	.L491:
3366:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 7418              	 .loc 1 3366 0 is_stmt 1
 7419 033a BB6B     	 ldr r3,[r7,#56]
 7420 033c 1B89     	 ldrh r3,[r3,#8]
 7421 033e 002B     	 cmp r3,#0
 7422 0340 01D0     	 beq .L492
 7423              	 .loc 1 3366 0 is_stmt 0 discriminator 1
 7424 0342 0D23     	 movs r3,#13
 7425 0344 99E0     	 b .L499
 7426              	.L492:
3367:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 7427              	 .loc 1 3367 0 is_stmt 1
 7428 0346 BB6B     	 ldr r3,[r7,#56]
 7429 0348 6433     	 adds r3,r3,#100
 7430 034a 1846     	 mov r0,r3
 7431 034c FFF7FEFF 	 bl ld_dword
 7432 0350 0246     	 mov r2,r0
 7433 0352 BB6B     	 ldr r3,[r7,#56]
 7434 0354 DA62     	 str r2,[r3,#44]
3368:../Dave/Generated/FATFS/ff_Src/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 7435              	 .loc 1 3368 0
 7436 0356 BB6B     	 ldr r3,[r7,#56]
 7437 0358 DB69     	 ldr r3,[r3,#28]
 7438 035a 9B00     	 lsls r3,r3,#2
 7439 035c 7B64     	 str r3,[r7,#68]
 7440 035e 1FE0     	 b .L493
 7441              	.L490:
3369:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
3370:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 7442              	 .loc 1 3370 0
 7443 0360 BB6B     	 ldr r3,[r7,#56]
 7444 0362 1B89     	 ldrh r3,[r3,#8]
 7445 0364 002B     	 cmp r3,#0
 7446 0366 01D1     	 bne .L494
 7447              	 .loc 1 3370 0 is_stmt 0 discriminator 1
 7448 0368 0D23     	 movs r3,#13
 7449 036a 86E0     	 b .L499
 7450              	.L494:
3371:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 7451              	 .loc 1 3371 0 is_stmt 1
 7452 036c BB6B     	 ldr r3,[r7,#56]
 7453 036e 9A6A     	 ldr r2,[r3,#40]
 7454 0370 FB6C     	 ldr r3,[r7,#76]
 7455 0372 1A44     	 add r2,r2,r3
 7456 0374 BB6B     	 ldr r3,[r7,#56]
 7457 0376 DA62     	 str r2,[r3,#44]
3372:../Dave/Generated/FATFS/ff_Src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
3373:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 7458              	 .loc 1 3373 0
 7459 0378 97F85730 	 ldrb r3,[r7,#87]
 7460 037c 022B     	 cmp r3,#2
 7461 037e 03D1     	 bne .L495
 7462              	 .loc 1 3373 0 is_stmt 0 discriminator 1
 7463 0380 BB6B     	 ldr r3,[r7,#56]
 7464 0382 DB69     	 ldr r3,[r3,#28]
 7465 0384 5B00     	 lsls r3,r3,#1
 7466 0386 0AE0     	 b .L496
 7467              	.L495:
 7468              	 .loc 1 3373 0 discriminator 2
 7469 0388 BB6B     	 ldr r3,[r7,#56]
 7470 038a DA69     	 ldr r2,[r3,#28]
 7471 038c 1346     	 mov r3,r2
 7472 038e 5B00     	 lsls r3,r3,#1
 7473 0390 1344     	 add r3,r3,r2
 7474 0392 5A08     	 lsrs r2,r3,#1
 7475 0394 BB6B     	 ldr r3,[r7,#56]
 7476 0396 DB69     	 ldr r3,[r3,#28]
 7477 0398 03F00103 	 and r3,r3,#1
 7478 039c 1344     	 add r3,r3,r2
 7479              	.L496:
3372:../Dave/Generated/FATFS/ff_Src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 7480              	 .loc 1 3372 0 is_stmt 1
 7481 039e 7B64     	 str r3,[r7,#68]
 7482              	.L493:
3374:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3375:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
 7483              	 .loc 1 3375 0
 7484 03a0 BB6B     	 ldr r3,[r7,#56]
 7485 03a2 1A6A     	 ldr r2,[r3,#32]
 7486 03a4 7B6C     	 ldr r3,[r7,#68]
 7487 03a6 03F2FF13 	 addw r3,r3,#511
 7488 03aa 5B0A     	 lsrs r3,r3,#9
 7489 03ac 9A42     	 cmp r2,r3
 7490 03ae 01D2     	 bcs .L497
 7491              	 .loc 1 3375 0 is_stmt 0 discriminator 1
 7492 03b0 0D23     	 movs r3,#13
 7493 03b2 62E0     	 b .L499
 7494              	.L497:
3376:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3377:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3378:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get FSInfo if available */
3379:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 7495              	 .loc 1 3379 0 is_stmt 1
 7496 03b4 BB6B     	 ldr r3,[r7,#56]
 7497 03b6 4FF0FF32 	 mov r2,#-1
 7498 03ba 5A61     	 str r2,[r3,#20]
 7499 03bc BB6B     	 ldr r3,[r7,#56]
 7500 03be 5A69     	 ldr r2,[r3,#20]
 7501 03c0 BB6B     	 ldr r3,[r7,#56]
 7502 03c2 1A61     	 str r2,[r3,#16]
3380:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsi_flag = 0x80;
 7503              	 .loc 1 3380 0
 7504 03c4 BB6B     	 ldr r3,[r7,#56]
 7505 03c6 8022     	 movs r2,#128
 7506 03c8 1A71     	 strb r2,[r3,#4]
3381:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_FS_NOFSINFO & 3) != 3
3382:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 7507              	 .loc 1 3382 0
 7508 03ca 97F85730 	 ldrb r3,[r7,#87]
 7509 03ce 032B     	 cmp r3,#3
 7510 03d0 3BD1     	 bne .L498
3383:../Dave/Generated/FATFS/ff_Src/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 7511              	 .loc 1 3383 0
 7512 03d2 BB6B     	 ldr r3,[r7,#56]
 7513 03d4 6833     	 adds r3,r3,#104
 7514 03d6 1846     	 mov r0,r3
 7515 03d8 FFF7FEFF 	 bl ld_word
 7516 03dc 0346     	 mov r3,r0
 7517 03de 012B     	 cmp r3,#1
 7518 03e0 33D1     	 bne .L498
3384:../Dave/Generated/FATFS/ff_Src/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
 7519              	 .loc 1 3384 0
 7520 03e2 3B6D     	 ldr r3,[r7,#80]
 7521 03e4 0133     	 adds r3,r3,#1
 7522 03e6 B86B     	 ldr r0,[r7,#56]
 7523 03e8 1946     	 mov r1,r3
 7524 03ea FFF7FEFF 	 bl move_window
 7525 03ee 0346     	 mov r3,r0
 7526 03f0 002B     	 cmp r3,#0
 7527 03f2 2AD1     	 bne .L498
3385:../Dave/Generated/FATFS/ff_Src/ff.c **** 		{
3386:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag = 0;
 7528              	 .loc 1 3386 0
 7529 03f4 BB6B     	 ldr r3,[r7,#56]
 7530 03f6 0022     	 movs r2,#0
 7531 03f8 1A71     	 strb r2,[r3,#4]
3387:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 7532              	 .loc 1 3387 0
 7533 03fa BB6B     	 ldr r3,[r7,#56]
 7534 03fc 03F23623 	 addw r3,r3,#566
 7535 0400 1846     	 mov r0,r3
 7536 0402 FFF7FEFF 	 bl ld_word
 7537 0406 0346     	 mov r3,r0
 7538 0408 1A46     	 mov r2,r3
 7539 040a 4AF65523 	 movw r3,#43605
 7540 040e 9A42     	 cmp r2,r3
 7541 0410 1BD1     	 bne .L498
3388:../Dave/Generated/FATFS/ff_Src/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 7542              	 .loc 1 3388 0
 7543 0412 BB6B     	 ldr r3,[r7,#56]
 7544 0414 3833     	 adds r3,r3,#56
 7545 0416 1846     	 mov r0,r3
 7546 0418 FFF7FEFF 	 bl ld_dword
 7547 041c 0246     	 mov r2,r0
 7548 041e 1A4B     	 ldr r3,.L502+4
 7549 0420 9A42     	 cmp r2,r3
 7550 0422 12D1     	 bne .L498
3389:../Dave/Generated/FATFS/ff_Src/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 7551              	 .loc 1 3389 0
 7552 0424 BB6B     	 ldr r3,[r7,#56]
 7553 0426 03F50773 	 add r3,r3,#540
 7554 042a 1846     	 mov r0,r3
 7555 042c FFF7FEFF 	 bl ld_dword
 7556 0430 0246     	 mov r2,r0
 7557 0432 164B     	 ldr r3,.L502+8
 7558 0434 9A42     	 cmp r2,r3
 7559 0436 08D1     	 bne .L498
3390:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
3391:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_FS_NOFSINFO & 1) == 0
3392:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 7560              	 .loc 1 3392 0
 7561 0438 BB6B     	 ldr r3,[r7,#56]
 7562 043a 03F50873 	 add r3,r3,#544
 7563 043e 1846     	 mov r0,r3
 7564 0440 FFF7FEFF 	 bl ld_dword
 7565 0444 0246     	 mov r2,r0
 7566 0446 BB6B     	 ldr r3,[r7,#56]
 7567 0448 5A61     	 str r2,[r3,#20]
 7568              	.L498:
3393:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3394:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_FS_NOFSINFO & 2) == 0
3395:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3396:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3397:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3398:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3399:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* (FF_FS_NOFSINFO & 3) != 3 */
3400:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
3401:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3402:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3403:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
 7569              	 .loc 1 3403 0
 7570 044a BB6B     	 ldr r3,[r7,#56]
 7571 044c 97F85720 	 ldrb r2,[r7,#87]
 7572 0450 1A70     	 strb r2,[r3]
3404:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->id = ++Fsid;		/* Volume mount ID */
 7573              	 .loc 1 3404 0
 7574 0452 0F4B     	 ldr r3,.L502+12
 7575 0454 1B88     	 ldrh r3,[r3]
 7576 0456 0133     	 adds r3,r3,#1
 7577 0458 9AB2     	 uxth r2,r3
 7578 045a 0D4B     	 ldr r3,.L502+12
 7579 045c 1A80     	 strh r2,[r3]
 7580 045e 0C4B     	 ldr r3,.L502+12
 7581 0460 1A88     	 ldrh r2,[r3]
 7582 0462 BB6B     	 ldr r3,[r7,#56]
 7583 0464 DA80     	 strh r2,[r3,#6]
3405:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 1
3406:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 7584              	 .loc 1 3406 0
 7585 0466 BB6B     	 ldr r3,[r7,#56]
 7586 0468 0A4A     	 ldr r2,.L502+16
 7587 046a DA60     	 str r2,[r3,#12]
3407:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3408:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
3409:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3410:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3411:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3412:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->cdir = 0;			/* Initialize current directory */
 7588              	 .loc 1 3412 0
 7589 046c BB6B     	 ldr r3,[r7,#56]
 7590 046e 0022     	 movs r2,#0
 7591 0470 9A61     	 str r2,[r3,#24]
3413:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3414:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0			/* Clear file lock semaphores */
3415:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clear_lock(fs);
 7592              	 .loc 1 3415 0
 7593 0472 B86B     	 ldr r0,[r7,#56]
 7594 0474 FFF7FEFF 	 bl clear_lock
3416:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3417:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 7595              	 .loc 1 3417 0
 7596 0478 0023     	 movs r3,#0
 7597              	.L499:
3418:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7598              	 .loc 1 3418 0 discriminator 1
 7599 047a 1846     	 mov r0,r3
 7600 047c 5837     	 adds r7,r7,#88
 7601              	.LCFI246:
 7602              	 .cfi_def_cfa_offset 8
 7603 047e BD46     	 mov sp,r7
 7604              	.LCFI247:
 7605              	 .cfi_def_cfa_register 13
 7606              	 
 7607 0480 80BD     	 pop {r7,pc}
 7608              	.L503:
 7609 0482 00BF     	 .align 2
 7610              	.L502:
 7611 0484 F5FFFF0F 	 .word 268435445
 7612 0488 52526141 	 .word 1096897106
 7613 048c 72724161 	 .word 1631679090
 7614 0490 00000000 	 .word Fsid
 7615 0494 00000000 	 .word LfnBuf
 7616              	 .cfi_endproc
 7617              	.LFE45:
 7619              	 .section .text.validate,"ax",%progbits
 7620              	 .align 2
 7621              	 .thumb
 7622              	 .thumb_func
 7624              	validate:
 7625              	.LFB46:
3419:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3420:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3421:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3422:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3423:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3424:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Check if the file/directory object is valid or not                    */
3425:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3426:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3427:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3428:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity
3429:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
3430:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3431:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7626              	 .loc 1 3431 0
 7627              	 .cfi_startproc
 7628              	 
 7629              	 
 7630 0000 80B5     	 push {r7,lr}
 7631              	.LCFI248:
 7632              	 .cfi_def_cfa_offset 8
 7633              	 .cfi_offset 7,-8
 7634              	 .cfi_offset 14,-4
 7635 0002 84B0     	 sub sp,sp,#16
 7636              	.LCFI249:
 7637              	 .cfi_def_cfa_offset 24
 7638 0004 00AF     	 add r7,sp,#0
 7639              	.LCFI250:
 7640              	 .cfi_def_cfa_register 7
 7641 0006 7860     	 str r0,[r7,#4]
 7642 0008 3960     	 str r1,[r7]
3432:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_INVALID_OBJECT;
 7643              	 .loc 1 3432 0
 7644 000a 0923     	 movs r3,#9
 7645 000c FB73     	 strb r3,[r7,#15]
3433:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3434:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3435:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid
 7646              	 .loc 1 3435 0
 7647 000e 7B68     	 ldr r3,[r7,#4]
 7648 0010 002B     	 cmp r3,#0
 7649 0012 1CD0     	 beq .L505
 7650              	 .loc 1 3435 0 is_stmt 0 discriminator 1
 7651 0014 7B68     	 ldr r3,[r7,#4]
 7652 0016 1B68     	 ldr r3,[r3]
 7653 0018 002B     	 cmp r3,#0
 7654 001a 18D0     	 beq .L505
 7655              	 .loc 1 3435 0 discriminator 2
 7656 001c 7B68     	 ldr r3,[r7,#4]
 7657 001e 1B68     	 ldr r3,[r3]
 7658 0020 1B78     	 ldrb r3,[r3]
 7659 0022 002B     	 cmp r3,#0
 7660 0024 13D0     	 beq .L505
 7661              	 .loc 1 3435 0 discriminator 3
 7662 0026 7B68     	 ldr r3,[r7,#4]
 7663 0028 9A88     	 ldrh r2,[r3,#4]
 7664 002a 7B68     	 ldr r3,[r7,#4]
 7665 002c 1B68     	 ldr r3,[r3]
 7666 002e DB88     	 ldrh r3,[r3,#6]
 7667 0030 9A42     	 cmp r2,r3
 7668 0032 0CD1     	 bne .L505
3436:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
3437:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
3438:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initializ
3439:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_OK;
3440:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
3441:../Dave/Generated/FATFS/ff_Src/ff.c **** 				unlock_fs(obj->fs, FR_OK);
3442:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3443:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
3444:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_TIMEOUT;
3445:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3446:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3447:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialize
 7669              	 .loc 1 3447 0 is_stmt 1
 7670 0034 7B68     	 ldr r3,[r7,#4]
 7671 0036 1B68     	 ldr r3,[r3]
 7672 0038 5B78     	 ldrb r3,[r3,#1]
 7673 003a 1846     	 mov r0,r3
 7674 003c FFF7FEFF 	 bl disk_status
 7675 0040 0346     	 mov r3,r0
 7676 0042 03F00103 	 and r3,r3,#1
 7677 0046 002B     	 cmp r3,#0
 7678 0048 01D1     	 bne .L505
3448:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
 7679              	 .loc 1 3448 0
 7680 004a 0023     	 movs r3,#0
 7681 004c FB73     	 strb r3,[r7,#15]
 7682              	.L505:
3449:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3450:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3451:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3452:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 7683              	 .loc 1 3452 0
 7684 004e FB7B     	 ldrb r3,[r7,#15]
 7685 0050 002B     	 cmp r3,#0
 7686 0052 02D1     	 bne .L506
 7687              	 .loc 1 3452 0 is_stmt 0 discriminator 1
 7688 0054 7B68     	 ldr r3,[r7,#4]
 7689 0056 1B68     	 ldr r3,[r3]
 7690 0058 00E0     	 b .L507
 7691              	.L506:
 7692              	 .loc 1 3452 0 discriminator 2
 7693 005a 0023     	 movs r3,#0
 7694              	.L507:
 7695              	 .loc 1 3452 0 discriminator 4
 7696 005c 3A68     	 ldr r2,[r7]
 7697 005e 1360     	 str r3,[r2]
3453:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 7698              	 .loc 1 3453 0 is_stmt 1 discriminator 4
 7699 0060 FB7B     	 ldrb r3,[r7,#15]
3454:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7700              	 .loc 1 3454 0 discriminator 4
 7701 0062 1846     	 mov r0,r3
 7702 0064 1037     	 adds r7,r7,#16
 7703              	.LCFI251:
 7704              	 .cfi_def_cfa_offset 8
 7705 0066 BD46     	 mov sp,r7
 7706              	.LCFI252:
 7707              	 .cfi_def_cfa_register 13
 7708              	 
 7709 0068 80BD     	 pop {r7,pc}
 7710              	 .cfi_endproc
 7711              	.LFE46:
 7713 006a 00BF     	 .section .text.f_mount,"ax",%progbits
 7714              	 .align 2
 7715              	 .global f_mount
 7716              	 .thumb
 7717              	 .thumb_func
 7719              	f_mount:
 7720              	.LFB47:
3455:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3456:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3457:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3458:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3459:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------------------------------------
3460:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3461:../Dave/Generated/FATFS/ff_Src/ff.c ****    Public Functions (FatFs API)
3462:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3463:../Dave/Generated/FATFS/ff_Src/ff.c **** ----------------------------------------------------------------------------*/
3464:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3465:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3466:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3467:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3468:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Mount/Unmount a Logical Drive                                         */
3469:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3470:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3471:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_mount (
3472:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
3473:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3474:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
3475:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3476:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7721              	 .loc 1 3476 0
 7722              	 .cfi_startproc
 7723              	 
 7724              	 
 7725 0000 80B5     	 push {r7,lr}
 7726              	.LCFI253:
 7727              	 .cfi_def_cfa_offset 8
 7728              	 .cfi_offset 7,-8
 7729              	 .cfi_offset 14,-4
 7730 0002 88B0     	 sub sp,sp,#32
 7731              	.LCFI254:
 7732              	 .cfi_def_cfa_offset 40
 7733 0004 00AF     	 add r7,sp,#0
 7734              	.LCFI255:
 7735              	 .cfi_def_cfa_register 7
 7736 0006 F860     	 str r0,[r7,#12]
 7737 0008 B960     	 str r1,[r7,#8]
 7738 000a 1346     	 mov r3,r2
 7739 000c FB71     	 strb r3,[r7,#7]
3477:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *cfs;
3478:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
3479:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3480:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *rp = path;
 7740              	 .loc 1 3480 0
 7741 000e BB68     	 ldr r3,[r7,#8]
 7742 0010 3B61     	 str r3,[r7,#16]
3481:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3482:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3483:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
3484:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(&rp);
 7743              	 .loc 1 3484 0
 7744 0012 07F11003 	 add r3,r7,#16
 7745 0016 1846     	 mov r0,r3
 7746 0018 FFF7FEFF 	 bl get_ldnumber
 7747 001c F861     	 str r0,[r7,#28]
3485:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 7748              	 .loc 1 3485 0
 7749 001e FB69     	 ldr r3,[r7,#28]
 7750 0020 002B     	 cmp r3,#0
 7751 0022 01DA     	 bge .L510
 7752              	 .loc 1 3485 0 is_stmt 0 discriminator 1
 7753 0024 0B23     	 movs r3,#11
 7754 0026 29E0     	 b .L515
 7755              	.L510:
3486:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 7756              	 .loc 1 3486 0 is_stmt 1
 7757 0028 164A     	 ldr r2,.L516
 7758 002a FB69     	 ldr r3,[r7,#28]
 7759 002c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 7760 0030 BB61     	 str r3,[r7,#24]
3487:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3488:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (cfs) {
 7761              	 .loc 1 3488 0
 7762 0032 BB69     	 ldr r3,[r7,#24]
 7763 0034 002B     	 cmp r3,#0
 7764 0036 05D0     	 beq .L512
3489:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3490:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clear_lock(cfs);
 7765              	 .loc 1 3490 0
 7766 0038 B869     	 ldr r0,[r7,#24]
 7767 003a FFF7FEFF 	 bl clear_lock
3491:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3492:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT						/* Discard sync object of the current volume */
3493:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
3494:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3495:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
 7768              	 .loc 1 3495 0
 7769 003e BB69     	 ldr r3,[r7,#24]
 7770 0040 0022     	 movs r2,#0
 7771 0042 1A70     	 strb r2,[r3]
 7772              	.L512:
3496:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3497:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3498:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs) {
 7773              	 .loc 1 3498 0
 7774 0044 FB68     	 ldr r3,[r7,#12]
 7775 0046 002B     	 cmp r3,#0
 7776 0048 02D0     	 beq .L513
3499:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 7777              	 .loc 1 3499 0
 7778 004a FB68     	 ldr r3,[r7,#12]
 7779 004c 0022     	 movs r2,#0
 7780 004e 1A70     	 strb r2,[r3]
 7781              	.L513:
3500:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT						/* Create sync object for the new volume */
3501:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
3502:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3503:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3504:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
 7782              	 .loc 1 3504 0
 7783 0050 FA68     	 ldr r2,[r7,#12]
 7784 0052 0C49     	 ldr r1,.L516
 7785 0054 FB69     	 ldr r3,[r7,#28]
 7786 0056 41F82320 	 str r2,[r1,r3,lsl#2]
3505:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3506:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 7787              	 .loc 1 3506 0
 7788 005a FB79     	 ldrb r3,[r7,#7]
 7789 005c 002B     	 cmp r3,#0
 7790 005e 01D1     	 bne .L514
 7791              	 .loc 1 3506 0 is_stmt 0 discriminator 1
 7792 0060 0023     	 movs r3,#0
 7793 0062 0BE0     	 b .L515
 7794              	.L514:
3507:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3508:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 7795              	 .loc 1 3508 0 is_stmt 1
 7796 0064 07F10802 	 add r2,r7,#8
 7797 0068 07F10C03 	 add r3,r7,#12
 7798 006c 1046     	 mov r0,r2
 7799 006e 1946     	 mov r1,r3
 7800 0070 0022     	 movs r2,#0
 7801 0072 FFF7FEFF 	 bl find_volume
 7802 0076 0346     	 mov r3,r0
 7803 0078 FB75     	 strb r3,[r7,#23]
3509:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 7804              	 .loc 1 3509 0
 7805 007a FB7D     	 ldrb r3,[r7,#23]
 7806              	.L515:
3510:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7807              	 .loc 1 3510 0 discriminator 1
 7808 007c 1846     	 mov r0,r3
 7809 007e 2037     	 adds r7,r7,#32
 7810              	.LCFI256:
 7811              	 .cfi_def_cfa_offset 8
 7812 0080 BD46     	 mov sp,r7
 7813              	.LCFI257:
 7814              	 .cfi_def_cfa_register 13
 7815              	 
 7816 0082 80BD     	 pop {r7,pc}
 7817              	.L517:
 7818              	 .align 2
 7819              	.L516:
 7820 0084 00000000 	 .word FatFs
 7821              	 .cfi_endproc
 7822              	.LFE47:
 7824              	 .section .text.f_open,"ax",%progbits
 7825              	 .align 2
 7826              	 .global f_open
 7827              	 .thumb
 7828              	 .thumb_func
 7830              	f_open:
 7831              	.LFB48:
3511:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3512:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3513:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3514:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3515:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3516:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Open or Create a File                                                 */
3517:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3518:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3519:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_open (
3520:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
3521:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
3522:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
3523:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3524:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7832              	 .loc 1 3524 0
 7833              	 .cfi_startproc
 7834              	 
 7835              	 
 7836 0000 90B5     	 push {r4,r7,lr}
 7837              	.LCFI258:
 7838              	 .cfi_def_cfa_offset 12
 7839              	 .cfi_offset 4,-12
 7840              	 .cfi_offset 7,-8
 7841              	 .cfi_offset 14,-4
 7842 0002 9BB0     	 sub sp,sp,#108
 7843              	.LCFI259:
 7844              	 .cfi_def_cfa_offset 120
 7845 0004 00AF     	 add r7,sp,#0
 7846              	.LCFI260:
 7847              	 .cfi_def_cfa_register 7
 7848 0006 F860     	 str r0,[r7,#12]
 7849 0008 B960     	 str r1,[r7,#8]
 7850 000a 1346     	 mov r3,r2
 7851 000c FB71     	 strb r3,[r7,#7]
3525:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3526:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
3527:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3528:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3529:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dw, cl, bcs, clst, sc;
3530:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ofs;
3531:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3532:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
3533:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3534:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3535:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
 7852              	 .loc 1 3535 0
 7853 000e FB68     	 ldr r3,[r7,#12]
 7854 0010 002B     	 cmp r3,#0
 7855 0012 01D1     	 bne .L519
 7856              	 .loc 1 3535 0 is_stmt 0 discriminator 1
 7857 0014 0923     	 movs r3,#9
 7858 0016 ACE1     	 b .L543
 7859              	.L519:
3536:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3537:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
3538:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN
 7860              	 .loc 1 3538 0 is_stmt 1
 7861 0018 FB79     	 ldrb r3,[r7,#7]
 7862 001a 03F03F03 	 and r3,r3,#63
 7863 001e FB71     	 strb r3,[r7,#7]
3539:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, mode);
 7864              	 .loc 1 3539 0
 7865 0020 07F10801 	 add r1,r7,#8
 7866 0024 07F11402 	 add r2,r7,#20
 7867 0028 FB79     	 ldrb r3,[r7,#7]
 7868 002a 0846     	 mov r0,r1
 7869 002c 1146     	 mov r1,r2
 7870 002e 1A46     	 mov r2,r3
 7871 0030 FFF7FEFF 	 bl find_volume
 7872 0034 0346     	 mov r3,r0
 7873 0036 87F86730 	 strb r3,[r7,#103]
3540:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 7874              	 .loc 1 3540 0
 7875 003a 97F86730 	 ldrb r3,[r7,#103]
 7876 003e 002B     	 cmp r3,#0
 7877 0040 40F08E81 	 bne .L521
3541:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 7878              	 .loc 1 3541 0
 7879 0044 7B69     	 ldr r3,[r7,#20]
 7880 0046 BB61     	 str r3,[r7,#24]
3542:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
3543:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 7881              	 .loc 1 3543 0
 7882 0048 BB68     	 ldr r3,[r7,#8]
 7883 004a 07F11802 	 add r2,r7,#24
 7884 004e 1046     	 mov r0,r2
 7885 0050 1946     	 mov r1,r3
 7886 0052 FFF7FEFF 	 bl follow_path
 7887 0056 0346     	 mov r3,r0
 7888 0058 87F86730 	 strb r3,[r7,#103]
3544:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY	/* Read/Write configuration */
3545:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 7889              	 .loc 1 3545 0
 7890 005c 97F86730 	 ldrb r3,[r7,#103]
 7891 0060 002B     	 cmp r3,#0
 7892 0062 1BD1     	 bne .L522
3546:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 7893              	 .loc 1 3546 0
 7894 0064 97F84730 	 ldrb r3,[r7,#71]
 7895 0068 DBB2     	 uxtb r3,r3
 7896 006a 5BB2     	 sxtb r3,r3
 7897 006c 002B     	 cmp r3,#0
 7898 006e 03DA     	 bge .L523
3547:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;
 7899              	 .loc 1 3547 0
 7900 0070 0623     	 movs r3,#6
 7901 0072 87F86730 	 strb r3,[r7,#103]
 7902 0076 11E0     	 b .L522
 7903              	.L523:
3548:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3549:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3550:../Dave/Generated/FATFS/ff_Src/ff.c **** 			else {
3551:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
 7904              	 .loc 1 3551 0
 7905 0078 FB79     	 ldrb r3,[r7,#7]
 7906 007a 23F00103 	 bic r3,r3,#1
 7907 007e 002B     	 cmp r3,#0
 7908 0080 14BF     	 ite ne
 7909 0082 0123     	 movne r3,#1
 7910 0084 0023     	 moveq r3,#0
 7911 0086 DBB2     	 uxtb r3,r3
 7912 0088 1A46     	 mov r2,r3
 7913 008a 07F11803 	 add r3,r7,#24
 7914 008e 1846     	 mov r0,r3
 7915 0090 1146     	 mov r1,r2
 7916 0092 FFF7FEFF 	 bl chk_lock
 7917 0096 0346     	 mov r3,r0
 7918 0098 87F86730 	 strb r3,[r7,#103]
 7919              	.L522:
3552:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3553:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3554:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3555:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create or Open a file */
3556:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 7920              	 .loc 1 3556 0
 7921 009c FB79     	 ldrb r3,[r7,#7]
 7922 009e 03F01C03 	 and r3,r3,#28
 7923 00a2 002B     	 cmp r3,#0
 7924 00a4 7BD0     	 beq .L524
3557:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 7925              	 .loc 1 3557 0
 7926 00a6 97F86730 	 ldrb r3,[r7,#103]
 7927 00aa 002B     	 cmp r3,#0
 7928 00ac 17D0     	 beq .L525
3558:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 7929              	 .loc 1 3558 0
 7930 00ae 97F86730 	 ldrb r3,[r7,#103]
 7931 00b2 042B     	 cmp r3,#4
 7932 00b4 0ED1     	 bne .L526
3559:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3560:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 7933              	 .loc 1 3560 0
 7934 00b6 FFF7FEFF 	 bl enq_lock
 7935 00ba 0346     	 mov r3,r0
 7936 00bc 002B     	 cmp r3,#0
 7937 00be 06D0     	 beq .L527
 7938              	 .loc 1 3560 0 is_stmt 0 discriminator 1
 7939 00c0 07F11803 	 add r3,r7,#24
 7940 00c4 1846     	 mov r0,r3
 7941 00c6 FFF7FEFF 	 bl dir_register
 7942 00ca 0346     	 mov r3,r0
 7943 00cc 00E0     	 b .L528
 7944              	.L527:
 7945              	 .loc 1 3560 0 discriminator 2
 7946 00ce 1223     	 movs r3,#18
 7947              	.L528:
 7948              	 .loc 1 3560 0 discriminator 4
 7949 00d0 87F86730 	 strb r3,[r7,#103]
 7950              	.L526:
3561:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3562:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&dj);
3563:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3564:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3565:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
 7951              	 .loc 1 3565 0 is_stmt 1
 7952 00d4 FB79     	 ldrb r3,[r7,#7]
 7953 00d6 43F00803 	 orr r3,r3,#8
 7954 00da FB71     	 strb r3,[r7,#7]
 7955 00dc 10E0     	 b .L529
 7956              	.L525:
3566:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3567:../Dave/Generated/FATFS/ff_Src/ff.c **** 			else {								/* Any object with the same name is already existing */
3568:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 7957              	 .loc 1 3568 0
 7958 00de BB7F     	 ldrb r3,[r7,#30]
 7959 00e0 03F01103 	 and r3,r3,#17
 7960 00e4 002B     	 cmp r3,#0
 7961 00e6 03D0     	 beq .L530
3569:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_DENIED;
 7962              	 .loc 1 3569 0
 7963 00e8 0723     	 movs r3,#7
 7964 00ea 87F86730 	 strb r3,[r7,#103]
 7965 00ee 07E0     	 b .L529
 7966              	.L530:
3570:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
3571:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 7967              	 .loc 1 3571 0
 7968 00f0 FB79     	 ldrb r3,[r7,#7]
 7969 00f2 03F00403 	 and r3,r3,#4
 7970 00f6 002B     	 cmp r3,#0
 7971 00f8 02D0     	 beq .L529
 7972              	 .loc 1 3571 0 is_stmt 0 discriminator 1
 7973 00fa 0823     	 movs r3,#8
 7974 00fc 87F86730 	 strb r3,[r7,#103]
 7975              	.L529:
3572:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3573:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3574:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 7976              	 .loc 1 3574 0 is_stmt 1
 7977 0100 97F86730 	 ldrb r3,[r7,#103]
 7978 0104 002B     	 cmp r3,#0
 7979 0106 64D1     	 bne .L532
 7980              	 .loc 1 3574 0 is_stmt 0 discriminator 1
 7981 0108 FB79     	 ldrb r3,[r7,#7]
 7982 010a 03F00803 	 and r3,r3,#8
 7983 010e 002B     	 cmp r3,#0
 7984 0110 5FD0     	 beq .L532
3575:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3576:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3577:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Get current allocation info */
3578:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->obj.fs = fs;
3579:../Dave/Generated/FATFS/ff_Src/ff.c **** 					init_alloc_info(fs, &fp->obj);
3580:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Set directory entry block initial state */
3581:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
3582:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
3583:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;
3584:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
3585:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3586:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = store_xdir(&dj);
3587:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
3588:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3589:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3590:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3591:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
3592:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3593:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
3594:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Set directory entry initial state */
3595:../Dave/Generated/FATFS/ff_Src/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 7985              	 .loc 1 3595 0 is_stmt 1
 7986 0112 7A69     	 ldr r2,[r7,#20]
 7987 0114 BB6B     	 ldr r3,[r7,#56]
 7988 0116 1046     	 mov r0,r2
 7989 0118 1946     	 mov r1,r3
 7990 011a FFF7FEFF 	 bl ld_clust
 7991 011e B865     	 str r0,[r7,#88]
3596:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 7992              	 .loc 1 3596 0
 7993 0120 BB6B     	 ldr r3,[r7,#56]
 7994 0122 03F10E04 	 add r4,r3,#14
 7995 0126 FFF7FEFF 	 bl get_fattime
 7996 012a 0346     	 mov r3,r0
 7997 012c 2046     	 mov r0,r4
 7998 012e 1946     	 mov r1,r3
 7999 0130 FFF7FEFF 	 bl st_dword
3597:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8000              	 .loc 1 3597 0
 8001 0134 BB6B     	 ldr r3,[r7,#56]
 8002 0136 0B33     	 adds r3,r3,#11
 8003 0138 2022     	 movs r2,#32
 8004 013a 1A70     	 strb r2,[r3]
3598:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005              	 .loc 1 3598 0
 8006 013c 7A69     	 ldr r2,[r7,#20]
 8007 013e BB6B     	 ldr r3,[r7,#56]
 8008 0140 1046     	 mov r0,r2
 8009 0142 1946     	 mov r1,r3
 8010 0144 0022     	 movs r2,#0
 8011 0146 FFF7FEFF 	 bl st_clust
3599:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
 8012              	 .loc 1 3599 0
 8013 014a BB6B     	 ldr r3,[r7,#56]
 8014 014c 1C33     	 adds r3,r3,#28
 8015 014e 1846     	 mov r0,r3
 8016 0150 0021     	 movs r1,#0
 8017 0152 FFF7FEFF 	 bl st_dword
3600:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 1;
 8018              	 .loc 1 3600 0
 8019 0156 7B69     	 ldr r3,[r7,#20]
 8020 0158 0122     	 movs r2,#1
 8021 015a DA70     	 strb r2,[r3,#3]
3601:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (cl != 0) {						/* Remove the cluster chain if exist */
 8022              	 .loc 1 3601 0
 8023 015c BB6D     	 ldr r3,[r7,#88]
 8024 015e 002B     	 cmp r3,#0
 8025 0160 37D0     	 beq .L532
3602:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dw = fs->winsect;
 8026              	 .loc 1 3602 0
 8027 0162 7B69     	 ldr r3,[r7,#20]
 8028 0164 5B6B     	 ldr r3,[r3,#52]
 8029 0166 7B65     	 str r3,[r7,#84]
3603:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
 8030              	 .loc 1 3603 0
 8031 0168 07F11803 	 add r3,r7,#24
 8032 016c 1846     	 mov r0,r3
 8033 016e B96D     	 ldr r1,[r7,#88]
 8034 0170 0022     	 movs r2,#0
 8035 0172 FFF7FEFF 	 bl remove_chain
 8036 0176 0346     	 mov r3,r0
 8037 0178 87F86730 	 strb r3,[r7,#103]
3604:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (res == FR_OK) {
 8038              	 .loc 1 3604 0
 8039 017c 97F86730 	 ldrb r3,[r7,#103]
 8040 0180 002B     	 cmp r3,#0
 8041 0182 26D1     	 bne .L532
3605:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = move_window(fs, dw);
 8042              	 .loc 1 3605 0
 8043 0184 7B69     	 ldr r3,[r7,#20]
 8044 0186 1846     	 mov r0,r3
 8045 0188 796D     	 ldr r1,[r7,#84]
 8046 018a FFF7FEFF 	 bl move_window
 8047 018e 0346     	 mov r3,r0
 8048 0190 87F86730 	 strb r3,[r7,#103]
3606:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8049              	 .loc 1 3606 0
 8050 0194 7B69     	 ldr r3,[r7,#20]
 8051 0196 BA6D     	 ldr r2,[r7,#88]
 8052 0198 013A     	 subs r2,r2,#1
 8053 019a 1A61     	 str r2,[r3,#16]
 8054 019c 19E0     	 b .L532
 8055              	.L524:
3607:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
3608:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3609:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3610:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3611:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3612:../Dave/Generated/FATFS/ff_Src/ff.c **** 		else {	/* Open an existing file */
3613:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {					/* Is the object exsiting? */
 8056              	 .loc 1 3613 0
 8057 019e 97F86730 	 ldrb r3,[r7,#103]
 8058 01a2 002B     	 cmp r3,#0
 8059 01a4 15D1     	 bne .L532
3614:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8060              	 .loc 1 3614 0
 8061 01a6 BB7F     	 ldrb r3,[r7,#30]
 8062 01a8 03F01003 	 and r3,r3,#16
 8063 01ac 002B     	 cmp r3,#0
 8064 01ae 03D0     	 beq .L533
3615:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_FILE;
 8065              	 .loc 1 3615 0
 8066 01b0 0423     	 movs r3,#4
 8067 01b2 87F86730 	 strb r3,[r7,#103]
 8068 01b6 0CE0     	 b .L532
 8069              	.L533:
3616:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
3617:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8070              	 .loc 1 3617 0
 8071 01b8 FB79     	 ldrb r3,[r7,#7]
 8072 01ba 03F00203 	 and r3,r3,#2
 8073 01be 002B     	 cmp r3,#0
 8074 01c0 07D0     	 beq .L532
 8075              	 .loc 1 3617 0 is_stmt 0 discriminator 1
 8076 01c2 BB7F     	 ldrb r3,[r7,#30]
 8077 01c4 03F00103 	 and r3,r3,#1
 8078 01c8 002B     	 cmp r3,#0
 8079 01ca 02D0     	 beq .L532
3618:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_DENIED;
 8080              	 .loc 1 3618 0 is_stmt 1
 8081 01cc 0723     	 movs r3,#7
 8082 01ce 87F86730 	 strb r3,[r7,#103]
 8083              	.L532:
3619:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3620:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3621:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3622:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3623:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 8084              	 .loc 1 3623 0
 8085 01d2 97F86730 	 ldrb r3,[r7,#103]
 8086 01d6 002B     	 cmp r3,#0
 8087 01d8 28D1     	 bne .L534
3624:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwrit
 8088              	 .loc 1 3624 0
 8089 01da FB79     	 ldrb r3,[r7,#7]
 8090 01dc 03F00803 	 and r3,r3,#8
 8091 01e0 002B     	 cmp r3,#0
 8092 01e2 03D0     	 beq .L535
 8093              	 .loc 1 3624 0 is_stmt 0 discriminator 1
 8094 01e4 FB79     	 ldrb r3,[r7,#7]
 8095 01e6 43F04003 	 orr r3,r3,#64
 8096 01ea FB71     	 strb r3,[r7,#7]
 8097              	.L535:
3625:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8098              	 .loc 1 3625 0 is_stmt 1
 8099 01ec 7B69     	 ldr r3,[r7,#20]
 8100 01ee 5A6B     	 ldr r2,[r3,#52]
 8101 01f0 FB68     	 ldr r3,[r7,#12]
 8102 01f2 5A62     	 str r2,[r3,#36]
3626:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->dir_ptr = dj.dir;
 8103              	 .loc 1 3626 0
 8104 01f4 BA6B     	 ldr r2,[r7,#56]
 8105 01f6 FB68     	 ldr r3,[r7,#12]
 8106 01f8 9A62     	 str r2,[r3,#40]
3627:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3628:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 8107              	 .loc 1 3628 0
 8108 01fa FB79     	 ldrb r3,[r7,#7]
 8109 01fc 23F00103 	 bic r3,r3,#1
 8110 0200 002B     	 cmp r3,#0
 8111 0202 14BF     	 ite ne
 8112 0204 0123     	 movne r3,#1
 8113 0206 0023     	 moveq r3,#0
 8114 0208 DBB2     	 uxtb r3,r3
 8115 020a 1A46     	 mov r2,r3
 8116 020c 07F11803 	 add r3,r7,#24
 8117 0210 1846     	 mov r0,r3
 8118 0212 1146     	 mov r1,r2
 8119 0214 FFF7FEFF 	 bl inc_lock
 8120 0218 0246     	 mov r2,r0
 8121 021a FB68     	 ldr r3,[r7,#12]
 8122 021c 1A61     	 str r2,[r3,#16]
3629:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 8123              	 .loc 1 3629 0
 8124 021e FB68     	 ldr r3,[r7,#12]
 8125 0220 1B69     	 ldr r3,[r3,#16]
 8126 0222 002B     	 cmp r3,#0
 8127 0224 02D1     	 bne .L534
 8128              	 .loc 1 3629 0 is_stmt 0 discriminator 1
 8129 0226 0223     	 movs r3,#2
 8130 0228 87F86730 	 strb r3,[r7,#103]
 8131              	.L534:
3630:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3631:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3632:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* R/O configuration */
3633:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
3634:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
3635:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;
3636:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
3637:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
3638:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_FILE;
3639:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3640:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3641:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3642:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3643:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3644:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 8132              	 .loc 1 3644 0 is_stmt 1
 8133 022c 97F86730 	 ldrb r3,[r7,#103]
 8134 0230 002B     	 cmp r3,#0
 8135 0232 40F09580 	 bne .L521
3645:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3646:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3647:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
3648:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3649:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.c_ofs = dj.blk_ofs;
3650:../Dave/Generated/FATFS/ff_Src/ff.c **** 				init_alloc_info(fs, &fp->obj);
3651:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
3652:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3653:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
3654:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8136              	 .loc 1 3654 0
 8137 0236 7A69     	 ldr r2,[r7,#20]
 8138 0238 BB6B     	 ldr r3,[r7,#56]
 8139 023a 1046     	 mov r0,r2
 8140 023c 1946     	 mov r1,r3
 8141 023e FFF7FEFF 	 bl ld_clust
 8142 0242 0246     	 mov r2,r0
 8143 0244 FB68     	 ldr r3,[r7,#12]
 8144 0246 9A60     	 str r2,[r3,#8]
3655:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8145              	 .loc 1 3655 0
 8146 0248 BB6B     	 ldr r3,[r7,#56]
 8147 024a 1C33     	 adds r3,r3,#28
 8148 024c 1846     	 mov r0,r3
 8149 024e FFF7FEFF 	 bl ld_dword
 8150 0252 0246     	 mov r2,r0
 8151 0254 FB68     	 ldr r3,[r7,#12]
 8152 0256 DA60     	 str r2,[r3,#12]
3656:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3657:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
3658:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->cltbl = 0;			/* Disable fast seek mode */
3659:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3660:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.fs = fs;	 	/* Validate the file object */
 8153              	 .loc 1 3660 0
 8154 0258 7A69     	 ldr r2,[r7,#20]
 8155 025a FB68     	 ldr r3,[r7,#12]
 8156 025c 1A60     	 str r2,[r3]
3661:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.id = fs->id;
 8157              	 .loc 1 3661 0
 8158 025e 7B69     	 ldr r3,[r7,#20]
 8159 0260 DA88     	 ldrh r2,[r3,#6]
 8160 0262 FB68     	 ldr r3,[r7,#12]
 8161 0264 9A80     	 strh r2,[r3,#4]
3662:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->flag = mode;		/* Set file access mode */
 8162              	 .loc 1 3662 0
 8163 0266 FB68     	 ldr r3,[r7,#12]
 8164 0268 FA79     	 ldrb r2,[r7,#7]
 8165 026a 1A75     	 strb r2,[r3,#20]
3663:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->err = 0;			/* Clear error flag */
 8166              	 .loc 1 3663 0
 8167 026c FB68     	 ldr r3,[r7,#12]
 8168 026e 0022     	 movs r2,#0
 8169 0270 5A75     	 strb r2,[r3,#21]
3664:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
 8170              	 .loc 1 3664 0
 8171 0272 FB68     	 ldr r3,[r7,#12]
 8172 0274 0022     	 movs r2,#0
 8173 0276 1A62     	 str r2,[r3,#32]
3665:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
 8174              	 .loc 1 3665 0
 8175 0278 FB68     	 ldr r3,[r7,#12]
 8176 027a 0022     	 movs r2,#0
 8177 027c 9A61     	 str r2,[r3,#24]
3666:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3667:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3668:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
 8178              	 .loc 1 3668 0
 8179 027e FB68     	 ldr r3,[r7,#12]
 8180 0280 2C33     	 adds r3,r3,#44
 8181 0282 1846     	 mov r0,r3
 8182 0284 0021     	 movs r1,#0
 8183 0286 4FF40072 	 mov r2,#512
 8184 028a FFF7FEFF 	 bl mem_set
3669:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3670:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
 8185              	 .loc 1 3670 0
 8186 028e FB79     	 ldrb r3,[r7,#7]
 8187 0290 03F02003 	 and r3,r3,#32
 8188 0294 002B     	 cmp r3,#0
 8189 0296 63D0     	 beq .L521
 8190              	 .loc 1 3670 0 is_stmt 0 discriminator 1
 8191 0298 FB68     	 ldr r3,[r7,#12]
 8192 029a DB68     	 ldr r3,[r3,#12]
 8193 029c 002B     	 cmp r3,#0
 8194 029e 5FD0     	 beq .L521
3671:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8195              	 .loc 1 3671 0 is_stmt 1
 8196 02a0 FB68     	 ldr r3,[r7,#12]
 8197 02a2 DA68     	 ldr r2,[r3,#12]
 8198 02a4 FB68     	 ldr r3,[r7,#12]
 8199 02a6 9A61     	 str r2,[r3,#24]
3672:../Dave/Generated/FATFS/ff_Src/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8200              	 .loc 1 3672 0
 8201 02a8 7B69     	 ldr r3,[r7,#20]
 8202 02aa 5B89     	 ldrh r3,[r3,#10]
 8203 02ac 5B02     	 lsls r3,r3,#9
 8204 02ae 3B65     	 str r3,[r7,#80]
3673:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8205              	 .loc 1 3673 0
 8206 02b0 FB68     	 ldr r3,[r7,#12]
 8207 02b2 9B68     	 ldr r3,[r3,#8]
 8208 02b4 3B66     	 str r3,[r7,#96]
3674:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8209              	 .loc 1 3674 0
 8210 02b6 FB68     	 ldr r3,[r7,#12]
 8211 02b8 DB68     	 ldr r3,[r3,#12]
 8212 02ba FB65     	 str r3,[r7,#92]
 8213 02bc 16E0     	 b .L536
 8214              	.L540:
3675:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 8215              	 .loc 1 3675 0
 8216 02be FB68     	 ldr r3,[r7,#12]
 8217 02c0 1846     	 mov r0,r3
 8218 02c2 396E     	 ldr r1,[r7,#96]
 8219 02c4 FFF7FEFF 	 bl get_fat
 8220 02c8 3866     	 str r0,[r7,#96]
3676:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
 8221              	 .loc 1 3676 0
 8222 02ca 3B6E     	 ldr r3,[r7,#96]
 8223 02cc 012B     	 cmp r3,#1
 8224 02ce 02D8     	 bhi .L537
 8225              	 .loc 1 3676 0 is_stmt 0 discriminator 1
 8226 02d0 0223     	 movs r3,#2
 8227 02d2 87F86730 	 strb r3,[r7,#103]
 8228              	.L537:
3677:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8229              	 .loc 1 3677 0 is_stmt 1
 8230 02d6 3B6E     	 ldr r3,[r7,#96]
 8231 02d8 B3F1FF3F 	 cmp r3,#-1
 8232 02dc 02D1     	 bne .L538
 8233              	 .loc 1 3677 0 is_stmt 0 discriminator 1
 8234 02de 0123     	 movs r3,#1
 8235 02e0 87F86730 	 strb r3,[r7,#103]
 8236              	.L538:
3674:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 8237              	 .loc 1 3674 0 is_stmt 1 discriminator 2
 8238 02e4 FA6D     	 ldr r2,[r7,#92]
 8239 02e6 3B6D     	 ldr r3,[r7,#80]
 8240 02e8 D31A     	 subs r3,r2,r3
 8241 02ea FB65     	 str r3,[r7,#92]
 8242              	.L536:
3674:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 8243              	 .loc 1 3674 0 is_stmt 0 discriminator 1
 8244 02ec 97F86730 	 ldrb r3,[r7,#103]
 8245 02f0 002B     	 cmp r3,#0
 8246 02f2 03D1     	 bne .L539
3674:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 8247              	 .loc 1 3674 0 discriminator 3
 8248 02f4 FA6D     	 ldr r2,[r7,#92]
 8249 02f6 3B6D     	 ldr r3,[r7,#80]
 8250 02f8 9A42     	 cmp r2,r3
 8251 02fa E0D8     	 bhi .L540
 8252              	.L539:
3678:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3679:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;
 8253              	 .loc 1 3679 0 is_stmt 1
 8254 02fc FB68     	 ldr r3,[r7,#12]
 8255 02fe 3A6E     	 ldr r2,[r7,#96]
 8256 0300 DA61     	 str r2,[r3,#28]
3680:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8257              	 .loc 1 3680 0
 8258 0302 97F86730 	 ldrb r3,[r7,#103]
 8259 0306 002B     	 cmp r3,#0
 8260 0308 2AD1     	 bne .L521
 8261              	 .loc 1 3680 0 is_stmt 0 discriminator 1
 8262 030a FB6D     	 ldr r3,[r7,#92]
 8263 030c C3F30803 	 ubfx r3,r3,#0,#9
 8264 0310 002B     	 cmp r3,#0
 8265 0312 25D0     	 beq .L521
3681:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if ((sc = clst2sect(fs, clst)) == 0) {
 8266              	 .loc 1 3681 0 is_stmt 1
 8267 0314 7B69     	 ldr r3,[r7,#20]
 8268 0316 1846     	 mov r0,r3
 8269 0318 396E     	 ldr r1,[r7,#96]
 8270 031a FFF7FEFF 	 bl clst2sect
 8271 031e F864     	 str r0,[r7,#76]
 8272 0320 FB6C     	 ldr r3,[r7,#76]
 8273 0322 002B     	 cmp r3,#0
 8274 0324 03D1     	 bne .L541
3682:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_INT_ERR;
 8275              	 .loc 1 3682 0
 8276 0326 0223     	 movs r3,#2
 8277 0328 87F86730 	 strb r3,[r7,#103]
 8278 032c 18E0     	 b .L521
 8279              	.L541:
3683:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {
3684:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8280              	 .loc 1 3684 0
 8281 032e FB6D     	 ldr r3,[r7,#92]
 8282 0330 5A0A     	 lsrs r2,r3,#9
 8283 0332 FB6C     	 ldr r3,[r7,#76]
 8284 0334 1A44     	 add r2,r2,r3
 8285 0336 FB68     	 ldr r3,[r7,#12]
 8286 0338 1A62     	 str r2,[r3,#32]
3685:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3686:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8287              	 .loc 1 3686 0
 8288 033a 7B69     	 ldr r3,[r7,#20]
 8289 033c 5978     	 ldrb r1,[r3,#1]
 8290 033e FB68     	 ldr r3,[r7,#12]
 8291 0340 03F12C02 	 add r2,r3,#44
 8292 0344 FB68     	 ldr r3,[r7,#12]
 8293 0346 1B6A     	 ldr r3,[r3,#32]
 8294 0348 0846     	 mov r0,r1
 8295 034a 1146     	 mov r1,r2
 8296 034c 1A46     	 mov r2,r3
 8297 034e 0123     	 movs r3,#1
 8298 0350 FFF7FEFF 	 bl disk_read
 8299 0354 0346     	 mov r3,r0
 8300 0356 002B     	 cmp r3,#0
 8301 0358 02D0     	 beq .L521
 8302              	 .loc 1 3686 0 is_stmt 0 discriminator 1
 8303 035a 0123     	 movs r3,#1
 8304 035c 87F86730 	 strb r3,[r7,#103]
 8305              	.L521:
3687:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3688:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3689:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3690:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3691:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3692:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3693:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3694:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
3695:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3696:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3697:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8306              	 .loc 1 3697 0 is_stmt 1
 8307 0360 97F86730 	 ldrb r3,[r7,#103]
 8308 0364 002B     	 cmp r3,#0
 8309 0366 02D0     	 beq .L542
 8310              	 .loc 1 3697 0 is_stmt 0 discriminator 1
 8311 0368 FB68     	 ldr r3,[r7,#12]
 8312 036a 0022     	 movs r2,#0
 8313 036c 1A60     	 str r2,[r3]
 8314              	.L542:
3698:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3699:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 8315              	 .loc 1 3699 0 is_stmt 1
 8316 036e 97F86730 	 ldrb r3,[r7,#103]
 8317              	.L543:
3700:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8318              	 .loc 1 3700 0 discriminator 1
 8319 0372 1846     	 mov r0,r3
 8320 0374 6C37     	 adds r7,r7,#108
 8321              	.LCFI261:
 8322              	 .cfi_def_cfa_offset 12
 8323 0376 BD46     	 mov sp,r7
 8324              	.LCFI262:
 8325              	 .cfi_def_cfa_register 13
 8326              	 
 8327 0378 90BD     	 pop {r4,r7,pc}
 8328              	 .cfi_endproc
 8329              	.LFE48:
 8331 037a 00BF     	 .section .text.f_read,"ax",%progbits
 8332              	 .align 2
 8333              	 .global f_read
 8334              	 .thumb
 8335              	 .thumb_func
 8337              	f_read:
 8338              	.LFB49:
3701:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3702:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3703:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3704:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3705:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3706:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Read File                                                             */
3707:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3708:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3709:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_read (
3710:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp, 	/* Pointer to the file object */
3711:../Dave/Generated/FATFS/ff_Src/ff.c **** 	void* buff,	/* Pointer to data buffer */
3712:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT btr,	/* Number of bytes to read */
3713:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT* br	/* Pointer to number of bytes read */
3714:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3715:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8339              	 .loc 1 3715 0
 8340              	 .cfi_startproc
 8341              	 
 8342              	 
 8343 0000 80B5     	 push {r7,lr}
 8344              	.LCFI263:
 8345              	 .cfi_def_cfa_offset 8
 8346              	 .cfi_offset 7,-8
 8347              	 .cfi_offset 14,-4
 8348 0002 8EB0     	 sub sp,sp,#56
 8349              	.LCFI264:
 8350              	 .cfi_def_cfa_offset 64
 8351 0004 00AF     	 add r7,sp,#0
 8352              	.LCFI265:
 8353              	 .cfi_def_cfa_register 7
 8354 0006 F860     	 str r0,[r7,#12]
 8355 0008 B960     	 str r1,[r7,#8]
 8356 000a 7A60     	 str r2,[r7,#4]
 8357 000c 3B60     	 str r3,[r7]
3716:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3717:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3718:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst, sect;
3719:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t remain;
3720:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT rcnt, cc, csect;
3721:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *rbuff = (BYTE*)buff;
 8358              	 .loc 1 3721 0
 8359 000e BB68     	 ldr r3,[r7,#8]
 8360 0010 7B62     	 str r3,[r7,#36]
3722:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3723:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3724:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*br = 0;	/* Clear read byte counter */
 8361              	 .loc 1 3724 0
 8362 0012 3B68     	 ldr r3,[r7]
 8363 0014 0022     	 movs r2,#0
 8364 0016 1A60     	 str r2,[r3]
3725:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8365              	 .loc 1 3725 0
 8366 0018 FA68     	 ldr r2,[r7,#12]
 8367 001a 07F11403 	 add r3,r7,#20
 8368 001e 1046     	 mov r0,r2
 8369 0020 1946     	 mov r1,r3
 8370 0022 FFF7FEFF 	 bl validate
 8371 0026 0346     	 mov r3,r0
 8372 0028 87F83730 	 strb r3,[r7,#55]
3726:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8373              	 .loc 1 3726 0
 8374 002c 97F83730 	 ldrb r3,[r7,#55]
 8375 0030 002B     	 cmp r3,#0
 8376 0032 07D1     	 bne .L545
 8377              	 .loc 1 3726 0 is_stmt 0 discriminator 2
 8378 0034 FB68     	 ldr r3,[r7,#12]
 8379 0036 5B7D     	 ldrb r3,[r3,#21]
 8380 0038 87F83730 	 strb r3,[r7,#55]
 8381 003c 97F83730 	 ldrb r3,[r7,#55]
 8382 0040 002B     	 cmp r3,#0
 8383 0042 02D0     	 beq .L546
 8384              	.L545:
 8385              	 .loc 1 3726 0 discriminator 3
 8386 0044 97F83730 	 ldrb r3,[r7,#55]
 8387 0048 10E1     	 b .L568
 8388              	.L546:
3727:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8389              	 .loc 1 3727 0 is_stmt 1
 8390 004a FB68     	 ldr r3,[r7,#12]
 8391 004c 1B7D     	 ldrb r3,[r3,#20]
 8392 004e 03F00103 	 and r3,r3,#1
 8393 0052 002B     	 cmp r3,#0
 8394 0054 01D1     	 bne .L548
 8395              	 .loc 1 3727 0 is_stmt 0 discriminator 1
 8396 0056 0723     	 movs r3,#7
 8397 0058 08E1     	 b .L568
 8398              	.L548:
3728:../Dave/Generated/FATFS/ff_Src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 8399              	 .loc 1 3728 0 is_stmt 1
 8400 005a FB68     	 ldr r3,[r7,#12]
 8401 005c DA68     	 ldr r2,[r3,#12]
 8402 005e FB68     	 ldr r3,[r7,#12]
 8403 0060 9B69     	 ldr r3,[r3,#24]
 8404 0062 D31A     	 subs r3,r2,r3
 8405 0064 3B62     	 str r3,[r7,#32]
3729:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8406              	 .loc 1 3729 0
 8407 0066 7A68     	 ldr r2,[r7,#4]
 8408 0068 3B6A     	 ldr r3,[r7,#32]
 8409 006a 9A42     	 cmp r2,r3
 8410 006c 01D9     	 bls .L549
 8411              	 .loc 1 3729 0 is_stmt 0 discriminator 1
 8412 006e 3B6A     	 ldr r3,[r7,#32]
 8413 0070 7B60     	 str r3,[r7,#4]
 8414              	.L549:
3730:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3731:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for ( ;  btr;								/* Repeat until btr bytes read */
 8415              	 .loc 1 3731 0 is_stmt 1
 8416 0072 F6E0     	 b .L550
 8417              	.L567:
3732:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
3733:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8418              	 .loc 1 3733 0
 8419 0074 FB68     	 ldr r3,[r7,#12]
 8420 0076 9B69     	 ldr r3,[r3,#24]
 8421 0078 C3F30803 	 ubfx r3,r3,#0,#9
 8422 007c 002B     	 cmp r3,#0
 8423 007e 40F0C280 	 bne .L551
3734:../Dave/Generated/FATFS/ff_Src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8424              	 .loc 1 3734 0
 8425 0082 FB68     	 ldr r3,[r7,#12]
 8426 0084 9B69     	 ldr r3,[r3,#24]
 8427 0086 5B0A     	 lsrs r3,r3,#9
 8428 0088 7A69     	 ldr r2,[r7,#20]
 8429 008a 5289     	 ldrh r2,[r2,#10]
 8430 008c 013A     	 subs r2,r2,#1
 8431 008e 1340     	 ands r3,r3,r2
 8432 0090 FB61     	 str r3,[r7,#28]
3735:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
 8433              	 .loc 1 3735 0
 8434 0092 FB69     	 ldr r3,[r7,#28]
 8435 0094 002B     	 cmp r3,#0
 8436 0096 23D1     	 bne .L552
3736:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 8437              	 .loc 1 3736 0
 8438 0098 FB68     	 ldr r3,[r7,#12]
 8439 009a 9B69     	 ldr r3,[r3,#24]
 8440 009c 002B     	 cmp r3,#0
 8441 009e 03D1     	 bne .L553
3737:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8442              	 .loc 1 3737 0
 8443 00a0 FB68     	 ldr r3,[r7,#12]
 8444 00a2 9B68     	 ldr r3,[r3,#8]
 8445 00a4 3B63     	 str r3,[r7,#48]
 8446 00a6 07E0     	 b .L554
 8447              	.L553:
3738:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {						/* Middle or end of the file */
3739:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
3740:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->cltbl) {
3741:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3742:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
3743:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3744:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
3745:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8448              	 .loc 1 3745 0
 8449 00a8 FA68     	 ldr r2,[r7,#12]
 8450 00aa FB68     	 ldr r3,[r7,#12]
 8451 00ac DB69     	 ldr r3,[r3,#28]
 8452 00ae 1046     	 mov r0,r2
 8453 00b0 1946     	 mov r1,r3
 8454 00b2 FFF7FEFF 	 bl get_fat
 8455 00b6 3863     	 str r0,[r7,#48]
 8456              	.L554:
3746:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3747:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3748:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8457              	 .loc 1 3748 0
 8458 00b8 3B6B     	 ldr r3,[r7,#48]
 8459 00ba 012B     	 cmp r3,#1
 8460 00bc 04D8     	 bhi .L555
 8461              	 .loc 1 3748 0 is_stmt 0 discriminator 1
 8462 00be FB68     	 ldr r3,[r7,#12]
 8463 00c0 0222     	 movs r2,#2
 8464 00c2 5A75     	 strb r2,[r3,#21]
 8465 00c4 0223     	 movs r3,#2
 8466 00c6 D1E0     	 b .L568
 8467              	.L555:
3749:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8468              	 .loc 1 3749 0 is_stmt 1
 8469 00c8 3B6B     	 ldr r3,[r7,#48]
 8470 00ca B3F1FF3F 	 cmp r3,#-1
 8471 00ce 04D1     	 bne .L556
 8472              	 .loc 1 3749 0 is_stmt 0 discriminator 1
 8473 00d0 FB68     	 ldr r3,[r7,#12]
 8474 00d2 0122     	 movs r2,#1
 8475 00d4 5A75     	 strb r2,[r3,#21]
 8476 00d6 0123     	 movs r3,#1
 8477 00d8 C8E0     	 b .L568
 8478              	.L556:
3750:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 8479              	 .loc 1 3750 0 is_stmt 1
 8480 00da FB68     	 ldr r3,[r7,#12]
 8481 00dc 3A6B     	 ldr r2,[r7,#48]
 8482 00de DA61     	 str r2,[r3,#28]
 8483              	.L552:
3751:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3752:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8484              	 .loc 1 3752 0
 8485 00e0 7A69     	 ldr r2,[r7,#20]
 8486 00e2 FB68     	 ldr r3,[r7,#12]
 8487 00e4 DB69     	 ldr r3,[r3,#28]
 8488 00e6 1046     	 mov r0,r2
 8489 00e8 1946     	 mov r1,r3
 8490 00ea FFF7FEFF 	 bl clst2sect
 8491 00ee B861     	 str r0,[r7,#24]
3753:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8492              	 .loc 1 3753 0
 8493 00f0 BB69     	 ldr r3,[r7,#24]
 8494 00f2 002B     	 cmp r3,#0
 8495 00f4 04D1     	 bne .L557
 8496              	 .loc 1 3753 0 is_stmt 0 discriminator 1
 8497 00f6 FB68     	 ldr r3,[r7,#12]
 8498 00f8 0222     	 movs r2,#2
 8499 00fa 5A75     	 strb r2,[r3,#21]
 8500 00fc 0223     	 movs r3,#2
 8501 00fe B5E0     	 b .L568
 8502              	.L557:
3754:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += csect;
 8503              	 .loc 1 3754 0 is_stmt 1
 8504 0100 BA69     	 ldr r2,[r7,#24]
 8505 0102 FB69     	 ldr r3,[r7,#28]
 8506 0104 1344     	 add r3,r3,r2
 8507 0106 BB61     	 str r3,[r7,#24]
3755:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8508              	 .loc 1 3755 0
 8509 0108 7B68     	 ldr r3,[r7,#4]
 8510 010a 5B0A     	 lsrs r3,r3,#9
 8511 010c BB62     	 str r3,[r7,#40]
3756:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8512              	 .loc 1 3756 0
 8513 010e BB6A     	 ldr r3,[r7,#40]
 8514 0110 002B     	 cmp r3,#0
 8515 0112 3CD0     	 beq .L558
3757:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8516              	 .loc 1 3757 0
 8517 0114 FA69     	 ldr r2,[r7,#28]
 8518 0116 BB6A     	 ldr r3,[r7,#40]
 8519 0118 1344     	 add r3,r3,r2
 8520 011a 7A69     	 ldr r2,[r7,#20]
 8521 011c 5289     	 ldrh r2,[r2,#10]
 8522 011e 9342     	 cmp r3,r2
 8523 0120 05D9     	 bls .L559
3758:../Dave/Generated/FATFS/ff_Src/ff.c **** 					cc = fs->csize - csect;
 8524              	 .loc 1 3758 0
 8525 0122 7B69     	 ldr r3,[r7,#20]
 8526 0124 5B89     	 ldrh r3,[r3,#10]
 8527 0126 1A46     	 mov r2,r3
 8528 0128 FB69     	 ldr r3,[r7,#28]
 8529 012a D31A     	 subs r3,r2,r3
 8530 012c BB62     	 str r3,[r7,#40]
 8531              	.L559:
3759:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3760:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8532              	 .loc 1 3760 0
 8533 012e 7B69     	 ldr r3,[r7,#20]
 8534 0130 5B78     	 ldrb r3,[r3,#1]
 8535 0132 1846     	 mov r0,r3
 8536 0134 796A     	 ldr r1,[r7,#36]
 8537 0136 BA69     	 ldr r2,[r7,#24]
 8538 0138 BB6A     	 ldr r3,[r7,#40]
 8539 013a FFF7FEFF 	 bl disk_read
 8540 013e 0346     	 mov r3,r0
 8541 0140 002B     	 cmp r3,#0
 8542 0142 04D0     	 beq .L560
 8543              	 .loc 1 3760 0 is_stmt 0 discriminator 1
 8544 0144 FB68     	 ldr r3,[r7,#12]
 8545 0146 0122     	 movs r2,#1
 8546 0148 5A75     	 strb r2,[r3,#21]
 8547 014a 0123     	 movs r3,#1
 8548 014c 8EE0     	 b .L568
 8549              	.L560:
3761:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
3762:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3763:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->wflag && fs->winsect - sect < cc) {
3764:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3765:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3766:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3767:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8550              	 .loc 1 3767 0 is_stmt 1
 8551 014e FB68     	 ldr r3,[r7,#12]
 8552 0150 1B7D     	 ldrb r3,[r3,#20]
 8553 0152 DBB2     	 uxtb r3,r3
 8554 0154 5BB2     	 sxtb r3,r3
 8555 0156 002B     	 cmp r3,#0
 8556 0158 15DA     	 bge .L561
 8557              	 .loc 1 3767 0 is_stmt 0 discriminator 1
 8558 015a FB68     	 ldr r3,[r7,#12]
 8559 015c 1A6A     	 ldr r2,[r3,#32]
 8560 015e BB69     	 ldr r3,[r7,#24]
 8561 0160 D21A     	 subs r2,r2,r3
 8562 0162 BB6A     	 ldr r3,[r7,#40]
 8563 0164 9A42     	 cmp r2,r3
 8564 0166 0ED2     	 bcs .L561
3768:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8565              	 .loc 1 3768 0 is_stmt 1
 8566 0168 FB68     	 ldr r3,[r7,#12]
 8567 016a 1A6A     	 ldr r2,[r3,#32]
 8568 016c BB69     	 ldr r3,[r7,#24]
 8569 016e D31A     	 subs r3,r2,r3
 8570 0170 5B02     	 lsls r3,r3,#9
 8571 0172 7A6A     	 ldr r2,[r7,#36]
 8572 0174 1A44     	 add r2,r2,r3
 8573 0176 FB68     	 ldr r3,[r7,#12]
 8574 0178 2C33     	 adds r3,r3,#44
 8575 017a 1046     	 mov r0,r2
 8576 017c 1946     	 mov r1,r3
 8577 017e 4FF40072 	 mov r2,#512
 8578 0182 FFF7FEFF 	 bl mem_cpy
 8579              	.L561:
3769:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3770:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3771:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3772:../Dave/Generated/FATFS/ff_Src/ff.c **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8580              	 .loc 1 3772 0
 8581 0186 BB6A     	 ldr r3,[r7,#40]
 8582 0188 5B02     	 lsls r3,r3,#9
 8583 018a FB62     	 str r3,[r7,#44]
3773:../Dave/Generated/FATFS/ff_Src/ff.c **** 				continue;
 8584              	 .loc 1 3773 0
 8585 018c 55E0     	 b .L562
 8586              	.L558:
3774:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3775:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3776:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8587              	 .loc 1 3776 0
 8588 018e FB68     	 ldr r3,[r7,#12]
 8589 0190 1A6A     	 ldr r2,[r3,#32]
 8590 0192 BB69     	 ldr r3,[r7,#24]
 8591 0194 9A42     	 cmp r2,r3
 8592 0196 33D0     	 beq .L563
3777:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3778:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8593              	 .loc 1 3778 0
 8594 0198 FB68     	 ldr r3,[r7,#12]
 8595 019a 1B7D     	 ldrb r3,[r3,#20]
 8596 019c DBB2     	 uxtb r3,r3
 8597 019e 5BB2     	 sxtb r3,r3
 8598 01a0 002B     	 cmp r3,#0
 8599 01a2 1BDA     	 bge .L564
3779:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8600              	 .loc 1 3779 0
 8601 01a4 7B69     	 ldr r3,[r7,#20]
 8602 01a6 5978     	 ldrb r1,[r3,#1]
 8603 01a8 FB68     	 ldr r3,[r7,#12]
 8604 01aa 03F12C02 	 add r2,r3,#44
 8605 01ae FB68     	 ldr r3,[r7,#12]
 8606 01b0 1B6A     	 ldr r3,[r3,#32]
 8607 01b2 0846     	 mov r0,r1
 8608 01b4 1146     	 mov r1,r2
 8609 01b6 1A46     	 mov r2,r3
 8610 01b8 0123     	 movs r3,#1
 8611 01ba FFF7FEFF 	 bl disk_write
 8612 01be 0346     	 mov r3,r0
 8613 01c0 002B     	 cmp r3,#0
 8614 01c2 04D0     	 beq .L565
 8615              	 .loc 1 3779 0 is_stmt 0 discriminator 1
 8616 01c4 FB68     	 ldr r3,[r7,#12]
 8617 01c6 0122     	 movs r2,#1
 8618 01c8 5A75     	 strb r2,[r3,#21]
 8619 01ca 0123     	 movs r3,#1
 8620 01cc 4EE0     	 b .L568
 8621              	.L565:
3780:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 8622              	 .loc 1 3780 0 is_stmt 1
 8623 01ce FB68     	 ldr r3,[r7,#12]
 8624 01d0 1B7D     	 ldrb r3,[r3,#20]
 8625 01d2 03F07F03 	 and r3,r3,#127
 8626 01d6 DAB2     	 uxtb r2,r3
 8627 01d8 FB68     	 ldr r3,[r7,#12]
 8628 01da 1A75     	 strb r2,[r3,#20]
 8629              	.L564:
3781:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3782:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3783:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
 8630              	 .loc 1 3783 0
 8631 01dc 7B69     	 ldr r3,[r7,#20]
 8632 01de 5A78     	 ldrb r2,[r3,#1]
 8633 01e0 FB68     	 ldr r3,[r7,#12]
 8634 01e2 2C33     	 adds r3,r3,#44
 8635 01e4 1046     	 mov r0,r2
 8636 01e6 1946     	 mov r1,r3
 8637 01e8 BA69     	 ldr r2,[r7,#24]
 8638 01ea 0123     	 movs r3,#1
 8639 01ec FFF7FEFF 	 bl disk_read
 8640 01f0 0346     	 mov r3,r0
 8641 01f2 002B     	 cmp r3,#0
 8642 01f4 04D0     	 beq .L563
 8643              	 .loc 1 3783 0 is_stmt 0 discriminator 1
 8644 01f6 FB68     	 ldr r3,[r7,#12]
 8645 01f8 0122     	 movs r2,#1
 8646 01fa 5A75     	 strb r2,[r3,#21]
 8647 01fc 0123     	 movs r3,#1
 8648 01fe 35E0     	 b .L568
 8649              	.L563:
3784:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3785:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3786:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = sect;
 8650              	 .loc 1 3786 0 is_stmt 1
 8651 0200 FB68     	 ldr r3,[r7,#12]
 8652 0202 BA69     	 ldr r2,[r7,#24]
 8653 0204 1A62     	 str r2,[r3,#32]
 8654              	.L551:
3787:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3788:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8655              	 .loc 1 3788 0
 8656 0206 FB68     	 ldr r3,[r7,#12]
 8657 0208 9B69     	 ldr r3,[r3,#24]
 8658 020a C3F30803 	 ubfx r3,r3,#0,#9
 8659 020e C3F50073 	 rsb r3,r3,#512
 8660 0212 FB62     	 str r3,[r7,#44]
3789:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8661              	 .loc 1 3789 0
 8662 0214 FA6A     	 ldr r2,[r7,#44]
 8663 0216 7B68     	 ldr r3,[r7,#4]
 8664 0218 9A42     	 cmp r2,r3
 8665 021a 01D9     	 bls .L566
 8666              	 .loc 1 3789 0 is_stmt 0 discriminator 1
 8667 021c 7B68     	 ldr r3,[r7,#4]
 8668 021e FB62     	 str r3,[r7,#44]
 8669              	.L566:
3790:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3791:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3792:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3793:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3794:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8670              	 .loc 1 3794 0 is_stmt 1
 8671 0220 FB68     	 ldr r3,[r7,#12]
 8672 0222 9B69     	 ldr r3,[r3,#24]
 8673 0224 C3F30803 	 ubfx r3,r3,#0,#9
 8674 0228 2833     	 adds r3,r3,#40
 8675 022a FA68     	 ldr r2,[r7,#12]
 8676 022c 1344     	 add r3,r3,r2
 8677 022e 0433     	 adds r3,r3,#4
 8678 0230 786A     	 ldr r0,[r7,#36]
 8679 0232 1946     	 mov r1,r3
 8680 0234 FA6A     	 ldr r2,[r7,#44]
 8681 0236 FFF7FEFF 	 bl mem_cpy
 8682              	.L562:
3732:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8683              	 .loc 1 3732 0
 8684 023a 7A68     	 ldr r2,[r7,#4]
 8685 023c FB6A     	 ldr r3,[r7,#44]
 8686 023e D31A     	 subs r3,r2,r3
 8687 0240 7B60     	 str r3,[r7,#4]
 8688 0242 3B68     	 ldr r3,[r7]
 8689 0244 1A68     	 ldr r2,[r3]
 8690 0246 FB6A     	 ldr r3,[r7,#44]
 8691 0248 1A44     	 add r2,r2,r3
 8692 024a 3B68     	 ldr r3,[r7]
 8693 024c 1A60     	 str r2,[r3]
 8694 024e 7A6A     	 ldr r2,[r7,#36]
 8695 0250 FB6A     	 ldr r3,[r7,#44]
 8696 0252 1344     	 add r3,r3,r2
 8697 0254 7B62     	 str r3,[r7,#36]
 8698 0256 FB68     	 ldr r3,[r7,#12]
 8699 0258 9A69     	 ldr r2,[r3,#24]
 8700 025a FB6A     	 ldr r3,[r7,#44]
 8701 025c 1A44     	 add r2,r2,r3
 8702 025e FB68     	 ldr r3,[r7,#12]
 8703 0260 9A61     	 str r2,[r3,#24]
 8704              	.L550:
3731:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 8705              	 .loc 1 3731 0
 8706 0262 7B68     	 ldr r3,[r7,#4]
 8707 0264 002B     	 cmp r3,#0
 8708 0266 7FF405AF 	 bne .L567
3795:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3796:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3797:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3798:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
 8709              	 .loc 1 3798 0
 8710 026a 0023     	 movs r3,#0
 8711              	.L568:
3799:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8712              	 .loc 1 3799 0 discriminator 1
 8713 026c 1846     	 mov r0,r3
 8714 026e 3837     	 adds r7,r7,#56
 8715              	.LCFI266:
 8716              	 .cfi_def_cfa_offset 8
 8717 0270 BD46     	 mov sp,r7
 8718              	.LCFI267:
 8719              	 .cfi_def_cfa_register 13
 8720              	 
 8721 0272 80BD     	 pop {r7,pc}
 8722              	 .cfi_endproc
 8723              	.LFE49:
 8725              	 .section .text.f_write,"ax",%progbits
 8726              	 .align 2
 8727              	 .global f_write
 8728              	 .thumb
 8729              	 .thumb_func
 8731              	f_write:
 8732              	.LFB50:
3800:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3801:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3802:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3803:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3804:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3805:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3806:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Write File                                                            */
3807:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3808:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3809:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_write (
3810:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
3811:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const void* buff,	/* Pointer to the data to be written */
3812:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT btw,			/* Number of bytes to write */
3813:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
3814:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3815:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8733              	 .loc 1 3815 0
 8734              	 .cfi_startproc
 8735              	 
 8736              	 
 8737 0000 80B5     	 push {r7,lr}
 8738              	.LCFI268:
 8739              	 .cfi_def_cfa_offset 8
 8740              	 .cfi_offset 7,-8
 8741              	 .cfi_offset 14,-4
 8742 0002 8CB0     	 sub sp,sp,#48
 8743              	.LCFI269:
 8744              	 .cfi_def_cfa_offset 56
 8745 0004 00AF     	 add r7,sp,#0
 8746              	.LCFI270:
 8747              	 .cfi_def_cfa_register 7
 8748 0006 F860     	 str r0,[r7,#12]
 8749 0008 B960     	 str r1,[r7,#8]
 8750 000a 7A60     	 str r2,[r7,#4]
 8751 000c 3B60     	 str r3,[r7]
3816:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3817:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3818:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst, sect;
3819:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT wcnt, cc, csect;
3820:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
 8752              	 .loc 1 3820 0
 8753 000e BB68     	 ldr r3,[r7,#8]
 8754 0010 FB61     	 str r3,[r7,#28]
3821:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3822:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3823:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*bw = 0;	/* Clear write byte counter */
 8755              	 .loc 1 3823 0
 8756 0012 3B68     	 ldr r3,[r7]
 8757 0014 0022     	 movs r2,#0
 8758 0016 1A60     	 str r2,[r3]
3824:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8759              	 .loc 1 3824 0
 8760 0018 FA68     	 ldr r2,[r7,#12]
 8761 001a 07F11003 	 add r3,r7,#16
 8762 001e 1046     	 mov r0,r2
 8763 0020 1946     	 mov r1,r3
 8764 0022 FFF7FEFF 	 bl validate
 8765 0026 0346     	 mov r3,r0
 8766 0028 87F82F30 	 strb r3,[r7,#47]
3825:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8767              	 .loc 1 3825 0
 8768 002c 97F82F30 	 ldrb r3,[r7,#47]
 8769 0030 002B     	 cmp r3,#0
 8770 0032 07D1     	 bne .L570
 8771              	 .loc 1 3825 0 is_stmt 0 discriminator 2
 8772 0034 FB68     	 ldr r3,[r7,#12]
 8773 0036 5B7D     	 ldrb r3,[r3,#21]
 8774 0038 87F82F30 	 strb r3,[r7,#47]
 8775 003c 97F82F30 	 ldrb r3,[r7,#47]
 8776 0040 002B     	 cmp r3,#0
 8777 0042 02D0     	 beq .L571
 8778              	.L570:
 8779              	 .loc 1 3825 0 discriminator 3
 8780 0044 97F82F30 	 ldrb r3,[r7,#47]
 8781 0048 43E1     	 b .L596
 8782              	.L571:
3826:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8783              	 .loc 1 3826 0 is_stmt 1
 8784 004a FB68     	 ldr r3,[r7,#12]
 8785 004c 1B7D     	 ldrb r3,[r3,#20]
 8786 004e 03F00203 	 and r3,r3,#2
 8787 0052 002B     	 cmp r3,#0
 8788 0054 01D1     	 bne .L573
 8789              	 .loc 1 3826 0 is_stmt 0 discriminator 1
 8790 0056 0723     	 movs r3,#7
 8791 0058 3BE1     	 b .L596
 8792              	.L573:
3827:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3828:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
3829:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8793              	 .loc 1 3829 0 is_stmt 1
 8794 005a FB68     	 ldr r3,[r7,#12]
 8795 005c 9A69     	 ldr r2,[r3,#24]
 8796 005e 7B68     	 ldr r3,[r7,#4]
 8797 0060 1A44     	 add r2,r2,r3
 8798 0062 FB68     	 ldr r3,[r7,#12]
 8799 0064 9B69     	 ldr r3,[r3,#24]
 8800 0066 9A42     	 cmp r2,r3
 8801 0068 03D2     	 bcs .L574
3830:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8802              	 .loc 1 3830 0
 8803 006a FB68     	 ldr r3,[r7,#12]
 8804 006c 9B69     	 ldr r3,[r3,#24]
 8805 006e DB43     	 mvns r3,r3
 8806 0070 7B60     	 str r3,[r7,#4]
 8807              	.L574:
3831:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3832:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3833:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
 8808              	 .loc 1 3833 0
 8809 0072 22E1     	 b .L575
 8810              	.L595:
3834:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.
3835:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8811              	 .loc 1 3835 0
 8812 0074 FB68     	 ldr r3,[r7,#12]
 8813 0076 9B69     	 ldr r3,[r3,#24]
 8814 0078 C3F30803 	 ubfx r3,r3,#0,#9
 8815 007c 002B     	 cmp r3,#0
 8816 007e 40F0DE80 	 bne .L576
3836:../Dave/Generated/FATFS/ff_Src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8817              	 .loc 1 3836 0
 8818 0082 FB68     	 ldr r3,[r7,#12]
 8819 0084 9B69     	 ldr r3,[r3,#24]
 8820 0086 5B0A     	 lsrs r3,r3,#9
 8821 0088 3A69     	 ldr r2,[r7,#16]
 8822 008a 5289     	 ldrh r2,[r2,#10]
 8823 008c 013A     	 subs r2,r2,#1
 8824 008e 1340     	 ands r3,r3,r2
 8825 0090 BB61     	 str r3,[r7,#24]
3837:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
 8826              	 .loc 1 3837 0
 8827 0092 BB69     	 ldr r3,[r7,#24]
 8828 0094 002B     	 cmp r3,#0
 8829 0096 37D1     	 bne .L577
3838:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 8830              	 .loc 1 3838 0
 8831 0098 FB68     	 ldr r3,[r7,#12]
 8832 009a 9B69     	 ldr r3,[r3,#24]
 8833 009c 002B     	 cmp r3,#0
 8834 009e 0CD1     	 bne .L578
3839:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 8835              	 .loc 1 3839 0
 8836 00a0 FB68     	 ldr r3,[r7,#12]
 8837 00a2 9B68     	 ldr r3,[r3,#8]
 8838 00a4 BB62     	 str r3,[r7,#40]
3840:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
 8839              	 .loc 1 3840 0
 8840 00a6 BB6A     	 ldr r3,[r7,#40]
 8841 00a8 002B     	 cmp r3,#0
 8842 00aa 0ED1     	 bne .L580
3841:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8843              	 .loc 1 3841 0
 8844 00ac FB68     	 ldr r3,[r7,#12]
 8845 00ae 1846     	 mov r0,r3
 8846 00b0 0021     	 movs r1,#0
 8847 00b2 FFF7FEFF 	 bl create_chain
 8848 00b6 B862     	 str r0,[r7,#40]
 8849 00b8 07E0     	 b .L580
 8850              	.L578:
3842:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3843:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {					/* On the middle or end of the file */
3844:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
3845:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->cltbl) {
3846:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3847:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
3848:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3849:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
3850:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8851              	 .loc 1 3850 0
 8852 00ba FA68     	 ldr r2,[r7,#12]
 8853 00bc FB68     	 ldr r3,[r7,#12]
 8854 00be DB69     	 ldr r3,[r3,#28]
 8855 00c0 1046     	 mov r0,r2
 8856 00c2 1946     	 mov r1,r3
 8857 00c4 FFF7FEFF 	 bl create_chain
 8858 00c8 B862     	 str r0,[r7,#40]
 8859              	.L580:
3851:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3852:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3853:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8860              	 .loc 1 3853 0
 8861 00ca BB6A     	 ldr r3,[r7,#40]
 8862 00cc 002B     	 cmp r3,#0
 8863 00ce 00D1     	 bne .L581
 8864 00d0 F7E0     	 b .L582
 8865              	.L581:
3854:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8866              	 .loc 1 3854 0
 8867 00d2 BB6A     	 ldr r3,[r7,#40]
 8868 00d4 012B     	 cmp r3,#1
 8869 00d6 04D1     	 bne .L583
 8870              	 .loc 1 3854 0 is_stmt 0 discriminator 1
 8871 00d8 FB68     	 ldr r3,[r7,#12]
 8872 00da 0222     	 movs r2,#2
 8873 00dc 5A75     	 strb r2,[r3,#21]
 8874 00de 0223     	 movs r3,#2
 8875 00e0 F7E0     	 b .L596
 8876              	.L583:
3855:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8877              	 .loc 1 3855 0 is_stmt 1
 8878 00e2 BB6A     	 ldr r3,[r7,#40]
 8879 00e4 B3F1FF3F 	 cmp r3,#-1
 8880 00e8 04D1     	 bne .L584
 8881              	 .loc 1 3855 0 is_stmt 0 discriminator 1
 8882 00ea FB68     	 ldr r3,[r7,#12]
 8883 00ec 0122     	 movs r2,#1
 8884 00ee 5A75     	 strb r2,[r3,#21]
 8885 00f0 0123     	 movs r3,#1
 8886 00f2 EEE0     	 b .L596
 8887              	.L584:
3856:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 8888              	 .loc 1 3856 0 is_stmt 1
 8889 00f4 FB68     	 ldr r3,[r7,#12]
 8890 00f6 BA6A     	 ldr r2,[r7,#40]
 8891 00f8 DA61     	 str r2,[r3,#28]
3857:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8892              	 .loc 1 3857 0
 8893 00fa FB68     	 ldr r3,[r7,#12]
 8894 00fc 9B68     	 ldr r3,[r3,#8]
 8895 00fe 002B     	 cmp r3,#0
 8896 0100 02D1     	 bne .L577
 8897              	 .loc 1 3857 0 is_stmt 0 discriminator 1
 8898 0102 FB68     	 ldr r3,[r7,#12]
 8899 0104 BA6A     	 ldr r2,[r7,#40]
 8900 0106 9A60     	 str r2,[r3,#8]
 8901              	.L577:
3858:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3859:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3860:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
3861:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3862:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8902              	 .loc 1 3862 0 is_stmt 1
 8903 0108 FB68     	 ldr r3,[r7,#12]
 8904 010a 1B7D     	 ldrb r3,[r3,#20]
 8905 010c DBB2     	 uxtb r3,r3
 8906 010e 5BB2     	 sxtb r3,r3
 8907 0110 002B     	 cmp r3,#0
 8908 0112 1BDA     	 bge .L585
3863:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8909              	 .loc 1 3863 0
 8910 0114 3B69     	 ldr r3,[r7,#16]
 8911 0116 5978     	 ldrb r1,[r3,#1]
 8912 0118 FB68     	 ldr r3,[r7,#12]
 8913 011a 03F12C02 	 add r2,r3,#44
 8914 011e FB68     	 ldr r3,[r7,#12]
 8915 0120 1B6A     	 ldr r3,[r3,#32]
 8916 0122 0846     	 mov r0,r1
 8917 0124 1146     	 mov r1,r2
 8918 0126 1A46     	 mov r2,r3
 8919 0128 0123     	 movs r3,#1
 8920 012a FFF7FEFF 	 bl disk_write
 8921 012e 0346     	 mov r3,r0
 8922 0130 002B     	 cmp r3,#0
 8923 0132 04D0     	 beq .L586
 8924              	 .loc 1 3863 0 is_stmt 0 discriminator 1
 8925 0134 FB68     	 ldr r3,[r7,#12]
 8926 0136 0122     	 movs r2,#1
 8927 0138 5A75     	 strb r2,[r3,#21]
 8928 013a 0123     	 movs r3,#1
 8929 013c C9E0     	 b .L596
 8930              	.L586:
3864:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8931              	 .loc 1 3864 0 is_stmt 1
 8932 013e FB68     	 ldr r3,[r7,#12]
 8933 0140 1B7D     	 ldrb r3,[r3,#20]
 8934 0142 03F07F03 	 and r3,r3,#127
 8935 0146 DAB2     	 uxtb r2,r3
 8936 0148 FB68     	 ldr r3,[r7,#12]
 8937 014a 1A75     	 strb r2,[r3,#20]
 8938              	.L585:
3865:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3866:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3867:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8939              	 .loc 1 3867 0
 8940 014c 3A69     	 ldr r2,[r7,#16]
 8941 014e FB68     	 ldr r3,[r7,#12]
 8942 0150 DB69     	 ldr r3,[r3,#28]
 8943 0152 1046     	 mov r0,r2
 8944 0154 1946     	 mov r1,r3
 8945 0156 FFF7FEFF 	 bl clst2sect
 8946 015a 7861     	 str r0,[r7,#20]
3868:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8947              	 .loc 1 3868 0
 8948 015c 7B69     	 ldr r3,[r7,#20]
 8949 015e 002B     	 cmp r3,#0
 8950 0160 04D1     	 bne .L587
 8951              	 .loc 1 3868 0 is_stmt 0 discriminator 1
 8952 0162 FB68     	 ldr r3,[r7,#12]
 8953 0164 0222     	 movs r2,#2
 8954 0166 5A75     	 strb r2,[r3,#21]
 8955 0168 0223     	 movs r3,#2
 8956 016a B2E0     	 b .L596
 8957              	.L587:
3869:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += csect;
 8958              	 .loc 1 3869 0 is_stmt 1
 8959 016c 7A69     	 ldr r2,[r7,#20]
 8960 016e BB69     	 ldr r3,[r7,#24]
 8961 0170 1344     	 add r3,r3,r2
 8962 0172 7B61     	 str r3,[r7,#20]
3870:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8963              	 .loc 1 3870 0
 8964 0174 7B68     	 ldr r3,[r7,#4]
 8965 0176 5B0A     	 lsrs r3,r3,#9
 8966 0178 3B62     	 str r3,[r7,#32]
3871:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8967              	 .loc 1 3871 0
 8968 017a 3B6A     	 ldr r3,[r7,#32]
 8969 017c 002B     	 cmp r3,#0
 8970 017e 3ED0     	 beq .L588
3872:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8971              	 .loc 1 3872 0
 8972 0180 BA69     	 ldr r2,[r7,#24]
 8973 0182 3B6A     	 ldr r3,[r7,#32]
 8974 0184 1344     	 add r3,r3,r2
 8975 0186 3A69     	 ldr r2,[r7,#16]
 8976 0188 5289     	 ldrh r2,[r2,#10]
 8977 018a 9342     	 cmp r3,r2
 8978 018c 05D9     	 bls .L589
3873:../Dave/Generated/FATFS/ff_Src/ff.c **** 					cc = fs->csize - csect;
 8979              	 .loc 1 3873 0
 8980 018e 3B69     	 ldr r3,[r7,#16]
 8981 0190 5B89     	 ldrh r3,[r3,#10]
 8982 0192 1A46     	 mov r2,r3
 8983 0194 BB69     	 ldr r3,[r7,#24]
 8984 0196 D31A     	 subs r3,r2,r3
 8985 0198 3B62     	 str r3,[r7,#32]
 8986              	.L589:
3874:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3875:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8987              	 .loc 1 3875 0
 8988 019a 3B69     	 ldr r3,[r7,#16]
 8989 019c 5B78     	 ldrb r3,[r3,#1]
 8990 019e 1846     	 mov r0,r3
 8991 01a0 F969     	 ldr r1,[r7,#28]
 8992 01a2 7A69     	 ldr r2,[r7,#20]
 8993 01a4 3B6A     	 ldr r3,[r7,#32]
 8994 01a6 FFF7FEFF 	 bl disk_write
 8995 01aa 0346     	 mov r3,r0
 8996 01ac 002B     	 cmp r3,#0
 8997 01ae 04D0     	 beq .L590
 8998              	 .loc 1 3875 0 is_stmt 0 discriminator 1
 8999 01b0 FB68     	 ldr r3,[r7,#12]
 9000 01b2 0122     	 movs r2,#1
 9001 01b4 5A75     	 strb r2,[r3,#21]
 9002 01b6 0123     	 movs r3,#1
 9003 01b8 8BE0     	 b .L596
 9004              	.L590:
3876:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 2
3877:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3878:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
3879:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
3880:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 0;
3881:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3882:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3883:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
 9005              	 .loc 1 3883 0 is_stmt 1
 9006 01ba FB68     	 ldr r3,[r7,#12]
 9007 01bc 1A6A     	 ldr r2,[r3,#32]
 9008 01be 7B69     	 ldr r3,[r7,#20]
 9009 01c0 D21A     	 subs r2,r2,r3
 9010 01c2 3B6A     	 ldr r3,[r7,#32]
 9011 01c4 9A42     	 cmp r2,r3
 9012 01c6 16D2     	 bcs .L591
3884:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 9013              	 .loc 1 3884 0
 9014 01c8 FB68     	 ldr r3,[r7,#12]
 9015 01ca 03F12C01 	 add r1,r3,#44
 9016 01ce FB68     	 ldr r3,[r7,#12]
 9017 01d0 1A6A     	 ldr r2,[r3,#32]
 9018 01d2 7B69     	 ldr r3,[r7,#20]
 9019 01d4 D31A     	 subs r3,r2,r3
 9020 01d6 5B02     	 lsls r3,r3,#9
 9021 01d8 FA69     	 ldr r2,[r7,#28]
 9022 01da 1344     	 add r3,r3,r2
 9023 01dc 0846     	 mov r0,r1
 9024 01de 1946     	 mov r1,r3
 9025 01e0 4FF40072 	 mov r2,#512
 9026 01e4 FFF7FEFF 	 bl mem_cpy
3885:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 9027              	 .loc 1 3885 0
 9028 01e8 FB68     	 ldr r3,[r7,#12]
 9029 01ea 1B7D     	 ldrb r3,[r3,#20]
 9030 01ec 03F07F03 	 and r3,r3,#127
 9031 01f0 DAB2     	 uxtb r2,r3
 9032 01f2 FB68     	 ldr r3,[r7,#12]
 9033 01f4 1A75     	 strb r2,[r3,#20]
 9034              	.L591:
3886:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3887:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3888:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3889:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 9035              	 .loc 1 3889 0
 9036 01f6 3B6A     	 ldr r3,[r7,#32]
 9037 01f8 5B02     	 lsls r3,r3,#9
 9038 01fa 7B62     	 str r3,[r7,#36]
3890:../Dave/Generated/FATFS/ff_Src/ff.c **** 				continue;
 9039              	 .loc 1 3890 0
 9040 01fc 40E0     	 b .L592
 9041              	.L588:
3891:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3892:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3893:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
3894:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
3895:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->winsect = sect;
3896:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3897:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3898:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
 9042              	 .loc 1 3898 0
 9043 01fe FB68     	 ldr r3,[r7,#12]
 9044 0200 1A6A     	 ldr r2,[r3,#32]
 9045 0202 7B69     	 ldr r3,[r7,#20]
 9046 0204 9A42     	 cmp r2,r3
 9047 0206 17D0     	 beq .L593
3899:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 9048              	 .loc 1 3899 0 discriminator 1
 9049 0208 FB68     	 ldr r3,[r7,#12]
 9050 020a 9A69     	 ldr r2,[r3,#24]
 9051 020c FB68     	 ldr r3,[r7,#12]
 9052 020e DB68     	 ldr r3,[r3,#12]
3898:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 9053              	 .loc 1 3898 0 discriminator 1
 9054 0210 9A42     	 cmp r2,r3
 9055 0212 11D2     	 bcs .L593
3900:../Dave/Generated/FATFS/ff_Src/ff.c **** 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 9056              	 .loc 1 3900 0
 9057 0214 3B69     	 ldr r3,[r7,#16]
 9058 0216 5A78     	 ldrb r2,[r3,#1]
 9059 0218 FB68     	 ldr r3,[r7,#12]
 9060 021a 2C33     	 adds r3,r3,#44
 9061 021c 1046     	 mov r0,r2
 9062 021e 1946     	 mov r1,r3
 9063 0220 7A69     	 ldr r2,[r7,#20]
 9064 0222 0123     	 movs r3,#1
 9065 0224 FFF7FEFF 	 bl disk_read
 9066 0228 0346     	 mov r3,r0
3899:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 9067              	 .loc 1 3899 0
 9068 022a 002B     	 cmp r3,#0
 9069 022c 04D0     	 beq .L593
3901:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 9070              	 .loc 1 3901 0
 9071 022e FB68     	 ldr r3,[r7,#12]
 9072 0230 0122     	 movs r2,#1
 9073 0232 5A75     	 strb r2,[r3,#21]
 9074 0234 0123     	 movs r3,#1
 9075 0236 4CE0     	 b .L596
 9076              	.L593:
3902:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3903:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3904:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = sect;
 9077              	 .loc 1 3904 0
 9078 0238 FB68     	 ldr r3,[r7,#12]
 9079 023a 7A69     	 ldr r2,[r7,#20]
 9080 023c 1A62     	 str r2,[r3,#32]
 9081              	.L576:
3905:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3906:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 9082              	 .loc 1 3906 0
 9083 023e FB68     	 ldr r3,[r7,#12]
 9084 0240 9B69     	 ldr r3,[r3,#24]
 9085 0242 C3F30803 	 ubfx r3,r3,#0,#9
 9086 0246 C3F50073 	 rsb r3,r3,#512
 9087 024a 7B62     	 str r3,[r7,#36]
3907:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 9088              	 .loc 1 3907 0
 9089 024c 7A6A     	 ldr r2,[r7,#36]
 9090 024e 7B68     	 ldr r3,[r7,#4]
 9091 0250 9A42     	 cmp r2,r3
 9092 0252 01D9     	 bls .L594
 9093              	 .loc 1 3907 0 is_stmt 0 discriminator 1
 9094 0254 7B68     	 ldr r3,[r7,#4]
 9095 0256 7B62     	 str r3,[r7,#36]
 9096              	.L594:
3908:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3909:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3910:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3911:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->wflag = 1;
3912:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3913:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 9097              	 .loc 1 3913 0 is_stmt 1
 9098 0258 FB68     	 ldr r3,[r7,#12]
 9099 025a 9B69     	 ldr r3,[r3,#24]
 9100 025c C3F30803 	 ubfx r3,r3,#0,#9
 9101 0260 2833     	 adds r3,r3,#40
 9102 0262 FA68     	 ldr r2,[r7,#12]
 9103 0264 1344     	 add r3,r3,r2
 9104 0266 0433     	 adds r3,r3,#4
 9105 0268 1846     	 mov r0,r3
 9106 026a F969     	 ldr r1,[r7,#28]
 9107 026c 7A6A     	 ldr r2,[r7,#36]
 9108 026e FFF7FEFF 	 bl mem_cpy
3914:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->flag |= FA_DIRTY;
 9109              	 .loc 1 3914 0
 9110 0272 FB68     	 ldr r3,[r7,#12]
 9111 0274 1B7D     	 ldrb r3,[r3,#20]
 9112 0276 63F07F03 	 orn r3,r3,#127
 9113 027a DAB2     	 uxtb r2,r3
 9114 027c FB68     	 ldr r3,[r7,#12]
 9115 027e 1A75     	 strb r2,[r3,#20]
 9116              	.L592:
3834:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 9117              	 .loc 1 3834 0
 9118 0280 7A68     	 ldr r2,[r7,#4]
 9119 0282 7B6A     	 ldr r3,[r7,#36]
 9120 0284 D31A     	 subs r3,r2,r3
 9121 0286 7B60     	 str r3,[r7,#4]
 9122 0288 3B68     	 ldr r3,[r7]
 9123 028a 1A68     	 ldr r2,[r3]
 9124 028c 7B6A     	 ldr r3,[r7,#36]
 9125 028e 1A44     	 add r2,r2,r3
 9126 0290 3B68     	 ldr r3,[r7]
 9127 0292 1A60     	 str r2,[r3]
 9128 0294 FA69     	 ldr r2,[r7,#28]
 9129 0296 7B6A     	 ldr r3,[r7,#36]
 9130 0298 1344     	 add r3,r3,r2
 9131 029a FB61     	 str r3,[r7,#28]
 9132 029c FB68     	 ldr r3,[r7,#12]
 9133 029e 9A69     	 ldr r2,[r3,#24]
 9134 02a0 7B6A     	 ldr r3,[r7,#36]
 9135 02a2 1A44     	 add r2,r2,r3
 9136 02a4 FB68     	 ldr r3,[r7,#12]
 9137 02a6 9A61     	 str r2,[r3,#24]
 9138 02a8 FB68     	 ldr r3,[r7,#12]
 9139 02aa DA68     	 ldr r2,[r3,#12]
 9140 02ac FB68     	 ldr r3,[r7,#12]
 9141 02ae 9B69     	 ldr r3,[r3,#24]
 9142 02b0 9A42     	 cmp r2,r3
 9143 02b2 38BF     	 it cc
 9144 02b4 1A46     	 movcc r2,r3
 9145 02b6 FB68     	 ldr r3,[r7,#12]
 9146 02b8 DA60     	 str r2,[r3,#12]
 9147              	.L575:
3833:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.
 9148              	 .loc 1 3833 0
 9149 02ba 7B68     	 ldr r3,[r7,#4]
 9150 02bc 002B     	 cmp r3,#0
 9151 02be 7FF4D9AE 	 bne .L595
 9152              	.L582:
3915:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3916:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3917:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3918:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 9153              	 .loc 1 3918 0
 9154 02c2 FB68     	 ldr r3,[r7,#12]
 9155 02c4 1B7D     	 ldrb r3,[r3,#20]
 9156 02c6 43F04003 	 orr r3,r3,#64
 9157 02ca DAB2     	 uxtb r2,r3
 9158 02cc FB68     	 ldr r3,[r7,#12]
 9159 02ce 1A75     	 strb r2,[r3,#20]
3919:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3920:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
 9160              	 .loc 1 3920 0
 9161 02d0 0023     	 movs r3,#0
 9162              	.L596:
3921:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9163              	 .loc 1 3921 0 discriminator 1
 9164 02d2 1846     	 mov r0,r3
 9165 02d4 3037     	 adds r7,r7,#48
 9166              	.LCFI271:
 9167              	 .cfi_def_cfa_offset 8
 9168 02d6 BD46     	 mov sp,r7
 9169              	.LCFI272:
 9170              	 .cfi_def_cfa_register 13
 9171              	 
 9172 02d8 80BD     	 pop {r7,pc}
 9173              	 .cfi_endproc
 9174              	.LFE50:
 9176 02da 00BF     	 .section .text.f_sync,"ax",%progbits
 9177              	 .align 2
 9178              	 .global f_sync
 9179              	 .thumb
 9180              	 .thumb_func
 9182              	f_sync:
 9183              	.LFB51:
3922:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3923:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3924:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3925:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3926:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3927:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Synchronize the File                                                  */
3928:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3929:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3930:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_sync (
3931:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
3932:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3933:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9184              	 .loc 1 3933 0
 9185              	 .cfi_startproc
 9186              	 
 9187              	 
 9188 0000 80B5     	 push {r7,lr}
 9189              	.LCFI273:
 9190              	 .cfi_def_cfa_offset 8
 9191              	 .cfi_offset 7,-8
 9192              	 .cfi_offset 14,-4
 9193 0002 86B0     	 sub sp,sp,#24
 9194              	.LCFI274:
 9195              	 .cfi_def_cfa_offset 32
 9196 0004 00AF     	 add r7,sp,#0
 9197              	.LCFI275:
 9198              	 .cfi_def_cfa_register 7
 9199 0006 7860     	 str r0,[r7,#4]
3934:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3935:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3936:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD tm;
3937:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *dir;
3938:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3939:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3940:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 9200              	 .loc 1 3940 0
 9201 0008 7A68     	 ldr r2,[r7,#4]
 9202 000a 07F10803 	 add r3,r7,#8
 9203 000e 1046     	 mov r0,r2
 9204 0010 1946     	 mov r1,r3
 9205 0012 FFF7FEFF 	 bl validate
 9206 0016 0346     	 mov r3,r0
 9207 0018 FB75     	 strb r3,[r7,#23]
3941:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 9208              	 .loc 1 3941 0
 9209 001a FB7D     	 ldrb r3,[r7,#23]
 9210 001c 002B     	 cmp r3,#0
 9211 001e 6DD1     	 bne .L598
3942:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 9212              	 .loc 1 3942 0
 9213 0020 7B68     	 ldr r3,[r7,#4]
 9214 0022 1B7D     	 ldrb r3,[r3,#20]
 9215 0024 03F04003 	 and r3,r3,#64
 9216 0028 002B     	 cmp r3,#0
 9217 002a 67D0     	 beq .L598
3943:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3944:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 9218              	 .loc 1 3944 0
 9219 002c 7B68     	 ldr r3,[r7,#4]
 9220 002e 1B7D     	 ldrb r3,[r3,#20]
 9221 0030 DBB2     	 uxtb r3,r3
 9222 0032 5BB2     	 sxtb r3,r3
 9223 0034 002B     	 cmp r3,#0
 9224 0036 18DA     	 bge .L599
3945:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 9225              	 .loc 1 3945 0
 9226 0038 BB68     	 ldr r3,[r7,#8]
 9227 003a 5978     	 ldrb r1,[r3,#1]
 9228 003c 7B68     	 ldr r3,[r7,#4]
 9229 003e 03F12C02 	 add r2,r3,#44
 9230 0042 7B68     	 ldr r3,[r7,#4]
 9231 0044 1B6A     	 ldr r3,[r3,#32]
 9232 0046 0846     	 mov r0,r1
 9233 0048 1146     	 mov r1,r2
 9234 004a 1A46     	 mov r2,r3
 9235 004c 0123     	 movs r3,#1
 9236 004e FFF7FEFF 	 bl disk_write
 9237 0052 0346     	 mov r3,r0
 9238 0054 002B     	 cmp r3,#0
 9239 0056 01D0     	 beq .L600
 9240              	 .loc 1 3945 0 is_stmt 0 discriminator 1
 9241 0058 0123     	 movs r3,#1
 9242 005a 50E0     	 b .L602
 9243              	.L600:
3946:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 9244              	 .loc 1 3946 0 is_stmt 1
 9245 005c 7B68     	 ldr r3,[r7,#4]
 9246 005e 1B7D     	 ldrb r3,[r3,#20]
 9247 0060 03F07F03 	 and r3,r3,#127
 9248 0064 DAB2     	 uxtb r2,r3
 9249 0066 7B68     	 ldr r3,[r7,#4]
 9250 0068 1A75     	 strb r2,[r3,#20]
 9251              	.L599:
3947:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3948:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3949:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Update the directory entry */
3950:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tm = GET_FATTIME();				/* Modified time */
 9252              	 .loc 1 3950 0
 9253 006a FFF7FEFF 	 bl get_fattime
 9254 006e 3861     	 str r0,[r7,#16]
3951:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3952:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3953:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
3954:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
3955:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if nee
3956:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3957:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
3958:../Dave/Generated/FATFS/ff_Src/ff.c **** 					DIR dj;
3959:../Dave/Generated/FATFS/ff_Src/ff.c **** 					DEF_NAMBUF
3960:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3961:../Dave/Generated/FATFS/ff_Src/ff.c **** 					INIT_NAMBUF(fs);
3962:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
3963:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
3964:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has be
3965:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
3966:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
3967:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
3968:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
3969:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
3970:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_ModTime10] = 0;
3971:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
3972:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = store_xdir(&dj);	/* Restore it to the directory */
3973:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (res == FR_OK) {
3974:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = sync_fs(fs);
3975:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fp->flag &= (BYTE)~FA_MODIFIED;
3976:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
3977:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3978:../Dave/Generated/FATFS/ff_Src/ff.c **** 					FREE_NAMBUF();
3979:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3980:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
3981:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3982:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
3983:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = move_window(fs, fp->dir_sect);
 9255              	 .loc 1 3983 0
 9256 0070 BA68     	 ldr r2,[r7,#8]
 9257 0072 7B68     	 ldr r3,[r7,#4]
 9258 0074 5B6A     	 ldr r3,[r3,#36]
 9259 0076 1046     	 mov r0,r2
 9260 0078 1946     	 mov r1,r3
 9261 007a FFF7FEFF 	 bl move_window
 9262 007e 0346     	 mov r3,r0
 9263 0080 FB75     	 strb r3,[r7,#23]
3984:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 9264              	 .loc 1 3984 0
 9265 0082 FB7D     	 ldrb r3,[r7,#23]
 9266 0084 002B     	 cmp r3,#0
 9267 0086 39D1     	 bne .L598
3985:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir = fp->dir_ptr;
 9268              	 .loc 1 3985 0
 9269 0088 7B68     	 ldr r3,[r7,#4]
 9270 008a 9B6A     	 ldr r3,[r3,#40]
 9271 008c FB60     	 str r3,[r7,#12]
3986:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been chan
 9272              	 .loc 1 3986 0
 9273 008e FB68     	 ldr r3,[r7,#12]
 9274 0090 0B33     	 adds r3,r3,#11
 9275 0092 FA68     	 ldr r2,[r7,#12]
 9276 0094 0B32     	 adds r2,r2,#11
 9277 0096 1278     	 ldrb r2,[r2]
 9278 0098 42F02002 	 orr r2,r2,#32
 9279 009c D2B2     	 uxtb r2,r2
 9280 009e 1A70     	 strb r2,[r3]
3987:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 9281              	 .loc 1 3987 0
 9282 00a0 7B68     	 ldr r3,[r7,#4]
 9283 00a2 1A68     	 ldr r2,[r3]
 9284 00a4 7B68     	 ldr r3,[r7,#4]
 9285 00a6 9B68     	 ldr r3,[r3,#8]
 9286 00a8 1046     	 mov r0,r2
 9287 00aa F968     	 ldr r1,[r7,#12]
 9288 00ac 1A46     	 mov r2,r3
 9289 00ae FFF7FEFF 	 bl st_clust
3988:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 9290              	 .loc 1 3988 0
 9291 00b2 FB68     	 ldr r3,[r7,#12]
 9292 00b4 03F11C02 	 add r2,r3,#28
 9293 00b8 7B68     	 ldr r3,[r7,#4]
 9294 00ba DB68     	 ldr r3,[r3,#12]
 9295 00bc 1046     	 mov r0,r2
 9296 00be 1946     	 mov r1,r3
 9297 00c0 FFF7FEFF 	 bl st_dword
3989:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 9298              	 .loc 1 3989 0
 9299 00c4 FB68     	 ldr r3,[r7,#12]
 9300 00c6 1633     	 adds r3,r3,#22
 9301 00c8 1846     	 mov r0,r3
 9302 00ca 3969     	 ldr r1,[r7,#16]
 9303 00cc FFF7FEFF 	 bl st_dword
3990:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
 9304              	 .loc 1 3990 0
 9305 00d0 FB68     	 ldr r3,[r7,#12]
 9306 00d2 1233     	 adds r3,r3,#18
 9307 00d4 1846     	 mov r0,r3
 9308 00d6 0021     	 movs r1,#0
 9309 00d8 FFF7FEFF 	 bl st_word
3991:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 1;
 9310              	 .loc 1 3991 0
 9311 00dc BB68     	 ldr r3,[r7,#8]
 9312 00de 0122     	 movs r2,#1
 9313 00e0 DA70     	 strb r2,[r3,#3]
3992:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
 9314              	 .loc 1 3992 0
 9315 00e2 BB68     	 ldr r3,[r7,#8]
 9316 00e4 1846     	 mov r0,r3
 9317 00e6 FFF7FEFF 	 bl sync_fs
 9318 00ea 0346     	 mov r3,r0
 9319 00ec FB75     	 strb r3,[r7,#23]
3993:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 9320              	 .loc 1 3993 0
 9321 00ee 7B68     	 ldr r3,[r7,#4]
 9322 00f0 1B7D     	 ldrb r3,[r3,#20]
 9323 00f2 23F04003 	 bic r3,r3,#64
 9324 00f6 DAB2     	 uxtb r2,r3
 9325 00f8 7B68     	 ldr r3,[r7,#4]
 9326 00fa 1A75     	 strb r2,[r3,#20]
 9327              	.L598:
3994:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3995:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3996:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3997:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3998:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3999:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9328              	 .loc 1 3999 0
 9329 00fc FB7D     	 ldrb r3,[r7,#23]
 9330              	.L602:
4000:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9331              	 .loc 1 4000 0 discriminator 1
 9332 00fe 1846     	 mov r0,r3
 9333 0100 1837     	 adds r7,r7,#24
 9334              	.LCFI276:
 9335              	 .cfi_def_cfa_offset 8
 9336 0102 BD46     	 mov sp,r7
 9337              	.LCFI277:
 9338              	 .cfi_def_cfa_register 13
 9339              	 
 9340 0104 80BD     	 pop {r7,pc}
 9341              	 .cfi_endproc
 9342              	.LFE51:
 9344 0106 00BF     	 .section .text.f_close,"ax",%progbits
 9345              	 .align 2
 9346              	 .global f_close
 9347              	 .thumb
 9348              	 .thumb_func
 9350              	f_close:
 9351              	.LFB52:
4001:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4002:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
4003:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4004:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4005:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4006:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4007:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4008:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Close File                                                            */
4009:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4010:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4011:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_close (
4012:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object to be closed */
4013:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4014:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9352              	 .loc 1 4014 0
 9353              	 .cfi_startproc
 9354              	 
 9355              	 
 9356 0000 80B5     	 push {r7,lr}
 9357              	.LCFI278:
 9358              	 .cfi_def_cfa_offset 8
 9359              	 .cfi_offset 7,-8
 9360              	 .cfi_offset 14,-4
 9361 0002 84B0     	 sub sp,sp,#16
 9362              	.LCFI279:
 9363              	 .cfi_def_cfa_offset 24
 9364 0004 00AF     	 add r7,sp,#0
 9365              	.LCFI280:
 9366              	 .cfi_def_cfa_register 7
 9367 0006 7860     	 str r0,[r7,#4]
4015:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4016:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4017:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4018:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4019:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
 9368              	 .loc 1 4019 0
 9369 0008 7868     	 ldr r0,[r7,#4]
 9370 000a FFF7FEFF 	 bl f_sync
 9371 000e 0346     	 mov r3,r0
 9372 0010 FB73     	 strb r3,[r7,#15]
4020:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK)
 9373              	 .loc 1 4020 0
 9374 0012 FB7B     	 ldrb r3,[r7,#15]
 9375 0014 002B     	 cmp r3,#0
 9376 0016 18D1     	 bne .L604
4021:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4022:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
4023:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
 9377              	 .loc 1 4023 0
 9378 0018 7A68     	 ldr r2,[r7,#4]
 9379 001a 07F10803 	 add r3,r7,#8
 9380 001e 1046     	 mov r0,r2
 9381 0020 1946     	 mov r1,r3
 9382 0022 FFF7FEFF 	 bl validate
 9383 0026 0346     	 mov r3,r0
 9384 0028 FB73     	 strb r3,[r7,#15]
4024:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 9385              	 .loc 1 4024 0
 9386 002a FB7B     	 ldrb r3,[r7,#15]
 9387 002c 002B     	 cmp r3,#0
 9388 002e 0CD1     	 bne .L604
4025:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4026:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
 9389              	 .loc 1 4026 0
 9390 0030 7B68     	 ldr r3,[r7,#4]
 9391 0032 1B69     	 ldr r3,[r3,#16]
 9392 0034 1846     	 mov r0,r3
 9393 0036 FFF7FEFF 	 bl dec_lock
 9394 003a 0346     	 mov r3,r0
 9395 003c FB73     	 strb r3,[r7,#15]
4027:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 9396              	 .loc 1 4027 0
 9397 003e FB7B     	 ldrb r3,[r7,#15]
 9398 0040 002B     	 cmp r3,#0
 9399 0042 02D1     	 bne .L604
 9400              	 .loc 1 4027 0 is_stmt 0 discriminator 1
 9401 0044 7B68     	 ldr r3,[r7,#4]
 9402 0046 0022     	 movs r2,#0
 9403 0048 1A60     	 str r2,[r3]
 9404              	.L604:
4028:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4029:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.fs = 0;	/* Invalidate file object */
4030:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4031:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
4032:../Dave/Generated/FATFS/ff_Src/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
4033:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4034:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4035:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4036:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 9405              	 .loc 1 4036 0 is_stmt 1
 9406 004a FB7B     	 ldrb r3,[r7,#15]
4037:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9407              	 .loc 1 4037 0
 9408 004c 1846     	 mov r0,r3
 9409 004e 1037     	 adds r7,r7,#16
 9410              	.LCFI281:
 9411              	 .cfi_def_cfa_offset 8
 9412 0050 BD46     	 mov sp,r7
 9413              	.LCFI282:
 9414              	 .cfi_def_cfa_register 13
 9415              	 
 9416 0052 80BD     	 pop {r7,pc}
 9417              	 .cfi_endproc
 9418              	.LFE52:
 9420              	 .section .text.f_chdrive,"ax",%progbits
 9421              	 .align 2
 9422              	 .global f_chdrive
 9423              	 .thumb
 9424              	 .thumb_func
 9426              	f_chdrive:
 9427              	.LFB53:
4038:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4039:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4040:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4041:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4042:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH >= 1
4043:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4044:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
4045:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4046:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4047:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_chdrive (
4048:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path		/* Drive number to set */
4049:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4050:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9428              	 .loc 1 4050 0
 9429              	 .cfi_startproc
 9430              	 
 9431              	 
 9432 0000 80B5     	 push {r7,lr}
 9433              	.LCFI283:
 9434              	 .cfi_def_cfa_offset 8
 9435              	 .cfi_offset 7,-8
 9436              	 .cfi_offset 14,-4
 9437 0002 84B0     	 sub sp,sp,#16
 9438              	.LCFI284:
 9439              	 .cfi_def_cfa_offset 24
 9440 0004 00AF     	 add r7,sp,#0
 9441              	.LCFI285:
 9442              	 .cfi_def_cfa_register 7
 9443 0006 7860     	 str r0,[r7,#4]
4051:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
4052:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4053:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4054:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
4055:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(&path);
 9444              	 .loc 1 4055 0
 9445 0008 3B1D     	 adds r3,r7,#4
 9446 000a 1846     	 mov r0,r3
 9447 000c FFF7FEFF 	 bl get_ldnumber
 9448 0010 F860     	 str r0,[r7,#12]
4056:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 9449              	 .loc 1 4056 0
 9450 0012 FB68     	 ldr r3,[r7,#12]
 9451 0014 002B     	 cmp r3,#0
 9452 0016 01DA     	 bge .L607
 9453              	 .loc 1 4056 0 is_stmt 0 discriminator 1
 9454 0018 0B23     	 movs r3,#11
 9455 001a 04E0     	 b .L608
 9456              	.L607:
4057:../Dave/Generated/FATFS/ff_Src/ff.c **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
 9457              	 .loc 1 4057 0 is_stmt 1
 9458 001c FB68     	 ldr r3,[r7,#12]
 9459 001e DAB2     	 uxtb r2,r3
 9460 0020 034B     	 ldr r3,.L609
 9461 0022 1A70     	 strb r2,[r3]
4058:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4059:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 9462              	 .loc 1 4059 0
 9463 0024 0023     	 movs r3,#0
 9464              	.L608:
4060:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9465              	 .loc 1 4060 0
 9466 0026 1846     	 mov r0,r3
 9467 0028 1037     	 adds r7,r7,#16
 9468              	.LCFI286:
 9469              	 .cfi_def_cfa_offset 8
 9470 002a BD46     	 mov sp,r7
 9471              	.LCFI287:
 9472              	 .cfi_def_cfa_register 13
 9473              	 
 9474 002c 80BD     	 pop {r7,pc}
 9475              	.L610:
 9476 002e 00BF     	 .align 2
 9477              	.L609:
 9478 0030 00000000 	 .word CurrVol
 9479              	 .cfi_endproc
 9480              	.LFE53:
 9482              	 .section .text.f_chdir,"ax",%progbits
 9483              	 .align 2
 9484              	 .global f_chdir
 9485              	 .thumb
 9486              	 .thumb_func
 9488              	f_chdir:
 9489              	.LFB54:
4061:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4062:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4063:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4064:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_chdir (
4065:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4066:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4067:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9490              	 .loc 1 4067 0
 9491              	 .cfi_startproc
 9492              	 
 9493              	 
 9494 0000 90B5     	 push {r4,r7,lr}
 9495              	.LCFI288:
 9496              	 .cfi_def_cfa_offset 12
 9497              	 .cfi_offset 4,-12
 9498              	 .cfi_offset 7,-8
 9499              	 .cfi_offset 14,-4
 9500 0002 93B0     	 sub sp,sp,#76
 9501              	.LCFI289:
 9502              	 .cfi_def_cfa_offset 88
 9503 0004 00AF     	 add r7,sp,#0
 9504              	.LCFI290:
 9505              	 .cfi_def_cfa_register 7
 9506 0006 7860     	 str r0,[r7,#4]
4068:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 2
4069:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
4070:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4071:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4072:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4073:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4074:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4075:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4076:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4077:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4078:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, 0);
 9507              	 .loc 1 4078 0
 9508 0008 3A1D     	 adds r2,r7,#4
 9509 000a 07F10C03 	 add r3,r7,#12
 9510 000e 1046     	 mov r0,r2
 9511 0010 1946     	 mov r1,r3
 9512 0012 0022     	 movs r2,#0
 9513 0014 FFF7FEFF 	 bl find_volume
 9514 0018 0346     	 mov r3,r0
 9515 001a 87F84730 	 strb r3,[r7,#71]
4079:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 9516              	 .loc 1 4079 0
 9517 001e 97F84730 	 ldrb r3,[r7,#71]
 9518 0022 002B     	 cmp r3,#0
 9519 0024 32D1     	 bne .L612
4080:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 9520              	 .loc 1 4080 0
 9521 0026 FB68     	 ldr r3,[r7,#12]
 9522 0028 3B61     	 str r3,[r7,#16]
4081:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4082:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
 9523              	 .loc 1 4082 0
 9524 002a 7B68     	 ldr r3,[r7,#4]
 9525 002c 07F11002 	 add r2,r7,#16
 9526 0030 1046     	 mov r0,r2
 9527 0032 1946     	 mov r1,r3
 9528 0034 FFF7FEFF 	 bl follow_path
 9529 0038 0346     	 mov r3,r0
 9530 003a 87F84730 	 strb r3,[r7,#71]
4083:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
 9531              	 .loc 1 4083 0
 9532 003e 97F84730 	 ldrb r3,[r7,#71]
 9533 0042 002B     	 cmp r3,#0
 9534 0044 1BD1     	 bne .L613
4084:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
 9535              	 .loc 1 4084 0
 9536 0046 97F83F30 	 ldrb r3,[r7,#63]
 9537 004a DBB2     	 uxtb r3,r3
 9538 004c 5BB2     	 sxtb r3,r3
 9539 004e 002B     	 cmp r3,#0
 9540 0050 03DA     	 bge .L614
4085:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->cdir = dj.obj.sclust;
 9541              	 .loc 1 4085 0
 9542 0052 FB68     	 ldr r3,[r7,#12]
 9543 0054 BA69     	 ldr r2,[r7,#24]
 9544 0056 9A61     	 str r2,[r3,#24]
 9545 0058 11E0     	 b .L613
 9546              	.L614:
4086:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4087:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4088:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->cdc_scl = dj.obj.c_scl;
4089:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->cdc_size = dj.obj.c_size;
4090:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->cdc_ofs = dj.obj.c_ofs;
4091:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4092:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4093:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4094:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 9547              	 .loc 1 4094 0
 9548 005a BB7D     	 ldrb r3,[r7,#22]
 9549 005c 03F01003 	 and r3,r3,#16
 9550 0060 002B     	 cmp r3,#0
 9551 0062 09D0     	 beq .L615
4095:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4096:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4097:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
4098:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
4099:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
4100:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdc_ofs = dj.blk_ofs;
4101:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4102:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4103:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4104:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 9552              	 .loc 1 4104 0
 9553 0064 FC68     	 ldr r4,[r7,#12]
 9554 0066 FA68     	 ldr r2,[r7,#12]
 9555 0068 3B6B     	 ldr r3,[r7,#48]
 9556 006a 1046     	 mov r0,r2
 9557 006c 1946     	 mov r1,r3
 9558 006e FFF7FEFF 	 bl ld_clust
 9559 0072 0346     	 mov r3,r0
 9560 0074 A361     	 str r3,[r4,#24]
 9561 0076 02E0     	 b .L613
 9562              	.L615:
4105:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4106:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
4107:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
 9563              	 .loc 1 4107 0
 9564 0078 0523     	 movs r3,#5
 9565 007a 87F84730 	 strb r3,[r7,#71]
 9566              	.L613:
4108:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4109:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4110:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4111:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4112:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 9567              	 .loc 1 4112 0
 9568 007e 97F84730 	 ldrb r3,[r7,#71]
 9569 0082 042B     	 cmp r3,#4
 9570 0084 02D1     	 bne .L612
 9571              	 .loc 1 4112 0 is_stmt 0 discriminator 1
 9572 0086 0523     	 movs r3,#5
 9573 0088 87F84730 	 strb r3,[r7,#71]
 9574              	.L612:
4113:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 2	/* Also current drive is changed at Unix style volume ID */
4114:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
4115:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = FF_VOLUMES - 1; i && fs != FatFs[i]; i--) ;	/* Set current drive */
4116:../Dave/Generated/FATFS/ff_Src/ff.c **** 			CurrVol = (BYTE)i;
4117:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4118:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4119:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4120:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4121:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9575              	 .loc 1 4121 0 is_stmt 1
 9576 008c 97F84730 	 ldrb r3,[r7,#71]
4122:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9577              	 .loc 1 4122 0
 9578 0090 1846     	 mov r0,r3
 9579 0092 4C37     	 adds r7,r7,#76
 9580              	.LCFI291:
 9581              	 .cfi_def_cfa_offset 12
 9582 0094 BD46     	 mov sp,r7
 9583              	.LCFI292:
 9584              	 .cfi_def_cfa_register 13
 9585              	 
 9586 0096 90BD     	 pop {r4,r7,pc}
 9587              	 .cfi_endproc
 9588              	.LFE54:
 9590              	 .section .text.f_getcwd,"ax",%progbits
 9591              	 .align 2
 9592              	 .global f_getcwd
 9593              	 .thumb
 9594              	 .thumb_func
 9596              	f_getcwd:
 9597              	.LFB55:
4123:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4124:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4125:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH >= 2
4126:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_getcwd (
4127:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
4128:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT len		/* Size of buff in unit of TCHAR */
4129:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4130:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9598              	 .loc 1 4130 0
 9599              	 .cfi_startproc
 9600              	 
 9601              	 
 9602 0000 80B5     	 push {r7,lr}
 9603              	.LCFI293:
 9604              	 .cfi_def_cfa_offset 8
 9605              	 .cfi_offset 7,-8
 9606              	 .cfi_offset 14,-4
 9607 0002 DCB0     	 sub sp,sp,#368
 9608              	.LCFI294:
 9609              	 .cfi_def_cfa_offset 376
 9610 0004 00AF     	 add r7,sp,#0
 9611              	.LCFI295:
 9612              	 .cfi_def_cfa_register 7
 9613 0006 3B1D     	 adds r3,r7,#4
 9614 0008 1860     	 str r0,[r3]
 9615 000a 3B46     	 mov r3,r7
 9616 000c 1960     	 str r1,[r3]
4131:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4132:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4133:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4134:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, n;
4135:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ccl;
4136:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR *tp = buff;
 9617              	 .loc 1 4136 0
 9618 000e 3B1D     	 adds r3,r7,#4
 9619 0010 1B68     	 ldr r3,[r3]
 9620 0012 C7F86031 	 str r3,[r7,#352]
4137:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_VOLUMES >= 2
4138:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT vl;
4139:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4140:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID
4141:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const char *vp;
4142:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4143:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO fno;
4144:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4145:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4146:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4147:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4148:../Dave/Generated/FATFS/ff_Src/ff.c **** 	buff[0] = 0;	/* Set null string to get current volume */
 9621              	 .loc 1 4148 0
 9622 0016 3B1D     	 adds r3,r7,#4
 9623 0018 1B68     	 ldr r3,[r3]
 9624 001a 0022     	 movs r2,#0
 9625 001c 1A70     	 strb r2,[r3]
4149:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 9626              	 .loc 1 4149 0
 9627 001e 3A1D     	 adds r2,r7,#4
 9628 0020 07F59273 	 add r3,r7,#292
 9629 0024 1046     	 mov r0,r2
 9630 0026 1946     	 mov r1,r3
 9631 0028 0022     	 movs r2,#0
 9632 002a FFF7FEFF 	 bl find_volume
 9633 002e 0346     	 mov r3,r0
 9634 0030 87F86F31 	 strb r3,[r7,#367]
4150:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 9635              	 .loc 1 4150 0
 9636 0034 97F86F31 	 ldrb r3,[r7,#367]
 9637 0038 002B     	 cmp r3,#0
 9638 003a 40F0FF80 	 bne .L618
4151:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 9639              	 .loc 1 4151 0
 9640 003e D7F82431 	 ldr r3,[r7,#292]
 9641 0042 C7F82831 	 str r3,[r7,#296]
4152:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4153:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4154:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Follow parent directories and create the path */
4155:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
 9642              	 .loc 1 4155 0
 9643 0046 3B46     	 mov r3,r7
 9644 0048 1B68     	 ldr r3,[r3]
 9645 004a C7F86831 	 str r3,[r7,#360]
4156:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root pat
4157:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 9646              	 .loc 1 4157 0
 9647 004e D7F82431 	 ldr r3,[r7,#292]
 9648 0052 9B69     	 ldr r3,[r3,#24]
 9649 0054 C7F83031 	 str r3,[r7,#304]
4158:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 9650              	 .loc 1 4158 0
 9651 0058 B8E0     	 b .L619
 9652              	.L634:
4159:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 9653              	 .loc 1 4159 0
 9654 005a 07F59473 	 add r3,r7,#296
 9655 005e 1846     	 mov r0,r3
 9656 0060 2021     	 movs r1,#32
 9657 0062 FFF7FEFF 	 bl dir_sdi
 9658 0066 0346     	 mov r3,r0
 9659 0068 87F86F31 	 strb r3,[r7,#367]
4160:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 9660              	 .loc 1 4160 0
 9661 006c 97F86F31 	 ldrb r3,[r7,#367]
 9662 0070 002B     	 cmp r3,#0
 9663 0072 00D0     	 beq .L620
 9664 0074 B3E0     	 b .L621
 9665              	.L620:
4161:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = move_window(fs, dj.sect);
 9666              	 .loc 1 4161 0
 9667 0076 D7F82421 	 ldr r2,[r7,#292]
 9668 007a D7F84431 	 ldr r3,[r7,#324]
 9669 007e 1046     	 mov r0,r2
 9670 0080 1946     	 mov r1,r3
 9671 0082 FFF7FEFF 	 bl move_window
 9672 0086 0346     	 mov r3,r0
 9673 0088 87F86F31 	 strb r3,[r7,#367]
4162:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 9674              	 .loc 1 4162 0
 9675 008c 97F86F31 	 ldrb r3,[r7,#367]
 9676 0090 002B     	 cmp r3,#0
 9677 0092 00D0     	 beq .L622
 9678 0094 A3E0     	 b .L621
 9679              	.L622:
4163:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 9680              	 .loc 1 4163 0
 9681 0096 D7F82421 	 ldr r2,[r7,#292]
 9682 009a D7F84831 	 ldr r3,[r7,#328]
 9683 009e 1046     	 mov r0,r2
 9684 00a0 1946     	 mov r1,r3
 9685 00a2 FFF7FEFF 	 bl ld_clust
 9686 00a6 0346     	 mov r3,r0
 9687 00a8 C7F83031 	 str r3,[r7,#304]
4164:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(&dj, 0);
 9688              	 .loc 1 4164 0
 9689 00ac 07F59473 	 add r3,r7,#296
 9690 00b0 1846     	 mov r0,r3
 9691 00b2 0021     	 movs r1,#0
 9692 00b4 FFF7FEFF 	 bl dir_sdi
 9693 00b8 0346     	 mov r3,r0
 9694 00ba 87F86F31 	 strb r3,[r7,#367]
4165:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 9695              	 .loc 1 4165 0
 9696 00be 97F86F31 	 ldrb r3,[r7,#367]
 9697 00c2 002B     	 cmp r3,#0
 9698 00c4 00D0     	 beq .L623
 9699 00c6 8AE0     	 b .L621
 9700              	.L623:
4166:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {							/* Find the entry links to the child directory */
4167:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_read_file(&dj);
 9701              	 .loc 1 4167 0
 9702 00c8 07F59473 	 add r3,r7,#296
 9703 00cc 1846     	 mov r0,r3
 9704 00ce 0021     	 movs r1,#0
 9705 00d0 FFF7FEFF 	 bl dir_read
 9706 00d4 0346     	 mov r3,r0
 9707 00d6 87F86F31 	 strb r3,[r7,#367]
4168:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res != FR_OK) break;
 9708              	 .loc 1 4168 0
 9709 00da 97F86F31 	 ldrb r3,[r7,#367]
 9710 00de 002B     	 cmp r3,#0
 9711 00e0 00D0     	 beq .L624
 9712 00e2 1AE0     	 b .L625
 9713              	.L624:
4169:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 9714              	 .loc 1 4169 0
 9715 00e4 D7F82421 	 ldr r2,[r7,#292]
 9716 00e8 D7F84831 	 ldr r3,[r7,#328]
 9717 00ec 1046     	 mov r0,r2
 9718 00ee 1946     	 mov r1,r3
 9719 00f0 FFF7FEFF 	 bl ld_clust
 9720 00f4 0246     	 mov r2,r0
 9721 00f6 D7F85C31 	 ldr r3,[r7,#348]
 9722 00fa 9A42     	 cmp r2,r3
 9723 00fc 00D1     	 bne .L626
 9724 00fe 0CE0     	 b .L625
 9725              	.L626:
4170:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_next(&dj, 0);
 9726              	 .loc 1 4170 0
 9727 0100 07F59473 	 add r3,r7,#296
 9728 0104 1846     	 mov r0,r3
 9729 0106 0021     	 movs r1,#0
 9730 0108 FFF7FEFF 	 bl dir_next
 9731 010c 0346     	 mov r3,r0
 9732 010e 87F86F31 	 strb r3,[r7,#367]
4171:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (res == FR_OK);
 9733              	 .loc 1 4171 0
 9734 0112 97F86F31 	 ldrb r3,[r7,#367]
 9735 0116 002B     	 cmp r3,#0
 9736 0118 D6D0     	 beq .L623
 9737              	.L625:
4172:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 9738              	 .loc 1 4172 0
 9739 011a 97F86F31 	 ldrb r3,[r7,#367]
 9740 011e 042B     	 cmp r3,#4
 9741 0120 02D1     	 bne .L627
 9742              	 .loc 1 4172 0 is_stmt 0 discriminator 1
 9743 0122 0223     	 movs r3,#2
 9744 0124 87F86F31 	 strb r3,[r7,#367]
 9745              	.L627:
4173:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 9746              	 .loc 1 4173 0 is_stmt 1
 9747 0128 97F86F31 	 ldrb r3,[r7,#367]
 9748 012c 002B     	 cmp r3,#0
 9749 012e 00D0     	 beq .L628
 9750 0130 55E0     	 b .L621
 9751              	.L628:
4174:../Dave/Generated/FATFS/ff_Src/ff.c **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 9752              	 .loc 1 4174 0
 9753 0132 07F59472 	 add r2,r7,#296
 9754 0136 07F10C03 	 add r3,r7,#12
 9755 013a 1046     	 mov r0,r2
 9756 013c 1946     	 mov r1,r3
 9757 013e FFF7FEFF 	 bl get_fileinfo
4175:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (n = 0; fno.fname[n]; n++) ;	/* Name length */
 9758              	 .loc 1 4175 0
 9759 0142 0023     	 movs r3,#0
 9760 0144 C7F86431 	 str r3,[r7,#356]
 9761 0148 04E0     	 b .L629
 9762              	.L630:
 9763              	 .loc 1 4175 0 is_stmt 0 discriminator 3
 9764 014a D7F86431 	 ldr r3,[r7,#356]
 9765 014e 0133     	 adds r3,r3,#1
 9766 0150 C7F86431 	 str r3,[r7,#356]
 9767              	.L629:
 9768              	 .loc 1 4175 0 discriminator 1
 9769 0154 07F10C02 	 add r2,r7,#12
 9770 0158 D7F86431 	 ldr r3,[r7,#356]
 9771 015c 1344     	 add r3,r3,r2
 9772 015e 1033     	 adds r3,r3,#16
 9773 0160 9B79     	 ldrb r3,[r3,#6]
 9774 0162 002B     	 cmp r3,#0
 9775 0164 F1D1     	 bne .L630
4176:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (i < n + 1) {	/* Insufficient space to store the path name? */
 9776              	 .loc 1 4176 0 is_stmt 1
 9777 0166 D7F86431 	 ldr r3,[r7,#356]
 9778 016a 5A1C     	 adds r2,r3,#1
 9779 016c D7F86831 	 ldr r3,[r7,#360]
 9780 0170 9A42     	 cmp r2,r3
 9781 0172 03D9     	 bls .L631
4177:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NOT_ENOUGH_CORE; break;
 9782              	 .loc 1 4177 0
 9783 0174 1123     	 movs r3,#17
 9784 0176 87F86F31 	 strb r3,[r7,#367]
 9785 017a 30E0     	 b .L621
 9786              	.L631:
4178:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4179:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
 9787              	 .loc 1 4179 0
 9788 017c 16E0     	 b .L632
 9789              	.L633:
 9790              	 .loc 1 4179 0 is_stmt 0 discriminator 2
 9791 017e 3B1D     	 adds r3,r7,#4
 9792 0180 1A68     	 ldr r2,[r3]
 9793 0182 D7F86831 	 ldr r3,[r7,#360]
 9794 0186 013B     	 subs r3,r3,#1
 9795 0188 C7F86831 	 str r3,[r7,#360]
 9796 018c D7F86831 	 ldr r3,[r7,#360]
 9797 0190 1344     	 add r3,r3,r2
 9798 0192 D7F86421 	 ldr r2,[r7,#356]
 9799 0196 013A     	 subs r2,r2,#1
 9800 0198 C7F86421 	 str r2,[r7,#356]
 9801 019c 07F10C01 	 add r1,r7,#12
 9802 01a0 D7F86421 	 ldr r2,[r7,#356]
 9803 01a4 0A44     	 add r2,r2,r1
 9804 01a6 1032     	 adds r2,r2,#16
 9805 01a8 9279     	 ldrb r2,[r2,#6]
 9806 01aa 1A70     	 strb r2,[r3]
 9807              	.L632:
 9808              	 .loc 1 4179 0 discriminator 1
 9809 01ac D7F86431 	 ldr r3,[r7,#356]
 9810 01b0 002B     	 cmp r3,#0
 9811 01b2 E4D1     	 bne .L633
4180:../Dave/Generated/FATFS/ff_Src/ff.c **** 				buff[--i] = '/';
 9812              	 .loc 1 4180 0 is_stmt 1
 9813 01b4 3B1D     	 adds r3,r7,#4
 9814 01b6 1A68     	 ldr r2,[r3]
 9815 01b8 D7F86831 	 ldr r3,[r7,#360]
 9816 01bc 013B     	 subs r3,r3,#1
 9817 01be C7F86831 	 str r3,[r7,#360]
 9818 01c2 D7F86831 	 ldr r3,[r7,#360]
 9819 01c6 1344     	 add r3,r3,r2
 9820 01c8 2F22     	 movs r2,#47
 9821 01ca 1A70     	 strb r2,[r3]
 9822              	.L619:
4158:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 9823              	 .loc 1 4158 0
 9824 01cc D7F83031 	 ldr r3,[r7,#304]
 9825 01d0 C7F85C31 	 str r3,[r7,#348]
 9826 01d4 D7F85C31 	 ldr r3,[r7,#348]
 9827 01d8 002B     	 cmp r3,#0
 9828 01da 7FF43EAF 	 bne .L634
 9829              	.L621:
4181:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4182:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4183:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 9830              	 .loc 1 4183 0
 9831 01de 97F86F31 	 ldrb r3,[r7,#367]
 9832 01e2 002B     	 cmp r3,#0
 9833 01e4 2AD1     	 bne .L618
4184:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i == len) buff[--i] = '/';	/* Is it the root-directory? */
 9834              	 .loc 1 4184 0
 9835 01e6 3B46     	 mov r3,r7
 9836 01e8 D7F86821 	 ldr r2,[r7,#360]
 9837 01ec 1B68     	 ldr r3,[r3]
 9838 01ee 9A42     	 cmp r2,r3
 9839 01f0 0BD1     	 bne .L635
 9840              	 .loc 1 4184 0 is_stmt 0 discriminator 1
 9841 01f2 3B1D     	 adds r3,r7,#4
 9842 01f4 1A68     	 ldr r2,[r3]
 9843 01f6 D7F86831 	 ldr r3,[r7,#360]
 9844 01fa 013B     	 subs r3,r3,#1
 9845 01fc C7F86831 	 str r3,[r7,#360]
 9846 0200 D7F86831 	 ldr r3,[r7,#360]
 9847 0204 1344     	 add r3,r3,r2
 9848 0206 2F22     	 movs r2,#47
 9849 0208 1A70     	 strb r2,[r3]
 9850              	.L635:
4185:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_VOLUMES >= 2			/* Put drive prefix */
4186:../Dave/Generated/FATFS/ff_Src/ff.c **** 			vl = 0;
4187:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID >= 1	/* String volume ID */
4188:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (n = 0, vp = (const char*)VolumeStr[CurrVol]; vp[n]; n++) ;
4189:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= n + 2) {
4190:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (FF_STR_VOLUME_ID == 2) *tp++ = (TCHAR)'/';
4191:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (vl = 0; vl < n; *tp++ = (TCHAR)vp[vl], vl++) ;
4192:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (FF_STR_VOLUME_ID == 1) *tp++ = (TCHAR)':';
4193:../Dave/Generated/FATFS/ff_Src/ff.c **** 				vl++;
4194:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4195:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* Numeric volume ID */
4196:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= 3) {
4197:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*tp++ = (TCHAR)'0' + CurrVol;
4198:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*tp++ = (TCHAR)':';
4199:../Dave/Generated/FATFS/ff_Src/ff.c **** 				vl = 2;
4200:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4201:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4202:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (vl == 0) res = FR_NOT_ENOUGH_CORE;
4203:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4204:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Add current directory path */
4205:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9851              	 .loc 1 4205 0 is_stmt 1
 9852 020a 97F86F31 	 ldrb r3,[r7,#367]
 9853 020e 002B     	 cmp r3,#0
 9854 0210 14D1     	 bne .L618
 9855              	.L636:
4206:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do *tp++ = buff[i++]; while (i < len);	/* Copy stacked path string */
 9856              	 .loc 1 4206 0 discriminator 1
 9857 0212 D7F86031 	 ldr r3,[r7,#352]
 9858 0216 5A1C     	 adds r2,r3,#1
 9859 0218 C7F86021 	 str r2,[r7,#352]
 9860 021c 3A1D     	 adds r2,r7,#4
 9861 021e 1168     	 ldr r1,[r2]
 9862 0220 D7F86821 	 ldr r2,[r7,#360]
 9863 0224 501C     	 adds r0,r2,#1
 9864 0226 C7F86801 	 str r0,[r7,#360]
 9865 022a 0A44     	 add r2,r2,r1
 9866 022c 1278     	 ldrb r2,[r2]
 9867 022e 1A70     	 strb r2,[r3]
 9868 0230 3B46     	 mov r3,r7
 9869 0232 D7F86821 	 ldr r2,[r7,#360]
 9870 0236 1B68     	 ldr r3,[r3]
 9871 0238 9A42     	 cmp r2,r3
 9872 023a EAD3     	 bcc .L636
 9873              	.L618:
4207:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4208:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4209:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4210:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4211:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4212:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*tp = 0;
 9874              	 .loc 1 4212 0
 9875 023c D7F86031 	 ldr r3,[r7,#352]
 9876 0240 0022     	 movs r2,#0
 9877 0242 1A70     	 strb r2,[r3]
4213:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9878              	 .loc 1 4213 0
 9879 0244 97F86F31 	 ldrb r3,[r7,#367]
4214:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9880              	 .loc 1 4214 0
 9881 0248 1846     	 mov r0,r3
 9882 024a 07F5B877 	 add r7,r7,#368
 9883              	.LCFI296:
 9884              	 .cfi_def_cfa_offset 8
 9885 024e BD46     	 mov sp,r7
 9886              	.LCFI297:
 9887              	 .cfi_def_cfa_register 13
 9888              	 
 9889 0250 80BD     	 pop {r7,pc}
 9890              	 .cfi_endproc
 9891              	.LFE55:
 9893 0252 00BF     	 .section .text.f_lseek,"ax",%progbits
 9894              	 .align 2
 9895              	 .global f_lseek
 9896              	 .thumb
 9897              	 .thumb_func
 9899              	f_lseek:
 9900              	.LFB56:
4215:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4216:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_RPATH >= 2 */
4217:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_RPATH >= 1 */
4218:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4219:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4220:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4221:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 2
4222:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4223:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Seek File Read/Write Pointer                                          */
4224:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4225:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4226:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_lseek (
4227:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
4228:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ofs		/* File pointer from top of file */
4229:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4230:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9901              	 .loc 1 4230 0
 9902              	 .cfi_startproc
 9903              	 
 9904              	 
 9905 0000 80B5     	 push {r7,lr}
 9906              	.LCFI298:
 9907              	 .cfi_def_cfa_offset 8
 9908              	 .cfi_offset 7,-8
 9909              	 .cfi_offset 14,-4
 9910 0002 88B0     	 sub sp,sp,#32
 9911              	.LCFI299:
 9912              	 .cfi_def_cfa_offset 40
 9913 0004 00AF     	 add r7,sp,#0
 9914              	.LCFI300:
 9915              	 .cfi_def_cfa_register 7
 9916 0006 7860     	 str r0,[r7,#4]
 9917 0008 3960     	 str r1,[r7]
4231:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4232:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4233:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst, bcs, nsect;
4234:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ifptr;
4235:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
4236:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
4237:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4238:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4239:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 9918              	 .loc 1 4239 0
 9919 000a 7A68     	 ldr r2,[r7,#4]
 9920 000c 07F10803 	 add r3,r7,#8
 9921 0010 1046     	 mov r0,r2
 9922 0012 1946     	 mov r1,r3
 9923 0014 FFF7FEFF 	 bl validate
 9924 0018 0346     	 mov r3,r0
 9925 001a FB77     	 strb r3,[r7,#31]
4240:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
 9926              	 .loc 1 4240 0
 9927 001c FB7F     	 ldrb r3,[r7,#31]
 9928 001e 002B     	 cmp r3,#0
 9929 0020 02D1     	 bne .L639
 9930              	 .loc 1 4240 0 is_stmt 0 discriminator 1
 9931 0022 7B68     	 ldr r3,[r7,#4]
 9932 0024 5B7D     	 ldrb r3,[r3,#21]
 9933 0026 FB77     	 strb r3,[r7,#31]
 9934              	.L639:
4241:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT && !FF_FS_READONLY
4242:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4243:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed
4244:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4245:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4246:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
 9935              	 .loc 1 4246 0 is_stmt 1
 9936 0028 FB7F     	 ldrb r3,[r7,#31]
 9937 002a 002B     	 cmp r3,#0
 9938 002c 01D0     	 beq .L640
 9939              	 .loc 1 4246 0 is_stmt 0 discriminator 1
 9940 002e FB7F     	 ldrb r3,[r7,#31]
 9941 0030 14E1     	 b .L663
 9942              	.L640:
4247:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4248:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
4249:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
4250:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
4251:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tbl = fp->cltbl;
4252:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
4253:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
4254:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cl != 0) {
4255:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {
4256:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Get a fragment */
4257:../Dave/Generated/FATFS/ff_Src/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
4258:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {
4259:../Dave/Generated/FATFS/ff_Src/ff.c **** 						pcl = cl; ncl++;
4260:../Dave/Generated/FATFS/ff_Src/ff.c **** 						cl = get_fat(&fp->obj, cl);
4261:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
4262:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4263:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (cl == pcl + 1);
4264:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
4265:../Dave/Generated/FATFS/ff_Src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
4266:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4267:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
4268:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4269:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
4270:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ulen <= tlen) {
4271:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*tbl = 0;		/* Terminate table */
4272:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4273:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
4274:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4275:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {						/* Fast seek */
4276:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
4277:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
4278:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ofs > 0) {
4279:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
4280:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dsc = clst2sect(fs, fp->clust);
4281:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dsc == 0) ABORT(fs, FR_INT_ERR);
4282:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
4283:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
4284:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
4285:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4286:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
4287:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4288:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
4289:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4290:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4291:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (disk_read(fs->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current se
4292:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4293:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->sect = dsc;
4294:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4295:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4296:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4297:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
4298:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4299:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4300:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Normal Seek */
4301:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
4302:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4303:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at F
4304:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4305:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, 
 9943              	 .loc 1 4305 0 is_stmt 1
 9944 0032 7B68     	 ldr r3,[r7,#4]
 9945 0034 DA68     	 ldr r2,[r3,#12]
 9946 0036 3B68     	 ldr r3,[r7]
 9947 0038 9A42     	 cmp r2,r3
 9948 003a 08D2     	 bcs .L642
 9949              	 .loc 1 4305 0 is_stmt 0 discriminator 1
 9950 003c 7B68     	 ldr r3,[r7,#4]
 9951 003e 1B7D     	 ldrb r3,[r3,#20]
 9952 0040 03F00203 	 and r3,r3,#2
 9953 0044 002B     	 cmp r3,#0
 9954 0046 02D1     	 bne .L642
4306:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ofs = fp->obj.objsize;
 9955              	 .loc 1 4306 0 is_stmt 1
 9956 0048 7B68     	 ldr r3,[r7,#4]
 9957 004a DB68     	 ldr r3,[r3,#12]
 9958 004c 3B60     	 str r3,[r7]
 9959              	.L642:
4307:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4308:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ifptr = fp->fptr;
 9960              	 .loc 1 4308 0
 9961 004e 7B68     	 ldr r3,[r7,#4]
 9962 0050 9B69     	 ldr r3,[r3,#24]
 9963 0052 3B61     	 str r3,[r7,#16]
4309:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->fptr = nsect = 0;
 9964              	 .loc 1 4309 0
 9965 0054 0023     	 movs r3,#0
 9966 0056 7B61     	 str r3,[r7,#20]
 9967 0058 7B68     	 ldr r3,[r7,#4]
 9968 005a 7A69     	 ldr r2,[r7,#20]
 9969 005c 9A61     	 str r2,[r3,#24]
4310:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs > 0) {
 9970              	 .loc 1 4310 0
 9971 005e 3B68     	 ldr r3,[r7]
 9972 0060 002B     	 cmp r3,#0
 9973 0062 00F0A780 	 beq .L643
4311:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 9974              	 .loc 1 4311 0
 9975 0066 BB68     	 ldr r3,[r7,#8]
 9976 0068 5B89     	 ldrh r3,[r3,#10]
 9977 006a 5B02     	 lsls r3,r3,#9
 9978 006c FB60     	 str r3,[r7,#12]
4312:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ifptr > 0 &&
 9979              	 .loc 1 4312 0
 9980 006e 3B69     	 ldr r3,[r7,#16]
 9981 0070 002B     	 cmp r3,#0
 9982 0072 1BD0     	 beq .L644
4313:../Dave/Generated/FATFS/ff_Src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 9983              	 .loc 1 4313 0 discriminator 1
 9984 0074 3B68     	 ldr r3,[r7]
 9985 0076 5A1E     	 subs r2,r3,#1
 9986 0078 FB68     	 ldr r3,[r7,#12]
 9987 007a B2FBF3F2 	 udiv r2,r2,r3
 9988 007e 3B69     	 ldr r3,[r7,#16]
 9989 0080 591E     	 subs r1,r3,#1
 9990 0082 FB68     	 ldr r3,[r7,#12]
 9991 0084 B1FBF3F3 	 udiv r3,r1,r3
4312:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ifptr > 0 &&
 9992              	 .loc 1 4312 0 discriminator 1
 9993 0088 9A42     	 cmp r2,r3
 9994 008a 0FD3     	 bcc .L644
4314:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 9995              	 .loc 1 4314 0
 9996 008c 3B69     	 ldr r3,[r7,#16]
 9997 008e 5A1E     	 subs r2,r3,#1
 9998 0090 FB68     	 ldr r3,[r7,#12]
 9999 0092 5B42     	 negs r3,r3
 10000 0094 1A40     	 ands r2,r2,r3
 10001 0096 7B68     	 ldr r3,[r7,#4]
 10002 0098 9A61     	 str r2,[r3,#24]
4315:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ofs -= fp->fptr;
 10003              	 .loc 1 4315 0
 10004 009a 7B68     	 ldr r3,[r7,#4]
 10005 009c 9B69     	 ldr r3,[r3,#24]
 10006 009e 3A68     	 ldr r2,[r7]
 10007 00a0 D31A     	 subs r3,r2,r3
 10008 00a2 3B60     	 str r3,[r7]
4316:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = fp->clust;
 10009              	 .loc 1 4316 0
 10010 00a4 7B68     	 ldr r3,[r7,#4]
 10011 00a6 DB69     	 ldr r3,[r3,#28]
 10012 00a8 BB61     	 str r3,[r7,#24]
 10013 00aa 22E0     	 b .L645
 10014              	.L644:
4317:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {									/* When seek to back cluster, */
4318:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = fp->obj.sclust;					/* start from the first cluster */
 10015              	 .loc 1 4318 0
 10016 00ac 7B68     	 ldr r3,[r7,#4]
 10017 00ae 9B68     	 ldr r3,[r3,#8]
 10018 00b0 BB61     	 str r3,[r7,#24]
4319:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4320:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 10019              	 .loc 1 4320 0
 10020 00b2 BB69     	 ldr r3,[r7,#24]
 10021 00b4 002B     	 cmp r3,#0
 10022 00b6 19D1     	 bne .L646
4321:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = create_chain(&fp->obj, 0);
 10023              	 .loc 1 4321 0
 10024 00b8 7B68     	 ldr r3,[r7,#4]
 10025 00ba 1846     	 mov r0,r3
 10026 00bc 0021     	 movs r1,#0
 10027 00be FFF7FEFF 	 bl create_chain
 10028 00c2 B861     	 str r0,[r7,#24]
4322:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 10029              	 .loc 1 4322 0
 10030 00c4 BB69     	 ldr r3,[r7,#24]
 10031 00c6 012B     	 cmp r3,#1
 10032 00c8 04D1     	 bne .L647
 10033              	 .loc 1 4322 0 is_stmt 0 discriminator 1
 10034 00ca 7B68     	 ldr r3,[r7,#4]
 10035 00cc 0222     	 movs r2,#2
 10036 00ce 5A75     	 strb r2,[r3,#21]
 10037 00d0 0223     	 movs r3,#2
 10038 00d2 C3E0     	 b .L663
 10039              	.L647:
4323:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 10040              	 .loc 1 4323 0 is_stmt 1
 10041 00d4 BB69     	 ldr r3,[r7,#24]
 10042 00d6 B3F1FF3F 	 cmp r3,#-1
 10043 00da 04D1     	 bne .L648
 10044              	 .loc 1 4323 0 is_stmt 0 discriminator 1
 10045 00dc 7B68     	 ldr r3,[r7,#4]
 10046 00de 0122     	 movs r2,#1
 10047 00e0 5A75     	 strb r2,[r3,#21]
 10048 00e2 0123     	 movs r3,#1
 10049 00e4 BAE0     	 b .L663
 10050              	.L648:
4324:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->obj.sclust = clst;
 10051              	 .loc 1 4324 0 is_stmt 1
 10052 00e6 7B68     	 ldr r3,[r7,#4]
 10053 00e8 BA69     	 ldr r2,[r7,#24]
 10054 00ea 9A60     	 str r2,[r3,#8]
 10055              	.L646:
4325:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4326:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4327:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;
 10056              	 .loc 1 4327 0
 10057 00ec 7B68     	 ldr r3,[r7,#4]
 10058 00ee BA69     	 ldr r2,[r7,#24]
 10059 00f0 DA61     	 str r2,[r3,#28]
 10060              	.L645:
4328:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4329:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst != 0) {
 10061              	 .loc 1 4329 0
 10062 00f2 BB69     	 ldr r3,[r7,#24]
 10063 00f4 002B     	 cmp r3,#0
 10064 00f6 5DD0     	 beq .L643
4330:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 10065              	 .loc 1 4330 0
 10066 00f8 3AE0     	 b .L649
 10067              	.L656:
4331:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 10068              	 .loc 1 4331 0
 10069 00fa 3A68     	 ldr r2,[r7]
 10070 00fc FB68     	 ldr r3,[r7,#12]
 10071 00fe D31A     	 subs r3,r2,r3
 10072 0100 3B60     	 str r3,[r7]
 10073 0102 7B68     	 ldr r3,[r7,#4]
 10074 0104 9A69     	 ldr r2,[r3,#24]
 10075 0106 FB68     	 ldr r3,[r7,#12]
 10076 0108 1A44     	 add r2,r2,r3
 10077 010a 7B68     	 ldr r3,[r7,#4]
 10078 010c 9A61     	 str r2,[r3,#24]
4332:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4333:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 10079              	 .loc 1 4333 0
 10080 010e 7B68     	 ldr r3,[r7,#4]
 10081 0110 1B7D     	 ldrb r3,[r3,#20]
 10082 0112 03F00203 	 and r3,r3,#2
 10083 0116 002B     	 cmp r3,#0
 10084 0118 0BD0     	 beq .L650
4334:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize
4335:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fp->obj.objsize = fp->fptr;
4336:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fp->flag |= FA_MODIFIED;
4337:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4338:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 10085              	 .loc 1 4338 0
 10086 011a 7B68     	 ldr r3,[r7,#4]
 10087 011c 1846     	 mov r0,r3
 10088 011e B969     	 ldr r1,[r7,#24]
 10089 0120 FFF7FEFF 	 bl create_chain
 10090 0124 B861     	 str r0,[r7,#24]
4339:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 10091              	 .loc 1 4339 0
 10092 0126 BB69     	 ldr r3,[r7,#24]
 10093 0128 002B     	 cmp r3,#0
 10094 012a 08D1     	 bne .L651
4340:../Dave/Generated/FATFS/ff_Src/ff.c **** 							ofs = 0; break;
 10095              	 .loc 1 4340 0
 10096 012c 0023     	 movs r3,#0
 10097 012e 3B60     	 str r3,[r7]
 10098 0130 22E0     	 b .L652
 10099              	.L650:
4341:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4342:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4343:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4344:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4345:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 10100              	 .loc 1 4345 0
 10101 0132 7B68     	 ldr r3,[r7,#4]
 10102 0134 1846     	 mov r0,r3
 10103 0136 B969     	 ldr r1,[r7,#24]
 10104 0138 FFF7FEFF 	 bl get_fat
 10105 013c B861     	 str r0,[r7,#24]
 10106              	.L651:
4346:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4347:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 10107              	 .loc 1 4347 0
 10108 013e BB69     	 ldr r3,[r7,#24]
 10109 0140 B3F1FF3F 	 cmp r3,#-1
 10110 0144 04D1     	 bne .L653
 10111              	 .loc 1 4347 0 is_stmt 0 discriminator 1
 10112 0146 7B68     	 ldr r3,[r7,#4]
 10113 0148 0122     	 movs r2,#1
 10114 014a 5A75     	 strb r2,[r3,#21]
 10115 014c 0123     	 movs r3,#1
 10116 014e 85E0     	 b .L663
 10117              	.L653:
4348:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 10118              	 .loc 1 4348 0 is_stmt 1
 10119 0150 BB69     	 ldr r3,[r7,#24]
 10120 0152 012B     	 cmp r3,#1
 10121 0154 04D9     	 bls .L654
 10122              	 .loc 1 4348 0 is_stmt 0 discriminator 2
 10123 0156 BB68     	 ldr r3,[r7,#8]
 10124 0158 DA69     	 ldr r2,[r3,#28]
 10125 015a BB69     	 ldr r3,[r7,#24]
 10126 015c 9A42     	 cmp r2,r3
 10127 015e 04D8     	 bhi .L655
 10128              	.L654:
 10129              	 .loc 1 4348 0 discriminator 3
 10130 0160 7B68     	 ldr r3,[r7,#4]
 10131 0162 0222     	 movs r2,#2
 10132 0164 5A75     	 strb r2,[r3,#21]
 10133 0166 0223     	 movs r3,#2
 10134 0168 78E0     	 b .L663
 10135              	.L655:
4349:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->clust = clst;
 10136              	 .loc 1 4349 0 is_stmt 1
 10137 016a 7B68     	 ldr r3,[r7,#4]
 10138 016c BA69     	 ldr r2,[r7,#24]
 10139 016e DA61     	 str r2,[r3,#28]
 10140              	.L649:
4330:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 10141              	 .loc 1 4330 0
 10142 0170 3A68     	 ldr r2,[r7]
 10143 0172 FB68     	 ldr r3,[r7,#12]
 10144 0174 9A42     	 cmp r2,r3
 10145 0176 C0D8     	 bhi .L656
 10146              	.L652:
4350:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4351:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr += ofs;
 10147              	 .loc 1 4351 0
 10148 0178 7B68     	 ldr r3,[r7,#4]
 10149 017a 9A69     	 ldr r2,[r3,#24]
 10150 017c 3B68     	 ldr r3,[r7]
 10151 017e 1A44     	 add r2,r2,r3
 10152 0180 7B68     	 ldr r3,[r7,#4]
 10153 0182 9A61     	 str r2,[r3,#24]
4352:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ofs % SS(fs)) {
 10154              	 .loc 1 4352 0
 10155 0184 3B68     	 ldr r3,[r7]
 10156 0186 C3F30803 	 ubfx r3,r3,#0,#9
 10157 018a 002B     	 cmp r3,#0
 10158 018c 12D0     	 beq .L643
4353:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nsect = clst2sect(fs, clst);	/* Current sector */
 10159              	 .loc 1 4353 0
 10160 018e BB68     	 ldr r3,[r7,#8]
 10161 0190 1846     	 mov r0,r3
 10162 0192 B969     	 ldr r1,[r7,#24]
 10163 0194 FFF7FEFF 	 bl clst2sect
 10164 0198 7861     	 str r0,[r7,#20]
4354:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 10165              	 .loc 1 4354 0
 10166 019a 7B69     	 ldr r3,[r7,#20]
 10167 019c 002B     	 cmp r3,#0
 10168 019e 04D1     	 bne .L657
 10169              	 .loc 1 4354 0 is_stmt 0 discriminator 1
 10170 01a0 7B68     	 ldr r3,[r7,#4]
 10171 01a2 0222     	 movs r2,#2
 10172 01a4 5A75     	 strb r2,[r3,#21]
 10173 01a6 0223     	 movs r3,#2
 10174 01a8 58E0     	 b .L663
 10175              	.L657:
4355:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 10176              	 .loc 1 4355 0 is_stmt 1
 10177 01aa 3B68     	 ldr r3,[r7]
 10178 01ac 5B0A     	 lsrs r3,r3,#9
 10179 01ae 7A69     	 ldr r2,[r7,#20]
 10180 01b0 1344     	 add r3,r3,r2
 10181 01b2 7B61     	 str r3,[r7,#20]
 10182              	.L643:
4356:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4357:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4358:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4359:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is 
 10183              	 .loc 1 4359 0
 10184 01b4 7B68     	 ldr r3,[r7,#4]
 10185 01b6 9A69     	 ldr r2,[r3,#24]
 10186 01b8 7B68     	 ldr r3,[r7,#4]
 10187 01ba DB68     	 ldr r3,[r3,#12]
 10188 01bc 9A42     	 cmp r2,r3
 10189 01be 0AD9     	 bls .L658
4360:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.objsize = fp->fptr;
 10190              	 .loc 1 4360 0
 10191 01c0 7B68     	 ldr r3,[r7,#4]
 10192 01c2 9A69     	 ldr r2,[r3,#24]
 10193 01c4 7B68     	 ldr r3,[r7,#4]
 10194 01c6 DA60     	 str r2,[r3,#12]
4361:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->flag |= FA_MODIFIED;
 10195              	 .loc 1 4361 0
 10196 01c8 7B68     	 ldr r3,[r7,#4]
 10197 01ca 1B7D     	 ldrb r3,[r3,#20]
 10198 01cc 43F04003 	 orr r3,r3,#64
 10199 01d0 DAB2     	 uxtb r2,r3
 10200 01d2 7B68     	 ldr r3,[r7,#4]
 10201 01d4 1A75     	 strb r2,[r3,#20]
 10202              	.L658:
4362:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4363:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 10203              	 .loc 1 4363 0
 10204 01d6 7B68     	 ldr r3,[r7,#4]
 10205 01d8 9B69     	 ldr r3,[r3,#24]
 10206 01da C3F30803 	 ubfx r3,r3,#0,#9
 10207 01de 002B     	 cmp r3,#0
 10208 01e0 3BD0     	 beq .L659
 10209              	 .loc 1 4363 0 is_stmt 0 discriminator 1
 10210 01e2 7B68     	 ldr r3,[r7,#4]
 10211 01e4 1A6A     	 ldr r2,[r3,#32]
 10212 01e6 7B69     	 ldr r3,[r7,#20]
 10213 01e8 9A42     	 cmp r2,r3
 10214 01ea 36D0     	 beq .L659
4364:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
4365:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4366:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 10215              	 .loc 1 4366 0 is_stmt 1
 10216 01ec 7B68     	 ldr r3,[r7,#4]
 10217 01ee 1B7D     	 ldrb r3,[r3,#20]
 10218 01f0 DBB2     	 uxtb r3,r3
 10219 01f2 5BB2     	 sxtb r3,r3
 10220 01f4 002B     	 cmp r3,#0
 10221 01f6 1BDA     	 bge .L660
4367:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 10222              	 .loc 1 4367 0
 10223 01f8 BB68     	 ldr r3,[r7,#8]
 10224 01fa 5978     	 ldrb r1,[r3,#1]
 10225 01fc 7B68     	 ldr r3,[r7,#4]
 10226 01fe 03F12C02 	 add r2,r3,#44
 10227 0202 7B68     	 ldr r3,[r7,#4]
 10228 0204 1B6A     	 ldr r3,[r3,#32]
 10229 0206 0846     	 mov r0,r1
 10230 0208 1146     	 mov r1,r2
 10231 020a 1A46     	 mov r2,r3
 10232 020c 0123     	 movs r3,#1
 10233 020e FFF7FEFF 	 bl disk_write
 10234 0212 0346     	 mov r3,r0
 10235 0214 002B     	 cmp r3,#0
 10236 0216 04D0     	 beq .L661
 10237              	 .loc 1 4367 0 is_stmt 0 discriminator 1
 10238 0218 7B68     	 ldr r3,[r7,#4]
 10239 021a 0122     	 movs r2,#1
 10240 021c 5A75     	 strb r2,[r3,#21]
 10241 021e 0123     	 movs r3,#1
 10242 0220 1CE0     	 b .L663
 10243              	.L661:
4368:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 10244              	 .loc 1 4368 0 is_stmt 1
 10245 0222 7B68     	 ldr r3,[r7,#4]
 10246 0224 1B7D     	 ldrb r3,[r3,#20]
 10247 0226 03F07F03 	 and r3,r3,#127
 10248 022a DAB2     	 uxtb r2,r3
 10249 022c 7B68     	 ldr r3,[r7,#4]
 10250 022e 1A75     	 strb r2,[r3,#20]
 10251              	.L660:
4369:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4370:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4371:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
 10252              	 .loc 1 4371 0
 10253 0230 BB68     	 ldr r3,[r7,#8]
 10254 0232 5A78     	 ldrb r2,[r3,#1]
 10255 0234 7B68     	 ldr r3,[r7,#4]
 10256 0236 2C33     	 adds r3,r3,#44
 10257 0238 1046     	 mov r0,r2
 10258 023a 1946     	 mov r1,r3
 10259 023c 7A69     	 ldr r2,[r7,#20]
 10260 023e 0123     	 movs r3,#1
 10261 0240 FFF7FEFF 	 bl disk_read
 10262 0244 0346     	 mov r3,r0
 10263 0246 002B     	 cmp r3,#0
 10264 0248 04D0     	 beq .L662
 10265              	 .loc 1 4371 0 is_stmt 0 discriminator 1
 10266 024a 7B68     	 ldr r3,[r7,#4]
 10267 024c 0122     	 movs r2,#1
 10268 024e 5A75     	 strb r2,[r3,#21]
 10269 0250 0123     	 movs r3,#1
 10270 0252 03E0     	 b .L663
 10271              	.L662:
4372:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4373:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = nsect;
 10272              	 .loc 1 4373 0 is_stmt 1
 10273 0254 7B68     	 ldr r3,[r7,#4]
 10274 0256 7A69     	 ldr r2,[r7,#20]
 10275 0258 1A62     	 str r2,[r3,#32]
 10276              	.L659:
4374:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4375:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4376:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4377:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 10277              	 .loc 1 4377 0
 10278 025a FB7F     	 ldrb r3,[r7,#31]
 10279              	.L663:
4378:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10280              	 .loc 1 4378 0 discriminator 1
 10281 025c 1846     	 mov r0,r3
 10282 025e 2037     	 adds r7,r7,#32
 10283              	.LCFI301:
 10284              	 .cfi_def_cfa_offset 8
 10285 0260 BD46     	 mov sp,r7
 10286              	.LCFI302:
 10287              	 .cfi_def_cfa_register 13
 10288              	 
 10289 0262 80BD     	 pop {r7,pc}
 10290              	 .cfi_endproc
 10291              	.LFE56:
 10293              	 .section .text.f_opendir,"ax",%progbits
 10294              	 .align 2
 10295              	 .global f_opendir
 10296              	 .thumb
 10297              	 .thumb_func
 10299              	f_opendir:
 10300              	.LFB57:
4379:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4380:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4381:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4382:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1
4383:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4384:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create a Directory Object                                             */
4385:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4386:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4387:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_opendir (
4388:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
4389:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4390:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4391:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10301              	 .loc 1 4391 0
 10302              	 .cfi_startproc
 10303              	 
 10304              	 
 10305 0000 80B5     	 push {r7,lr}
 10306              	.LCFI303:
 10307              	 .cfi_def_cfa_offset 8
 10308              	 .cfi_offset 7,-8
 10309              	 .cfi_offset 14,-4
 10310 0002 84B0     	 sub sp,sp,#16
 10311              	.LCFI304:
 10312              	 .cfi_def_cfa_offset 24
 10313 0004 00AF     	 add r7,sp,#0
 10314              	.LCFI305:
 10315              	 .cfi_def_cfa_register 7
 10316 0006 7860     	 str r0,[r7,#4]
 10317 0008 3960     	 str r1,[r7]
4392:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4393:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4394:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4395:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4396:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4397:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
 10318              	 .loc 1 4397 0
 10319 000a 7B68     	 ldr r3,[r7,#4]
 10320 000c 002B     	 cmp r3,#0
 10321 000e 01D1     	 bne .L665
 10322              	 .loc 1 4397 0 is_stmt 0 discriminator 1
 10323 0010 0923     	 movs r3,#9
 10324 0012 64E0     	 b .L674
 10325              	.L665:
4398:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4399:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4400:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, 0);
 10326              	 .loc 1 4400 0 is_stmt 1
 10327 0014 3A46     	 mov r2,r7
 10328 0016 07F10803 	 add r3,r7,#8
 10329 001a 1046     	 mov r0,r2
 10330 001c 1946     	 mov r1,r3
 10331 001e 0022     	 movs r2,#0
 10332 0020 FFF7FEFF 	 bl find_volume
 10333 0024 0346     	 mov r3,r0
 10334 0026 FB73     	 strb r3,[r7,#15]
4401:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 10335              	 .loc 1 4401 0
 10336 0028 FB7B     	 ldrb r3,[r7,#15]
 10337 002a 002B     	 cmp r3,#0
 10338 002c 50D1     	 bne .L667
4402:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.fs = fs;
 10339              	 .loc 1 4402 0
 10340 002e BA68     	 ldr r2,[r7,#8]
 10341 0030 7B68     	 ldr r3,[r7,#4]
 10342 0032 1A60     	 str r2,[r3]
4403:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4404:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 10343              	 .loc 1 4404 0
 10344 0034 3B68     	 ldr r3,[r7]
 10345 0036 7868     	 ldr r0,[r7,#4]
 10346 0038 1946     	 mov r1,r3
 10347 003a FFF7FEFF 	 bl follow_path
 10348 003e 0346     	 mov r3,r0
 10349 0040 FB73     	 strb r3,[r7,#15]
4405:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 10350              	 .loc 1 4405 0
 10351 0042 FB7B     	 ldrb r3,[r7,#15]
 10352 0044 002B     	 cmp r3,#0
 10353 0046 3ED1     	 bne .L668
4406:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 10354              	 .loc 1 4406 0
 10355 0048 7B68     	 ldr r3,[r7,#4]
 10356 004a 93F82F30 	 ldrb r3,[r3,#47]
 10357 004e DBB2     	 uxtb r3,r3
 10358 0050 5BB2     	 sxtb r3,r3
 10359 0052 002B     	 cmp r3,#0
 10360 0054 12DB     	 blt .L669
4407:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 10361              	 .loc 1 4407 0
 10362 0056 7B68     	 ldr r3,[r7,#4]
 10363 0058 9B79     	 ldrb r3,[r3,#6]
 10364 005a 03F01003 	 and r3,r3,#16
 10365 005e 002B     	 cmp r3,#0
 10366 0060 0AD0     	 beq .L670
4408:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4409:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4410:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
4411:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
4412:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.c_ofs = dp->blk_ofs;
4413:../Dave/Generated/FATFS/ff_Src/ff.c **** 						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
4414:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4415:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4416:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4417:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 10367              	 .loc 1 4417 0
 10368 0062 BA68     	 ldr r2,[r7,#8]
 10369 0064 7B68     	 ldr r3,[r7,#4]
 10370 0066 1B6A     	 ldr r3,[r3,#32]
 10371 0068 1046     	 mov r0,r2
 10372 006a 1946     	 mov r1,r3
 10373 006c FFF7FEFF 	 bl ld_clust
 10374 0070 0246     	 mov r2,r0
 10375 0072 7B68     	 ldr r3,[r7,#4]
 10376 0074 9A60     	 str r2,[r3,#8]
 10377 0076 01E0     	 b .L669
 10378              	.L670:
4418:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4419:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {						/* This object is a file */
4420:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_PATH;
 10379              	 .loc 1 4420 0
 10380 0078 0523     	 movs r3,#5
 10381 007a FB73     	 strb r3,[r7,#15]
 10382              	.L669:
4421:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4422:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4423:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 10383              	 .loc 1 4423 0
 10384 007c FB7B     	 ldrb r3,[r7,#15]
 10385 007e 002B     	 cmp r3,#0
 10386 0080 21D1     	 bne .L668
4424:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.id = fs->id;
 10387              	 .loc 1 4424 0
 10388 0082 BB68     	 ldr r3,[r7,#8]
 10389 0084 DA88     	 ldrh r2,[r3,#6]
 10390 0086 7B68     	 ldr r3,[r7,#4]
 10391 0088 9A80     	 strh r2,[r3,#4]
4425:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 10392              	 .loc 1 4425 0
 10393 008a 7868     	 ldr r0,[r7,#4]
 10394 008c 0021     	 movs r1,#0
 10395 008e FFF7FEFF 	 bl dir_sdi
 10396 0092 0346     	 mov r3,r0
 10397 0094 FB73     	 strb r3,[r7,#15]
4426:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4427:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 10398              	 .loc 1 4427 0
 10399 0096 FB7B     	 ldrb r3,[r7,#15]
 10400 0098 002B     	 cmp r3,#0
 10401 009a 14D1     	 bne .L668
4428:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (dp->obj.sclust != 0) {
 10402              	 .loc 1 4428 0
 10403 009c 7B68     	 ldr r3,[r7,#4]
 10404 009e 9B68     	 ldr r3,[r3,#8]
 10405 00a0 002B     	 cmp r3,#0
 10406 00a2 0DD0     	 beq .L671
4429:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 10407              	 .loc 1 4429 0
 10408 00a4 7868     	 ldr r0,[r7,#4]
 10409 00a6 0021     	 movs r1,#0
 10410 00a8 FFF7FEFF 	 bl inc_lock
 10411 00ac 0246     	 mov r2,r0
 10412 00ae 7B68     	 ldr r3,[r7,#4]
 10413 00b0 1A61     	 str r2,[r3,#16]
4430:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 10414              	 .loc 1 4430 0
 10415 00b2 7B68     	 ldr r3,[r7,#4]
 10416 00b4 1B69     	 ldr r3,[r3,#16]
 10417 00b6 002B     	 cmp r3,#0
 10418 00b8 05D1     	 bne .L668
 10419              	 .loc 1 4430 0 is_stmt 0 discriminator 1
 10420 00ba 1223     	 movs r3,#18
 10421 00bc FB73     	 strb r3,[r7,#15]
 10422 00be 02E0     	 b .L668
 10423              	.L671:
4431:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {
4432:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.lockid = 0;	/* Root directory need not to be locked */
 10424              	 .loc 1 4432 0 is_stmt 1
 10425 00c0 7B68     	 ldr r3,[r7,#4]
 10426 00c2 0022     	 movs r2,#0
 10427 00c4 1A61     	 str r2,[r3,#16]
 10428              	.L668:
4433:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4434:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4435:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4436:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4437:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4438:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4439:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 10429              	 .loc 1 4439 0
 10430 00c6 FB7B     	 ldrb r3,[r7,#15]
 10431 00c8 042B     	 cmp r3,#4
 10432 00ca 01D1     	 bne .L667
 10433              	 .loc 1 4439 0 is_stmt 0 discriminator 1
 10434 00cc 0523     	 movs r3,#5
 10435 00ce FB73     	 strb r3,[r7,#15]
 10436              	.L667:
4440:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4441:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 10437              	 .loc 1 4441 0 is_stmt 1
 10438 00d0 FB7B     	 ldrb r3,[r7,#15]
 10439 00d2 002B     	 cmp r3,#0
 10440 00d4 02D0     	 beq .L673
 10441              	 .loc 1 4441 0 is_stmt 0 discriminator 1
 10442 00d6 7B68     	 ldr r3,[r7,#4]
 10443 00d8 0022     	 movs r2,#0
 10444 00da 1A60     	 str r2,[r3]
 10445              	.L673:
4442:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4443:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 10446              	 .loc 1 4443 0 is_stmt 1
 10447 00dc FB7B     	 ldrb r3,[r7,#15]
 10448              	.L674:
4444:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10449              	 .loc 1 4444 0 discriminator 1
 10450 00de 1846     	 mov r0,r3
 10451 00e0 1037     	 adds r7,r7,#16
 10452              	.LCFI306:
 10453              	 .cfi_def_cfa_offset 8
 10454 00e2 BD46     	 mov sp,r7
 10455              	.LCFI307:
 10456              	 .cfi_def_cfa_register 13
 10457              	 
 10458 00e4 80BD     	 pop {r7,pc}
 10459              	 .cfi_endproc
 10460              	.LFE57:
 10462 00e6 00BF     	 .section .text.f_closedir,"ax",%progbits
 10463              	 .align 2
 10464              	 .global f_closedir
 10465              	 .thumb
 10466              	 .thumb_func
 10468              	f_closedir:
 10469              	.LFB58:
4445:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4446:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4447:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4448:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4449:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4450:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Close Directory                                                       */
4451:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4452:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4453:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_closedir (
4454:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
4455:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4456:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10470              	 .loc 1 4456 0
 10471              	 .cfi_startproc
 10472              	 
 10473              	 
 10474 0000 80B5     	 push {r7,lr}
 10475              	.LCFI308:
 10476              	 .cfi_def_cfa_offset 8
 10477              	 .cfi_offset 7,-8
 10478              	 .cfi_offset 14,-4
 10479 0002 84B0     	 sub sp,sp,#16
 10480              	.LCFI309:
 10481              	 .cfi_def_cfa_offset 24
 10482 0004 00AF     	 add r7,sp,#0
 10483              	.LCFI310:
 10484              	 .cfi_def_cfa_register 7
 10485 0006 7860     	 str r0,[r7,#4]
4457:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4458:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4459:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4460:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4461:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 10486              	 .loc 1 4461 0
 10487 0008 7A68     	 ldr r2,[r7,#4]
 10488 000a 07F10803 	 add r3,r7,#8
 10489 000e 1046     	 mov r0,r2
 10490 0010 1946     	 mov r1,r3
 10491 0012 FFF7FEFF 	 bl validate
 10492 0016 0346     	 mov r3,r0
 10493 0018 FB73     	 strb r3,[r7,#15]
4462:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 10494              	 .loc 1 4462 0
 10495 001a FB7B     	 ldrb r3,[r7,#15]
 10496 001c 002B     	 cmp r3,#0
 10497 001e 10D1     	 bne .L676
4463:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4464:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
 10498              	 .loc 1 4464 0
 10499 0020 7B68     	 ldr r3,[r7,#4]
 10500 0022 1B69     	 ldr r3,[r3,#16]
 10501 0024 002B     	 cmp r3,#0
 10502 0026 06D0     	 beq .L677
 10503              	 .loc 1 4464 0 is_stmt 0 discriminator 1
 10504 0028 7B68     	 ldr r3,[r7,#4]
 10505 002a 1B69     	 ldr r3,[r3,#16]
 10506 002c 1846     	 mov r0,r3
 10507 002e FFF7FEFF 	 bl dec_lock
 10508 0032 0346     	 mov r3,r0
 10509 0034 FB73     	 strb r3,[r7,#15]
 10510              	.L677:
4465:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 10511              	 .loc 1 4465 0 is_stmt 1
 10512 0036 FB7B     	 ldrb r3,[r7,#15]
 10513 0038 002B     	 cmp r3,#0
 10514 003a 02D1     	 bne .L676
 10515              	 .loc 1 4465 0 is_stmt 0 discriminator 1
 10516 003c 7B68     	 ldr r3,[r7,#4]
 10517 003e 0022     	 movs r2,#0
 10518 0040 1A60     	 str r2,[r3]
 10519              	.L676:
4466:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4467:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.fs = 0;	/* Invalidate directory object */
4468:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4469:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
4470:../Dave/Generated/FATFS/ff_Src/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
4471:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4472:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4473:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 10520              	 .loc 1 4473 0 is_stmt 1
 10521 0042 FB7B     	 ldrb r3,[r7,#15]
4474:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10522              	 .loc 1 4474 0
 10523 0044 1846     	 mov r0,r3
 10524 0046 1037     	 adds r7,r7,#16
 10525              	.LCFI311:
 10526              	 .cfi_def_cfa_offset 8
 10527 0048 BD46     	 mov sp,r7
 10528              	.LCFI312:
 10529              	 .cfi_def_cfa_register 13
 10530              	 
 10531 004a 80BD     	 pop {r7,pc}
 10532              	 .cfi_endproc
 10533              	.LFE58:
 10535              	 .section .text.f_readdir,"ax",%progbits
 10536              	 .align 2
 10537              	 .global f_readdir
 10538              	 .thumb
 10539              	 .thumb_func
 10541              	f_readdir:
 10542              	.LFB59:
4475:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4476:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4477:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4478:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4479:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4480:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Read Directory Entries in Sequence                                    */
4481:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4482:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4483:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_readdir (
4484:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
4485:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4486:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4487:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10543              	 .loc 1 4487 0
 10544              	 .cfi_startproc
 10545              	 
 10546              	 
 10547 0000 80B5     	 push {r7,lr}
 10548              	.LCFI313:
 10549              	 .cfi_def_cfa_offset 8
 10550              	 .cfi_offset 7,-8
 10551              	 .cfi_offset 14,-4
 10552 0002 84B0     	 sub sp,sp,#16
 10553              	.LCFI314:
 10554              	 .cfi_def_cfa_offset 24
 10555 0004 00AF     	 add r7,sp,#0
 10556              	.LCFI315:
 10557              	 .cfi_def_cfa_register 7
 10558 0006 7860     	 str r0,[r7,#4]
 10559 0008 3960     	 str r1,[r7]
4488:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4489:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4490:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4491:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4492:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4493:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 10560              	 .loc 1 4493 0
 10561 000a 7A68     	 ldr r2,[r7,#4]
 10562 000c 07F10803 	 add r3,r7,#8
 10563 0010 1046     	 mov r0,r2
 10564 0012 1946     	 mov r1,r3
 10565 0014 FFF7FEFF 	 bl validate
 10566 0018 0346     	 mov r3,r0
 10567 001a FB73     	 strb r3,[r7,#15]
4494:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 10568              	 .loc 1 4494 0
 10569 001c FB7B     	 ldrb r3,[r7,#15]
 10570 001e 002B     	 cmp r3,#0
 10571 0020 26D1     	 bne .L680
4495:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!fno) {
 10572              	 .loc 1 4495 0
 10573 0022 3B68     	 ldr r3,[r7]
 10574 0024 002B     	 cmp r3,#0
 10575 0026 06D1     	 bne .L681
4496:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 10576              	 .loc 1 4496 0
 10577 0028 7868     	 ldr r0,[r7,#4]
 10578 002a 0021     	 movs r1,#0
 10579 002c FFF7FEFF 	 bl dir_sdi
 10580 0030 0346     	 mov r3,r0
 10581 0032 FB73     	 strb r3,[r7,#15]
 10582 0034 1CE0     	 b .L680
 10583              	.L681:
4497:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
4498:../Dave/Generated/FATFS/ff_Src/ff.c **** 			INIT_NAMBUF(fs);
4499:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_read_file(dp);		/* Read an item */
 10584              	 .loc 1 4499 0
 10585 0036 7868     	 ldr r0,[r7,#4]
 10586 0038 0021     	 movs r1,#0
 10587 003a FFF7FEFF 	 bl dir_read
 10588 003e 0346     	 mov r3,r0
 10589 0040 FB73     	 strb r3,[r7,#15]
4500:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 10590              	 .loc 1 4500 0
 10591 0042 FB7B     	 ldrb r3,[r7,#15]
 10592 0044 042B     	 cmp r3,#4
 10593 0046 01D1     	 bne .L682
 10594              	 .loc 1 4500 0 is_stmt 0 discriminator 1
 10595 0048 0023     	 movs r3,#0
 10596 004a FB73     	 strb r3,[r7,#15]
 10597              	.L682:
4501:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 10598              	 .loc 1 4501 0 is_stmt 1
 10599 004c FB7B     	 ldrb r3,[r7,#15]
 10600 004e 002B     	 cmp r3,#0
 10601 0050 0ED1     	 bne .L680
4502:../Dave/Generated/FATFS/ff_Src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 10602              	 .loc 1 4502 0
 10603 0052 7868     	 ldr r0,[r7,#4]
 10604 0054 3968     	 ldr r1,[r7]
 10605 0056 FFF7FEFF 	 bl get_fileinfo
4503:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 10606              	 .loc 1 4503 0
 10607 005a 7868     	 ldr r0,[r7,#4]
 10608 005c 0021     	 movs r1,#0
 10609 005e FFF7FEFF 	 bl dir_next
 10610 0062 0346     	 mov r3,r0
 10611 0064 FB73     	 strb r3,[r7,#15]
4504:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 10612              	 .loc 1 4504 0
 10613 0066 FB7B     	 ldrb r3,[r7,#15]
 10614 0068 042B     	 cmp r3,#4
 10615 006a 01D1     	 bne .L680
 10616              	 .loc 1 4504 0 is_stmt 0 discriminator 1
 10617 006c 0023     	 movs r3,#0
 10618 006e FB73     	 strb r3,[r7,#15]
 10619              	.L680:
4505:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4506:../Dave/Generated/FATFS/ff_Src/ff.c **** 			FREE_NAMBUF();
4507:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4508:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4509:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 10620              	 .loc 1 4509 0 is_stmt 1
 10621 0070 FB7B     	 ldrb r3,[r7,#15]
4510:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10622              	 .loc 1 4510 0
 10623 0072 1846     	 mov r0,r3
 10624 0074 1037     	 adds r7,r7,#16
 10625              	.LCFI316:
 10626              	 .cfi_def_cfa_offset 8
 10627 0076 BD46     	 mov sp,r7
 10628              	.LCFI317:
 10629              	 .cfi_def_cfa_register 13
 10630              	 
 10631 0078 80BD     	 pop {r7,pc}
 10632              	 .cfi_endproc
 10633              	.LFE59:
 10635 007a 00BF     	 .section .text.f_stat,"ax",%progbits
 10636              	 .align 2
 10637              	 .global f_stat
 10638              	 .thumb
 10639              	 .thumb_func
 10641              	f_stat:
 10642              	.LFB60:
4511:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4512:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4513:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4514:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FIND
4515:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4516:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Find Next File                                                        */
4517:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4518:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4519:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_findnext (
4520:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
4521:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
4522:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4523:../Dave/Generated/FATFS/ff_Src/ff.c **** {
4524:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4525:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4526:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4527:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
4528:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4529:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4530:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
4531:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_USE_FIND == 2
4532:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist *
4533:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4534:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4535:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
4536:../Dave/Generated/FATFS/ff_Src/ff.c **** }
4537:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4538:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4539:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4540:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4541:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Find First File                                                       */
4542:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4543:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4544:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_findfirst (
4545:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
4546:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
4547:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
4548:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4549:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4550:../Dave/Generated/FATFS/ff_Src/ff.c **** {
4551:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4552:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4553:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4554:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4555:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
4556:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
4557:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
4558:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4559:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
4560:../Dave/Generated/FATFS/ff_Src/ff.c **** }
4561:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4562:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_FIND */
4563:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4564:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4565:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4566:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE == 0
4567:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4568:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get File Status                                                       */
4569:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4570:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4571:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_stat (
4572:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4573:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4574:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4575:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10643              	 .loc 1 4575 0
 10644              	 .cfi_startproc
 10645              	 
 10646              	 
 10647 0000 80B5     	 push {r7,lr}
 10648              	.LCFI318:
 10649              	 .cfi_def_cfa_offset 8
 10650              	 .cfi_offset 7,-8
 10651              	 .cfi_offset 14,-4
 10652 0002 90B0     	 sub sp,sp,#64
 10653              	.LCFI319:
 10654              	 .cfi_def_cfa_offset 72
 10655 0004 00AF     	 add r7,sp,#0
 10656              	.LCFI320:
 10657              	 .cfi_def_cfa_register 7
 10658 0006 7860     	 str r0,[r7,#4]
 10659 0008 3960     	 str r1,[r7]
4576:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4577:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4578:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4579:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4580:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4581:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4582:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &dj.obj.fs, 0);
 10660              	 .loc 1 4582 0
 10661 000a 3A1D     	 adds r2,r7,#4
 10662 000c 07F10803 	 add r3,r7,#8
 10663 0010 1046     	 mov r0,r2
 10664 0012 1946     	 mov r1,r3
 10665 0014 0022     	 movs r2,#0
 10666 0016 FFF7FEFF 	 bl find_volume
 10667 001a 0346     	 mov r3,r0
 10668 001c 87F83F30 	 strb r3,[r7,#63]
4583:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 10669              	 .loc 1 4583 0
 10670 0020 97F83F30 	 ldrb r3,[r7,#63]
 10671 0024 002B     	 cmp r3,#0
 10672 0026 20D1     	 bne .L685
4584:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
4585:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 10673              	 .loc 1 4585 0
 10674 0028 7B68     	 ldr r3,[r7,#4]
 10675 002a 07F10802 	 add r2,r7,#8
 10676 002e 1046     	 mov r0,r2
 10677 0030 1946     	 mov r1,r3
 10678 0032 FFF7FEFF 	 bl follow_path
 10679 0036 0346     	 mov r3,r0
 10680 0038 87F83F30 	 strb r3,[r7,#63]
4586:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 10681              	 .loc 1 4586 0
 10682 003c 97F83F30 	 ldrb r3,[r7,#63]
 10683 0040 002B     	 cmp r3,#0
 10684 0042 12D1     	 bne .L685
4587:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 10685              	 .loc 1 4587 0
 10686 0044 97F83730 	 ldrb r3,[r7,#55]
 10687 0048 DBB2     	 uxtb r3,r3
 10688 004a 5BB2     	 sxtb r3,r3
 10689 004c 002B     	 cmp r3,#0
 10690 004e 03DA     	 bge .L686
4588:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;
 10691              	 .loc 1 4588 0
 10692 0050 0623     	 movs r3,#6
 10693 0052 87F83F30 	 strb r3,[r7,#63]
 10694 0056 08E0     	 b .L685
 10695              	.L686:
4589:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {							/* Found an object */
4590:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 10696              	 .loc 1 4590 0
 10697 0058 3B68     	 ldr r3,[r7]
 10698 005a 002B     	 cmp r3,#0
 10699 005c 05D0     	 beq .L685
 10700              	 .loc 1 4590 0 is_stmt 0 discriminator 1
 10701 005e 07F10803 	 add r3,r7,#8
 10702 0062 1846     	 mov r0,r3
 10703 0064 3968     	 ldr r1,[r7]
 10704 0066 FFF7FEFF 	 bl get_fileinfo
 10705              	.L685:
4591:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4592:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4593:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4594:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4595:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4596:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(dj.obj.fs, res);
 10706              	 .loc 1 4596 0 is_stmt 1
 10707 006a 97F83F30 	 ldrb r3,[r7,#63]
4597:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10708              	 .loc 1 4597 0
 10709 006e 1846     	 mov r0,r3
 10710 0070 4037     	 adds r7,r7,#64
 10711              	.LCFI321:
 10712              	 .cfi_def_cfa_offset 8
 10713 0072 BD46     	 mov sp,r7
 10714              	.LCFI322:
 10715              	 .cfi_def_cfa_register 13
 10716              	 
 10717 0074 80BD     	 pop {r7,pc}
 10718              	 .cfi_endproc
 10719              	.LFE60:
 10721 0076 00BF     	 .section .text.f_getfree,"ax",%progbits
 10722              	 .align 2
 10723              	 .global f_getfree
 10724              	 .thumb
 10725              	 .thumb_func
 10727              	f_getfree:
 10728              	.LFB61:
4598:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4599:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4600:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4601:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4602:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4603:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get Number of Free Clusters                                           */
4604:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4605:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4606:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_getfree (
4607:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
4608:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4609:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
4610:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4611:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10729              	 .loc 1 4611 0
 10730              	 .cfi_startproc
 10731              	 
 10732              	 
 10733 0000 80B5     	 push {r7,lr}
 10734              	.LCFI323:
 10735              	 .cfi_def_cfa_offset 8
 10736              	 .cfi_offset 7,-8
 10737              	 .cfi_offset 14,-4
 10738 0002 90B0     	 sub sp,sp,#64
 10739              	.LCFI324:
 10740              	 .cfi_def_cfa_offset 72
 10741 0004 00AF     	 add r7,sp,#0
 10742              	.LCFI325:
 10743              	 .cfi_def_cfa_register 7
 10744 0006 F860     	 str r0,[r7,#12]
 10745 0008 B960     	 str r1,[r7,#8]
 10746 000a 7A60     	 str r2,[r7,#4]
4612:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4613:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4614:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD nfree, clst, sect, stat;
4615:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
4616:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID obj;
4617:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4618:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4619:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4620:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, 0);
 10747              	 .loc 1 4620 0
 10748 000c 07F10C02 	 add r2,r7,#12
 10749 0010 07F12403 	 add r3,r7,#36
 10750 0014 1046     	 mov r0,r2
 10751 0016 1946     	 mov r1,r3
 10752 0018 0022     	 movs r2,#0
 10753 001a FFF7FEFF 	 bl find_volume
 10754 001e 0346     	 mov r3,r0
 10755 0020 87F83F30 	 strb r3,[r7,#63]
4621:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 10756              	 .loc 1 4621 0
 10757 0024 97F83F30 	 ldrb r3,[r7,#63]
 10758 0028 002B     	 cmp r3,#0
 10759 002a 40F09880 	 bne .L689
4622:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
 10760              	 .loc 1 4622 0
 10761 002e 7A6A     	 ldr r2,[r7,#36]
 10762 0030 7B68     	 ldr r3,[r7,#4]
 10763 0032 1A60     	 str r2,[r3]
4623:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* If free_clst is valid, return it without full FAT scan */
4624:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) {
 10764              	 .loc 1 4624 0
 10765 0034 7B6A     	 ldr r3,[r7,#36]
 10766 0036 5A69     	 ldr r2,[r3,#20]
 10767 0038 7B6A     	 ldr r3,[r7,#36]
 10768 003a DB69     	 ldr r3,[r3,#28]
 10769 003c 023B     	 subs r3,r3,#2
 10770 003e 9A42     	 cmp r2,r3
 10771 0040 04D8     	 bhi .L690
4625:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*nclst = fs->free_clst;
 10772              	 .loc 1 4625 0
 10773 0042 7B6A     	 ldr r3,[r7,#36]
 10774 0044 5A69     	 ldr r2,[r3,#20]
 10775 0046 BB68     	 ldr r3,[r7,#8]
 10776 0048 1A60     	 str r2,[r3]
 10777 004a 88E0     	 b .L689
 10778              	.L690:
4626:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
4627:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Scan FAT to obtain number of free clusters */
4628:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nfree = 0;
 10779              	 .loc 1 4628 0
 10780 004c 0023     	 movs r3,#0
 10781 004e BB63     	 str r3,[r7,#56]
4629:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 10782              	 .loc 1 4629 0
 10783 0050 7B6A     	 ldr r3,[r7,#36]
 10784 0052 1B78     	 ldrb r3,[r3]
 10785 0054 012B     	 cmp r3,#1
 10786 0056 29D1     	 bne .L691
4630:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = 2; obj.fs = fs;
 10787              	 .loc 1 4630 0
 10788 0058 0223     	 movs r3,#2
 10789 005a 7B63     	 str r3,[r7,#52]
 10790 005c 7B6A     	 ldr r3,[r7,#36]
 10791 005e 3B61     	 str r3,[r7,#16]
 10792              	.L696:
4631:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {
4632:../Dave/Generated/FATFS/ff_Src/ff.c **** 					stat = get_fat(&obj, clst);
 10793              	 .loc 1 4632 0
 10794 0060 07F11003 	 add r3,r7,#16
 10795 0064 1846     	 mov r0,r3
 10796 0066 796B     	 ldr r1,[r7,#52]
 10797 0068 FFF7FEFF 	 bl get_fat
 10798 006c B862     	 str r0,[r7,#40]
4633:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 10799              	 .loc 1 4633 0
 10800 006e BB6A     	 ldr r3,[r7,#40]
 10801 0070 B3F1FF3F 	 cmp r3,#-1
 10802 0074 03D1     	 bne .L692
 10803              	 .loc 1 4633 0 is_stmt 0 discriminator 1
 10804 0076 0123     	 movs r3,#1
 10805 0078 87F83F30 	 strb r3,[r7,#63]
 10806 007c 15E0     	 b .L693
 10807              	.L692:
4634:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 10808              	 .loc 1 4634 0 is_stmt 1
 10809 007e BB6A     	 ldr r3,[r7,#40]
 10810 0080 012B     	 cmp r3,#1
 10811 0082 03D1     	 bne .L694
 10812              	 .loc 1 4634 0 is_stmt 0 discriminator 1
 10813 0084 0223     	 movs r3,#2
 10814 0086 87F83F30 	 strb r3,[r7,#63]
 10815 008a 0EE0     	 b .L693
 10816              	.L694:
4635:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (stat == 0) nfree++;
 10817              	 .loc 1 4635 0 is_stmt 1
 10818 008c BB6A     	 ldr r3,[r7,#40]
 10819 008e 002B     	 cmp r3,#0
 10820 0090 02D1     	 bne .L695
 10821              	 .loc 1 4635 0 is_stmt 0 discriminator 1
 10822 0092 BB6B     	 ldr r3,[r7,#56]
 10823 0094 0133     	 adds r3,r3,#1
 10824 0096 BB63     	 str r3,[r7,#56]
 10825              	.L695:
4636:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (++clst < fs->n_fatent);
 10826              	 .loc 1 4636 0 is_stmt 1
 10827 0098 7B6B     	 ldr r3,[r7,#52]
 10828 009a 0133     	 adds r3,r3,#1
 10829 009c 7B63     	 str r3,[r7,#52]
 10830 009e 7B6A     	 ldr r3,[r7,#36]
 10831 00a0 DB69     	 ldr r3,[r3,#28]
 10832 00a2 7A6B     	 ldr r2,[r7,#52]
 10833 00a4 9A42     	 cmp r2,r3
 10834 00a6 DBD3     	 bcc .L696
 10835 00a8 4CE0     	 b .L697
 10836              	.L693:
 10837 00aa 4BE0     	 b .L697
 10838              	.L691:
4637:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4638:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4639:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
4640:../Dave/Generated/FATFS/ff_Src/ff.c **** 					BYTE bm;
4641:../Dave/Generated/FATFS/ff_Src/ff.c **** 					UINT b;
4642:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4643:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fs->n_fatent - 2;	/* Number of clusters */
4644:../Dave/Generated/FATFS/ff_Src/ff.c **** 					sect = fs->database;		/* Assuming bitmap starts at cluster 2 */
4645:../Dave/Generated/FATFS/ff_Src/ff.c **** 					i = 0;						/* Offset in the sector */
4646:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {	/* Counts numbuer of bits with zero in the bitmap */
4647:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (i == 0) {
4648:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = move_window(fs, sect++);
4649:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res != FR_OK) break;
4650:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4651:../Dave/Generated/FATFS/ff_Src/ff.c **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4652:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (!(bm & 1)) nfree++;
4653:../Dave/Generated/FATFS/ff_Src/ff.c **** 							bm >>= 1;
4654:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4655:../Dave/Generated/FATFS/ff_Src/ff.c **** 						i = (i + 1) % SS(fs);
4656:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (clst);
4657:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
4658:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4659:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
4660:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fs->n_fatent;	/* Number of entries */
 10839              	 .loc 1 4660 0
 10840 00ac 7B6A     	 ldr r3,[r7,#36]
 10841 00ae DB69     	 ldr r3,[r3,#28]
 10842 00b0 7B63     	 str r3,[r7,#52]
4661:../Dave/Generated/FATFS/ff_Src/ff.c **** 					sect = fs->fatbase;		/* Top of the FAT */
 10843              	 .loc 1 4661 0
 10844 00b2 7B6A     	 ldr r3,[r7,#36]
 10845 00b4 9B6A     	 ldr r3,[r3,#40]
 10846 00b6 3B63     	 str r3,[r7,#48]
4662:../Dave/Generated/FATFS/ff_Src/ff.c **** 					i = 0;					/* Offset in the sector */
 10847              	 .loc 1 4662 0
 10848 00b8 0023     	 movs r3,#0
 10849 00ba FB62     	 str r3,[r7,#44]
 10850              	.L703:
4663:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {	/* Counts numbuer of entries with zero in the FAT */
4664:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (i == 0) {
 10851              	 .loc 1 4664 0
 10852 00bc FB6A     	 ldr r3,[r7,#44]
 10853 00be 002B     	 cmp r3,#0
 10854 00c0 0FD1     	 bne .L698
4665:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = move_window(fs, sect++);
 10855              	 .loc 1 4665 0
 10856 00c2 796A     	 ldr r1,[r7,#36]
 10857 00c4 3B6B     	 ldr r3,[r7,#48]
 10858 00c6 5A1C     	 adds r2,r3,#1
 10859 00c8 3A63     	 str r2,[r7,#48]
 10860 00ca 0846     	 mov r0,r1
 10861 00cc 1946     	 mov r1,r3
 10862 00ce FFF7FEFF 	 bl move_window
 10863 00d2 0346     	 mov r3,r0
 10864 00d4 87F83F30 	 strb r3,[r7,#63]
4666:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res != FR_OK) break;
 10865              	 .loc 1 4666 0
 10866 00d8 97F83F30 	 ldrb r3,[r7,#63]
 10867 00dc 002B     	 cmp r3,#0
 10868 00de 00D0     	 beq .L698
 10869 00e0 30E0     	 b .L697
 10870              	.L698:
4667:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4668:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (fs->fs_type == FS_FAT16) {
 10871              	 .loc 1 4668 0
 10872 00e2 7B6A     	 ldr r3,[r7,#36]
 10873 00e4 1B78     	 ldrb r3,[r3]
 10874 00e6 022B     	 cmp r3,#2
 10875 00e8 10D1     	 bne .L699
4669:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (ld_word(fs->win + i) == 0) nfree++;
 10876              	 .loc 1 4669 0
 10877 00ea 7A6A     	 ldr r2,[r7,#36]
 10878 00ec FB6A     	 ldr r3,[r7,#44]
 10879 00ee 3833     	 adds r3,r3,#56
 10880 00f0 1344     	 add r3,r3,r2
 10881 00f2 1846     	 mov r0,r3
 10882 00f4 FFF7FEFF 	 bl ld_word
 10883 00f8 0346     	 mov r3,r0
 10884 00fa 002B     	 cmp r3,#0
 10885 00fc 02D1     	 bne .L700
 10886              	 .loc 1 4669 0 is_stmt 0 discriminator 1
 10887 00fe BB6B     	 ldr r3,[r7,#56]
 10888 0100 0133     	 adds r3,r3,#1
 10889 0102 BB63     	 str r3,[r7,#56]
 10890              	.L700:
4670:../Dave/Generated/FATFS/ff_Src/ff.c **** 							i += 2;
 10891              	 .loc 1 4670 0 is_stmt 1
 10892 0104 FB6A     	 ldr r3,[r7,#44]
 10893 0106 0233     	 adds r3,r3,#2
 10894 0108 FB62     	 str r3,[r7,#44]
 10895 010a 11E0     	 b .L701
 10896              	.L699:
4671:../Dave/Generated/FATFS/ff_Src/ff.c **** 						} else {
4672:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 10897              	 .loc 1 4672 0
 10898 010c 7A6A     	 ldr r2,[r7,#36]
 10899 010e FB6A     	 ldr r3,[r7,#44]
 10900 0110 3833     	 adds r3,r3,#56
 10901 0112 1344     	 add r3,r3,r2
 10902 0114 1846     	 mov r0,r3
 10903 0116 FFF7FEFF 	 bl ld_dword
 10904 011a 0346     	 mov r3,r0
 10905 011c 23F07043 	 bic r3,r3,#-268435456
 10906 0120 002B     	 cmp r3,#0
 10907 0122 02D1     	 bne .L702
 10908              	 .loc 1 4672 0 is_stmt 0 discriminator 1
 10909 0124 BB6B     	 ldr r3,[r7,#56]
 10910 0126 0133     	 adds r3,r3,#1
 10911 0128 BB63     	 str r3,[r7,#56]
 10912              	.L702:
4673:../Dave/Generated/FATFS/ff_Src/ff.c **** 							i += 4;
 10913              	 .loc 1 4673 0 is_stmt 1
 10914 012a FB6A     	 ldr r3,[r7,#44]
 10915 012c 0433     	 adds r3,r3,#4
 10916 012e FB62     	 str r3,[r7,#44]
 10917              	.L701:
4674:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4675:../Dave/Generated/FATFS/ff_Src/ff.c **** 						i %= SS(fs);
 10918              	 .loc 1 4675 0
 10919 0130 FB6A     	 ldr r3,[r7,#44]
 10920 0132 C3F30803 	 ubfx r3,r3,#0,#9
 10921 0136 FB62     	 str r3,[r7,#44]
4676:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (--clst);
 10922              	 .loc 1 4676 0
 10923 0138 7B6B     	 ldr r3,[r7,#52]
 10924 013a 013B     	 subs r3,r3,#1
 10925 013c 7B63     	 str r3,[r7,#52]
 10926 013e 7B6B     	 ldr r3,[r7,#52]
 10927 0140 002B     	 cmp r3,#0
 10928 0142 BBD1     	 bne .L703
 10929              	.L697:
4677:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4678:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4679:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*nclst = nfree;			/* Return the free clusters */
 10930              	 .loc 1 4679 0
 10931 0144 BB68     	 ldr r3,[r7,#8]
 10932 0146 BA6B     	 ldr r2,[r7,#56]
 10933 0148 1A60     	 str r2,[r3]
4680:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
 10934              	 .loc 1 4680 0
 10935 014a 7B6A     	 ldr r3,[r7,#36]
 10936 014c BA6B     	 ldr r2,[r7,#56]
 10937 014e 5A61     	 str r2,[r3,#20]
4681:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 10938              	 .loc 1 4681 0
 10939 0150 7B6A     	 ldr r3,[r7,#36]
 10940 0152 7A6A     	 ldr r2,[r7,#36]
 10941 0154 1279     	 ldrb r2,[r2,#4]
 10942 0156 42F00102 	 orr r2,r2,#1
 10943 015a D2B2     	 uxtb r2,r2
 10944 015c 1A71     	 strb r2,[r3,#4]
 10945              	.L689:
4682:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4683:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4684:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4685:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 10946              	 .loc 1 4685 0
 10947 015e 97F83F30 	 ldrb r3,[r7,#63]
4686:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10948              	 .loc 1 4686 0
 10949 0162 1846     	 mov r0,r3
 10950 0164 4037     	 adds r7,r7,#64
 10951              	.LCFI326:
 10952              	 .cfi_def_cfa_offset 8
 10953 0166 BD46     	 mov sp,r7
 10954              	.LCFI327:
 10955              	 .cfi_def_cfa_register 13
 10956              	 
 10957 0168 80BD     	 pop {r7,pc}
 10958              	 .cfi_endproc
 10959              	.LFE61:
 10961 016a 00BF     	 .section .text.f_truncate,"ax",%progbits
 10962              	 .align 2
 10963              	 .global f_truncate
 10964              	 .thumb
 10965              	 .thumb_func
 10967              	f_truncate:
 10968              	.LFB62:
4687:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4688:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4689:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4690:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4691:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4692:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Truncate File                                                         */
4693:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4694:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4695:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_truncate (
4696:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
4697:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4698:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10969              	 .loc 1 4698 0
 10970              	 .cfi_startproc
 10971              	 
 10972              	 
 10973 0000 80B5     	 push {r7,lr}
 10974              	.LCFI328:
 10975              	 .cfi_def_cfa_offset 8
 10976              	 .cfi_offset 7,-8
 10977              	 .cfi_offset 14,-4
 10978 0002 86B0     	 sub sp,sp,#24
 10979              	.LCFI329:
 10980              	 .cfi_def_cfa_offset 32
 10981 0004 00AF     	 add r7,sp,#0
 10982              	.LCFI330:
 10983              	 .cfi_def_cfa_register 7
 10984 0006 7860     	 str r0,[r7,#4]
4699:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4700:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4701:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ncl;
4702:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4703:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4704:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 10985              	 .loc 1 4704 0
 10986 0008 7A68     	 ldr r2,[r7,#4]
 10987 000a 07F10C03 	 add r3,r7,#12
 10988 000e 1046     	 mov r0,r2
 10989 0010 1946     	 mov r1,r3
 10990 0012 FFF7FEFF 	 bl validate
 10991 0016 0346     	 mov r3,r0
 10992 0018 FB75     	 strb r3,[r7,#23]
4705:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 10993              	 .loc 1 4705 0
 10994 001a FB7D     	 ldrb r3,[r7,#23]
 10995 001c 002B     	 cmp r3,#0
 10996 001e 05D1     	 bne .L706
 10997              	 .loc 1 4705 0 is_stmt 0 discriminator 2
 10998 0020 7B68     	 ldr r3,[r7,#4]
 10999 0022 5B7D     	 ldrb r3,[r3,#21]
 11000 0024 FB75     	 strb r3,[r7,#23]
 11001 0026 FB7D     	 ldrb r3,[r7,#23]
 11002 0028 002B     	 cmp r3,#0
 11003 002a 01D0     	 beq .L707
 11004              	.L706:
 11005              	 .loc 1 4705 0 discriminator 3
 11006 002c FB7D     	 ldrb r3,[r7,#23]
 11007 002e 7DE0     	 b .L717
 11008              	.L707:
4706:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 11009              	 .loc 1 4706 0 is_stmt 1
 11010 0030 7B68     	 ldr r3,[r7,#4]
 11011 0032 1B7D     	 ldrb r3,[r3,#20]
 11012 0034 03F00203 	 and r3,r3,#2
 11013 0038 002B     	 cmp r3,#0
 11014 003a 01D1     	 bne .L709
 11015              	 .loc 1 4706 0 is_stmt 0 discriminator 1
 11016 003c 0723     	 movs r3,#7
 11017 003e 75E0     	 b .L717
 11018              	.L709:
4707:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4708:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 11019              	 .loc 1 4708 0 is_stmt 1
 11020 0040 7B68     	 ldr r3,[r7,#4]
 11021 0042 9A69     	 ldr r2,[r3,#24]
 11022 0044 7B68     	 ldr r3,[r7,#4]
 11023 0046 DB68     	 ldr r3,[r3,#12]
 11024 0048 9A42     	 cmp r2,r3
 11025 004a 6ED2     	 bcs .L710
4709:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 11026              	 .loc 1 4709 0
 11027 004c 7B68     	 ldr r3,[r7,#4]
 11028 004e 9B69     	 ldr r3,[r3,#24]
 11029 0050 002B     	 cmp r3,#0
 11030 0052 0DD1     	 bne .L711
4710:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 11031              	 .loc 1 4710 0
 11032 0054 7A68     	 ldr r2,[r7,#4]
 11033 0056 7B68     	 ldr r3,[r7,#4]
 11034 0058 9B68     	 ldr r3,[r3,#8]
 11035 005a 1046     	 mov r0,r2
 11036 005c 1946     	 mov r1,r3
 11037 005e 0022     	 movs r2,#0
 11038 0060 FFF7FEFF 	 bl remove_chain
 11039 0064 0346     	 mov r3,r0
 11040 0066 FB75     	 strb r3,[r7,#23]
4711:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.sclust = 0;
 11041              	 .loc 1 4711 0
 11042 0068 7B68     	 ldr r3,[r7,#4]
 11043 006a 0022     	 movs r2,#0
 11044 006c 9A60     	 str r2,[r3,#8]
 11045 006e 26E0     	 b .L712
 11046              	.L711:
4712:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4713:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ncl = get_fat(&fp->obj, fp->clust);
 11047              	 .loc 1 4713 0
 11048 0070 7A68     	 ldr r2,[r7,#4]
 11049 0072 7B68     	 ldr r3,[r7,#4]
 11050 0074 DB69     	 ldr r3,[r3,#28]
 11051 0076 1046     	 mov r0,r2
 11052 0078 1946     	 mov r1,r3
 11053 007a FFF7FEFF 	 bl get_fat
 11054 007e 3861     	 str r0,[r7,#16]
4714:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
 11055              	 .loc 1 4714 0
 11056 0080 0023     	 movs r3,#0
 11057 0082 FB75     	 strb r3,[r7,#23]
4715:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 11058              	 .loc 1 4715 0
 11059 0084 3B69     	 ldr r3,[r7,#16]
 11060 0086 B3F1FF3F 	 cmp r3,#-1
 11061 008a 01D1     	 bne .L713
 11062              	 .loc 1 4715 0 is_stmt 0 discriminator 1
 11063 008c 0123     	 movs r3,#1
 11064 008e FB75     	 strb r3,[r7,#23]
 11065              	.L713:
4716:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 11066              	 .loc 1 4716 0 is_stmt 1
 11067 0090 3B69     	 ldr r3,[r7,#16]
 11068 0092 012B     	 cmp r3,#1
 11069 0094 01D1     	 bne .L714
 11070              	 .loc 1 4716 0 is_stmt 0 discriminator 1
 11071 0096 0223     	 movs r3,#2
 11072 0098 FB75     	 strb r3,[r7,#23]
 11073              	.L714:
4717:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 11074              	 .loc 1 4717 0 is_stmt 1
 11075 009a FB7D     	 ldrb r3,[r7,#23]
 11076 009c 002B     	 cmp r3,#0
 11077 009e 0ED1     	 bne .L712
 11078              	 .loc 1 4717 0 is_stmt 0 discriminator 1
 11079 00a0 FB68     	 ldr r3,[r7,#12]
 11080 00a2 DA69     	 ldr r2,[r3,#28]
 11081 00a4 3B69     	 ldr r3,[r7,#16]
 11082 00a6 9A42     	 cmp r2,r3
 11083 00a8 09D9     	 bls .L712
4718:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 11084              	 .loc 1 4718 0 is_stmt 1
 11085 00aa 7A68     	 ldr r2,[r7,#4]
 11086 00ac 7B68     	 ldr r3,[r7,#4]
 11087 00ae DB69     	 ldr r3,[r3,#28]
 11088 00b0 1046     	 mov r0,r2
 11089 00b2 3969     	 ldr r1,[r7,#16]
 11090 00b4 1A46     	 mov r2,r3
 11091 00b6 FFF7FEFF 	 bl remove_chain
 11092 00ba 0346     	 mov r3,r0
 11093 00bc FB75     	 strb r3,[r7,#23]
 11094              	.L712:
4719:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4720:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4721:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 11095              	 .loc 1 4721 0
 11096 00be 7B68     	 ldr r3,[r7,#4]
 11097 00c0 9A69     	 ldr r2,[r3,#24]
 11098 00c2 7B68     	 ldr r3,[r7,#4]
 11099 00c4 DA60     	 str r2,[r3,#12]
4722:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->flag |= FA_MODIFIED;
 11100              	 .loc 1 4722 0
 11101 00c6 7B68     	 ldr r3,[r7,#4]
 11102 00c8 1B7D     	 ldrb r3,[r3,#20]
 11103 00ca 43F04003 	 orr r3,r3,#64
 11104 00ce DAB2     	 uxtb r2,r3
 11105 00d0 7B68     	 ldr r3,[r7,#4]
 11106 00d2 1A75     	 strb r2,[r3,#20]
4723:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
4724:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 11107              	 .loc 1 4724 0
 11108 00d4 FB7D     	 ldrb r3,[r7,#23]
 11109 00d6 002B     	 cmp r3,#0
 11110 00d8 1FD1     	 bne .L715
 11111              	 .loc 1 4724 0 is_stmt 0 discriminator 1
 11112 00da 7B68     	 ldr r3,[r7,#4]
 11113 00dc 1B7D     	 ldrb r3,[r3,#20]
 11114 00de DBB2     	 uxtb r3,r3
 11115 00e0 5BB2     	 sxtb r3,r3
 11116 00e2 002B     	 cmp r3,#0
 11117 00e4 19DA     	 bge .L715
4725:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
 11118              	 .loc 1 4725 0 is_stmt 1
 11119 00e6 FB68     	 ldr r3,[r7,#12]
 11120 00e8 5978     	 ldrb r1,[r3,#1]
 11121 00ea 7B68     	 ldr r3,[r7,#4]
 11122 00ec 03F12C02 	 add r2,r3,#44
 11123 00f0 7B68     	 ldr r3,[r7,#4]
 11124 00f2 1B6A     	 ldr r3,[r3,#32]
 11125 00f4 0846     	 mov r0,r1
 11126 00f6 1146     	 mov r1,r2
 11127 00f8 1A46     	 mov r2,r3
 11128 00fa 0123     	 movs r3,#1
 11129 00fc FFF7FEFF 	 bl disk_write
 11130 0100 0346     	 mov r3,r0
 11131 0102 002B     	 cmp r3,#0
 11132 0104 02D0     	 beq .L716
4726:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_DISK_ERR;
 11133              	 .loc 1 4726 0
 11134 0106 0123     	 movs r3,#1
 11135 0108 FB75     	 strb r3,[r7,#23]
 11136 010a 06E0     	 b .L715
 11137              	.L716:
4727:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4728:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 11138              	 .loc 1 4728 0
 11139 010c 7B68     	 ldr r3,[r7,#4]
 11140 010e 1B7D     	 ldrb r3,[r3,#20]
 11141 0110 03F07F03 	 and r3,r3,#127
 11142 0114 DAB2     	 uxtb r2,r3
 11143 0116 7B68     	 ldr r3,[r7,#4]
 11144 0118 1A75     	 strb r2,[r3,#20]
 11145              	.L715:
4729:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4730:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4731:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4732:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) ABORT(fs, res);
 11146              	 .loc 1 4732 0
 11147 011a FB7D     	 ldrb r3,[r7,#23]
 11148 011c 002B     	 cmp r3,#0
 11149 011e 04D0     	 beq .L710
 11150              	 .loc 1 4732 0 is_stmt 0 discriminator 1
 11151 0120 7B68     	 ldr r3,[r7,#4]
 11152 0122 FA7D     	 ldrb r2,[r7,#23]
 11153 0124 5A75     	 strb r2,[r3,#21]
 11154 0126 FB7D     	 ldrb r3,[r7,#23]
 11155 0128 00E0     	 b .L717
 11156              	.L710:
4733:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4734:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4735:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 11157              	 .loc 1 4735 0 is_stmt 1
 11158 012a FB7D     	 ldrb r3,[r7,#23]
 11159              	.L717:
4736:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 11160              	 .loc 1 4736 0 discriminator 1
 11161 012c 1846     	 mov r0,r3
 11162 012e 1837     	 adds r7,r7,#24
 11163              	.LCFI331:
 11164              	 .cfi_def_cfa_offset 8
 11165 0130 BD46     	 mov sp,r7
 11166              	.LCFI332:
 11167              	 .cfi_def_cfa_register 13
 11168              	 
 11169 0132 80BD     	 pop {r7,pc}
 11170              	 .cfi_endproc
 11171              	.LFE62:
 11173              	 .section .text.f_unlink,"ax",%progbits
 11174              	 .align 2
 11175              	 .global f_unlink
 11176              	 .thumb
 11177              	 .thumb_func
 11179              	f_unlink:
 11180              	.LFB63:
4737:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4738:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4739:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4740:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4741:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4742:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Delete a File/Directory                                               */
4743:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4744:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4745:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_unlink (
4746:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
4747:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4748:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 11181              	 .loc 1 4748 0
 11182              	 .cfi_startproc
 11183              	 
 11184              	 
 11185 0000 80B5     	 push {r7,lr}
 11186              	.LCFI333:
 11187              	 .cfi_def_cfa_offset 8
 11188              	 .cfi_offset 7,-8
 11189              	 .cfi_offset 14,-4
 11190 0002 A0B0     	 sub sp,sp,#128
 11191              	.LCFI334:
 11192              	 .cfi_def_cfa_offset 136
 11193 0004 00AF     	 add r7,sp,#0
 11194              	.LCFI335:
 11195              	 .cfi_def_cfa_register 7
 11196 0006 7860     	 str r0,[r7,#4]
4749:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4750:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj, sdj;
4751:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dclst = 0;
 11197              	 .loc 1 4751 0
 11198 0008 0023     	 movs r3,#0
 11199 000a BB67     	 str r3,[r7,#120]
4752:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4753:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4754:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID obj;
4755:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4756:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4757:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4758:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4759:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4760:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
 11200              	 .loc 1 4760 0
 11201 000c 3A1D     	 adds r2,r7,#4
 11202 000e 07F10C03 	 add r3,r7,#12
 11203 0012 1046     	 mov r0,r2
 11204 0014 1946     	 mov r1,r3
 11205 0016 0222     	 movs r2,#2
 11206 0018 FFF7FEFF 	 bl find_volume
 11207 001c 0346     	 mov r3,r0
 11208 001e 87F87F30 	 strb r3,[r7,#127]
4761:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 11209              	 .loc 1 4761 0
 11210 0022 97F87F30 	 ldrb r3,[r7,#127]
 11211 0026 002B     	 cmp r3,#0
 11212 0028 40F0A780 	 bne .L719
4762:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 11213              	 .loc 1 4762 0
 11214 002c FB68     	 ldr r3,[r7,#12]
 11215 002e 7B64     	 str r3,[r7,#68]
4763:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4764:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 11216              	 .loc 1 4764 0
 11217 0030 7B68     	 ldr r3,[r7,#4]
 11218 0032 07F14402 	 add r2,r7,#68
 11219 0036 1046     	 mov r0,r2
 11220 0038 1946     	 mov r1,r3
 11221 003a FFF7FEFF 	 bl follow_path
 11222 003e 0346     	 mov r3,r0
 11223 0040 87F87F30 	 strb r3,[r7,#127]
4765:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 11224              	 .loc 1 4765 0
 11225 0044 97F87F30 	 ldrb r3,[r7,#127]
 11226 0048 002B     	 cmp r3,#0
 11227 004a 08D1     	 bne .L720
 11228              	 .loc 1 4765 0 is_stmt 0 discriminator 1
 11229 004c 97F87330 	 ldrb r3,[r7,#115]
 11230 0050 03F02003 	 and r3,r3,#32
 11231 0054 002B     	 cmp r3,#0
 11232 0056 02D0     	 beq .L720
4766:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 11233              	 .loc 1 4766 0 is_stmt 1
 11234 0058 0623     	 movs r3,#6
 11235 005a 87F87F30 	 strb r3,[r7,#127]
 11236              	.L720:
4767:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4768:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4769:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 11237              	 .loc 1 4769 0
 11238 005e 97F87F30 	 ldrb r3,[r7,#127]
 11239 0062 002B     	 cmp r3,#0
 11240 0064 08D1     	 bne .L721
 11241              	 .loc 1 4769 0 is_stmt 0 discriminator 1
 11242 0066 07F14403 	 add r3,r7,#68
 11243 006a 1846     	 mov r0,r3
 11244 006c 0221     	 movs r1,#2
 11245 006e FFF7FEFF 	 bl chk_lock
 11246 0072 0346     	 mov r3,r0
 11247 0074 87F87F30 	 strb r3,[r7,#127]
 11248              	.L721:
4770:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4771:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
 11249              	 .loc 1 4771 0 is_stmt 1
 11250 0078 97F87F30 	 ldrb r3,[r7,#127]
 11251 007c 002B     	 cmp r3,#0
 11252 007e 7CD1     	 bne .L719
4772:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 11253              	 .loc 1 4772 0
 11254 0080 97F87330 	 ldrb r3,[r7,#115]
 11255 0084 DBB2     	 uxtb r3,r3
 11256 0086 5BB2     	 sxtb r3,r3
 11257 0088 002B     	 cmp r3,#0
 11258 008a 03DA     	 bge .L722
4773:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 11259              	 .loc 1 4773 0
 11260 008c 0623     	 movs r3,#6
 11261 008e 87F87F30 	 strb r3,[r7,#127]
 11262 0092 08E0     	 b .L723
 11263              	.L722:
4774:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4775:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_RDO) {
 11264              	 .loc 1 4775 0
 11265 0094 97F84A30 	 ldrb r3,[r7,#74]
 11266 0098 03F00103 	 and r3,r3,#1
 11267 009c 002B     	 cmp r3,#0
 11268 009e 02D0     	 beq .L723
4776:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 11269              	 .loc 1 4776 0
 11270 00a0 0723     	 movs r3,#7
 11271 00a2 87F87F30 	 strb r3,[r7,#127]
 11272              	.L723:
4777:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4778:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4779:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 11273              	 .loc 1 4779 0
 11274 00a6 97F87F30 	 ldrb r3,[r7,#127]
 11275 00aa 002B     	 cmp r3,#0
 11276 00ac 3DD1     	 bne .L724
4780:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4781:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj.fs = fs;
4782:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4783:../Dave/Generated/FATFS/ff_Src/ff.c **** 					init_alloc_info(fs, &obj);
4784:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dclst = obj.sclust;
4785:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
4786:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4787:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
4788:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dclst = ld_clust(fs, dj.dir);
 11277              	 .loc 1 4788 0
 11278 00ae FA68     	 ldr r2,[r7,#12]
 11279 00b0 7B6E     	 ldr r3,[r7,#100]
 11280 00b2 1046     	 mov r0,r2
 11281 00b4 1946     	 mov r1,r3
 11282 00b6 FFF7FEFF 	 bl ld_clust
 11283 00ba B867     	 str r0,[r7,#120]
4789:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4790:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 11284              	 .loc 1 4790 0
 11285 00bc 97F84A30 	 ldrb r3,[r7,#74]
 11286 00c0 03F01003 	 and r3,r3,#16
 11287 00c4 002B     	 cmp r3,#0
 11288 00c6 30D0     	 beq .L724
4791:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
4792:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
 11289              	 .loc 1 4792 0
 11290 00c8 FB68     	 ldr r3,[r7,#12]
 11291 00ca 9A69     	 ldr r2,[r3,#24]
 11292 00cc BB6F     	 ldr r3,[r7,#120]
 11293 00ce 9A42     	 cmp r2,r3
 11294 00d0 03D1     	 bne .L725
4793:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_DENIED;
 11295              	 .loc 1 4793 0
 11296 00d2 0723     	 movs r3,#7
 11297 00d4 87F87F30 	 strb r3,[r7,#127]
 11298 00d8 27E0     	 b .L724
 11299              	.L725:
4794:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4795:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4796:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4797:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sdj.obj.fs = fs;				/* Open the sub-directory */
 11300              	 .loc 1 4797 0
 11301 00da FB68     	 ldr r3,[r7,#12]
 11302 00dc 3B61     	 str r3,[r7,#16]
4798:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sdj.obj.sclust = dclst;
 11303              	 .loc 1 4798 0
 11304 00de BB6F     	 ldr r3,[r7,#120]
 11305 00e0 BB61     	 str r3,[r7,#24]
4799:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4800:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (fs->fs_type == FS_EXFAT) {
4801:../Dave/Generated/FATFS/ff_Src/ff.c **** 							sdj.obj.objsize = obj.objsize;
4802:../Dave/Generated/FATFS/ff_Src/ff.c **** 							sdj.obj.stat = obj.stat;
4803:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4804:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4805:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = dir_sdi(&sdj, 0);
 11306              	 .loc 1 4805 0
 11307 00e2 07F11003 	 add r3,r7,#16
 11308 00e6 1846     	 mov r0,r3
 11309 00e8 0021     	 movs r1,#0
 11310 00ea FFF7FEFF 	 bl dir_sdi
 11311 00ee 0346     	 mov r3,r0
 11312 00f0 87F87F30 	 strb r3,[r7,#127]
4806:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (res == FR_OK) {
 11313              	 .loc 1 4806 0
 11314 00f4 97F87F30 	 ldrb r3,[r7,#127]
 11315 00f8 002B     	 cmp r3,#0
 11316 00fa 16D1     	 bne .L724
4807:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = dir_read_file(&sdj);			/* Test if the directory is empty */
 11317              	 .loc 1 4807 0
 11318 00fc 07F11003 	 add r3,r7,#16
 11319 0100 1846     	 mov r0,r3
 11320 0102 0021     	 movs r1,#0
 11321 0104 FFF7FEFF 	 bl dir_read
 11322 0108 0346     	 mov r3,r0
 11323 010a 87F87F30 	 strb r3,[r7,#127]
4808:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 11324              	 .loc 1 4808 0
 11325 010e 97F87F30 	 ldrb r3,[r7,#127]
 11326 0112 002B     	 cmp r3,#0
 11327 0114 02D1     	 bne .L726
 11328              	 .loc 1 4808 0 is_stmt 0 discriminator 1
 11329 0116 0723     	 movs r3,#7
 11330 0118 87F87F30 	 strb r3,[r7,#127]
 11331              	.L726:
4809:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 11332              	 .loc 1 4809 0 is_stmt 1
 11333 011c 97F87F30 	 ldrb r3,[r7,#127]
 11334 0120 042B     	 cmp r3,#4
 11335 0122 02D1     	 bne .L724
 11336              	 .loc 1 4809 0 is_stmt 0 discriminator 1
 11337 0124 0023     	 movs r3,#0
 11338 0126 87F87F30 	 strb r3,[r7,#127]
 11339              	.L724:
4810:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4811:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4812:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4813:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4814:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 11340              	 .loc 1 4814 0 is_stmt 1
 11341 012a 97F87F30 	 ldrb r3,[r7,#127]
 11342 012e 002B     	 cmp r3,#0
 11343 0130 23D1     	 bne .L719
4815:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 11344              	 .loc 1 4815 0
 11345 0132 07F14403 	 add r3,r7,#68
 11346 0136 1846     	 mov r0,r3
 11347 0138 FFF7FEFF 	 bl dir_remove
 11348 013c 0346     	 mov r3,r0
 11349 013e 87F87F30 	 strb r3,[r7,#127]
4816:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 11350              	 .loc 1 4816 0
 11351 0142 97F87F30 	 ldrb r3,[r7,#127]
 11352 0146 002B     	 cmp r3,#0
 11353 0148 0CD1     	 bne .L727
 11354              	 .loc 1 4816 0 is_stmt 0 discriminator 1
 11355 014a BB6F     	 ldr r3,[r7,#120]
 11356 014c 002B     	 cmp r3,#0
 11357 014e 09D0     	 beq .L727
4817:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4818:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = remove_chain(&obj, dclst, 0);
4819:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4820:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = remove_chain(&dj.obj, dclst, 0);
 11358              	 .loc 1 4820 0 is_stmt 1
 11359 0150 07F14403 	 add r3,r7,#68
 11360 0154 1846     	 mov r0,r3
 11361 0156 B96F     	 ldr r1,[r7,#120]
 11362 0158 0022     	 movs r2,#0
 11363 015a FFF7FEFF 	 bl remove_chain
 11364 015e 0346     	 mov r3,r0
 11365 0160 87F87F30 	 strb r3,[r7,#127]
 11366              	.L727:
4821:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4822:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4823:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) res = sync_fs(fs);
 11367              	 .loc 1 4823 0
 11368 0164 97F87F30 	 ldrb r3,[r7,#127]
 11369 0168 002B     	 cmp r3,#0
 11370 016a 06D1     	 bne .L719
 11371              	 .loc 1 4823 0 is_stmt 0 discriminator 1
 11372 016c FB68     	 ldr r3,[r7,#12]
 11373 016e 1846     	 mov r0,r3
 11374 0170 FFF7FEFF 	 bl sync_fs
 11375 0174 0346     	 mov r3,r0
 11376 0176 87F87F30 	 strb r3,[r7,#127]
 11377              	.L719:
4824:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4825:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4826:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4827:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4828:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4829:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 11378              	 .loc 1 4829 0 is_stmt 1
 11379 017a 97F87F30 	 ldrb r3,[r7,#127]
4830:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 11380              	 .loc 1 4830 0
 11381 017e 1846     	 mov r0,r3
 11382 0180 8037     	 adds r7,r7,#128
 11383              	.LCFI336:
 11384              	 .cfi_def_cfa_offset 8
 11385 0182 BD46     	 mov sp,r7
 11386              	.LCFI337:
 11387              	 .cfi_def_cfa_register 13
 11388              	 
 11389 0184 80BD     	 pop {r7,pc}
 11390              	 .cfi_endproc
 11391              	.LFE63:
 11393 0186 00BF     	 .section .text.f_mkdir,"ax",%progbits
 11394              	 .align 2
 11395              	 .global f_mkdir
 11396              	 .thumb
 11397              	 .thumb_func
 11399              	f_mkdir:
 11400              	.LFB64:
4831:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4832:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4833:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4834:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4835:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4836:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create a Directory                                                    */
4837:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4838:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4839:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_mkdir (
4840:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
4841:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4842:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 11401              	 .loc 1 4842 0
 11402              	 .cfi_startproc
 11403              	 
 11404              	 
 11405 0000 80B5     	 push {r7,lr}
 11406              	.LCFI338:
 11407              	 .cfi_def_cfa_offset 8
 11408              	 .cfi_offset 7,-8
 11409              	 .cfi_offset 14,-4
 11410 0002 9AB0     	 sub sp,sp,#104
 11411              	.LCFI339:
 11412              	 .cfi_def_cfa_offset 112
 11413 0004 00AF     	 add r7,sp,#0
 11414              	.LCFI340:
 11415              	 .cfi_def_cfa_register 7
 11416 0006 7860     	 str r0,[r7,#4]
4843:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4844:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4845:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID sobj;
4846:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4847:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *dir;
4848:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dcl, pcl, tm;
4849:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4850:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4851:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4852:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4853:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
 11417              	 .loc 1 4853 0
 11418 0008 3A1D     	 adds r2,r7,#4
 11419 000a 07F10803 	 add r3,r7,#8
 11420 000e 1046     	 mov r0,r2
 11421 0010 1946     	 mov r1,r3
 11422 0012 0222     	 movs r2,#2
 11423 0014 FFF7FEFF 	 bl find_volume
 11424 0018 0346     	 mov r3,r0
 11425 001a 87F86730 	 strb r3,[r7,#103]
4854:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 11426              	 .loc 1 4854 0
 11427 001e 97F86730 	 ldrb r3,[r7,#103]
 11428 0022 002B     	 cmp r3,#0
 11429 0024 40F0C280 	 bne .L730
4855:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 11430              	 .loc 1 4855 0
 11431 0028 BB68     	 ldr r3,[r7,#8]
 11432 002a 3B62     	 str r3,[r7,#32]
4856:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4857:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 11433              	 .loc 1 4857 0
 11434 002c 7B68     	 ldr r3,[r7,#4]
 11435 002e 07F12002 	 add r2,r7,#32
 11436 0032 1046     	 mov r0,r2
 11437 0034 1946     	 mov r1,r3
 11438 0036 FFF7FEFF 	 bl follow_path
 11439 003a 0346     	 mov r3,r0
 11440 003c 87F86730 	 strb r3,[r7,#103]
4858:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 11441              	 .loc 1 4858 0
 11442 0040 97F86730 	 ldrb r3,[r7,#103]
 11443 0044 002B     	 cmp r3,#0
 11444 0046 02D1     	 bne .L731
 11445              	 .loc 1 4858 0 is_stmt 0 discriminator 1
 11446 0048 0823     	 movs r3,#8
 11447 004a 87F86730 	 strb r3,[r7,#103]
 11448              	.L731:
4859:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 11449              	 .loc 1 4859 0 is_stmt 1
 11450 004e 97F86730 	 ldrb r3,[r7,#103]
 11451 0052 042B     	 cmp r3,#4
 11452 0054 08D1     	 bne .L732
 11453              	 .loc 1 4859 0 is_stmt 0 discriminator 1
 11454 0056 97F84F30 	 ldrb r3,[r7,#79]
 11455 005a 03F02003 	 and r3,r3,#32
 11456 005e 002B     	 cmp r3,#0
 11457 0060 02D0     	 beq .L732
4860:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_INVALID_NAME;
 11458              	 .loc 1 4860 0 is_stmt 1
 11459 0062 0623     	 movs r3,#6
 11460 0064 87F86730 	 strb r3,[r7,#103]
 11461              	.L732:
4861:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4862:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
 11462              	 .loc 1 4862 0
 11463 0068 97F86730 	 ldrb r3,[r7,#103]
 11464 006c 042B     	 cmp r3,#4
 11465 006e 40F09D80 	 bne .L730
4863:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sobj.fs = fs;						/* New object id to create a new chain */
 11466              	 .loc 1 4863 0
 11467 0072 BB68     	 ldr r3,[r7,#8]
 11468 0074 FB60     	 str r3,[r7,#12]
4864:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 11469              	 .loc 1 4864 0
 11470 0076 07F10C03 	 add r3,r7,#12
 11471 007a 1846     	 mov r0,r3
 11472 007c 0021     	 movs r1,#0
 11473 007e FFF7FEFF 	 bl create_chain
 11474 0082 3866     	 str r0,[r7,#96]
4865:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
 11475              	 .loc 1 4865 0
 11476 0084 0023     	 movs r3,#0
 11477 0086 87F86730 	 strb r3,[r7,#103]
4866:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 11478              	 .loc 1 4866 0
 11479 008a 3B6E     	 ldr r3,[r7,#96]
 11480 008c 002B     	 cmp r3,#0
 11481 008e 02D1     	 bne .L733
 11482              	 .loc 1 4866 0 is_stmt 0 discriminator 1
 11483 0090 0723     	 movs r3,#7
 11484 0092 87F86730 	 strb r3,[r7,#103]
 11485              	.L733:
4867:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 11486              	 .loc 1 4867 0 is_stmt 1
 11487 0096 3B6E     	 ldr r3,[r7,#96]
 11488 0098 012B     	 cmp r3,#1
 11489 009a 02D1     	 bne .L734
 11490              	 .loc 1 4867 0 is_stmt 0 discriminator 1
 11491 009c 0223     	 movs r3,#2
 11492 009e 87F86730 	 strb r3,[r7,#103]
 11493              	.L734:
4868:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 11494              	 .loc 1 4868 0 is_stmt 1
 11495 00a2 3B6E     	 ldr r3,[r7,#96]
 11496 00a4 B3F1FF3F 	 cmp r3,#-1
 11497 00a8 02D1     	 bne .L735
 11498              	 .loc 1 4868 0 is_stmt 0 discriminator 1
 11499 00aa 0123     	 movs r3,#1
 11500 00ac 87F86730 	 strb r3,[r7,#103]
 11501              	.L735:
4869:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tm = GET_FATTIME();
 11502              	 .loc 1 4869 0 is_stmt 1
 11503 00b0 FFF7FEFF 	 bl get_fattime
 11504 00b4 F865     	 str r0,[r7,#92]
4870:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 11505              	 .loc 1 4870 0
 11506 00b6 97F86730 	 ldrb r3,[r7,#103]
 11507 00ba 002B     	 cmp r3,#0
 11508 00bc 3ED1     	 bne .L736
4871:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_clear(fs, dcl);		/* Clean up the new table */
 11509              	 .loc 1 4871 0
 11510 00be BB68     	 ldr r3,[r7,#8]
 11511 00c0 1846     	 mov r0,r3
 11512 00c2 396E     	 ldr r1,[r7,#96]
 11513 00c4 FFF7FEFF 	 bl dir_clear
 11514 00c8 0346     	 mov r3,r0
 11515 00ca 87F86730 	 strb r3,[r7,#103]
4872:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT)) {	/* Create dot entries (FAT onl
 11516              	 .loc 1 4872 0
 11517 00ce 97F86730 	 ldrb r3,[r7,#103]
 11518 00d2 002B     	 cmp r3,#0
 11519 00d4 32D1     	 bne .L736
4873:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir = fs->win;
 11520              	 .loc 1 4873 0
 11521 00d6 BB68     	 ldr r3,[r7,#8]
 11522 00d8 3833     	 adds r3,r3,#56
 11523 00da BB65     	 str r3,[r7,#88]
4874:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 11524              	 .loc 1 4874 0
 11525 00dc B86D     	 ldr r0,[r7,#88]
 11526 00de 2021     	 movs r1,#32
 11527 00e0 0B22     	 movs r2,#11
 11528 00e2 FFF7FEFF 	 bl mem_set
4875:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir[DIR_Name] = '.';
 11529              	 .loc 1 4875 0
 11530 00e6 BB6D     	 ldr r3,[r7,#88]
 11531 00e8 2E22     	 movs r2,#46
 11532 00ea 1A70     	 strb r2,[r3]
4876:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir[DIR_Attr] = AM_DIR;
 11533              	 .loc 1 4876 0
 11534 00ec BB6D     	 ldr r3,[r7,#88]
 11535 00ee 0B33     	 adds r3,r3,#11
 11536 00f0 1022     	 movs r2,#16
 11537 00f2 1A70     	 strb r2,[r3]
4877:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);
 11538              	 .loc 1 4877 0
 11539 00f4 BB6D     	 ldr r3,[r7,#88]
 11540 00f6 1633     	 adds r3,r3,#22
 11541 00f8 1846     	 mov r0,r3
 11542 00fa F96D     	 ldr r1,[r7,#92]
 11543 00fc FFF7FEFF 	 bl st_dword
4878:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fs, dir, dcl);
 11544              	 .loc 1 4878 0
 11545 0100 BB68     	 ldr r3,[r7,#8]
 11546 0102 1846     	 mov r0,r3
 11547 0104 B96D     	 ldr r1,[r7,#88]
 11548 0106 3A6E     	 ldr r2,[r7,#96]
 11549 0108 FFF7FEFF 	 bl st_clust
4879:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); /* Create ".." entry */
 11550              	 .loc 1 4879 0
 11551 010c BB6D     	 ldr r3,[r7,#88]
 11552 010e 2033     	 adds r3,r3,#32
 11553 0110 1846     	 mov r0,r3
 11554 0112 B96D     	 ldr r1,[r7,#88]
 11555 0114 2022     	 movs r2,#32
 11556 0116 FFF7FEFF 	 bl mem_cpy
4880:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 11557              	 .loc 1 4880 0
 11558 011a BB6D     	 ldr r3,[r7,#88]
 11559 011c 2133     	 adds r3,r3,#33
 11560 011e 2E22     	 movs r2,#46
 11561 0120 1A70     	 strb r2,[r3]
 11562 0122 BB6A     	 ldr r3,[r7,#40]
 11563 0124 7B65     	 str r3,[r7,#84]
4881:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 11564              	 .loc 1 4881 0
 11565 0126 BA68     	 ldr r2,[r7,#8]
 11566 0128 BB6D     	 ldr r3,[r7,#88]
 11567 012a 2033     	 adds r3,r3,#32
 11568 012c 1046     	 mov r0,r2
 11569 012e 1946     	 mov r1,r3
 11570 0130 7A6D     	 ldr r2,[r7,#84]
 11571 0132 FFF7FEFF 	 bl st_clust
4882:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 1;
 11572              	 .loc 1 4882 0
 11573 0136 BB68     	 ldr r3,[r7,#8]
 11574 0138 0122     	 movs r2,#1
 11575 013a DA70     	 strb r2,[r3,#3]
 11576              	.L736:
4883:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4884:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4885:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 11577              	 .loc 1 4885 0
 11578 013c 97F86730 	 ldrb r3,[r7,#103]
 11579 0140 002B     	 cmp r3,#0
 11580 0142 07D1     	 bne .L737
4886:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_register(&dj);	/* Register the object to the directoy */
 11581              	 .loc 1 4886 0
 11582 0144 07F12003 	 add r3,r7,#32
 11583 0148 1846     	 mov r0,r3
 11584 014a FFF7FEFF 	 bl dir_register
 11585 014e 0346     	 mov r3,r0
 11586 0150 87F86730 	 strb r3,[r7,#103]
 11587              	.L737:
4887:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4888:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 11588              	 .loc 1 4888 0
 11589 0154 97F86730 	 ldrb r3,[r7,#103]
 11590 0158 002B     	 cmp r3,#0
 11591 015a 20D1     	 bne .L738
4889:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4890:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
4891:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
4892:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
4893:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* File size needs to be vali
4894:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
4895:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
4896:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
4897:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = store_xdir(&dj);
4898:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
4899:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4900:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
4901:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir = dj.dir;
 11592              	 .loc 1 4901 0
 11593 015c 3B6C     	 ldr r3,[r7,#64]
 11594 015e BB65     	 str r3,[r7,#88]
4902:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 11595              	 .loc 1 4902 0
 11596 0160 BB6D     	 ldr r3,[r7,#88]
 11597 0162 1633     	 adds r3,r3,#22
 11598 0164 1846     	 mov r0,r3
 11599 0166 F96D     	 ldr r1,[r7,#92]
 11600 0168 FFF7FEFF 	 bl st_dword
4903:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
 11601              	 .loc 1 4903 0
 11602 016c BB68     	 ldr r3,[r7,#8]
 11603 016e 1846     	 mov r0,r3
 11604 0170 B96D     	 ldr r1,[r7,#88]
 11605 0172 3A6E     	 ldr r2,[r7,#96]
 11606 0174 FFF7FEFF 	 bl st_clust
4904:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 11607              	 .loc 1 4904 0
 11608 0178 BB6D     	 ldr r3,[r7,#88]
 11609 017a 0B33     	 adds r3,r3,#11
 11610 017c 1022     	 movs r2,#16
 11611 017e 1A70     	 strb r2,[r3]
4905:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 1;
 11612              	 .loc 1 4905 0
 11613 0180 BB68     	 ldr r3,[r7,#8]
 11614 0182 0122     	 movs r2,#1
 11615 0184 DA70     	 strb r2,[r3,#3]
4906:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4907:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 11616              	 .loc 1 4907 0
 11617 0186 97F86730 	 ldrb r3,[r7,#103]
 11618 018a 002B     	 cmp r3,#0
 11619 018c 0ED1     	 bne .L730
4908:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = sync_fs(fs);
 11620              	 .loc 1 4908 0
 11621 018e BB68     	 ldr r3,[r7,#8]
 11622 0190 1846     	 mov r0,r3
 11623 0192 FFF7FEFF 	 bl sync_fs
 11624 0196 0346     	 mov r3,r0
 11625 0198 87F86730 	 strb r3,[r7,#103]
 11626 019c 06E0     	 b .L730
 11627              	.L738:
4909:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4910:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4911:../Dave/Generated/FATFS/ff_Src/ff.c **** 				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 11628              	 .loc 1 4911 0
 11629 019e 07F12003 	 add r3,r7,#32
 11630 01a2 1846     	 mov r0,r3
 11631 01a4 396E     	 ldr r1,[r7,#96]
 11632 01a6 0022     	 movs r2,#0
 11633 01a8 FFF7FEFF 	 bl remove_chain
 11634              	.L730:
4912:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4913:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4914:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4915:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4916:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4917:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 11635              	 .loc 1 4917 0
 11636 01ac 97F86730 	 ldrb r3,[r7,#103]
4918:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 11637              	 .loc 1 4918 0
 11638 01b0 1846     	 mov r0,r3
 11639 01b2 6837     	 adds r7,r7,#104
 11640              	.LCFI341:
 11641              	 .cfi_def_cfa_offset 8
 11642 01b4 BD46     	 mov sp,r7
 11643              	.LCFI342:
 11644              	 .cfi_def_cfa_register 13
 11645              	 
 11646 01b6 80BD     	 pop {r7,pc}
 11647              	 .cfi_endproc
 11648              	.LFE64:
 11650              	 .section .text.f_rename,"ax",%progbits
 11651              	 .align 2
 11652              	 .global f_rename
 11653              	 .thumb
 11654              	 .thumb_func
 11656              	f_rename:
 11657              	.LFB65:
4919:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4920:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4921:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4922:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4923:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4924:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Rename a File/Directory                                               */
4925:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4926:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4927:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_rename (
4928:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
4929:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
4930:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4931:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 11658              	 .loc 1 4931 0
 11659              	 .cfi_startproc
 11660              	 
 11661              	 
 11662 0000 90B5     	 push {r4,r7,lr}
 11663              	.LCFI343:
 11664              	 .cfi_def_cfa_offset 12
 11665              	 .cfi_offset 4,-12
 11666              	 .cfi_offset 7,-8
 11667              	 .cfi_offset 14,-4
 11668 0002 A9B0     	 sub sp,sp,#164
 11669              	.LCFI344:
 11670              	 .cfi_def_cfa_offset 176
 11671 0004 00AF     	 add r7,sp,#0
 11672              	.LCFI345:
 11673              	 .cfi_def_cfa_register 7
 11674 0006 7860     	 str r0,[r7,#4]
 11675 0008 3960     	 str r1,[r7]
4932:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4933:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR djo, djn;
4934:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4935:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
4936:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dw;
4937:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4938:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4939:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4940:../Dave/Generated/FATFS/ff_Src/ff.c **** 	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 11676              	 .loc 1 4940 0
 11677 000a 3B46     	 mov r3,r7
 11678 000c 1846     	 mov r0,r3
 11679 000e FFF7FEFF 	 bl get_ldnumber
4941:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 11680              	 .loc 1 4941 0
 11681 0012 3A1D     	 adds r2,r7,#4
 11682 0014 07F12803 	 add r3,r7,#40
 11683 0018 1046     	 mov r0,r2
 11684 001a 1946     	 mov r1,r3
 11685 001c 0222     	 movs r2,#2
 11686 001e FFF7FEFF 	 bl find_volume
 11687 0022 0346     	 mov r3,r0
 11688 0024 87F89F30 	 strb r3,[r7,#159]
4942:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 11689              	 .loc 1 4942 0
 11690 0028 97F89F30 	 ldrb r3,[r7,#159]
 11691 002c 002B     	 cmp r3,#0
 11692 002e 40F0ED80 	 bne .L742
4943:../Dave/Generated/FATFS/ff_Src/ff.c **** 		djo.obj.fs = fs;
 11693              	 .loc 1 4943 0
 11694 0032 BB6A     	 ldr r3,[r7,#40]
 11695 0034 3B66     	 str r3,[r7,#96]
4944:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4945:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 11696              	 .loc 1 4945 0
 11697 0036 7B68     	 ldr r3,[r7,#4]
 11698 0038 07F16002 	 add r2,r7,#96
 11699 003c 1046     	 mov r0,r2
 11700 003e 1946     	 mov r1,r3
 11701 0040 FFF7FEFF 	 bl follow_path
 11702 0044 0346     	 mov r3,r0
 11703 0046 87F89F30 	 strb r3,[r7,#159]
4946:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 11704              	 .loc 1 4946 0
 11705 004a 97F89F30 	 ldrb r3,[r7,#159]
 11706 004e 002B     	 cmp r3,#0
 11707 0050 08D1     	 bne .L743
 11708              	 .loc 1 4946 0 is_stmt 0 discriminator 1
 11709 0052 97F88F30 	 ldrb r3,[r7,#143]
 11710 0056 03F0A003 	 and r3,r3,#160
 11711 005a 002B     	 cmp r3,#0
 11712 005c 02D0     	 beq .L743
 11713              	 .loc 1 4946 0 discriminator 2
 11714 005e 0623     	 movs r3,#6
 11715 0060 87F89F30 	 strb r3,[r7,#159]
 11716              	.L743:
4947:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4948:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 11717              	 .loc 1 4948 0 is_stmt 1
 11718 0064 97F89F30 	 ldrb r3,[r7,#159]
 11719 0068 002B     	 cmp r3,#0
 11720 006a 08D1     	 bne .L744
4949:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = chk_lock(&djo, 2);
 11721              	 .loc 1 4949 0
 11722 006c 07F16003 	 add r3,r7,#96
 11723 0070 1846     	 mov r0,r3
 11724 0072 0221     	 movs r1,#2
 11725 0074 FFF7FEFF 	 bl chk_lock
 11726 0078 0346     	 mov r3,r0
 11727 007a 87F89F30 	 strb r3,[r7,#159]
 11728              	.L744:
4950:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4951:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4952:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {						/* Object to be renamed is found */
 11729              	 .loc 1 4952 0
 11730 007e 97F89F30 	 ldrb r3,[r7,#159]
 11731 0082 002B     	 cmp r3,#0
 11732 0084 40F0C280 	 bne .L742
4953:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4954:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
4955:../Dave/Generated/FATFS/ff_Src/ff.c **** 				BYTE nf, nn;
4956:../Dave/Generated/FATFS/ff_Src/ff.c **** 				WORD nh;
4957:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4958:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
4959:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(&djn, &djo, sizeof djo);
4960:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4961:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
4962:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4963:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4964:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4965:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
4966:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
4967:../Dave/Generated/FATFS/ff_Src/ff.c **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
4968:../Dave/Generated/FATFS/ff_Src/ff.c **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
4969:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);	/* Restore 85+C0 entry */
4970:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
4971:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
4972:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attrib
4973:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
4974:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = store_xdir(&djn);
4975:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4976:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4977:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
4978:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4979:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{	/* At FAT/FAT32 volume */
4980:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 11733              	 .loc 1 4980 0
 11734 0088 D7F88030 	 ldr r3,[r7,#128]
 11735 008c 07F10802 	 add r2,r7,#8
 11736 0090 1046     	 mov r0,r2
 11737 0092 1946     	 mov r1,r3
 11738 0094 2022     	 movs r2,#32
 11739 0096 FFF7FEFF 	 bl mem_cpy
4981:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 11740              	 .loc 1 4981 0
 11741 009a 07F12C02 	 add r2,r7,#44
 11742 009e 07F16003 	 add r3,r7,#96
 11743 00a2 1046     	 mov r0,r2
 11744 00a4 1946     	 mov r1,r3
 11745 00a6 3422     	 movs r2,#52
 11746 00a8 FFF7FEFF 	 bl mem_cpy
4982:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 11747              	 .loc 1 4982 0
 11748 00ac 3B68     	 ldr r3,[r7]
 11749 00ae 07F12C02 	 add r2,r7,#44
 11750 00b2 1046     	 mov r0,r2
 11751 00b4 1946     	 mov r1,r3
 11752 00b6 FFF7FEFF 	 bl follow_path
 11753 00ba 0346     	 mov r3,r0
 11754 00bc 87F89F30 	 strb r3,[r7,#159]
4983:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 11755              	 .loc 1 4983 0
 11756 00c0 97F89F30 	 ldrb r3,[r7,#159]
 11757 00c4 002B     	 cmp r3,#0
 11758 00c6 0CD1     	 bne .L745
4984:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 11759              	 .loc 1 4984 0
 11760 00c8 7A6B     	 ldr r2,[r7,#52]
 11761 00ca BB6E     	 ldr r3,[r7,#104]
 11762 00cc 9A42     	 cmp r2,r3
 11763 00ce 05D1     	 bne .L746
 11764              	 .loc 1 4984 0 is_stmt 0 discriminator 1
 11765 00d0 3A6C     	 ldr r2,[r7,#64]
 11766 00d2 7B6F     	 ldr r3,[r7,#116]
 11767 00d4 9A42     	 cmp r2,r3
 11768 00d6 01D1     	 bne .L746
 11769              	 .loc 1 4984 0 discriminator 3
 11770 00d8 0423     	 movs r3,#4
 11771 00da 00E0     	 b .L747
 11772              	.L746:
 11773              	 .loc 1 4984 0 discriminator 4
 11774 00dc 0823     	 movs r3,#8
 11775              	.L747:
 11776              	 .loc 1 4984 0 discriminator 6
 11777 00de 87F89F30 	 strb r3,[r7,#159]
 11778              	.L745:
4985:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4986:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 11779              	 .loc 1 4986 0 is_stmt 1
 11780 00e2 97F89F30 	 ldrb r3,[r7,#159]
 11781 00e6 042B     	 cmp r3,#4
 11782 00e8 79D1     	 bne .L748
4987:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 11783              	 .loc 1 4987 0
 11784 00ea 07F12C03 	 add r3,r7,#44
 11785 00ee 1846     	 mov r0,r3
 11786 00f0 FFF7FEFF 	 bl dir_register
 11787 00f4 0346     	 mov r3,r0
 11788 00f6 87F89F30 	 strb r3,[r7,#159]
4988:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
 11789              	 .loc 1 4988 0
 11790 00fa 97F89F30 	 ldrb r3,[r7,#159]
 11791 00fe 002B     	 cmp r3,#0
 11792 0100 6DD1     	 bne .L748
4989:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dir = djn.dir;					/* Copy directory entry of the object except name */
 11793              	 .loc 1 4989 0
 11794 0102 FB6C     	 ldr r3,[r7,#76]
 11795 0104 C7F89830 	 str r3,[r7,#152]
4990:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
 11796              	 .loc 1 4990 0
 11797 0108 D7F89830 	 ldr r3,[r7,#152]
 11798 010c 03F10D02 	 add r2,r3,#13
 11799 0110 07F10803 	 add r3,r7,#8
 11800 0114 0D33     	 adds r3,r3,#13
 11801 0116 1046     	 mov r0,r2
 11802 0118 1946     	 mov r1,r3
 11803 011a 1322     	 movs r2,#19
 11804 011c FFF7FEFF 	 bl mem_cpy
4991:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dir[DIR_Attr] = buf[DIR_Attr];
 11805              	 .loc 1 4991 0
 11806 0120 D7F89830 	 ldr r3,[r7,#152]
 11807 0124 0B33     	 adds r3,r3,#11
 11808 0126 FA7C     	 ldrb r2,[r7,#19]
 11809 0128 1A70     	 strb r2,[r3]
4992:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a f
 11810              	 .loc 1 4992 0
 11811 012a D7F89830 	 ldr r3,[r7,#152]
 11812 012e 0B33     	 adds r3,r3,#11
 11813 0130 1B78     	 ldrb r3,[r3]
 11814 0132 03F01003 	 and r3,r3,#16
 11815 0136 002B     	 cmp r3,#0
 11816 0138 0AD1     	 bne .L749
 11817              	 .loc 1 4992 0 is_stmt 0 discriminator 1
 11818 013a D7F89830 	 ldr r3,[r7,#152]
 11819 013e 0B33     	 adds r3,r3,#11
 11820 0140 D7F89820 	 ldr r2,[r7,#152]
 11821 0144 0B32     	 adds r2,r2,#11
 11822 0146 1278     	 ldrb r2,[r2]
 11823 0148 42F02002 	 orr r2,r2,#32
 11824 014c D2B2     	 uxtb r2,r2
 11825 014e 1A70     	 strb r2,[r3]
 11826              	.L749:
4993:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->wflag = 1;
 11827              	 .loc 1 4993 0 is_stmt 1
 11828 0150 BB6A     	 ldr r3,[r7,#40]
 11829 0152 0122     	 movs r2,#1
 11830 0154 DA70     	 strb r2,[r3,#3]
4994:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 11831              	 .loc 1 4994 0
 11832 0156 D7F89830 	 ldr r3,[r7,#152]
 11833 015a 0B33     	 adds r3,r3,#11
 11834 015c 1B78     	 ldrb r3,[r3]
 11835 015e 03F01003 	 and r3,r3,#16
 11836 0162 002B     	 cmp r3,#0
 11837 0164 3BD0     	 beq .L748
 11838              	 .loc 1 4994 0 is_stmt 0 discriminator 1
 11839 0166 BA6E     	 ldr r2,[r7,#104]
 11840 0168 7B6B     	 ldr r3,[r7,#52]
 11841 016a 9A42     	 cmp r2,r3
 11842 016c 37D0     	 beq .L748
4995:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dw = clst2sect(fs, ld_clust(fs, dir));
 11843              	 .loc 1 4995 0 is_stmt 1
 11844 016e BC6A     	 ldr r4,[r7,#40]
 11845 0170 BB6A     	 ldr r3,[r7,#40]
 11846 0172 1846     	 mov r0,r3
 11847 0174 D7F89810 	 ldr r1,[r7,#152]
 11848 0178 FFF7FEFF 	 bl ld_clust
 11849 017c 0346     	 mov r3,r0
 11850 017e 2046     	 mov r0,r4
 11851 0180 1946     	 mov r1,r3
 11852 0182 FFF7FEFF 	 bl clst2sect
 11853 0186 C7F89400 	 str r0,[r7,#148]
4996:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (dw == 0) {
 11854              	 .loc 1 4996 0
 11855 018a D7F89430 	 ldr r3,[r7,#148]
 11856 018e 002B     	 cmp r3,#0
 11857 0190 03D1     	 bne .L750
4997:../Dave/Generated/FATFS/ff_Src/ff.c **** 								res = FR_INT_ERR;
 11858              	 .loc 1 4997 0
 11859 0192 0223     	 movs r3,#2
 11860 0194 87F89F30 	 strb r3,[r7,#159]
 11861 0198 21E0     	 b .L748
 11862              	.L750:
4998:../Dave/Generated/FATFS/ff_Src/ff.c **** 							} else {
4999:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
5000:../Dave/Generated/FATFS/ff_Src/ff.c **** 								res = move_window(fs, dw);
 11863              	 .loc 1 5000 0
 11864 019a BB6A     	 ldr r3,[r7,#40]
 11865 019c 1846     	 mov r0,r3
 11866 019e D7F89410 	 ldr r1,[r7,#148]
 11867 01a2 FFF7FEFF 	 bl move_window
 11868 01a6 0346     	 mov r3,r0
 11869 01a8 87F89F30 	 strb r3,[r7,#159]
5001:../Dave/Generated/FATFS/ff_Src/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 11870              	 .loc 1 5001 0
 11871 01ac BB6A     	 ldr r3,[r7,#40]
 11872 01ae 5833     	 adds r3,r3,#88
 11873 01b0 C7F89830 	 str r3,[r7,#152]
5002:../Dave/Generated/FATFS/ff_Src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 11874              	 .loc 1 5002 0
 11875 01b4 97F89F30 	 ldrb r3,[r7,#159]
 11876 01b8 002B     	 cmp r3,#0
 11877 01ba 10D1     	 bne .L748
 11878              	 .loc 1 5002 0 is_stmt 0 discriminator 1
 11879 01bc D7F89830 	 ldr r3,[r7,#152]
 11880 01c0 0133     	 adds r3,r3,#1
 11881 01c2 1B78     	 ldrb r3,[r3]
 11882 01c4 2E2B     	 cmp r3,#46
 11883 01c6 0AD1     	 bne .L748
5003:../Dave/Generated/FATFS/ff_Src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 11884              	 .loc 1 5003 0 is_stmt 1
 11885 01c8 BA6A     	 ldr r2,[r7,#40]
 11886 01ca 7B6B     	 ldr r3,[r7,#52]
 11887 01cc 1046     	 mov r0,r2
 11888 01ce D7F89810 	 ldr r1,[r7,#152]
 11889 01d2 1A46     	 mov r2,r3
 11890 01d4 FFF7FEFF 	 bl st_clust
5004:../Dave/Generated/FATFS/ff_Src/ff.c **** 									fs->wflag = 1;
 11891              	 .loc 1 5004 0
 11892 01d8 BB6A     	 ldr r3,[r7,#40]
 11893 01da 0122     	 movs r2,#1
 11894 01dc DA70     	 strb r2,[r3,#3]
 11895              	.L748:
5005:../Dave/Generated/FATFS/ff_Src/ff.c **** 								}
5006:../Dave/Generated/FATFS/ff_Src/ff.c **** 							}
5007:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5008:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5009:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5010:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5011:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 11896              	 .loc 1 5011 0
 11897 01de 97F89F30 	 ldrb r3,[r7,#159]
 11898 01e2 002B     	 cmp r3,#0
 11899 01e4 12D1     	 bne .L742
5012:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
 11900              	 .loc 1 5012 0
 11901 01e6 07F16003 	 add r3,r7,#96
 11902 01ea 1846     	 mov r0,r3
 11903 01ec FFF7FEFF 	 bl dir_remove
 11904 01f0 0346     	 mov r3,r0
 11905 01f2 87F89F30 	 strb r3,[r7,#159]
5013:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 11906              	 .loc 1 5013 0
 11907 01f6 97F89F30 	 ldrb r3,[r7,#159]
 11908 01fa 002B     	 cmp r3,#0
 11909 01fc 06D1     	 bne .L742
5014:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = sync_fs(fs);
 11910              	 .loc 1 5014 0
 11911 01fe BB6A     	 ldr r3,[r7,#40]
 11912 0200 1846     	 mov r0,r3
 11913 0202 FFF7FEFF 	 bl sync_fs
 11914 0206 0346     	 mov r3,r0
 11915 0208 87F89F30 	 strb r3,[r7,#159]
 11916              	.L742:
5015:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5016:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5017:../Dave/Generated/FATFS/ff_Src/ff.c **** /* End of the critical section */
5018:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5019:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5020:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5021:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5022:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 11917              	 .loc 1 5022 0
 11918 020c 97F89F30 	 ldrb r3,[r7,#159]
5023:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 11919              	 .loc 1 5023 0
 11920 0210 1846     	 mov r0,r3
 11921 0212 A437     	 adds r7,r7,#164
 11922              	.LCFI346:
 11923              	 .cfi_def_cfa_offset 12
 11924 0214 BD46     	 mov sp,r7
 11925              	.LCFI347:
 11926              	 .cfi_def_cfa_register 13
 11927              	 
 11928 0216 90BD     	 pop {r4,r7,pc}
 11929              	 .cfi_endproc
 11930              	.LFE65:
 11932              	 .section .text.f_gets,"ax",%progbits
 11933              	 .align 2
 11934              	 .global f_gets
 11935              	 .thumb
 11936              	 .thumb_func
 11938              	f_gets:
 11939              	.LFB66:
5024:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5025:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
5026:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE == 0 */
5027:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE <= 1 */
5028:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE <= 2 */
5029:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5030:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5031:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5032:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_CHMOD && !FF_FS_READONLY
5033:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5034:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Change Attribute                                                      */
5035:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5036:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5037:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_chmod (
5038:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
5039:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE attr,			/* Attribute bits */
5040:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE mask			/* Attribute mask to change */
5041:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5042:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5043:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5044:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5045:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5046:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
5047:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5048:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5049:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
5050:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5051:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
5052:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
5053:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
5054:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
5055:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5056:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
5057:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5058:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
5059:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
5060:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = store_xdir(&dj);
5061:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
5062:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5063:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
5064:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
5065:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
5066:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5067:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
5068:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = sync_fs(fs);
5069:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5070:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5071:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5072:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5073:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5074:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5075:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5076:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5077:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5078:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5079:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5080:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5081:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Change Timestamp                                                      */
5082:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5083:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5084:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_utime (
5085:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
5086:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const FILINFO* fno	/* Pointer to the timestamp to be set */
5087:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5088:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5089:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5090:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5091:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5092:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
5093:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5094:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5095:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
5096:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5097:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
5098:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
5099:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
5100:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
5101:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5102:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5103:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
5104:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
5105:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = store_xdir(&dj);
5106:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
5107:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5108:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
5109:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
5110:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
5111:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5112:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
5113:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = sync_fs(fs);
5114:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5115:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5116:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5117:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5118:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5119:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5120:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5121:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5122:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_CHMOD && !FF_FS_READONLY */
5123:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5124:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5125:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5126:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LABEL
5127:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5128:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get Volume Label                                                      */
5129:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5130:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5131:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_getlabel (
5132:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5133:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* label,		/* Buffer to store the volume label */
5134:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD* vsn			/* Variable to store the volume serial number */
5135:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5136:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5137:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5138:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5139:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5140:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT si, di;
5141:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
5142:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5143:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
5144:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&path, &fs, 0);
5145:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5146:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get volume label */
5147:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && label) {
5148:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
5149:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_sdi(&dj, 0);
5150:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5151:../Dave/Generated/FATFS/ff_Src/ff.c **** 		 	res = dir_read_label(&dj);		/* Find a volume label entry */
5152:../Dave/Generated/FATFS/ff_Src/ff.c **** 		 	if (res == FR_OK) {
5153:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5154:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
5155:../Dave/Generated/FATFS/ff_Src/ff.c **** 					WCHAR hs;
5156:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5157:../Dave/Generated/FATFS/ff_Src/ff.c **** 					for (si = di = hs = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 ent
5158:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = ld_word(dj.dir + XDIR_Label + si * 2);
5159:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (hs == 0 && IsSurrogate(wc)) {	/* Is the code a surrogate? */
5160:../Dave/Generated/FATFS/ff_Src/ff.c **** 							hs = wc; continue;
5161:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5162:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = put_utf((DWORD)hs << 16 | wc, &label[di], 4);
5163:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (wc == 0) { di = 0; break; }
5164:../Dave/Generated/FATFS/ff_Src/ff.c **** 						di += wc;
5165:../Dave/Generated/FATFS/ff_Src/ff.c **** 						hs = 0;
5166:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5167:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (hs != 0) di = 0;	/* Broken surrogate pair? */
5168:../Dave/Generated/FATFS/ff_Src/ff.c **** 					label[di] = 0;
5169:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
5170:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5171:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
5172:../Dave/Generated/FATFS/ff_Src/ff.c **** 					si = di = 0;		/* Extract volume label from AM_VOL entry */
5173:../Dave/Generated/FATFS/ff_Src/ff.c **** 					while (si < 11) {
5174:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = dj.dir[si++];
5175:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
5176:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
5177:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
5178:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
5179:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (wc == 0) { di = 0; break; }
5180:../Dave/Generated/FATFS/ff_Src/ff.c **** 						di += wc;
5181:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM output */
5182:../Dave/Generated/FATFS/ff_Src/ff.c **** 						label[di++] = (TCHAR)wc;
5183:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5184:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5185:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {				/* Truncate trailing spaces */
5186:../Dave/Generated/FATFS/ff_Src/ff.c **** 						label[di] = 0;
5187:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (di == 0) break;
5188:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (label[--di] == ' ');
5189:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5190:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5191:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5192:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
5193:../Dave/Generated/FATFS/ff_Src/ff.c **** 			label[0] = 0;
5194:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
5195:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5196:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5197:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5198:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get volume serial number */
5199:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && vsn) {
5200:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, fs->volbase);
5201:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5202:../Dave/Generated/FATFS/ff_Src/ff.c **** 			switch (fs->fs_type) {
5203:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case FS_EXFAT:
5204:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di = BPB_VolIDEx; break;
5205:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5206:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case FS_FAT32:
5207:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di = BS_VolID32; break;
5208:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5209:../Dave/Generated/FATFS/ff_Src/ff.c **** 			default:
5210:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di = BS_VolID;
5211:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5212:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*vsn = ld_dword(fs->win + di);
5213:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5214:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5215:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5216:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5217:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5218:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5219:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5220:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5221:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
5222:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5223:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Set Volume Label                                                      */
5224:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5225:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5226:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_setlabel (
5227:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* label	/* Volume label to set with heading logical drive number */
5228:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5229:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5230:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5231:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5232:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5233:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE dirvn[22];
5234:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT di;
5235:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
5236:../Dave/Generated/FATFS/ff_Src/ff.c **** 	static const char badchr[] = "+.,;=[]/\\\"*:<>\?|\x7F";	/* [0..] for FAT, [7..] for exFAT */
5237:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
5238:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dc;
5239:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5240:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5241:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
5242:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = find_volume(&label, &fs, FA_WRITE);
5243:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
5244:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5245:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5246:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
5247:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(dirvn, 0, 22);
5248:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di = 0;
5249:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
5250:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = tchar2uni(&label);	/* Get a Unicode character */
5251:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc >= 0x10000) {
5252:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dc == 0xFFFFFFFF || di >= 10) {	/* Wrong surrogate or buffer overflow */
5253:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dc = 0;
5254:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
5255:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_word(dirvn + di * 2, (WCHAR)(dc >> 16)); di++;
5256:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5257:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5258:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc == 0 || chk_chr(badchr + 7, (int)dc) || di >= 11) {	/* Check validity of the volume label
5259:../Dave/Generated/FATFS/ff_Src/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5260:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5261:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(dirvn + di * 2, (WCHAR)dc); di++;
5262:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5263:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5264:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5265:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* On the FAT/FAT32 volume */
5266:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(dirvn, ' ', 11);
5267:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di = 0;
5268:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
5269:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
5270:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = tchar2uni(&label);
5271:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
5272:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM input */
5273:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = (BYTE)*label++;
5274:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dbc_1st((BYTE)wc)) wc = dbc_2nd((BYTE)*label) ? wc << 8 | (BYTE)*label++ : 0;
5275:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
5276:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
5277:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ExCvt && wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
5278:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900
5279:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
5280:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5281:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5282:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Rejec
5283:../Dave/Generated/FATFS/ff_Src/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5284:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5285:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc >= 0x100) dirvn[di++] = (BYTE)(wc >> 8);
5286:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dirvn[di++] = (BYTE)wc;
5287:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5288:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
5289:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
5290:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5291:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5292:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Set volume label */
5293:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
5294:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(&dj, 0);
5295:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5296:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_read_label(&dj);	/* Get volume label entry */
5297:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5298:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5299:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dj.dir[XDIR_NumLabel] = (BYTE)di;	/* Change the volume label */
5300:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
5301:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5302:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (di != 0) {
5303:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
5304:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
5305:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5306:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5307:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5308:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
5309:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = sync_fs(fs);
5310:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {			/* No volume label entry or an error */
5311:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_NO_FILE) {
5312:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_OK;
5313:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (di != 0) {	/* Create a volume label entry */
5314:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
5315:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
5316:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clean the entry */
5317:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5318:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
5319:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dj.dir[XDIR_NumLabel] = (BYTE)di;
5320:../Dave/Generated/FATFS/ff_Src/ff.c **** 							mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
5321:../Dave/Generated/FATFS/ff_Src/ff.c **** 						} else {
5322:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5323:../Dave/Generated/FATFS/ff_Src/ff.c **** 							mem_cpy(dj.dir, dirvn, 11);
5324:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5325:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->wflag = 1;
5326:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = sync_fs(fs);
5327:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5328:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5329:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5330:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5331:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5332:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5333:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5334:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5335:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5336:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
5337:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_LABEL */
5338:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5339:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5340:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5341:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_EXPAND && !FF_FS_READONLY
5342:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5343:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Allocate a Contiguous Blocks to the File                              */
5344:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5345:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5346:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_expand (
5347:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
5348:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t fsz,	/* File size to be expanded to */
5349:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
5350:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5351:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5352:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5353:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5354:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
5355:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5356:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5357:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5358:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5359:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
5360:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5361:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size li
5362:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5363:../Dave/Generated/FATFS/ff_Src/ff.c **** 	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
5364:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
5365:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stcl = fs->last_clst; lclst = 0;
5366:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
5367:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5368:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5369:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
5370:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
5371:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
5372:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
5373:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5374:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (opt) {		/* Allocate it now */
5375:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
5376:../Dave/Generated/FATFS/ff_Src/ff.c **** 				lclst = scl + tcl - 1;
5377:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5378:../Dave/Generated/FATFS/ff_Src/ff.c **** 				lclst = scl - 1;
5379:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5380:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5381:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5382:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5383:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
5384:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = clst = stcl; ncl = 0;
5385:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {	/* Find a contiguous cluster block */
5386:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = get_fat(&fp->obj, clst);
5387:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (++clst >= fs->n_fatent) clst = 2;
5388:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n == 1) { res = FR_INT_ERR; break; }
5389:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5390:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n == 0) {	/* Is it a free cluster? */
5391:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
5392:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5393:../Dave/Generated/FATFS/ff_Src/ff.c **** 				scl = clst; ncl = 0;		/* Not a free cluster */
5394:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5395:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
5396:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5397:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5398:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (opt) {		/* Allocate it now */
5399:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
5400:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
5401:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res != FR_OK) break;
5402:../Dave/Generated/FATFS/ff_Src/ff.c **** 					lclst = clst;
5403:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5404:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5405:../Dave/Generated/FATFS/ff_Src/ff.c **** 				lclst = scl - 1;
5406:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5407:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5408:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5409:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5410:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5411:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
5412:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (opt) {	/* Is it allocated now? */
5413:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.sclust = scl;		/* Update object allocation information */
5414:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.objsize = fsz;
5415:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
5416:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->flag |= FA_MODIFIED;
5417:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
5418:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->free_clst -= tcl;
5419:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->fsi_flag |= 1;
5420:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5421:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5422:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5423:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5424:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5425:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5426:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5427:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_EXPAND && !FF_FS_READONLY */
5428:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5429:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5430:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5431:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FORWARD
5432:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5433:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Forward Data to the Stream Directly                                   */
5434:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5435:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5436:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_forward (
5437:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
5438:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
5439:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT btf,						/* Number of bytes to forward */
5440:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
5441:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5442:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5443:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5444:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5445:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst, sect;
5446:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t remain;
5447:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT rcnt, csect;
5448:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *dbuf;
5449:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5450:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5451:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
5452:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5453:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5454:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
5455:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5456:../Dave/Generated/FATFS/ff_Src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
5457:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
5458:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5459:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream goes busy */
5460:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5461:../Dave/Generated/FATFS/ff_Src/ff.c **** 		csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
5462:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {				/* On the sector boundary? */
5463:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (csect == 0) {						/* On the cluster boundary? */
5464:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
5465:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5466:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst <= 1) ABORT(fs, FR_INT_ERR);
5467:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
5468:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;					/* Update current cluster */
5469:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5470:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5471:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = clst2sect(fs, fp->clust);			/* Get current data sector */
5472:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sect == 0) ABORT(fs, FR_INT_ERR);
5473:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect += csect;
5474:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
5475:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window to the file dat
5476:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dbuf = fs->win;
5477:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
5478:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->sect != sect) {		/* Fill sector cache with file data */
5479:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
5480:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
5481:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5482:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
5483:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5484:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5485:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5486:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5487:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dbuf = fp->buf;
5488:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5489:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->sect = sect;
5490:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
5491:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rcnt > btf) rcnt = btf;					/* Clip it by btr if needed */
5492:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt);	/* Forward the file data */
5493:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rcnt == 0) ABORT(fs, FR_INT_ERR);
5494:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5495:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5496:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
5497:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5498:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_FORWARD */
5499:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5500:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5501:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5502:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_MKFS && !FF_FS_READONLY
5503:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5504:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create an FAT/exFAT volume                                            */
5505:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5506:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5507:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_mkfs (
5508:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5509:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE opt,			/* Format option */
5510:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD au,			/* Size of allocation unit (cluster) [byte] */
5511:../Dave/Generated/FATFS/ff_Src/ff.c **** 	void* work,			/* Pointer to working buffer (null: use heap memory) */
5512:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT len			/* Size of working buffer [byte] */
5513:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5514:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5515:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const UINT n_fats = 1;		/* Number of FATs for FAT/FAT32 volume (1 or 2) */
5516:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT volume */
5517:../Dave/Generated/FATFS/ff_Src/ff.c **** 	static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};	/* Cluster size boundary for FAT volume (4K
5518:../Dave/Generated/FATFS/ff_Src/ff.c **** 	static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};	/* Cluster size boundary for FAT32 volume (12
5519:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE fmt, sys, *buf, *pte, pdrv, part;
5520:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD ss;	/* Sector size */
5521:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD szb_buf, sz_buf, sz_blk, n_clst, pau, sect, nsect, n;
5522:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD b_vol, b_fat, b_data;				/* Base LBA for volume, fat, data */
5523:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sz_vol, sz_rsv, sz_fat, sz_dir;	/* Size for volume, fat, dir, data */
5524:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
5525:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
5526:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DSTATUS stat;
5527:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM || FF_FS_EXFAT
5528:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD tbl[3];
5529:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5530:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5531:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5532:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check mounted drive and clear work area */
5533:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(&path);					/* Get target logical drive */
5534:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
5535:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume if mounted */
5536:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
5537:../Dave/Generated/FATFS/ff_Src/ff.c **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
5538:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5539:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check physical drive status */
5540:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stat = disk_initialize(pdrv);
5541:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5542:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5543:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
5544:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_SS != FF_MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
5545:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
5546:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5547:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
5548:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ss = FF_MAX_SS;
5549:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5550:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Che
5551:../Dave/Generated/FATFS/ff_Src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
5552:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5553:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get working buffer */
5554:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 3
5555:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!work) {	/* Use heap memory for working buffer */
5556:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (szb_buf = MAX_MALLOC, buf = 0; szb_buf >= ss && (buf = ff_memalloc(szb_buf)) == 0; szb_buf /
5557:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_buf = szb_buf / ss;		/* Size of working buffer (sector) */
5558:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5559:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5560:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
5561:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf = (BYTE*)work;		/* Working buffer */
5562:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_buf = len / ss;		/* Size of working buffer (sector) */
5563:../Dave/Generated/FATFS/ff_Src/ff.c **** 		szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
5564:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5565:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!buf || sz_buf == 0) return FR_NOT_ENOUGH_CORE;
5566:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5567:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Determine where the volume to be located (b_vol, sz_vol) */
5568:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_MULTI_PARTITION && part != 0) {
5569:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get partition information from partition table in the MBR */
5570:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Load MBR */
5571:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ld_word(buf + BS_55AA) != 0xAA55) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if MBR is valid */
5572:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pte = buf + (MBR_Table + (part - 1) * SZ_PTE);
5573:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
5574:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
5575:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
5576:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
5577:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create a single-partition in this function */
5578:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5579:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
5580:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_vol < b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);
5581:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
5582:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5583:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
5584:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5585:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Pre-determine the FAT type */
5586:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
5587:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
5588:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms 
5589:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fmt = FS_EXFAT; break;
5590:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5591:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5592:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (au > 128) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* Too large au for FAT/FAT32 */
5593:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
5594:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
5595:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fmt = FS_FAT32; break;
5596:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5597:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5598:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(opt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
5599:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fmt = FS_FAT16;
5600:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (0);
5601:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5602:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5603:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
5604:../Dave/Generated/FATFS/ff_Src/ff.c **** 		DWORD szb_bit, szb_case, sum, nb, cl;
5605:../Dave/Generated/FATFS/ff_Src/ff.c **** 		WCHAR ch, si;
5606:../Dave/Generated/FATFS/ff_Src/ff.c **** 		UINT j, st;
5607:../Dave/Generated/FATFS/ff_Src/ff.c **** 		BYTE b;
5608:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5609:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
5610:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
5611:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased *
5612:../Dave/Generated/FATFS/ff_Src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5613:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5614:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Determine FAT location, data location and number of clusters */
5615:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (au == 0) {	/* au auto-selection */
5616:../Dave/Generated/FATFS/ff_Src/ff.c **** 			au = 8;
5617:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
5618:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
5619:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5620:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_fat = b_vol + 32;										/* FAT start at offset 32 */
5621:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
5622:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block bou
5623:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b_data >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
5624:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
5625:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
5626:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters? */
5627:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5628:../Dave/Generated/FATFS/ff_Src/ff.c **** 		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
5629:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
5630:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5631:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create a compressed up-case table */
5632:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_data + au * tbl[0];	/* Table start sector */
5633:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = 0;						/* Table checksum to be stored in the 82 entry */
5634:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
5635:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5636:../Dave/Generated/FATFS/ff_Src/ff.c **** 			switch (st) {
5637:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case 0:
5638:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
5639:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ch != si) {
5640:../Dave/Generated/FATFS/ff_Src/ff.c **** 					si++; break;		/* Store the up-case char if exist */
5641:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5642:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get r
5643:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (j >= 128) {
5644:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
5645:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5646:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st = 1;			/* Do not compress short run */
5647:../Dave/Generated/FATFS/ff_Src/ff.c **** 				/* go to next case */
5648:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case 1:
5649:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ch = si++;		/* Fill the short run */
5650:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (--j == 0) st = 0;
5651:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
5652:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5653:../Dave/Generated/FATFS/ff_Src/ff.c **** 			default:
5654:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
5655:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st = 0;
5656:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5657:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
5658:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
5659:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i += 2; szb_case += 2;
5660:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (si == 0 || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
5661:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n = (i + ss - 1) / ss;
5662:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5663:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sect += n; i = 0;
5664:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5665:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (si);
5666:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
5667:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tbl[2] = 1;										/* Number of root dir clusters */
5668:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5669:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize the allocation bitmap */
5670:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
5671:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
5672:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5673:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, szb_buf);
5674:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
5675:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (b = 1; nb != 0 && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
5676:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
5677:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5678:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
5679:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
5680:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5681:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize the FAT */
5682:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
5683:../Dave/Generated/FATFS/ff_Src/ff.c **** 		j = nb = cl = 0;
5684:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5685:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
5686:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cl == 0) {	/* Set entry 0 and 1 */
5687:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
5688:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
5689:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5690:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {			/* Create chains of bitmap, up-case and root dir */
5691:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (nb != 0 && i < szb_buf) {			/* Create a chain */
5692:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
5693:../Dave/Generated/FATFS/ff_Src/ff.c **** 					i += 4; cl++; nb--;
5694:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5695:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (nb == 0 && j < 3) nb = tbl[j++];	/* Next chain */
5696:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (nb != 0 && i < szb_buf);
5697:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
5698:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5699:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
5700:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
5701:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5702:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize the root directory */
5703:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, szb_buf);
5704:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
5705:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
5706:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 20, 2);				/* cluster */
5707:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/* size */
5708:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
5709:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 4, sum);			/* sum */
5710:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);	/* cluster */
5711:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 24, szb_case);		/* size */
5712:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of 
5713:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {	/* Fill root directory sectors */
5714:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5715:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5716:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5717:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
5718:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
5719:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5720:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create two set of the exFAT VBR blocks */
5721:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_vol;
5722:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 0; n < 2; n++) {
5723:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Main record (+0) */
5724:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5725:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
5726:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
5727:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
5728:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
5729:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
5730:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
5731:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
5732:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
5733:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
5734:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_FSVerEx, 0x100);						/* Filesystem version (1.00) */
5735:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector si
5736:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster s
5737:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
5738:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
5739:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
5740:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
5741:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
5742:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], 
5743:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5744:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5745:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Extended bootstrap record (+1..+8) */
5746:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5747:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
5748:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (j = 1; j < 9; j++) {
5749:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5750:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5751:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5752:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* OEM/Reserved record (+9..+10) */
5753:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5754:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for ( ; j < 11; j++) {
5755:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5756:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5757:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5758:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Sum record (+11) */
5759:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
5760:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5761:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5762:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5763:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5764:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT */
5765:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* Create an FAT/FAT32 volume */
5766:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5767:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pau = au;
5768:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
5769:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT32) {	/* FAT32 volume */
5770:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (pau == 0) {	/* au auto-selection */
5771:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
5772:../Dave/Generated/FATFS/ff_Src/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5773:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5774:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n_clst = sz_vol / pau;	/* Number of clusters */
5775:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
5776:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
5777:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_dir = 0;		/* No static directory */
5778:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
5779:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {				/* FAT volume */
5780:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (pau == 0) {	/* au auto-selection */
5781:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
5782:../Dave/Generated/FATFS/ff_Src/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5783:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5784:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n_clst = sz_vol / pau;
5785:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst > MAX_FAT12) {
5786:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
5787:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
5788:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fmt = FS_FAT12;
5789:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
5790:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5791:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
5792:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
5793:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
5794:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5795:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b_fat = b_vol + sz_rsv;						/* FAT base */
5796:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
5797:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5798:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Align data base to erase block boundary (for flash memory media) */
5799:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current d
5800:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
5801:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_rsv += n; b_fat += n;
5802:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {					/* FAT: Expand FAT size */
5803:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_fat += n / n_fats;
5804:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5805:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5806:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Determine number of clusters and final check of validity of the FAT sub-type */
5807:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume */
5808:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
5809:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT32) {
5810:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
5811:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (au == 0 && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
5812:../Dave/Generated/FATFS/ff_Src/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
5813:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5814:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5815:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT16) {
5816:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
5817:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (au == 0 && (pau * 2) <= 64) {
5818:../Dave/Generated/FATFS/ff_Src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
5819:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5820:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if ((opt & FM_FAT32)) {
5821:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
5822:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5823:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (au == 0 && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5824:../Dave/Generated/FATFS/ff_Src/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
5825:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5826:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
5827:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (au == 0 && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5828:../Dave/Generated/FATFS/ff_Src/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
5829:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5830:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5831:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for
5832:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5833:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Ok, it is the valid cluster configuration */
5834:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
5835:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (1);
5836:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5837:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
5838:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased *
5839:../Dave/Generated/FATFS/ff_Src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5840:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5841:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create FAT VBR */
5842:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, ss);
5843:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
5844:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
5845:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
5846:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
5847:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
5848:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
5849:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_vol < 0x10000) {
5850:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
5851:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
5852:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
5853:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5854:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
5855:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
5856:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
5857:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
5858:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32) {
5859:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
5860:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
5861:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
5862:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
5863:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
5864:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
5865:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
5866:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
5867:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
5868:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
5869:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
5870:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
5871:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
5872:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
5873:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5874:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size)
5875:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR se
5876:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5877:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create FSINFO record if needed */
5878:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32) {
5879:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
5880:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5881:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
5882:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
5883:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
5884:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
5885:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
5886:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
5887:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
5888:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5889:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5890:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize FAT area */
5891:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, (UINT)szb_buf);
5892:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_fat;		/* FAT start sector */
5893:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
5894:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fmt == FS_FAT32) {
5895:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
5896:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
5897:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
5898:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5899:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
5900:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5901:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nsect = sz_fat;		/* Number of FAT sectors */
5902:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {	/* Fill FAT sectors */
5903:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n = (nsect > sz_buf) ? sz_buf : nsect;
5904:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5905:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_set(buf, 0, ss);
5906:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sect += n; nsect -= n;
5907:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (nsect);
5908:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5909:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5910:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize root directory (fill with zero) */
5911:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
5912:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5913:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5914:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5915:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
5916:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
5917:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5918:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5919:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Determine system ID in the partition table */
5920:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_FS_EXFAT && fmt == FS_EXFAT) {
5921:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sys = 0x07;			/* HPFS/NTFS/exFAT */
5922:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
5923:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32) {
5924:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sys = 0x0C;		/* FAT32X */
5925:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
5926:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol >= 0x10000) {
5927:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sys = 0x06;	/* FAT12/16 (large) */
5928:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5929:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
5930:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5931:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5932:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5933:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5934:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Update partition information */
5935:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_MULTI_PARTITION && part != 0) {	/* Created in the existing partition */
5936:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Update system ID in the partition table */
5937:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
5938:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
5939:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR *
5940:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {								/* Created as a new single partition */
5941:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
5942:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
5943:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
5944:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
5945:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_Boot] = 0;					/* Boot indicator */
5946:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_StHead] = 1;				/* Start head */
5947:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_StSec] = 1;					/* Start sector */
5948:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
5949:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_System] = sys;				/* System type */
5950:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
5951:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_EdHead] = 254;				/* End head */
5952:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_EdSec] = (BYTE)(((n >> 2) & 0xC0) | 63);	/* End sector */
5953:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
5954:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
5955:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
5956:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the MBR */
5957:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5958:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5959:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5960:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5961:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5962:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_MKFS(FR_OK);
5963:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5964:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5965:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5966:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5967:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MULTI_PARTITION
5968:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5969:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create Partition Table on the Physical Drive                          */
5970:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5971:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5972:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_fdisk (
5973:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE pdrv,			/* Physical drive number */
5974:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const DWORD* szt,	/* Pointer to the size table for each partitions */
5975:../Dave/Generated/FATFS/ff_Src/ff.c **** 	void* work			/* Pointer to the working buffer (null: use heap memory) */
5976:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5977:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5978:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
5979:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
5980:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DSTATUS stat;
5981:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sz_disk, sz_part, s_part;
5982:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5983:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5984:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5985:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stat = disk_initialize(pdrv);
5986:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5987:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5988:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
5989:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5990:../Dave/Generated/FATFS/ff_Src/ff.c **** 	buf = (BYTE*)work;
5991:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 3
5992:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!buf) buf = ff_memalloc(FF_MAX_SS);	/* Use heap memory for working buffer */
5993:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5994:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!buf) return FR_NOT_ENOUGH_CORE;
5995:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5996:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Determine the CHS without any consideration of the drive geometry */
5997:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
5998:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (n == 256) n--;
5999:../Dave/Generated/FATFS/ff_Src/ff.c **** 	e_hd = (BYTE)(n - 1);
6000:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sz_cyl = 63 * n;
6001:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
6002:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6003:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create partition table */
6004:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(buf, 0, FF_MAX_SS);
6005:../Dave/Generated/FATFS/ff_Src/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
6006:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
6007:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;	/* Number of cylinder
6008:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (p_cyl == 0) continue;
6009:../Dave/Generated/FATFS/ff_Src/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
6010:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
6011:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
6012:../Dave/Generated/FATFS/ff_Src/ff.c **** 			s_hd = 1;
6013:../Dave/Generated/FATFS/ff_Src/ff.c **** 			s_part += 63; sz_part -= 63;
6014:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6015:../Dave/Generated/FATFS/ff_Src/ff.c **** 			s_hd = 0;
6016:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6017:../Dave/Generated/FATFS/ff_Src/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;	/* End cylinder */
6018:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (e_cyl >= tot_cyl) LEAVE_MKFS(FR_INVALID_PARAMETER);
6019:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6020:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Set partition table */
6021:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[1] = s_hd;						/* Start head */
6022:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[2] = (BYTE)(((b_cyl >> 2) & 0xC0) | 1);	/* Start sector */
6023:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
6024:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[4] = 0x07;						/* System type (temporary setting) */
6025:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[5] = e_hd;						/* End head */
6026:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[6] = (BYTE)(((e_cyl >> 2) & 0xC0) | 63);	/* End sector */
6027:../Dave/Generated/FATFS/ff_Src/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
6028:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(p + 8, s_part);			/* Start sector in LBA */
6029:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(p + 12, sz_part);			/* Number of sectors */
6030:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6031:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Next partition */
6032:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_cyl += p_cyl;
6033:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6034:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(p, 0xAA55);		/* MBR signature (always at offset 510) */
6035:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6036:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Write it to the MBR */
6037:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = (disk_write(pdrv, buf, 0, 1) == RES_OK && disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK 
6038:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_MKFS(res);
6039:../Dave/Generated/FATFS/ff_Src/ff.c **** }
6040:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6041:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_MULTI_PARTITION */
6042:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_MKFS && !FF_FS_READONLY */
6043:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6044:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6045:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6046:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6047:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_STRFUNC
6048:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && (FF_STRF_ENCODE < 0 || FF_STRF_ENCODE > 3)
6049:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong FF_STRF_ENCODE setting
6050:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6051:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6052:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get a String from the File                                            */
6053:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6054:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6055:../Dave/Generated/FATFS/ff_Src/ff.c **** TCHAR* f_gets (
6056:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
6057:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int len,		/* Size of string buffer (items) */
6058:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp			/* Pointer to the file object */
6059:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6060:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 11940              	 .loc 1 6060 0
 11941              	 .cfi_startproc
 11942              	 
 11943              	 
 11944 0000 80B5     	 push {r7,lr}
 11945              	.LCFI348:
 11946              	 .cfi_def_cfa_offset 8
 11947              	 .cfi_offset 7,-8
 11948              	 .cfi_offset 14,-4
 11949 0002 8AB0     	 sub sp,sp,#40
 11950              	.LCFI349:
 11951              	 .cfi_def_cfa_offset 48
 11952 0004 00AF     	 add r7,sp,#0
 11953              	.LCFI350:
 11954              	 .cfi_def_cfa_register 7
 11955 0006 F860     	 str r0,[r7,#12]
 11956 0008 B960     	 str r1,[r7,#8]
 11957 000a 7A60     	 str r2,[r7,#4]
6061:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int nc = 0;
 11958              	 .loc 1 6061 0
 11959 000c 0023     	 movs r3,#0
 11960 000e 7B62     	 str r3,[r7,#36]
6062:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR *p = buff;
 11961              	 .loc 1 6062 0
 11962 0010 FB68     	 ldr r3,[r7,#12]
 11963 0012 3B62     	 str r3,[r7,#32]
6063:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE s[4];
6064:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT rc;
6065:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dc;
6066:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCODE <= 2
6067:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
6068:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6069:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCODE == 3
6070:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT ct;
6071:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6072:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6073:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE			/* With code conversion (Unicode API) */
6074:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Make a room for the character and terminator  */
6075:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_LFN_UNICODE == 1) len -= (FF_STRF_ENCODE == 0) ? 1 : 2;
6076:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_LFN_UNICODE == 2) len -= (FF_STRF_ENCODE == 0) ? 3 : 4;
6077:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_LFN_UNICODE == 3) len -= 1;
6078:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (nc < len) {
6079:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STRF_ENCODE == 0		/* Read a character in ANSI/OEM */
6080:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);
6081:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 1) break;
6082:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = s[0];
6083:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st((BYTE)wc)) {
6084:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f_read(fp, s, 1, &rc);
6085:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != 1 || !dbc_2nd(s[0])) continue;
6086:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = wc << 8 | s[0];
6087:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6088:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = ff_oem2uni(wc, CODEPAGE);
6089:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc == 0) continue;
6090:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_STRF_ENCODE == 1 || FF_STRF_ENCODE == 2 	/* Read a character in UTF-16LE/BE */
6091:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 2, &rc);
6092:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 2) break;
6093:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = (FF_STRF_ENCODE == 1) ? ld_word(s) : s[0] << 8 | s[1];
6094:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsSurrogateL(dc)) continue;
6095:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsSurrogateH(dc)) {
6096:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f_read(fp, s, 2, &rc);
6097:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != 2) break;
6098:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = (FF_STRF_ENCODE == 1) ? ld_word(s) : s[0] << 8 | s[1];
6099:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!IsSurrogateL(wc)) continue;
6100:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = ((dc & 0x3FF) + 0x40) << 10 | (wc & 0x3FF);
6101:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6102:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* Read a character in UTF-8 */
6103:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);
6104:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 1) break;
6105:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = s[0];
6106:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc >= 0x80) {	/* Multi-byte character? */
6107:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ct = 0;
6108:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((dc & 0xE0) == 0xC0) { dc &= 0x1F; ct = 1; }	/* 2-byte? */
6109:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((dc & 0xF0) == 0xE0) { dc &= 0x0F; ct = 2; }	/* 3-byte? */
6110:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((dc & 0xF8) == 0xF0) { dc &= 0x07; ct = 3; }	/* 4-byte? */
6111:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ct == 0) continue;
6112:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f_read(fp, s, ct, &rc);		/* Get trailing bytes */
6113:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != ct) break;
6114:../Dave/Generated/FATFS/ff_Src/ff.c **** 			rc = 0;
6115:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {	/* Merge trailing bytes */
6116:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((s[rc] & 0xC0) != 0x80) break;
6117:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dc = dc << 6 | (s[rc] & 0x3F);
6118:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (++rc < ct);
6119:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != ct || dc < 0x80 || IsSurrogate(dc) || dc >= 0x110000) continue;	/* Wrong encoding? */
6120:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6121:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6122:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;	/* Strip \r off if needed */
6123:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1	|| FF_LFN_UNICODE == 3	/* Output it in UTF-16/32 encoding */
6124:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_LFN_UNICODE == 1 && dc >= 0x10000) {	/* Out of BMP at UTF-16? */
6125:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p++ = (TCHAR)(0xD800 | ((dc >> 10) - 0x40)); nc++;	/* Make and output high surrogate */
6126:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = 0xDC00 | (dc & 0x3FF);		/* Make low surrogate */
6127:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6128:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*p++ = (TCHAR)dc; nc++;
6129:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc == '\n') break;	/* End of line? */
6130:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2		/* Output it in UTF-8 encoding */
6131:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc < 0x80) {	/* 1-byte */
6132:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p++ = (TCHAR)dc;
6133:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nc++;
6134:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc == '\n') break;	/* End of line? */
6135:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6136:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc < 0x800) {		/* 2-byte */
6137:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*p++ = (TCHAR)(0xC0 | (dc >> 6 & 0x1F));
6138:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6139:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc += 2;
6140:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
6141:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dc < 0x10000) {	/* 3-byte */
6142:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0xE0 | (dc >> 12 & 0x0F));
6143:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 6 & 0x3F));
6144:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6145:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nc += 3;
6146:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {			/* 4-byte */
6147:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0xF0 | (dc >> 18 & 0x07));
6148:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 12 & 0x3F));
6149:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 6 & 0x3F));
6150:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6151:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nc += 4;
6152:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6153:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6154:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6155:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6156:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6157:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6158:../Dave/Generated/FATFS/ff_Src/ff.c **** #else			/* Byte-by-byte without any conversion (ANSI/OEM API) */
6159:../Dave/Generated/FATFS/ff_Src/ff.c **** 	len -= 1;	/* Make a room for the terminator */
 11964              	 .loc 1 6159 0
 11965 0014 BB68     	 ldr r3,[r7,#8]
 11966 0016 013B     	 subs r3,r3,#1
 11967 0018 BB60     	 str r3,[r7,#8]
6160:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (nc < len) {
 11968              	 .loc 1 6160 0
 11969 001a 1FE0     	 b .L753
 11970              	.L757:
6161:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);
 11971              	 .loc 1 6161 0
 11972 001c 07F11802 	 add r2,r7,#24
 11973 0020 07F11403 	 add r3,r7,#20
 11974 0024 7868     	 ldr r0,[r7,#4]
 11975 0026 1146     	 mov r1,r2
 11976 0028 0122     	 movs r2,#1
 11977 002a FFF7FEFF 	 bl f_read
6162:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 1) break;
 11978              	 .loc 1 6162 0
 11979 002e 7B69     	 ldr r3,[r7,#20]
 11980 0030 012B     	 cmp r3,#1
 11981 0032 00D0     	 beq .L754
 11982 0034 16E0     	 b .L755
 11983              	.L754:
6163:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = s[0];
 11984              	 .loc 1 6163 0
 11985 0036 3B7E     	 ldrb r3,[r7,#24]
 11986 0038 FB61     	 str r3,[r7,#28]
6164:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;
 11987              	 .loc 1 6164 0
 11988 003a FB69     	 ldr r3,[r7,#28]
 11989 003c 0D2B     	 cmp r3,#13
 11990 003e 00D1     	 bne .L756
 11991              	 .loc 1 6164 0 is_stmt 0 discriminator 1
 11992 0040 0CE0     	 b .L753
 11993              	.L756:
6165:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*p++ = (TCHAR)dc; nc++;
 11994              	 .loc 1 6165 0 is_stmt 1
 11995 0042 3B6A     	 ldr r3,[r7,#32]
 11996 0044 5A1C     	 adds r2,r3,#1
 11997 0046 3A62     	 str r2,[r7,#32]
 11998 0048 FA69     	 ldr r2,[r7,#28]
 11999 004a D2B2     	 uxtb r2,r2
 12000 004c 1A70     	 strb r2,[r3]
 12001 004e 7B6A     	 ldr r3,[r7,#36]
 12002 0050 0133     	 adds r3,r3,#1
 12003 0052 7B62     	 str r3,[r7,#36]
6166:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc == '\n') break;
 12004              	 .loc 1 6166 0
 12005 0054 FB69     	 ldr r3,[r7,#28]
 12006 0056 0A2B     	 cmp r3,#10
 12007 0058 00D1     	 bne .L753
 12008 005a 03E0     	 b .L755
 12009              	.L753:
6160:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);
 12010              	 .loc 1 6160 0
 12011 005c 7A6A     	 ldr r2,[r7,#36]
 12012 005e BB68     	 ldr r3,[r7,#8]
 12013 0060 9A42     	 cmp r2,r3
 12014 0062 DBDB     	 blt .L757
 12015              	.L755:
6167:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6168:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6169:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6170:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*p = 0;		/* Terminate the string */
 12016              	 .loc 1 6170 0
 12017 0064 3B6A     	 ldr r3,[r7,#32]
 12018 0066 0022     	 movs r2,#0
 12019 0068 1A70     	 strb r2,[r3]
6171:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return nc ? buff : 0;	/* When no data read due to EOF or error, return with error. */
 12020              	 .loc 1 6171 0
 12021 006a 7B6A     	 ldr r3,[r7,#36]
 12022 006c 002B     	 cmp r3,#0
 12023 006e 01D0     	 beq .L758
 12024              	 .loc 1 6171 0 is_stmt 0 discriminator 1
 12025 0070 FB68     	 ldr r3,[r7,#12]
 12026 0072 00E0     	 b .L760
 12027              	.L758:
 12028              	 .loc 1 6171 0 discriminator 2
 12029 0074 0023     	 movs r3,#0
 12030              	.L760:
6172:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 12031              	 .loc 1 6172 0 is_stmt 1
 12032 0076 1846     	 mov r0,r3
 12033 0078 2837     	 adds r7,r7,#40
 12034              	.LCFI351:
 12035              	 .cfi_def_cfa_offset 8
 12036 007a BD46     	 mov sp,r7
 12037              	.LCFI352:
 12038              	 .cfi_def_cfa_register 13
 12039              	 
 12040 007c 80BD     	 pop {r7,pc}
 12041              	 .cfi_endproc
 12042              	.LFE66:
 12044 007e 00BF     	 .section .text.putc_bfd,"ax",%progbits
 12045              	 .align 2
 12046              	 .thumb
 12047              	 .thumb_func
 12049              	putc_bfd:
 12050              	.LFB67:
6173:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6174:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6175:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6176:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6177:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
6178:../Dave/Generated/FATFS/ff_Src/ff.c **** #include <stdarg.h>
6179:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6180:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Put a Character to the File                                           */
6181:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6182:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6183:../Dave/Generated/FATFS/ff_Src/ff.c **** typedef struct {	/* Putchar output buffer and work area */
6184:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL *fp;		/* Ptr to the writing file */
6185:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int idx, nchr;	/* Write index of buf[] (-1:error), number of encoding units written */
6186:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE == 1
6187:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR hs;
6188:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_USE_LFN && FF_LFN_UNICODE == 2
6189:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE bs[4];
6190:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT wi, ct;
6191:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6192:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE buf[64];	/* Write buffer */
6193:../Dave/Generated/FATFS/ff_Src/ff.c **** } putbuff;
6194:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6195:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6196:../Dave/Generated/FATFS/ff_Src/ff.c **** static
6197:../Dave/Generated/FATFS/ff_Src/ff.c **** void putc_bfd (		/* Buffered write with code conversion */
6198:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff* pb,
6199:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c
6200:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6201:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 12051              	 .loc 1 6201 0
 12052              	 .cfi_startproc
 12053              	 
 12054              	 
 12055 0000 80B5     	 push {r7,lr}
 12056              	.LCFI353:
 12057              	 .cfi_def_cfa_offset 8
 12058              	 .cfi_offset 7,-8
 12059              	 .cfi_offset 14,-4
 12060 0002 86B0     	 sub sp,sp,#24
 12061              	.LCFI354:
 12062              	 .cfi_def_cfa_offset 32
 12063 0004 00AF     	 add r7,sp,#0
 12064              	.LCFI355:
 12065              	 .cfi_def_cfa_register 7
 12066 0006 7860     	 str r0,[r7,#4]
 12067 0008 0B46     	 mov r3,r1
 12068 000a FB70     	 strb r3,[r7,#3]
6202:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n;
6203:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int i, nc;
6204:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE
6205:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR hs, wc;
6206:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 2
6207:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dc;
6208:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR *tp;
6209:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6210:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6211:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6212:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 12069              	 .loc 1 6212 0
 12070 000c FB78     	 ldrb r3,[r7,#3]
 12071 000e 0A2B     	 cmp r3,#10
 12072 0010 03D1     	 bne .L762
6213:../Dave/Generated/FATFS/ff_Src/ff.c **** 		putc_bfd(pb, '\r');
 12073              	 .loc 1 6213 0
 12074 0012 7868     	 ldr r0,[r7,#4]
 12075 0014 0D21     	 movs r1,#13
 12076 0016 FFF7F3FF 	 bl putc_bfd
 12077              	.L762:
6214:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6215:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6216:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = pb->idx;			/* Write index of pb->buf[] */
 12078              	 .loc 1 6216 0
 12079 001a 7B68     	 ldr r3,[r7,#4]
 12080 001c 5B68     	 ldr r3,[r3,#4]
 12081 001e 7B61     	 str r3,[r7,#20]
6217:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i < 0) return;
 12082              	 .loc 1 6217 0
 12083 0020 7B69     	 ldr r3,[r7,#20]
 12084 0022 002B     	 cmp r3,#0
 12085 0024 26DB     	 blt .L761
6218:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nc = pb->nchr;			/* Write unit counter */
 12086              	 .loc 1 6218 0
 12087 0026 7B68     	 ldr r3,[r7,#4]
 12088 0028 9B68     	 ldr r3,[r3,#8]
 12089 002a 3B61     	 str r3,[r7,#16]
6219:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6220:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE
6221:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1		/* UTF-16 input */
6222:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsSurrogateH(c)) {
6223:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->hs = c; return;
6224:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6225:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hs = pb->hs; pb->hs = 0;
6226:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {
6227:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!IsSurrogateL(c)) hs = 0;
6228:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
6229:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsSurrogateL(c)) return;
6230:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6231:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = c;
6232:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 input */
6233:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
6234:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pb->ct == 0) {	/* Out of multi-byte sequence? */
6235:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->bs[pb->wi = 0] = (BYTE)c;	/* Save 1st byte */
6236:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((BYTE)c < 0x80) break;					/* 1-byte? */
6237:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xE0) == 0xC0) pb->ct = 1;	/* 2-byte? */
6238:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xF0) == 0xE0) pb->ct = 2;	/* 3-byte? */
6239:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xF1) == 0xF0) pb->ct = 3;	/* 4-byte? */
6240:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return;
6241:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {				/* In the multi-byte sequence */
6242:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xC0) != 0x80) {	/* Broken sequence? */
6243:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->ct = 0; continue;
6244:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6245:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->bs[++pb->wi] = (BYTE)c;	/* Save the trailing byte */
6246:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (--pb->ct == 0) break;	/* End of multi-byte sequence? */
6247:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return;
6248:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6249:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6250:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tp = (TCHAR*)pb->bs;
6251:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dc = tchar2uni(&tp);	/* UTF-8 ==> UTF-16 */
6252:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dc == 0xFFFFFFFF) return;
6253:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = (WCHAR)dc;
6254:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hs = (WCHAR)(dc >> 16);
6255:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 input */
6256:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsSurrogate(c) || c >= 0x110000) return;
6257:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c >= 0x10000) {
6258:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = (WCHAR)(0xD800 | ((c >> 10) - 0x40)); 	/* Make high surrogate */
6259:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = 0xDC00 | (c & 0x3FF);					/* Make low surrogate */
6260:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
6261:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = 0;
6262:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = (WCHAR)c;
6263:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6264:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6265:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6266:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STRF_ENCODE == 1		/* Write a character in UTF-16LE */
6267:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {
6268:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(&pb->buf[i], hs);
6269:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i += 2;
6270:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc++;
6271:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6272:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(&pb->buf[i], wc);
6273:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i += 2;
6274:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_STRF_ENCODE == 2	/* Write a character in UTF-16BE */
6275:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {
6276:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(hs >> 8);
6277:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)hs;
6278:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc++;
6279:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6280:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)(wc >> 8);
6281:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)wc;
6282:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_STRF_ENCODE == 3	/* Write it in UTF-8 */
6283:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {				/* 4-byte */
6284:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc += 3;
6285:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = (hs & 0x3FF) + 0x40;
6286:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0xF0 | hs >> 8);
6287:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 0x3F));
6288:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) << 4 | (wc >> 6 & 0x0F));
6289:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
6290:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
6291:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc < 0x80) {		/* 1-byte */
6292:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->buf[i++] = (BYTE)wc;
6293:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6294:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc < 0x800) {	/* 2-byte */
6295:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc += 1;
6296:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->buf[i++] = (BYTE)(0xC0 | wc >> 6);
6297:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {			/* 3-byte */
6298:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc += 2;
6299:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->buf[i++] = (BYTE)(0xE0 | wc >> 12);
6300:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->buf[i++] = (BYTE)(0x80 | (wc >> 6 & 0x3F));
6301:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6302:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
6303:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6304:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6305:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* Write it in ANSI/OEM */
6306:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) return;
6307:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = ff_uni2oem(wc, CODEPAGE);	/* UTF-16 ==> ANSI/OEM */
6308:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc == 0) return;;
6309:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc >= 0x100) {
6310:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(wc >> 8); nc++;
6311:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6312:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)wc;
6313:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6314:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6315:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM input (without re-encode) */
6316:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)c;
 12090              	 .loc 1 6316 0
 12091 002c 7B69     	 ldr r3,[r7,#20]
 12092 002e 5A1C     	 adds r2,r3,#1
 12093 0030 7A61     	 str r2,[r7,#20]
 12094 0032 7A68     	 ldr r2,[r7,#4]
 12095 0034 1344     	 add r3,r3,r2
 12096 0036 FA78     	 ldrb r2,[r7,#3]
 12097 0038 1A73     	 strb r2,[r3,#12]
6317:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6318:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6319:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write buffered characters to the file */
 12098              	 .loc 1 6319 0
 12099 003a 7B69     	 ldr r3,[r7,#20]
 12100 003c 3B2B     	 cmp r3,#59
 12101 003e 12DD     	 ble .L765
6320:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &n);
 12102              	 .loc 1 6320 0
 12103 0040 7B68     	 ldr r3,[r7,#4]
 12104 0042 1868     	 ldr r0,[r3]
 12105 0044 7B68     	 ldr r3,[r7,#4]
 12106 0046 03F10C01 	 add r1,r3,#12
 12107 004a 7A69     	 ldr r2,[r7,#20]
 12108 004c 07F10C03 	 add r3,r7,#12
 12109 0050 FFF7FEFF 	 bl f_write
6321:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = (n == (UINT)i) ? 0 : -1;
 12110              	 .loc 1 6321 0
 12111 0054 7A69     	 ldr r2,[r7,#20]
 12112 0056 FB68     	 ldr r3,[r7,#12]
 12113 0058 9A42     	 cmp r2,r3
 12114 005a 01D1     	 bne .L766
 12115              	 .loc 1 6321 0 is_stmt 0 discriminator 1
 12116 005c 0023     	 movs r3,#0
 12117 005e 01E0     	 b .L767
 12118              	.L766:
 12119              	 .loc 1 6321 0 discriminator 2
 12120 0060 4FF0FF33 	 mov r3,#-1
 12121              	.L767:
 12122              	 .loc 1 6321 0 discriminator 4
 12123 0064 7B61     	 str r3,[r7,#20]
 12124              	.L765:
6322:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6323:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->idx = i;
 12125              	 .loc 1 6323 0 is_stmt 1
 12126 0066 7B68     	 ldr r3,[r7,#4]
 12127 0068 7A69     	 ldr r2,[r7,#20]
 12128 006a 5A60     	 str r2,[r3,#4]
6324:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->nchr = nc + 1;
 12129              	 .loc 1 6324 0
 12130 006c 3B69     	 ldr r3,[r7,#16]
 12131 006e 5A1C     	 adds r2,r3,#1
 12132 0070 7B68     	 ldr r3,[r7,#4]
 12133 0072 9A60     	 str r2,[r3,#8]
 12134              	.L761:
6325:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 12135              	 .loc 1 6325 0
 12136 0074 1837     	 adds r7,r7,#24
 12137              	.LCFI356:
 12138              	 .cfi_def_cfa_offset 8
 12139 0076 BD46     	 mov sp,r7
 12140              	.LCFI357:
 12141              	 .cfi_def_cfa_register 13
 12142              	 
 12143 0078 80BD     	 pop {r7,pc}
 12144              	 .cfi_endproc
 12145              	.LFE67:
 12147 007a 00BF     	 .section .text.putc_flush,"ax",%progbits
 12148              	 .align 2
 12149              	 .thumb
 12150              	 .thumb_func
 12152              	putc_flush:
 12153              	.LFB68:
6326:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6327:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6328:../Dave/Generated/FATFS/ff_Src/ff.c **** static
6329:../Dave/Generated/FATFS/ff_Src/ff.c **** int putc_flush (		/* Flush left characters in the buffer */
6330:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff* pb
6331:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6332:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 12154              	 .loc 1 6332 0
 12155              	 .cfi_startproc
 12156              	 
 12157              	 
 12158 0000 90B5     	 push {r4,r7,lr}
 12159              	.LCFI358:
 12160              	 .cfi_def_cfa_offset 12
 12161              	 .cfi_offset 4,-12
 12162              	 .cfi_offset 7,-8
 12163              	 .cfi_offset 14,-4
 12164 0002 85B0     	 sub sp,sp,#20
 12165              	.LCFI359:
 12166              	 .cfi_def_cfa_offset 32
 12167 0004 00AF     	 add r7,sp,#0
 12168              	.LCFI360:
 12169              	 .cfi_def_cfa_register 7
 12170 0006 7860     	 str r0,[r7,#4]
6333:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT nw;
6334:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6335:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 12171              	 .loc 1 6335 0
 12172 0008 7B68     	 ldr r3,[r7,#4]
 12173 000a 5B68     	 ldr r3,[r3,#4]
 12174 000c 002B     	 cmp r3,#0
 12175 000e 1ADB     	 blt .L769
6336:../Dave/Generated/FATFS/ff_Src/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 12176              	 .loc 1 6336 0
 12177 0010 7B68     	 ldr r3,[r7,#4]
 12178 0012 1968     	 ldr r1,[r3]
 12179 0014 7B68     	 ldr r3,[r7,#4]
 12180 0016 03F10C02 	 add r2,r3,#12
 12181 001a 7B68     	 ldr r3,[r7,#4]
 12182 001c 5B68     	 ldr r3,[r3,#4]
 12183 001e 1C46     	 mov r4,r3
 12184 0020 07F10C03 	 add r3,r7,#12
 12185 0024 0846     	 mov r0,r1
 12186 0026 1146     	 mov r1,r2
 12187 0028 2246     	 mov r2,r4
 12188 002a FFF7FEFF 	 bl f_write
 12189 002e 0346     	 mov r3,r0
 12190 0030 002B     	 cmp r3,#0
 12191 0032 08D1     	 bne .L769
6337:../Dave/Generated/FATFS/ff_Src/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
 12192              	 .loc 1 6337 0
 12193 0034 7B68     	 ldr r3,[r7,#4]
 12194 0036 5B68     	 ldr r3,[r3,#4]
 12195 0038 1A46     	 mov r2,r3
 12196 003a FB68     	 ldr r3,[r7,#12]
 12197 003c 9A42     	 cmp r2,r3
 12198 003e 02D1     	 bne .L769
 12199              	 .loc 1 6337 0 is_stmt 0 discriminator 1
 12200 0040 7B68     	 ldr r3,[r7,#4]
 12201 0042 9B68     	 ldr r3,[r3,#8]
 12202 0044 01E0     	 b .L771
 12203              	.L769:
6338:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return EOF;
 12204              	 .loc 1 6338 0 is_stmt 1
 12205 0046 4FF0FF33 	 mov r3,#-1
 12206              	.L771:
6339:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 12207              	 .loc 1 6339 0 discriminator 1
 12208 004a 1846     	 mov r0,r3
 12209 004c 1437     	 adds r7,r7,#20
 12210              	.LCFI361:
 12211              	 .cfi_def_cfa_offset 12
 12212 004e BD46     	 mov sp,r7
 12213              	.LCFI362:
 12214              	 .cfi_def_cfa_register 13
 12215              	 
 12216 0050 90BD     	 pop {r4,r7,pc}
 12217              	 .cfi_endproc
 12218              	.LFE68:
 12220 0052 00BF     	 .section .text.putc_init,"ax",%progbits
 12221              	 .align 2
 12222              	 .thumb
 12223              	 .thumb_func
 12225              	putc_init:
 12226              	.LFB69:
6340:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6341:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6342:../Dave/Generated/FATFS/ff_Src/ff.c **** static
6343:../Dave/Generated/FATFS/ff_Src/ff.c **** void putc_init (		/* Initialize write buffer */
6344:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff* pb,
6345:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp
6346:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6347:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 12227              	 .loc 1 6347 0
 12228              	 .cfi_startproc
 12229              	 
 12230              	 
 12231 0000 80B5     	 push {r7,lr}
 12232              	.LCFI363:
 12233              	 .cfi_def_cfa_offset 8
 12234              	 .cfi_offset 7,-8
 12235              	 .cfi_offset 14,-4
 12236 0002 82B0     	 sub sp,sp,#8
 12237              	.LCFI364:
 12238              	 .cfi_def_cfa_offset 16
 12239 0004 00AF     	 add r7,sp,#0
 12240              	.LCFI365:
 12241              	 .cfi_def_cfa_register 7
 12242 0006 7860     	 str r0,[r7,#4]
 12243 0008 3960     	 str r1,[r7]
6348:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(pb, 0, sizeof (putbuff));
 12244              	 .loc 1 6348 0
 12245 000a 7868     	 ldr r0,[r7,#4]
 12246 000c 0021     	 movs r1,#0
 12247 000e 4C22     	 movs r2,#76
 12248 0010 FFF7FEFF 	 bl mem_set
6349:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->fp = fp;
 12249              	 .loc 1 6349 0
 12250 0014 7B68     	 ldr r3,[r7,#4]
 12251 0016 3A68     	 ldr r2,[r7]
 12252 0018 1A60     	 str r2,[r3]
6350:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 12253              	 .loc 1 6350 0
 12254 001a 0837     	 adds r7,r7,#8
 12255              	.LCFI366:
 12256              	 .cfi_def_cfa_offset 8
 12257 001c BD46     	 mov sp,r7
 12258              	.LCFI367:
 12259              	 .cfi_def_cfa_register 13
 12260              	 
 12261 001e 80BD     	 pop {r7,pc}
 12262              	 .cfi_endproc
 12263              	.LFE69:
 12265              	 .section .text.f_putc,"ax",%progbits
 12266              	 .align 2
 12267              	 .global f_putc
 12268              	 .thumb
 12269              	 .thumb_func
 12271              	f_putc:
 12272              	.LFB70:
6351:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6352:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6353:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6354:../Dave/Generated/FATFS/ff_Src/ff.c **** int f_putc (
6355:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c,	/* A character to be output */
6356:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
6357:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6358:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 12273              	 .loc 1 6358 0
 12274              	 .cfi_startproc
 12275              	 
 12276              	 
 12277 0000 80B5     	 push {r7,lr}
 12278              	.LCFI368:
 12279              	 .cfi_def_cfa_offset 8
 12280              	 .cfi_offset 7,-8
 12281              	 .cfi_offset 14,-4
 12282 0002 96B0     	 sub sp,sp,#88
 12283              	.LCFI369:
 12284              	 .cfi_def_cfa_offset 96
 12285 0004 00AF     	 add r7,sp,#0
 12286              	.LCFI370:
 12287              	 .cfi_def_cfa_register 7
 12288 0006 0346     	 mov r3,r0
 12289 0008 3960     	 str r1,[r7]
 12290 000a FB71     	 strb r3,[r7,#7]
6359:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff pb;
6360:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6361:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6362:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_init(&pb, fp);
 12291              	 .loc 1 6362 0
 12292 000c 07F10C03 	 add r3,r7,#12
 12293 0010 1846     	 mov r0,r3
 12294 0012 3968     	 ldr r1,[r7]
 12295 0014 FFF7FEFF 	 bl putc_init
6363:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_bfd(&pb, c);	/* Put the character */
 12296              	 .loc 1 6363 0
 12297 0018 07F10C02 	 add r2,r7,#12
 12298 001c FB79     	 ldrb r3,[r7,#7]
 12299 001e 1046     	 mov r0,r2
 12300 0020 1946     	 mov r1,r3
 12301 0022 FFF7FEFF 	 bl putc_bfd
6364:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return putc_flush(&pb);
 12302              	 .loc 1 6364 0
 12303 0026 07F10C03 	 add r3,r7,#12
 12304 002a 1846     	 mov r0,r3
 12305 002c FFF7FEFF 	 bl putc_flush
 12306 0030 0346     	 mov r3,r0
6365:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 12307              	 .loc 1 6365 0
 12308 0032 1846     	 mov r0,r3
 12309 0034 5837     	 adds r7,r7,#88
 12310              	.LCFI371:
 12311              	 .cfi_def_cfa_offset 8
 12312 0036 BD46     	 mov sp,r7
 12313              	.LCFI372:
 12314              	 .cfi_def_cfa_register 13
 12315              	 
 12316 0038 80BD     	 pop {r7,pc}
 12317              	 .cfi_endproc
 12318              	.LFE70:
 12320 003a 00BF     	 .section .text.f_puts,"ax",%progbits
 12321              	 .align 2
 12322              	 .global f_puts
 12323              	 .thumb
 12324              	 .thumb_func
 12326              	f_puts:
 12327              	.LFB71:
6366:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6367:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6368:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6369:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6370:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6371:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Put a String to the File                                              */
6372:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6373:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6374:../Dave/Generated/FATFS/ff_Src/ff.c **** int f_puts (
6375:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
6376:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp				/* Pointer to the file object */
6377:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6378:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 12328              	 .loc 1 6378 0
 12329              	 .cfi_startproc
 12330              	 
 12331              	 
 12332 0000 80B5     	 push {r7,lr}
 12333              	.LCFI373:
 12334              	 .cfi_def_cfa_offset 8
 12335              	 .cfi_offset 7,-8
 12336              	 .cfi_offset 14,-4
 12337 0002 96B0     	 sub sp,sp,#88
 12338              	.LCFI374:
 12339              	 .cfi_def_cfa_offset 96
 12340 0004 00AF     	 add r7,sp,#0
 12341              	.LCFI375:
 12342              	 .cfi_def_cfa_register 7
 12343 0006 7860     	 str r0,[r7,#4]
 12344 0008 3960     	 str r1,[r7]
6379:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff pb;
6380:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6381:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6382:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_init(&pb, fp);
 12345              	 .loc 1 6382 0
 12346 000a 07F10C03 	 add r3,r7,#12
 12347 000e 1846     	 mov r0,r3
 12348 0010 3968     	 ldr r1,[r7]
 12349 0012 FFF7FEFF 	 bl putc_init
6383:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 12350              	 .loc 1 6383 0
 12351 0016 09E0     	 b .L776
 12352              	.L777:
 12353              	 .loc 1 6383 0 is_stmt 0 discriminator 2
 12354 0018 7B68     	 ldr r3,[r7,#4]
 12355 001a 5A1C     	 adds r2,r3,#1
 12356 001c 7A60     	 str r2,[r7,#4]
 12357 001e 1B78     	 ldrb r3,[r3]
 12358 0020 07F10C02 	 add r2,r7,#12
 12359 0024 1046     	 mov r0,r2
 12360 0026 1946     	 mov r1,r3
 12361 0028 FFF7FEFF 	 bl putc_bfd
 12362              	.L776:
 12363              	 .loc 1 6383 0 discriminator 1
 12364 002c 7B68     	 ldr r3,[r7,#4]
 12365 002e 1B78     	 ldrb r3,[r3]
 12366 0030 002B     	 cmp r3,#0
 12367 0032 F1D1     	 bne .L777
6384:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return putc_flush(&pb);
 12368              	 .loc 1 6384 0 is_stmt 1
 12369 0034 07F10C03 	 add r3,r7,#12
 12370 0038 1846     	 mov r0,r3
 12371 003a FFF7FEFF 	 bl putc_flush
 12372 003e 0346     	 mov r3,r0
6385:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 12373              	 .loc 1 6385 0
 12374 0040 1846     	 mov r0,r3
 12375 0042 5837     	 adds r7,r7,#88
 12376              	.LCFI376:
 12377              	 .cfi_def_cfa_offset 8
 12378 0044 BD46     	 mov sp,r7
 12379              	.LCFI377:
 12380              	 .cfi_def_cfa_register 13
 12381              	 
 12382 0046 80BD     	 pop {r7,pc}
 12383              	 .cfi_endproc
 12384              	.LFE71:
 12386              	 .section .text.f_printf,"ax",%progbits
 12387              	 .align 2
 12388              	 .global f_printf
 12389              	 .thumb
 12390              	 .thumb_func
 12392              	f_printf:
 12393              	.LFB72:
6386:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6387:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6388:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6389:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6390:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6391:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Put a Formatted String to the File                                    */
6392:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6393:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6394:../Dave/Generated/FATFS/ff_Src/ff.c **** int f_printf (
6395:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
6396:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
6397:../Dave/Generated/FATFS/ff_Src/ff.c **** 	...					/* Optional arguments... */
6398:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6399:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 12394              	 .loc 1 6399 0
 12395              	 .cfi_startproc
 12396              	 
 12397              	 
 12398 0000 0EB4     	 push {r1,r2,r3}
 12399              	.LCFI378:
 12400              	 .cfi_def_cfa_offset 12
 12401              	 .cfi_offset 1,-12
 12402              	 .cfi_offset 2,-8
 12403              	 .cfi_offset 3,-4
 12404 0002 80B5     	 push {r7,lr}
 12405              	.LCFI379:
 12406              	 .cfi_def_cfa_offset 20
 12407              	 .cfi_offset 7,-20
 12408              	 .cfi_offset 14,-16
 12409 0004 A7B0     	 sub sp,sp,#156
 12410              	.LCFI380:
 12411              	 .cfi_def_cfa_offset 176
 12412 0006 00AF     	 add r7,sp,#0
 12413              	.LCFI381:
 12414              	 .cfi_def_cfa_register 7
 12415 0008 7860     	 str r0,[r7,#4]
6400:../Dave/Generated/FATFS/ff_Src/ff.c **** 	va_list arp;
6401:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff pb;
6402:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE f, r;
6403:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, j, w;
6404:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD v;
6405:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c, d, str[32], *p;
6406:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6407:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6408:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_init(&pb, fp);
 12416              	 .loc 1 6408 0
 12417 000a 07F12C03 	 add r3,r7,#44
 12418 000e 1846     	 mov r0,r3
 12419 0010 7968     	 ldr r1,[r7,#4]
 12420 0012 FFF7FEFF 	 bl putc_init
6409:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6410:../Dave/Generated/FATFS/ff_Src/ff.c **** 	va_start(arp, fmt);
 12421              	 .loc 1 6410 0
 12422 0016 07F1A803 	 add r3,r7,#168
 12423 001a BB67     	 str r3,[r7,#120]
 12424              	.L830:
6411:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6412:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
6413:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = *fmt++;
 12425              	 .loc 1 6413 0
 12426 001c D7F8A430 	 ldr r3,[r7,#164]
 12427 0020 5A1C     	 adds r2,r3,#1
 12428 0022 C7F8A420 	 str r2,[r7,#164]
 12429 0026 1B78     	 ldrb r3,[r3]
 12430 0028 87F88330 	 strb r3,[r7,#131]
6414:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 0) break;			/* End of string */
 12431              	 .loc 1 6414 0
 12432 002c 97F88330 	 ldrb r3,[r7,#131]
 12433 0030 002B     	 cmp r3,#0
 12434 0032 00D1     	 bne .L780
 12435 0034 07E2     	 b .L781
 12436              	.L780:
6415:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c != '%') {				/* Non escape character */
 12437              	 .loc 1 6415 0
 12438 0036 97F88330 	 ldrb r3,[r7,#131]
 12439 003a 252B     	 cmp r3,#37
 12440 003c 08D0     	 beq .L782
6416:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, c);
 12441              	 .loc 1 6416 0
 12442 003e 07F12C02 	 add r2,r7,#44
 12443 0042 97F88330 	 ldrb r3,[r7,#131]
 12444 0046 1046     	 mov r0,r2
 12445 0048 1946     	 mov r1,r3
 12446 004a FFF7FEFF 	 bl putc_bfd
6417:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 12447              	 .loc 1 6417 0
 12448 004e F9E1     	 b .L783
 12449              	.L782:
6418:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6419:../Dave/Generated/FATFS/ff_Src/ff.c **** 		w = f = 0;
 12450              	 .loc 1 6419 0
 12451 0050 0023     	 movs r3,#0
 12452 0052 87F89730 	 strb r3,[r7,#151]
 12453 0056 0023     	 movs r3,#0
 12454 0058 C7F88830 	 str r3,[r7,#136]
6420:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = *fmt++;
 12455              	 .loc 1 6420 0
 12456 005c D7F8A430 	 ldr r3,[r7,#164]
 12457 0060 5A1C     	 adds r2,r3,#1
 12458 0062 C7F8A420 	 str r2,[r7,#164]
 12459 0066 1B78     	 ldrb r3,[r3]
 12460 0068 87F88330 	 strb r3,[r7,#131]
6421:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 12461              	 .loc 1 6421 0
 12462 006c 97F88330 	 ldrb r3,[r7,#131]
 12463 0070 302B     	 cmp r3,#48
 12464 0072 0BD1     	 bne .L784
6422:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f = 1; c = *fmt++;
 12465              	 .loc 1 6422 0
 12466 0074 0123     	 movs r3,#1
 12467 0076 87F89730 	 strb r3,[r7,#151]
 12468 007a D7F8A430 	 ldr r3,[r7,#164]
 12469 007e 5A1C     	 adds r2,r3,#1
 12470 0080 C7F8A420 	 str r2,[r7,#164]
 12471 0084 1B78     	 ldrb r3,[r3]
 12472 0086 87F88330 	 strb r3,[r7,#131]
 12473 008a 0EE0     	 b .L785
 12474              	.L784:
6423:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6424:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 12475              	 .loc 1 6424 0
 12476 008c 97F88330 	 ldrb r3,[r7,#131]
 12477 0090 2D2B     	 cmp r3,#45
 12478 0092 0AD1     	 bne .L785
6425:../Dave/Generated/FATFS/ff_Src/ff.c **** 				f = 2; c = *fmt++;
 12479              	 .loc 1 6425 0
 12480 0094 0223     	 movs r3,#2
 12481 0096 87F89730 	 strb r3,[r7,#151]
 12482 009a D7F8A430 	 ldr r3,[r7,#164]
 12483 009e 5A1C     	 adds r2,r3,#1
 12484 00a0 C7F8A420 	 str r2,[r7,#164]
 12485 00a4 1B78     	 ldrb r3,[r3]
 12486 00a6 87F88330 	 strb r3,[r7,#131]
 12487              	.L785:
6426:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6427:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6428:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '*') {				/* Minimum width by argument */
 12488              	 .loc 1 6428 0
 12489 00aa 97F88330 	 ldrb r3,[r7,#131]
 12490 00ae 2A2B     	 cmp r3,#42
 12491 00b0 0ED1     	 bne .L786
6429:../Dave/Generated/FATFS/ff_Src/ff.c **** 			w = va_arg(arp, int);
 12492              	 .loc 1 6429 0
 12493 00b2 BB6F     	 ldr r3,[r7,#120]
 12494 00b4 1A1D     	 adds r2,r3,#4
 12495 00b6 BA67     	 str r2,[r7,#120]
 12496 00b8 1B68     	 ldr r3,[r3]
 12497 00ba C7F88830 	 str r3,[r7,#136]
6430:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = *fmt++;
 12498              	 .loc 1 6430 0
 12499 00be D7F8A430 	 ldr r3,[r7,#164]
 12500 00c2 5A1C     	 adds r2,r3,#1
 12501 00c4 C7F8A420 	 str r2,[r7,#164]
 12502 00c8 1B78     	 ldrb r3,[r3]
 12503 00ca 87F88330 	 strb r3,[r7,#131]
 12504 00ce 1DE0     	 b .L787
 12505              	.L786:
6431:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6432:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (IsDigit(c)) {	/* Minimum width */
 12506              	 .loc 1 6432 0
 12507 00d0 14E0     	 b .L788
 12508              	.L789:
6433:../Dave/Generated/FATFS/ff_Src/ff.c **** 				w = w * 10 + c - '0';
 12509              	 .loc 1 6433 0
 12510 00d2 D7F88820 	 ldr r2,[r7,#136]
 12511 00d6 1346     	 mov r3,r2
 12512 00d8 9B00     	 lsls r3,r3,#2
 12513 00da 1344     	 add r3,r3,r2
 12514 00dc 5B00     	 lsls r3,r3,#1
 12515 00de 1A46     	 mov r2,r3
 12516 00e0 97F88330 	 ldrb r3,[r7,#131]
 12517 00e4 1344     	 add r3,r3,r2
 12518 00e6 303B     	 subs r3,r3,#48
 12519 00e8 C7F88830 	 str r3,[r7,#136]
6434:../Dave/Generated/FATFS/ff_Src/ff.c **** 				c = *fmt++;
 12520              	 .loc 1 6434 0
 12521 00ec D7F8A430 	 ldr r3,[r7,#164]
 12522 00f0 5A1C     	 adds r2,r3,#1
 12523 00f2 C7F8A420 	 str r2,[r7,#164]
 12524 00f6 1B78     	 ldrb r3,[r3]
 12525 00f8 87F88330 	 strb r3,[r7,#131]
 12526              	.L788:
6432:../Dave/Generated/FATFS/ff_Src/ff.c **** 				w = w * 10 + c - '0';
 12527              	 .loc 1 6432 0
 12528 00fc 97F88330 	 ldrb r3,[r7,#131]
 12529 0100 2F2B     	 cmp r3,#47
 12530 0102 03D9     	 bls .L787
6432:../Dave/Generated/FATFS/ff_Src/ff.c **** 				w = w * 10 + c - '0';
 12531              	 .loc 1 6432 0 is_stmt 0 discriminator 1
 12532 0104 97F88330 	 ldrb r3,[r7,#131]
 12533 0108 392B     	 cmp r3,#57
 12534 010a E2D9     	 bls .L789
 12535              	.L787:
6435:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6436:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6437:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 'l' || c == 'L') {	/* Type prefix: Size is long int */
 12536              	 .loc 1 6437 0 is_stmt 1
 12537 010c 97F88330 	 ldrb r3,[r7,#131]
 12538 0110 6C2B     	 cmp r3,#108
 12539 0112 03D0     	 beq .L790
 12540              	 .loc 1 6437 0 is_stmt 0 discriminator 1
 12541 0114 97F88330 	 ldrb r3,[r7,#131]
 12542 0118 4C2B     	 cmp r3,#76
 12543 011a 0DD1     	 bne .L791
 12544              	.L790:
6438:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f |= 4; c = *fmt++;
 12545              	 .loc 1 6438 0 is_stmt 1
 12546 011c 97F89730 	 ldrb r3,[r7,#151]
 12547 0120 43F00403 	 orr r3,r3,#4
 12548 0124 87F89730 	 strb r3,[r7,#151]
 12549 0128 D7F8A430 	 ldr r3,[r7,#164]
 12550 012c 5A1C     	 adds r2,r3,#1
 12551 012e C7F8A420 	 str r2,[r7,#164]
 12552 0132 1B78     	 ldrb r3,[r3]
 12553 0134 87F88330 	 strb r3,[r7,#131]
 12554              	.L791:
6439:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6440:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 0) break;
 12555              	 .loc 1 6440 0
 12556 0138 97F88330 	 ldrb r3,[r7,#131]
 12557 013c 002B     	 cmp r3,#0
 12558 013e 00D1     	 bne .L792
 12559 0140 81E1     	 b .L781
 12560              	.L792:
6441:../Dave/Generated/FATFS/ff_Src/ff.c **** 		d = c;
 12561              	 .loc 1 6441 0
 12562 0142 97F88330 	 ldrb r3,[r7,#131]
 12563 0146 87F88230 	 strb r3,[r7,#130]
6442:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsLower(d)) d -= 0x20;
 12564              	 .loc 1 6442 0
 12565 014a 97F88230 	 ldrb r3,[r7,#130]
 12566 014e 602B     	 cmp r3,#96
 12567 0150 08D9     	 bls .L793
 12568              	 .loc 1 6442 0 is_stmt 0 discriminator 1
 12569 0152 97F88230 	 ldrb r3,[r7,#130]
 12570 0156 7A2B     	 cmp r3,#122
 12571 0158 04D8     	 bhi .L793
 12572              	 .loc 1 6442 0 discriminator 2
 12573 015a 97F88230 	 ldrb r3,[r7,#130]
 12574 015e 203B     	 subs r3,r3,#32
 12575 0160 87F88230 	 strb r3,[r7,#130]
 12576              	.L793:
6443:../Dave/Generated/FATFS/ff_Src/ff.c **** 		switch (d) {				/* Atgument type is... */
 12577              	 .loc 1 6443 0 is_stmt 1
 12578 0164 97F88230 	 ldrb r3,[r7,#130]
 12579 0168 423B     	 subs r3,r3,#66
 12580 016a 162B     	 cmp r3,#22
 12581 016c 00F29980 	 bhi .L794
 12582 0170 01A2     	 adr r2,.L796
 12583 0172 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 12584 0176 00BF     	 .p2align 2
 12585              	.L796:
 12586 0178 83020000 	 .word .L795+1
 12587 017c 6B020000 	 .word .L797+1
 12588 0180 93020000 	 .word .L798+1
 12589 0184 A3020000 	 .word .L794+1
 12590 0188 A3020000 	 .word .L794+1
 12591 018c A3020000 	 .word .L794+1
 12592 0190 A3020000 	 .word .L794+1
 12593 0194 A3020000 	 .word .L794+1
 12594 0198 A3020000 	 .word .L794+1
 12595 019c A3020000 	 .word .L794+1
 12596 01a0 A3020000 	 .word .L794+1
 12597 01a4 A3020000 	 .word .L794+1
 12598 01a8 A3020000 	 .word .L794+1
 12599 01ac 8B020000 	 .word .L799+1
 12600 01b0 A3020000 	 .word .L794+1
 12601 01b4 A3020000 	 .word .L794+1
 12602 01b8 A3020000 	 .word .L794+1
 12603 01bc D5010000 	 .word .L800+1
 12604 01c0 A3020000 	 .word .L794+1
 12605 01c4 93020000 	 .word .L798+1
 12606 01c8 A3020000 	 .word .L794+1
 12607 01cc A3020000 	 .word .L794+1
 12608 01d0 9B020000 	 .word .L801+1
 12609              	 .p2align 1
 12610              	.L800:
6444:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'S' :					/* String */
6445:../Dave/Generated/FATFS/ff_Src/ff.c **** 			p = va_arg(arp, TCHAR*);
 12611              	 .loc 1 6445 0
 12612 01d4 BB6F     	 ldr r3,[r7,#120]
 12613 01d6 1A1D     	 adds r2,r3,#4
 12614 01d8 BA67     	 str r2,[r7,#120]
 12615 01da 1B68     	 ldr r3,[r3]
 12616 01dc FB67     	 str r3,[r7,#124]
6446:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (j = 0; p[j]; j++) ;
 12617              	 .loc 1 6446 0
 12618 01de 0023     	 movs r3,#0
 12619 01e0 C7F88C30 	 str r3,[r7,#140]
 12620 01e4 04E0     	 b .L802
 12621              	.L803:
 12622              	 .loc 1 6446 0 is_stmt 0 discriminator 3
 12623 01e6 D7F88C30 	 ldr r3,[r7,#140]
 12624 01ea 0133     	 adds r3,r3,#1
 12625 01ec C7F88C30 	 str r3,[r7,#140]
 12626              	.L802:
 12627              	 .loc 1 6446 0 discriminator 1
 12628 01f0 FA6F     	 ldr r2,[r7,#124]
 12629 01f2 D7F88C30 	 ldr r3,[r7,#140]
 12630 01f6 1344     	 add r3,r3,r2
 12631 01f8 1B78     	 ldrb r3,[r3]
 12632 01fa 002B     	 cmp r3,#0
 12633 01fc F3D1     	 bne .L803
6447:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(f & 2)) {						/* Right padded */
 12634              	 .loc 1 6447 0 is_stmt 1
 12635 01fe 97F89730 	 ldrb r3,[r7,#151]
 12636 0202 03F00203 	 and r3,r3,#2
 12637 0206 002B     	 cmp r3,#0
 12638 0208 0FD1     	 bne .L804
6448:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ') ;
 12639              	 .loc 1 6448 0
 12640 020a 05E0     	 b .L805
 12641              	.L806:
 12642              	 .loc 1 6448 0 is_stmt 0 discriminator 2
 12643 020c 07F12C03 	 add r3,r7,#44
 12644 0210 1846     	 mov r0,r3
 12645 0212 2021     	 movs r1,#32
 12646 0214 FFF7FEFF 	 bl putc_bfd
 12647              	.L805:
 12648              	 .loc 1 6448 0 discriminator 1
 12649 0218 D7F88C30 	 ldr r3,[r7,#140]
 12650 021c 5A1C     	 adds r2,r3,#1
 12651 021e C7F88C20 	 str r2,[r7,#140]
 12652 0222 D7F88820 	 ldr r2,[r7,#136]
 12653 0226 9342     	 cmp r3,r2
 12654 0228 F0D3     	 bcc .L806
 12655              	.L804:
6449:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6450:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (*p) putc_bfd(&pb, *p++) ;		/* String body */
 12656              	 .loc 1 6450 0 is_stmt 1
 12657 022a 09E0     	 b .L807
 12658              	.L808:
 12659              	 .loc 1 6450 0 is_stmt 0 discriminator 2
 12660 022c FB6F     	 ldr r3,[r7,#124]
 12661 022e 5A1C     	 adds r2,r3,#1
 12662 0230 FA67     	 str r2,[r7,#124]
 12663 0232 1B78     	 ldrb r3,[r3]
 12664 0234 07F12C02 	 add r2,r7,#44
 12665 0238 1046     	 mov r0,r2
 12666 023a 1946     	 mov r1,r3
 12667 023c FFF7FEFF 	 bl putc_bfd
 12668              	.L807:
 12669              	 .loc 1 6450 0 discriminator 1
 12670 0240 FB6F     	 ldr r3,[r7,#124]
 12671 0242 1B78     	 ldrb r3,[r3]
 12672 0244 002B     	 cmp r3,#0
 12673 0246 F1D1     	 bne .L808
6451:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ') ;	/* Left padded */
 12674              	 .loc 1 6451 0 is_stmt 1
 12675 0248 05E0     	 b .L809
 12676              	.L810:
 12677              	 .loc 1 6451 0 is_stmt 0 discriminator 2
 12678 024a 07F12C03 	 add r3,r7,#44
 12679 024e 1846     	 mov r0,r3
 12680 0250 2021     	 movs r1,#32
 12681 0252 FFF7FEFF 	 bl putc_bfd
 12682              	.L809:
 12683              	 .loc 1 6451 0 discriminator 1
 12684 0256 D7F88C30 	 ldr r3,[r7,#140]
 12685 025a 5A1C     	 adds r2,r3,#1
 12686 025c C7F88C20 	 str r2,[r7,#140]
 12687 0260 D7F88820 	 ldr r2,[r7,#136]
 12688 0264 9342     	 cmp r3,r2
 12689 0266 F0D3     	 bcc .L810
6452:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 12690              	 .loc 1 6452 0 is_stmt 1
 12691 0268 ECE0     	 b .L783
 12692              	.L797:
6453:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6454:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'C' :					/* Character */
6455:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 12693              	 .loc 1 6455 0
 12694 026a BB6F     	 ldr r3,[r7,#120]
 12695 026c 1A1D     	 adds r2,r3,#4
 12696 026e BA67     	 str r2,[r7,#120]
 12697 0270 1B68     	 ldr r3,[r3]
 12698 0272 DBB2     	 uxtb r3,r3
 12699 0274 07F12C02 	 add r2,r7,#44
 12700 0278 1046     	 mov r0,r2
 12701 027a 1946     	 mov r1,r3
 12702 027c FFF7FEFF 	 bl putc_bfd
 12703 0280 E0E0     	 b .L783
 12704              	.L795:
6456:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6457:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'B' :					/* Unsigned binary */
6458:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 2; break;
 12705              	 .loc 1 6458 0
 12706 0282 0223     	 movs r3,#2
 12707 0284 87F89630 	 strb r3,[r7,#150]
 12708 0288 14E0     	 b .L811
 12709              	.L799:
6459:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6460:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'O' :					/* Unsigned octal */
6461:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 8; break;
 12710              	 .loc 1 6461 0
 12711 028a 0823     	 movs r3,#8
 12712 028c 87F89630 	 strb r3,[r7,#150]
 12713 0290 10E0     	 b .L811
 12714              	.L798:
6462:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6463:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'D' :					/* Signed decimal */
6464:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'U' :					/* Unsigned decimal */
6465:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 10; break;
 12715              	 .loc 1 6465 0
 12716 0292 0A23     	 movs r3,#10
 12717 0294 87F89630 	 strb r3,[r7,#150]
 12718 0298 0CE0     	 b .L811
 12719              	.L801:
6466:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6467:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'X' :					/* Unsigned hexdecimal */
6468:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 16; break;
 12720              	 .loc 1 6468 0
 12721 029a 1023     	 movs r3,#16
 12722 029c 87F89630 	 strb r3,[r7,#150]
 12723 02a0 08E0     	 b .L811
 12724              	.L794:
6469:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6470:../Dave/Generated/FATFS/ff_Src/ff.c **** 		default:					/* Unknown type (pass-through) */
6471:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, c); continue;
 12725              	 .loc 1 6471 0
 12726 02a2 07F12C02 	 add r2,r7,#44
 12727 02a6 97F88330 	 ldrb r3,[r7,#131]
 12728 02aa 1046     	 mov r0,r2
 12729 02ac 1946     	 mov r1,r3
 12730 02ae FFF7FEFF 	 bl putc_bfd
 12731 02b2 C7E0     	 b .L783
 12732              	.L811:
6472:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6473:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6474:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get an argument and put it in numeral */
6475:../Dave/Generated/FATFS/ff_Src/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 12733              	 .loc 1 6475 0
 12734 02b4 97F89730 	 ldrb r3,[r7,#151]
 12735 02b8 03F00403 	 and r3,r3,#4
 12736 02bc 002B     	 cmp r3,#0
 12737 02be 04D0     	 beq .L812
 12738              	 .loc 1 6475 0 is_stmt 0 discriminator 1
 12739 02c0 BB6F     	 ldr r3,[r7,#120]
 12740 02c2 1A1D     	 adds r2,r3,#4
 12741 02c4 BA67     	 str r2,[r7,#120]
 12742 02c6 1B68     	 ldr r3,[r3]
 12743 02c8 0CE0     	 b .L813
 12744              	.L812:
 12745              	 .loc 1 6475 0 discriminator 2
 12746 02ca 97F88230 	 ldrb r3,[r7,#130]
 12747 02ce 442B     	 cmp r3,#68
 12748 02d0 04D1     	 bne .L814
 12749              	 .loc 1 6475 0 discriminator 4
 12750 02d2 BB6F     	 ldr r3,[r7,#120]
 12751 02d4 1A1D     	 adds r2,r3,#4
 12752 02d6 BA67     	 str r2,[r7,#120]
 12753 02d8 1B68     	 ldr r3,[r3]
 12754 02da 03E0     	 b .L813
 12755              	.L814:
 12756              	 .loc 1 6475 0 discriminator 5
 12757 02dc BB6F     	 ldr r3,[r7,#120]
 12758 02de 1A1D     	 adds r2,r3,#4
 12759 02e0 BA67     	 str r2,[r7,#120]
 12760 02e2 1B68     	 ldr r3,[r3]
 12761              	.L813:
 12762              	 .loc 1 6475 0 discriminator 8
 12763 02e4 C7F88430 	 str r3,[r7,#132]
6476:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 12764              	 .loc 1 6476 0 is_stmt 1 discriminator 8
 12765 02e8 97F88230 	 ldrb r3,[r7,#130]
 12766 02ec 442B     	 cmp r3,#68
 12767 02ee 0ED1     	 bne .L816
 12768              	 .loc 1 6476 0 is_stmt 0 discriminator 1
 12769 02f0 D7F88430 	 ldr r3,[r7,#132]
 12770 02f4 002B     	 cmp r3,#0
 12771 02f6 0ADA     	 bge .L816
6477:../Dave/Generated/FATFS/ff_Src/ff.c **** 			v = 0 - v;
 12772              	 .loc 1 6477 0 is_stmt 1
 12773 02f8 D7F88430 	 ldr r3,[r7,#132]
 12774 02fc 5B42     	 negs r3,r3
 12775 02fe C7F88430 	 str r3,[r7,#132]
6478:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f |= 8;
 12776              	 .loc 1 6478 0
 12777 0302 97F89730 	 ldrb r3,[r7,#151]
 12778 0306 43F00803 	 orr r3,r3,#8
 12779 030a 87F89730 	 strb r3,[r7,#151]
 12780              	.L816:
6479:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6480:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = 0;
 12781              	 .loc 1 6480 0
 12782 030e 0023     	 movs r3,#0
 12783 0310 C7F89030 	 str r3,[r7,#144]
 12784              	.L821:
6481:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6482:../Dave/Generated/FATFS/ff_Src/ff.c **** 			d = (TCHAR)(v % r); v /= r;
 12785              	 .loc 1 6482 0
 12786 0314 97F89620 	 ldrb r2,[r7,#150]
 12787 0318 D7F88430 	 ldr r3,[r7,#132]
 12788 031c B3FBF2F1 	 udiv r1,r3,r2
 12789 0320 02FB01F2 	 mul r2,r2,r1
 12790 0324 9B1A     	 subs r3,r3,r2
 12791 0326 87F88230 	 strb r3,[r7,#130]
 12792 032a 97F89630 	 ldrb r3,[r7,#150]
 12793 032e D7F88420 	 ldr r2,[r7,#132]
 12794 0332 B2FBF3F3 	 udiv r3,r2,r3
 12795 0336 C7F88430 	 str r3,[r7,#132]
6483:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 12796              	 .loc 1 6483 0
 12797 033a 97F88230 	 ldrb r3,[r7,#130]
 12798 033e 092B     	 cmp r3,#9
 12799 0340 0BD9     	 bls .L817
 12800              	 .loc 1 6483 0 is_stmt 0 discriminator 1
 12801 0342 97F88330 	 ldrb r3,[r7,#131]
 12802 0346 782B     	 cmp r3,#120
 12803 0348 01D1     	 bne .L818
 12804              	 .loc 1 6483 0 discriminator 2
 12805 034a 2722     	 movs r2,#39
 12806 034c 00E0     	 b .L819
 12807              	.L818:
 12808              	 .loc 1 6483 0 discriminator 3
 12809 034e 0722     	 movs r2,#7
 12810              	.L819:
 12811              	 .loc 1 6483 0 discriminator 5
 12812 0350 97F88230 	 ldrb r3,[r7,#130]
 12813 0354 1344     	 add r3,r3,r2
 12814 0356 87F88230 	 strb r3,[r7,#130]
 12815              	.L817:
6484:../Dave/Generated/FATFS/ff_Src/ff.c **** 			str[i++] = d + '0';
 12816              	 .loc 1 6484 0 is_stmt 1
 12817 035a D7F89030 	 ldr r3,[r7,#144]
 12818 035e 5A1C     	 adds r2,r3,#1
 12819 0360 C7F89020 	 str r2,[r7,#144]
 12820 0364 97F88220 	 ldrb r2,[r7,#130]
 12821 0368 3032     	 adds r2,r2,#48
 12822 036a D2B2     	 uxtb r2,r2
 12823 036c 07F19801 	 add r1,r7,#152
 12824 0370 0B44     	 add r3,r3,r1
 12825 0372 03F88C2C 	 strb r2,[r3,#-140]
6485:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (v && i < sizeof str / sizeof *str);
 12826              	 .loc 1 6485 0
 12827 0376 D7F88430 	 ldr r3,[r7,#132]
 12828 037a 002B     	 cmp r3,#0
 12829 037c 03D0     	 beq .L820
 12830              	 .loc 1 6485 0 is_stmt 0 discriminator 1
 12831 037e D7F89030 	 ldr r3,[r7,#144]
 12832 0382 1F2B     	 cmp r3,#31
 12833 0384 C6D9     	 bls .L821
 12834              	.L820:
6486:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (f & 8) str[i++] = '-';
 12835              	 .loc 1 6486 0 is_stmt 1
 12836 0386 97F89730 	 ldrb r3,[r7,#151]
 12837 038a 03F00803 	 and r3,r3,#8
 12838 038e 002B     	 cmp r3,#0
 12839 0390 0AD0     	 beq .L822
 12840              	 .loc 1 6486 0 is_stmt 0 discriminator 1
 12841 0392 D7F89030 	 ldr r3,[r7,#144]
 12842 0396 5A1C     	 adds r2,r3,#1
 12843 0398 C7F89020 	 str r2,[r7,#144]
 12844 039c 07F19802 	 add r2,r7,#152
 12845 03a0 1344     	 add r3,r3,r2
 12846 03a2 2D22     	 movs r2,#45
 12847 03a4 03F88C2C 	 strb r2,[r3,#-140]
 12848              	.L822:
6487:../Dave/Generated/FATFS/ff_Src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 12849              	 .loc 1 6487 0 is_stmt 1
 12850 03a8 D7F89030 	 ldr r3,[r7,#144]
 12851 03ac C7F88C30 	 str r3,[r7,#140]
 12852 03b0 97F89730 	 ldrb r3,[r7,#151]
 12853 03b4 03F00103 	 and r3,r3,#1
 12854 03b8 002B     	 cmp r3,#0
 12855 03ba 01D0     	 beq .L823
 12856              	 .loc 1 6487 0 is_stmt 0 discriminator 1
 12857 03bc 3023     	 movs r3,#48
 12858 03be 00E0     	 b .L824
 12859              	.L823:
 12860              	 .loc 1 6487 0 discriminator 2
 12861 03c0 2023     	 movs r3,#32
 12862              	.L824:
 12863              	 .loc 1 6487 0 discriminator 4
 12864 03c2 87F88230 	 strb r3,[r7,#130]
6488:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(f & 2)) {
 12865              	 .loc 1 6488 0 is_stmt 1 discriminator 4
 12866 03c6 97F89730 	 ldrb r3,[r7,#151]
 12867 03ca 03F00203 	 and r3,r3,#2
 12868 03ce 002B     	 cmp r3,#0
 12869 03d0 11D1     	 bne .L825
6489:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (j++ < w) putc_bfd(&pb, d);	/* Right pad */
 12870              	 .loc 1 6489 0
 12871 03d2 07E0     	 b .L826
 12872              	.L827:
 12873              	 .loc 1 6489 0 is_stmt 0 discriminator 2
 12874 03d4 07F12C02 	 add r2,r7,#44
 12875 03d8 97F88230 	 ldrb r3,[r7,#130]
 12876 03dc 1046     	 mov r0,r2
 12877 03de 1946     	 mov r1,r3
 12878 03e0 FFF7FEFF 	 bl putc_bfd
 12879              	.L826:
 12880              	 .loc 1 6489 0 discriminator 1
 12881 03e4 D7F88C30 	 ldr r3,[r7,#140]
 12882 03e8 5A1C     	 adds r2,r3,#1
 12883 03ea C7F88C20 	 str r2,[r7,#140]
 12884 03ee D7F88820 	 ldr r2,[r7,#136]
 12885 03f2 9342     	 cmp r3,r2
 12886 03f4 EED3     	 bcc .L827
 12887              	.L825:
6490:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6491:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6492:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, str[--i]);			/* Number body */
 12888              	 .loc 1 6492 0 is_stmt 1 discriminator 1
 12889 03f6 D7F89030 	 ldr r3,[r7,#144]
 12890 03fa 013B     	 subs r3,r3,#1
 12891 03fc C7F89030 	 str r3,[r7,#144]
 12892 0400 07F10C02 	 add r2,r7,#12
 12893 0404 D7F89030 	 ldr r3,[r7,#144]
 12894 0408 1344     	 add r3,r3,r2
 12895 040a 1B78     	 ldrb r3,[r3]
 12896 040c 07F12C02 	 add r2,r7,#44
 12897 0410 1046     	 mov r0,r2
 12898 0412 1946     	 mov r1,r3
 12899 0414 FFF7FEFF 	 bl putc_bfd
6493:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (i);
 12900              	 .loc 1 6493 0 discriminator 1
 12901 0418 D7F89030 	 ldr r3,[r7,#144]
 12902 041c 002B     	 cmp r3,#0
 12903 041e EAD1     	 bne .L825
6494:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);		/* Left pad */
 12904              	 .loc 1 6494 0
 12905 0420 07E0     	 b .L828
 12906              	.L829:
 12907              	 .loc 1 6494 0 is_stmt 0 discriminator 2
 12908 0422 07F12C02 	 add r2,r7,#44
 12909 0426 97F88230 	 ldrb r3,[r7,#130]
 12910 042a 1046     	 mov r0,r2
 12911 042c 1946     	 mov r1,r3
 12912 042e FFF7FEFF 	 bl putc_bfd
 12913              	.L828:
 12914              	 .loc 1 6494 0 discriminator 1
 12915 0432 D7F88C30 	 ldr r3,[r7,#140]
 12916 0436 5A1C     	 adds r2,r3,#1
 12917 0438 C7F88C20 	 str r2,[r7,#140]
 12918 043c D7F88820 	 ldr r2,[r7,#136]
 12919 0440 9342     	 cmp r3,r2
 12920 0442 EED3     	 bcc .L829
 12921              	.L783:
6495:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 12922              	 .loc 1 6495 0 is_stmt 1
 12923 0444 EAE5     	 b .L830
 12924              	.L781:
6496:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6497:../Dave/Generated/FATFS/ff_Src/ff.c **** 	va_end(arp);
6498:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6499:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return putc_flush(&pb);
 12925              	 .loc 1 6499 0
 12926 0446 07F12C03 	 add r3,r7,#44
 12927 044a 1846     	 mov r0,r3
 12928 044c FFF7FEFF 	 bl putc_flush
 12929 0450 0346     	 mov r3,r0
6500:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 12930              	 .loc 1 6500 0
 12931 0452 1846     	 mov r0,r3
 12932 0454 9C37     	 adds r7,r7,#156
 12933              	.LCFI382:
 12934              	 .cfi_def_cfa_offset 20
 12935 0456 BD46     	 mov sp,r7
 12936              	.LCFI383:
 12937              	 .cfi_def_cfa_register 13
 12938              	 
 12939 0458 BDE88040 	 pop {r7,lr}
 12940              	.LCFI384:
 12941              	 .cfi_restore 14
 12942              	 .cfi_restore 7
 12943              	 .cfi_def_cfa_offset 12
 12944 045c 03B0     	 add sp,sp,#12
 12945              	.LCFI385:
 12946              	 .cfi_restore 3
 12947              	 .cfi_restore 2
 12948              	 .cfi_restore 1
 12949              	 .cfi_def_cfa_offset 0
 12950 045e 7047     	 bx lr
 12951              	 .cfi_endproc
 12952              	.LFE72:
 12954              	 .text
 12955              	.Letext0:
 12956              	 .file 2 "../Dave/Generated/FATFS/ff_Src/integer.h"
 12957              	 .file 3 "../Dave/Generated/FATFS/ff_Src/ff.h"
 12958              	 .file 4 "../Dave/Generated/FATFS/ff_Src/diskio.h"
 12959              	 .file 5 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stdarg.h"
 12960              	 .file 6 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
    {standard input}:20     .bss.FatFs:00000000 $d
    {standard input}:23     .bss.FatFs:00000000 FatFs
    {standard input}:26     .bss.Fsid:00000000 $d
    {standard input}:29     .bss.Fsid:00000000 Fsid
    {standard input}:34     .bss.CurrVol:00000000 CurrVol
    {standard input}:35     .bss.CurrVol:00000000 $d
    {standard input}:37     .bss.Files:00000000 $d
    {standard input}:40     .bss.Files:00000000 Files
    {standard input}:43     .rodata.LfnOfs:00000000 $d
    {standard input}:46     .rodata.LfnOfs:00000000 LfnOfs
    {standard input}:61     .bss.LfnBuf:00000000 $d
    {standard input}:64     .bss.LfnBuf:00000000 LfnBuf
    {standard input}:67     .rodata.ExCvt:00000000 $d
    {standard input}:70     .rodata.ExCvt:00000000 ExCvt
    {standard input}:200    .text.ld_word:00000000 $t
    {standard input}:204    .text.ld_word:00000000 ld_word
    {standard input}:258    .text.ld_dword:00000000 $t
    {standard input}:262    .text.ld_dword:00000000 ld_dword
    {standard input}:328    .text.st_word:00000000 $t
    {standard input}:332    .text.st_word:00000000 st_word
    {standard input}:386    .text.st_dword:00000000 $t
    {standard input}:390    .text.st_dword:00000000 st_dword
    {standard input}:463    .text.mem_cpy:00000000 $t
    {standard input}:467    .text.mem_cpy:00000000 mem_cpy
    {standard input}:532    .text.mem_set:00000000 $t
    {standard input}:536    .text.mem_set:00000000 mem_set
    {standard input}:591    .text.mem_cmp:00000000 $t
    {standard input}:595    .text.mem_cmp:00000000 mem_cmp
    {standard input}:668    .text.chk_chr:00000000 $t
    {standard input}:672    .text.chk_chr:00000000 chk_chr
    {standard input}:733    .text.dbc_1st:00000000 $t
    {standard input}:737    .text.dbc_1st:00000000 dbc_1st
    {standard input}:785    .text.dbc_2nd:00000000 $t
    {standard input}:789    .text.dbc_2nd:00000000 dbc_2nd
    {standard input}:837    .text.tchar2uni:00000000 $t
    {standard input}:841    .text.tchar2uni:00000000 tchar2uni
    {standard input}:946    .text.put_utf:00000000 $t
    {standard input}:950    .text.put_utf:00000000 put_utf
    {standard input}:1045   .text.chk_lock:00000000 $t
    {standard input}:1049   .text.chk_lock:00000000 chk_lock
    {standard input}:1192   .text.chk_lock:000000b0 $d
    {standard input}:1197   .text.enq_lock:00000000 $t
    {standard input}:1201   .text.enq_lock:00000000 enq_lock
    {standard input}:1265   .text.enq_lock:00000040 $d
    {standard input}:1270   .text.inc_lock:00000000 $t
    {standard input}:1274   .text.inc_lock:00000000 inc_lock
    {standard input}:1476   .text.inc_lock:00000114 $d
    {standard input}:1481   .text.dec_lock:00000000 $t
    {standard input}:1485   .text.dec_lock:00000000 dec_lock
    {standard input}:1583   .text.dec_lock:00000074 $d
    {standard input}:1588   .text.clear_lock:00000000 $t
    {standard input}:1592   .text.clear_lock:00000000 clear_lock
    {standard input}:1657   .text.clear_lock:00000040 $d
    {standard input}:1662   .text.sync_window:00000000 $t
    {standard input}:1666   .text.sync_window:00000000 sync_window
    {standard input}:1761   .text.move_window:00000000 $t
    {standard input}:1765   .text.move_window:00000000 move_window
    {standard input}:1843   .text.sync_fs:00000000 $t
    {standard input}:1847   .text.sync_fs:00000000 sync_fs
    {standard input}:1977   .text.sync_fs:000000d4 $d
    {standard input}:1983   .text.clst2sect:00000000 $t
    {standard input}:1987   .text.clst2sect:00000000 clst2sect
    {standard input}:2049   .text.get_fat:00000000 $t
    {standard input}:2053   .text.get_fat:00000000 get_fat
    {standard input}:2256   .text.put_fat:00000000 $t
    {standard input}:2260   .text.put_fat:00000000 put_fat
    {standard input}:2530   .text.remove_chain:00000000 $t
    {standard input}:2534   .text.remove_chain:00000000 remove_chain
    {standard input}:2686   .text.create_chain:00000000 $t
    {standard input}:2690   .text.create_chain:00000000 create_chain
    {standard input}:2999   .text.dir_clear:00000000 $t
    {standard input}:3003   .text.dir_clear:00000000 dir_clear
    {standard input}:3112   .text.dir_sdi:00000000 $t
    {standard input}:3116   .text.dir_sdi:00000000 dir_sdi
    {standard input}:3299   .text.dir_next:00000000 $t
    {standard input}:3303   .text.dir_next:00000000 dir_next
    {standard input}:3513   .text.dir_alloc:00000000 $t
    {standard input}:3517   .text.dir_alloc:00000000 dir_alloc
    {standard input}:3632   .text.ld_clust:00000000 $t
    {standard input}:3636   .text.ld_clust:00000000 ld_clust
    {standard input}:3694   .text.st_clust:00000000 $t
    {standard input}:3698   .text.st_clust:00000000 st_clust
    {standard input}:3754   .text.cmp_lfn:00000000 $t
    {standard input}:3758   .text.cmp_lfn:00000000 cmp_lfn
    {standard input}:3911   .text.cmp_lfn:000000d8 $d
    {standard input}:3916   .text.pick_lfn:00000000 $t
    {standard input}:3920   .text.pick_lfn:00000000 pick_lfn
    {standard input}:4062   .text.pick_lfn:000000c4 $d
    {standard input}:4067   .text.put_lfn:00000000 $t
    {standard input}:4071   .text.put_lfn:00000000 put_lfn
    {standard input}:4209   .text.put_lfn:000000c8 $d
    {standard input}:4214   .text.gen_numname:00000000 $t
    {standard input}:4218   .text.gen_numname:00000000 gen_numname
    {standard input}:4434   .text.sum_sfn:00000000 $t
    {standard input}:4438   .text.sum_sfn:00000000 sum_sfn
    {standard input}:4503   .text.dir_read:00000000 $t
    {standard input}:4507   .text.dir_read:00000000 dir_read
    {standard input}:4735   .text.dir_find:00000000 $t
    {standard input}:4739   .text.dir_find:00000000 dir_find
    {standard input}:4986   .text.dir_register:00000000 $t
    {standard input}:4990   .text.dir_register:00000000 dir_register
    {standard input}:5282   .text.dir_register:000001f0 $d
    {standard input}:5287   .text.dir_remove:00000000 $t
    {standard input}:5291   .text.dir_remove:00000000 dir_remove
    {standard input}:5407   .text.get_fileinfo:00000000 $t
    {standard input}:5411   .text.get_fileinfo:00000000 get_fileinfo
    {standard input}:5780   .rodata:00000000 $d
    {standard input}:5787   .text.create_name:00000000 $t
    {standard input}:5791   .text.create_name:00000000 create_name
    {standard input}:6288   .text.create_name:00000310 $d
    {standard input}:6292   .text.create_name:00000318 $t
    {standard input}:6449   .text.create_name:0000043c $d
    {standard input}:6454   .text.follow_path:00000000 $t
    {standard input}:6458   .text.follow_path:00000000 follow_path
    {standard input}:6655   .text.get_ldnumber:00000000 $t
    {standard input}:6659   .text.get_ldnumber:00000000 get_ldnumber
    {standard input}:6777   .text.get_ldnumber:0000008c $d
    {standard input}:6789   .text.check_fs:00000000 $t
    {standard input}:6793   .text.check_fs:00000000 check_fs
    {standard input}:6904   .text.check_fs:000000a0 $d
    {standard input}:6910   .text.find_volume:00000000 $t
    {standard input}:6914   .text.find_volume:00000000 find_volume
    {standard input}:7341   .text.find_volume:000002b8 $d
    {standard input}:7344   .text.find_volume:000002bc $t
    {standard input}:7611   .text.find_volume:00000484 $d
    {standard input}:7620   .text.validate:00000000 $t
    {standard input}:7624   .text.validate:00000000 validate
    {standard input}:7714   .text.f_mount:00000000 $t
    {standard input}:7719   .text.f_mount:00000000 f_mount
    {standard input}:7820   .text.f_mount:00000084 $d
    {standard input}:7825   .text.f_open:00000000 $t
    {standard input}:7830   .text.f_open:00000000 f_open
    {standard input}:8332   .text.f_read:00000000 $t
    {standard input}:8337   .text.f_read:00000000 f_read
    {standard input}:8726   .text.f_write:00000000 $t
    {standard input}:8731   .text.f_write:00000000 f_write
    {standard input}:9177   .text.f_sync:00000000 $t
    {standard input}:9182   .text.f_sync:00000000 f_sync
    {standard input}:9345   .text.f_close:00000000 $t
    {standard input}:9350   .text.f_close:00000000 f_close
    {standard input}:9421   .text.f_chdrive:00000000 $t
    {standard input}:9426   .text.f_chdrive:00000000 f_chdrive
    {standard input}:9478   .text.f_chdrive:00000030 $d
    {standard input}:9483   .text.f_chdir:00000000 $t
    {standard input}:9488   .text.f_chdir:00000000 f_chdir
    {standard input}:9591   .text.f_getcwd:00000000 $t
    {standard input}:9596   .text.f_getcwd:00000000 f_getcwd
    {standard input}:9894   .text.f_lseek:00000000 $t
    {standard input}:9899   .text.f_lseek:00000000 f_lseek
    {standard input}:10294  .text.f_opendir:00000000 $t
    {standard input}:10299  .text.f_opendir:00000000 f_opendir
    {standard input}:10463  .text.f_closedir:00000000 $t
    {standard input}:10468  .text.f_closedir:00000000 f_closedir
    {standard input}:10536  .text.f_readdir:00000000 $t
    {standard input}:10541  .text.f_readdir:00000000 f_readdir
    {standard input}:10636  .text.f_stat:00000000 $t
    {standard input}:10641  .text.f_stat:00000000 f_stat
    {standard input}:10722  .text.f_getfree:00000000 $t
    {standard input}:10727  .text.f_getfree:00000000 f_getfree
    {standard input}:10962  .text.f_truncate:00000000 $t
    {standard input}:10967  .text.f_truncate:00000000 f_truncate
    {standard input}:11174  .text.f_unlink:00000000 $t
    {standard input}:11179  .text.f_unlink:00000000 f_unlink
    {standard input}:11394  .text.f_mkdir:00000000 $t
    {standard input}:11399  .text.f_mkdir:00000000 f_mkdir
    {standard input}:11651  .text.f_rename:00000000 $t
    {standard input}:11656  .text.f_rename:00000000 f_rename
    {standard input}:11933  .text.f_gets:00000000 $t
    {standard input}:11938  .text.f_gets:00000000 f_gets
    {standard input}:12045  .text.putc_bfd:00000000 $t
    {standard input}:12049  .text.putc_bfd:00000000 putc_bfd
    {standard input}:12148  .text.putc_flush:00000000 $t
    {standard input}:12152  .text.putc_flush:00000000 putc_flush
    {standard input}:12221  .text.putc_init:00000000 $t
    {standard input}:12225  .text.putc_init:00000000 putc_init
    {standard input}:12266  .text.f_putc:00000000 $t
    {standard input}:12271  .text.f_putc:00000000 f_putc
    {standard input}:12321  .text.f_puts:00000000 $t
    {standard input}:12326  .text.f_puts:00000000 f_puts
    {standard input}:12387  .text.f_printf:00000000 $t
    {standard input}:12392  .text.f_printf:00000000 f_printf
    {standard input}:12586  .text.f_printf:00000178 $d
    {standard input}:12609  .text.f_printf:000001d4 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ff_oem2uni
ff_uni2oem
disk_write
disk_read
disk_ioctl
ff_wtoupper
disk_status
disk_initialize
get_fattime
