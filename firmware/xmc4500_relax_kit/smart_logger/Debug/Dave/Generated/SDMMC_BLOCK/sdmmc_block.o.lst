   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "sdmmc_block.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.SDMMC_BLOCK_GetAppVersion,"ax",%progbits
  20              	 .align 2
  21              	 .global SDMMC_BLOCK_GetAppVersion
  22              	 .thumb
  23              	 .thumb_func
  25              	SDMMC_BLOCK_GetAppVersion:
  26              	.LFB221:
  27              	 .file 1 "../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c"
   1:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
   2:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**
   3:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * @file sdmmc_block.c
   4:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * @date 2016-08-24
   5:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
   6:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * NOTE:
   7:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
   9:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * @cond
  10:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
  11:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * SDMMC_BLOCK v4.0.26 - The SDMMC_BLOCK APP is a generic SD/MMC card block device driver designed 
  12:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *                      with all relevant functionalities like writing or reading blocks of data fr
  13:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  14:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * Copyright (c) 2016-2018, Infineon Technologies AG
  15:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * All rights reserved.
  16:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  17:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  18:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * following conditions are met:
  19:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  20:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  21:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   disclaimer.
  22:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  23:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  24:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  25:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  26:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  27:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   products derived from this software without specific prior written permission.
  28:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  29:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  30:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  31:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  32:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  33:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  34:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  35:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  37:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  38:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * with Infineon Technologies AG (dave@infineon.com).
  39:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
  40:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  41:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * Change History
  42:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * --------------
  43:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  44:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * 2016-01-20:
  45:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - Initial version. <br>
  46:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  47:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * 2016-02-05:
  48:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - RTOS support added. <br>
  49:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - Bug fixes done.<br>
  50:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  51:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * 2016-02-08:
  52:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - Help Doc updated. <br>
  53:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - Bug fixes done.<br>
  54:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  55:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * 2016-04-05:
  56:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - Remove dead code <br>
  57:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - MISRA fixes <br>
  58:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  59:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * @endcond
  60:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  */
  61:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  62:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
  63:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * HEADER FILES
  64:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
  65:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  66:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #include "sdmmc_block.h"
  67:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  68:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
  69:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** # if SDMMC_BLOCK_RTOS_MODE_SELECT
  70:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #  include "sdmmc_block_private_sd_rtos.h"
  71:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #else
  72:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #  include "sdmmc_block_private_sd.h"
  73:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** # endif /* SDMMC_BLOCK_RTOS_MODE_SELECT */
  74:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif /* SDMMC_BLOCK_SD */
  75:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  76:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
  77:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** # if SDMMC_BLOCK_RTOS_MODE_SELECT
  78:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #  include "sdmmc_block_private_spi_rtos.h"
  79:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #else
  80:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #  include "sdmmc_block_private_spi.h"
  81:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** # endif /* SDMMC_BLOCK_RTOS_MODE_SELECT */
  82:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif /* SDMMC_BLOCK_SPI */
  83:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  84:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
  85:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * MACROS
  86:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
  87:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  88:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_LOCK                 (0x4U) /* Lock the card */
  89:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_UNLOCK               (0x0U) /* Unlock the card */
  90:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_SET_PASSWD           (0x1U) /* Set the password for the card */
  91:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_CLR_PASSWD           (0x2U) /* Clears the password */
  92:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_SET_PASSWD_AND_LOCK  (0x5U) /* Set the password and locks the card */
  93:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_FORCE_ERASE          (0x8U) /* Force erase the password data */
  94:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  95:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
  96:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * LOCAL DATA
  97:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
  98:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  99:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
 100:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * LOCAL ROUTINES
 101:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
 102:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 103:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** static SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_lFlushDiskWriteCache(SDMMC_BLOCK_t *obj);
 104:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 105:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
 106:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * API IMPLEMENTATION
 107:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
 108:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 109:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Retrieve the version of the SDMMC_BLOCK APP */
 110:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** DAVE_APP_VERSION_t SDMMC_BLOCK_GetAppVersion(void)
 111:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
  28              	 .loc 1 111 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 83B0     	 sub sp,sp,#12
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 16
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
 112:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   DAVE_APP_VERSION_t version;
 113:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 114:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   version.major = SDMMC_BLOCK_MAJOR_VERSION;
  43              	 .loc 1 114 0
  44 0006 0423     	 movs r3,#4
  45 0008 3B70     	 strb r3,[r7]
 115:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   version.minor = SDMMC_BLOCK_MINOR_VERSION;
  46              	 .loc 1 115 0
  47 000a 0023     	 movs r3,#0
  48 000c 7B70     	 strb r3,[r7,#1]
 116:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   version.patch = SDMMC_BLOCK_PATCH_VERSION;
  49              	 .loc 1 116 0
  50 000e 1A23     	 movs r3,#26
  51 0010 BB70     	 strb r3,[r7,#2]
 117:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 118:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return version;
  52              	 .loc 1 118 0
  53 0012 3B1D     	 adds r3,r7,#4
  54 0014 3A46     	 mov r2,r7
  55 0016 1268     	 ldr r2,[r2]
  56 0018 1146     	 mov r1,r2
  57 001a 1980     	 strh r1,[r3]
  58 001c 0233     	 adds r3,r3,#2
  59 001e 120C     	 lsrs r2,r2,#16
  60 0020 1A70     	 strb r2,[r3]
  61 0022 0023     	 movs r3,#0
  62 0024 3A79     	 ldrb r2,[r7,#4]
  63 0026 62F30703 	 bfi r3,r2,#0,#8
  64 002a 7A79     	 ldrb r2,[r7,#5]
  65 002c 62F30F23 	 bfi r3,r2,#8,#8
  66 0030 BA79     	 ldrb r2,[r7,#6]
  67 0032 62F31743 	 bfi r3,r2,#16,#8
 119:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
  68              	 .loc 1 119 0
  69 0036 1846     	 mov r0,r3
  70 0038 0C37     	 adds r7,r7,#12
  71              	.LCFI3:
  72              	 .cfi_def_cfa_offset 4
  73 003a BD46     	 mov sp,r7
  74              	.LCFI4:
  75              	 .cfi_def_cfa_register 13
  76              	 
  77 003c 5DF8047B 	 ldr r7,[sp],#4
  78              	.LCFI5:
  79              	 .cfi_restore 7
  80              	 .cfi_def_cfa_offset 0
  81 0040 7047     	 bx lr
  82              	 .cfi_endproc
  83              	.LFE221:
  85 0042 00BF     	 .section .text.SDMMC_BLOCK_Init,"ax",%progbits
  86              	 .align 2
  87              	 .global SDMMC_BLOCK_Init
  88              	 .thumb
  89              	 .thumb_func
  91              	SDMMC_BLOCK_Init:
  92              	.LFB222:
 120:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 121:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* SDMMC_BLOCK initialization function */
 122:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Init(SDMMC_BLOCK_t *const obj)
 123:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
  93              	 .loc 1 123 0
  94              	 .cfi_startproc
  95              	 
  96              	 
  97 0000 80B5     	 push {r7,lr}
  98              	.LCFI6:
  99              	 .cfi_def_cfa_offset 8
 100              	 .cfi_offset 7,-8
 101              	 .cfi_offset 14,-4
 102 0002 84B0     	 sub sp,sp,#16
 103              	.LCFI7:
 104              	 .cfi_def_cfa_offset 24
 105 0004 00AF     	 add r7,sp,#0
 106              	.LCFI8:
 107              	 .cfi_def_cfa_register 7
 108 0006 7860     	 str r0,[r7,#4]
 124:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 109              	 .loc 1 124 0
 110 0008 0023     	 movs r3,#0
 111 000a FB73     	 strb r3,[r7,#15]
 125:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 112              	 .loc 1 125 0
 113 000c 0023     	 movs r3,#0
 114 000e BB73     	 strb r3,[r7,#14]
 126:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 127:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_Init:Null obj is passed as input" , (obj != NULL))
 128:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 129:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (obj->init_flag == 1U)
 115              	 .loc 1 129 0
 116 0010 7B68     	 ldr r3,[r7,#4]
 117 0012 5B7B     	 ldrb r3,[r3,#13]
 118 0014 002B     	 cmp r3,#0
 119 0016 02D0     	 beq .L4
 130:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 131:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_STATUS_SUCCESS;
 120              	 .loc 1 131 0
 121 0018 0023     	 movs r3,#0
 122 001a FB73     	 strb r3,[r7,#15]
 123 001c 1BE0     	 b .L5
 124              	.L4:
 132:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 133:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   else
 134:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 135:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     /* Setup pins */
 136:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->init_pins != NULL)
 125              	 .loc 1 136 0
 126 001e 7B68     	 ldr r3,[r7,#4]
 127 0020 5B68     	 ldr r3,[r3,#4]
 128 0022 002B     	 cmp r3,#0
 129 0024 02D0     	 beq .L6
 137:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 138:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       obj->init_pins();
 130              	 .loc 1 138 0
 131 0026 7B68     	 ldr r3,[r7,#4]
 132 0028 5B68     	 ldr r3,[r3,#4]
 133 002a 9847     	 blx r3
 134              	.L6:
 139:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 140:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 141:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 142:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 143:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 144:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       mode_status = SDMMC_BLOCK_SPI_Init(obj);
 145:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 146:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 147:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 148:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 149:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 135              	 .loc 1 149 0
 136 002c 7B68     	 ldr r3,[r7,#4]
 137 002e 1B7B     	 ldrb r3,[r3,#12]
 138 0030 002B     	 cmp r3,#0
 139 0032 04D1     	 bne .L7
 150:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 151:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       mode_status = SDMMC_BLOCK_SD_Init(obj);
 140              	 .loc 1 151 0
 141 0034 7868     	 ldr r0,[r7,#4]
 142 0036 FFF7FEFF 	 bl SDMMC_BLOCK_SD_Init
 143 003a 0346     	 mov r3,r0
 144 003c BB73     	 strb r3,[r7,#14]
 145              	.L7:
 152:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 153:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 154:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 155:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (mode_status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 146              	 .loc 1 155 0
 147 003e BB7B     	 ldrb r3,[r7,#14]
 148 0040 002B     	 cmp r3,#0
 149 0042 05D0     	 beq .L8
 156:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 157:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_FAILURE;
 150              	 .loc 1 157 0
 151 0044 0123     	 movs r3,#1
 152 0046 FB73     	 strb r3,[r7,#15]
 158:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       obj->init_flag = 0U;
 153              	 .loc 1 158 0
 154 0048 7B68     	 ldr r3,[r7,#4]
 155 004a 0022     	 movs r2,#0
 156 004c 5A73     	 strb r2,[r3,#13]
 157 004e 02E0     	 b .L5
 158              	.L8:
 159:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 160:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     else
 161:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 162:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       obj->init_flag = 1U;
 159              	 .loc 1 162 0
 160 0050 7B68     	 ldr r3,[r7,#4]
 161 0052 0122     	 movs r2,#1
 162 0054 5A73     	 strb r2,[r3,#13]
 163              	.L5:
 163:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 164:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 165:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 166:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 164              	 .loc 1 166 0
 165 0056 FB7B     	 ldrb r3,[r7,#15]
 167:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 166              	 .loc 1 167 0
 167 0058 1846     	 mov r0,r3
 168 005a 1037     	 adds r7,r7,#16
 169              	.LCFI9:
 170              	 .cfi_def_cfa_offset 8
 171 005c BD46     	 mov sp,r7
 172              	.LCFI10:
 173              	 .cfi_def_cfa_register 13
 174              	 
 175 005e 80BD     	 pop {r7,pc}
 176              	 .cfi_endproc
 177              	.LFE222:
 179              	 .section .text.SDMMC_BLOCK_Initialize,"ax",%progbits
 180              	 .align 2
 181              	 .global SDMMC_BLOCK_Initialize
 182              	 .thumb
 183              	 .thumb_func
 185              	SDMMC_BLOCK_Initialize:
 186              	.LFB223:
 168:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 169:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Initialize the card identification process */
 170:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Initialize(SDMMC_BLOCK_t *const obj)
 171:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 187              	 .loc 1 171 0
 188              	 .cfi_startproc
 189              	 
 190              	 
 191 0000 80B5     	 push {r7,lr}
 192              	.LCFI11:
 193              	 .cfi_def_cfa_offset 8
 194              	 .cfi_offset 7,-8
 195              	 .cfi_offset 14,-4
 196 0002 84B0     	 sub sp,sp,#16
 197              	.LCFI12:
 198              	 .cfi_def_cfa_offset 24
 199 0004 00AF     	 add r7,sp,#0
 200              	.LCFI13:
 201              	 .cfi_def_cfa_register 7
 202 0006 7860     	 str r0,[r7,#4]
 172:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 203              	 .loc 1 172 0
 204 0008 0023     	 movs r3,#0
 205 000a FB73     	 strb r3,[r7,#15]
 173:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_FAILURE;
 206              	 .loc 1 173 0
 207 000c 0123     	 movs r3,#1
 208 000e BB73     	 strb r3,[r7,#14]
 174:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 175:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_Initialize:Null obj is passed as input" , (obj != NULL))
 176:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 177:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 178:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 179:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 180:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       mode_status = SDMMC_BLOCK_SPI_CardIdentificationProcess(obj);
 181:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 182:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 183:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 184:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 185:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 209              	 .loc 1 185 0
 210 0010 7B68     	 ldr r3,[r7,#4]
 211 0012 1B7B     	 ldrb r3,[r3,#12]
 212 0014 002B     	 cmp r3,#0
 213 0016 04D1     	 bne .L11
 186:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 187:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       mode_status = SDMMC_BLOCK_SD_CardIdentificationProcess(obj);
 214              	 .loc 1 187 0
 215 0018 7868     	 ldr r0,[r7,#4]
 216 001a FFF7FEFF 	 bl SDMMC_BLOCK_SD_CardIdentificationProcess
 217 001e 0346     	 mov r3,r0
 218 0020 FB73     	 strb r3,[r7,#15]
 219              	.L11:
 188:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 189:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 190:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 191:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (mode_status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 220              	 .loc 1 191 0
 221 0022 FB7B     	 ldrb r3,[r7,#15]
 222 0024 002B     	 cmp r3,#0
 223 0026 01D1     	 bne .L12
 192:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 193:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_SUCCESS;
 224              	 .loc 1 193 0
 225 0028 0023     	 movs r3,#0
 226 002a BB73     	 strb r3,[r7,#14]
 227              	.L12:
 194:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 195:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 196:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 228              	 .loc 1 196 0
 229 002c BB7B     	 ldrb r3,[r7,#14]
 197:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 230              	 .loc 1 197 0
 231 002e 1846     	 mov r0,r3
 232 0030 1037     	 adds r7,r7,#16
 233              	.LCFI14:
 234              	 .cfi_def_cfa_offset 8
 235 0032 BD46     	 mov sp,r7
 236              	.LCFI15:
 237              	 .cfi_def_cfa_register 13
 238              	 
 239 0034 80BD     	 pop {r7,pc}
 240              	 .cfi_endproc
 241              	.LFE223:
 243 0036 00BF     	 .section .text.SDMMC_BLOCK_ReadBlock,"ax",%progbits
 244              	 .align 2
 245              	 .global SDMMC_BLOCK_ReadBlock
 246              	 .thumb
 247              	 .thumb_func
 249              	SDMMC_BLOCK_ReadBlock:
 250              	.LFB224:
 198:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 199:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Read the specified number of sectors of data from the specified address */
 200:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_ReadBlock(SDMMC_BLOCK_t *const obj,
 201:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                            uint8_t* read_buf,
 202:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                            const uint32_t sector_number,
 203:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                            const uint8_t sector_count)
 204:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 251              	 .loc 1 204 0
 252              	 .cfi_startproc
 253              	 
 254              	 
 255 0000 80B5     	 push {r7,lr}
 256              	.LCFI16:
 257              	 .cfi_def_cfa_offset 8
 258              	 .cfi_offset 7,-8
 259              	 .cfi_offset 14,-4
 260 0002 86B0     	 sub sp,sp,#24
 261              	.LCFI17:
 262              	 .cfi_def_cfa_offset 32
 263 0004 00AF     	 add r7,sp,#0
 264              	.LCFI18:
 265              	 .cfi_def_cfa_register 7
 266 0006 F860     	 str r0,[r7,#12]
 267 0008 B960     	 str r1,[r7,#8]
 268 000a 7A60     	 str r2,[r7,#4]
 269 000c FB70     	 strb r3,[r7,#3]
 205:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 270              	 .loc 1 205 0
 271 000e 0023     	 movs r3,#0
 272 0010 FB75     	 strb r3,[r7,#23]
 206:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 207:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_ReadBlock:Null obj is passed as input" , (obj != NULL))
 208:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_ReadBlock:Read buffer address is invalid" , (read_buf != NULL))
 209:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_ReadBlock:Sector count to be read is zero" , (sector_count != 0U))
 210:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 211:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 212:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 213:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 214:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_SPI_ReadBlock(obj, read_buf, sector_number, (uint32_t)sector_count);
 215:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 216:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 217:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 218:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 219:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 273              	 .loc 1 219 0
 274 0012 FB68     	 ldr r3,[r7,#12]
 275 0014 1B7B     	 ldrb r3,[r3,#12]
 276 0016 002B     	 cmp r3,#0
 277 0018 07D1     	 bne .L15
 220:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 221:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_SD_ReadBlock(obj, read_buf, sector_number, sector_count);
 278              	 .loc 1 221 0
 279 001a FB78     	 ldrb r3,[r7,#3]
 280 001c F868     	 ldr r0,[r7,#12]
 281 001e B968     	 ldr r1,[r7,#8]
 282 0020 7A68     	 ldr r2,[r7,#4]
 283 0022 FFF7FEFF 	 bl SDMMC_BLOCK_SD_ReadBlock
 284 0026 0346     	 mov r3,r0
 285 0028 FB75     	 strb r3,[r7,#23]
 286              	.L15:
 222:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 223:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 224:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 225:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 287              	 .loc 1 225 0
 288 002a FB7D     	 ldrb r3,[r7,#23]
 226:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 289              	 .loc 1 226 0
 290 002c 1846     	 mov r0,r3
 291 002e 1837     	 adds r7,r7,#24
 292              	.LCFI19:
 293              	 .cfi_def_cfa_offset 8
 294 0030 BD46     	 mov sp,r7
 295              	.LCFI20:
 296              	 .cfi_def_cfa_register 13
 297              	 
 298 0032 80BD     	 pop {r7,pc}
 299              	 .cfi_endproc
 300              	.LFE224:
 302              	 .section .text.SDMMC_BLOCK_WriteBlock,"ax",%progbits
 303              	 .align 2
 304              	 .global SDMMC_BLOCK_WriteBlock
 305              	 .thumb
 306              	 .thumb_func
 308              	SDMMC_BLOCK_WriteBlock:
 309              	.LFB225:
 227:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 228:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Write the specified number of sectors of data from the specified address */
 229:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_WriteBlock(SDMMC_BLOCK_t *const obj,
 230:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                             uint8_t* write_buf,
 231:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                             const uint32_t sector_number,
 232:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                             const uint8_t sector_count)
 233:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 310              	 .loc 1 233 0
 311              	 .cfi_startproc
 312              	 
 313              	 
 314 0000 80B5     	 push {r7,lr}
 315              	.LCFI21:
 316              	 .cfi_def_cfa_offset 8
 317              	 .cfi_offset 7,-8
 318              	 .cfi_offset 14,-4
 319 0002 86B0     	 sub sp,sp,#24
 320              	.LCFI22:
 321              	 .cfi_def_cfa_offset 32
 322 0004 00AF     	 add r7,sp,#0
 323              	.LCFI23:
 324              	 .cfi_def_cfa_register 7
 325 0006 F860     	 str r0,[r7,#12]
 326 0008 B960     	 str r1,[r7,#8]
 327 000a 7A60     	 str r2,[r7,#4]
 328 000c FB70     	 strb r3,[r7,#3]
 234:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 329              	 .loc 1 234 0
 330 000e 0023     	 movs r3,#0
 331 0010 FB75     	 strb r3,[r7,#23]
 235:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 236:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_WriteBlock:Null obj is passed as input" , (obj != NULL))
 237:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_WriteBlock:Write buffer address is invalid" , (write_buf != NULL))
 238:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_WriteBlock:Sector count to be written is zero" , (sector_count != 0U))
 239:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 240:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 241:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 242:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 243:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_SPI_WriteBlock(obj, write_buf, sector_number, (uint32_t)sector_count);
 244:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 245:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 246:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 247:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 248:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 332              	 .loc 1 248 0
 333 0012 FB68     	 ldr r3,[r7,#12]
 334 0014 1B7B     	 ldrb r3,[r3,#12]
 335 0016 002B     	 cmp r3,#0
 336 0018 07D1     	 bne .L18
 249:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 250:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_SD_WriteBlock(obj, write_buf, sector_number, sector_count);
 337              	 .loc 1 250 0
 338 001a FB78     	 ldrb r3,[r7,#3]
 339 001c F868     	 ldr r0,[r7,#12]
 340 001e B968     	 ldr r1,[r7,#8]
 341 0020 7A68     	 ldr r2,[r7,#4]
 342 0022 FFF7FEFF 	 bl SDMMC_BLOCK_SD_WriteBlock
 343 0026 0346     	 mov r3,r0
 344 0028 FB75     	 strb r3,[r7,#23]
 345              	.L18:
 251:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 252:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 253:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 254:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 346              	 .loc 1 254 0
 347 002a FB7D     	 ldrb r3,[r7,#23]
 255:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 348              	 .loc 1 255 0
 349 002c 1846     	 mov r0,r3
 350 002e 1837     	 adds r7,r7,#24
 351              	.LCFI24:
 352              	 .cfi_def_cfa_offset 8
 353 0030 BD46     	 mov sp,r7
 354              	.LCFI25:
 355              	 .cfi_def_cfa_register 13
 356              	 
 357 0032 80BD     	 pop {r7,pc}
 358              	 .cfi_endproc
 359              	.LFE225:
 361              	 .section .text.SDMMC_BLOCK_GetStatus,"ax",%progbits
 362              	 .align 2
 363              	 .global SDMMC_BLOCK_GetStatus
 364              	 .thumb
 365              	 .thumb_func
 367              	SDMMC_BLOCK_GetStatus:
 368              	.LFB226:
 256:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 257:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Get the current status of the card */
 258:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** uint8_t SDMMC_BLOCK_GetStatus(SDMMC_BLOCK_t *const obj)
 259:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 369              	 .loc 1 259 0
 370              	 .cfi_startproc
 371              	 
 372              	 
 373 0000 80B5     	 push {r7,lr}
 374              	.LCFI26:
 375              	 .cfi_def_cfa_offset 8
 376              	 .cfi_offset 7,-8
 377              	 .cfi_offset 14,-4
 378 0002 84B0     	 sub sp,sp,#16
 379              	.LCFI27:
 380              	 .cfi_def_cfa_offset 24
 381 0004 00AF     	 add r7,sp,#0
 382              	.LCFI28:
 383              	 .cfi_def_cfa_register 7
 384 0006 7860     	 str r0,[r7,#4]
 260:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   uint8_t disk_status = 0U;
 385              	 .loc 1 260 0
 386 0008 0023     	 movs r3,#0
 387 000a FB73     	 strb r3,[r7,#15]
 261:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 262:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 263:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 264:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 265:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       disk_status = SDMMC_BLOCK_SPI_GetState(obj);
 266:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 267:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 268:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 269:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 270:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 388              	 .loc 1 270 0
 389 000c 7B68     	 ldr r3,[r7,#4]
 390 000e 1B7B     	 ldrb r3,[r3,#12]
 391 0010 002B     	 cmp r3,#0
 392 0012 04D1     	 bne .L21
 271:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 272:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       disk_status = SDMMC_BLOCK_SD_GetState(obj);
 393              	 .loc 1 272 0
 394 0014 7868     	 ldr r0,[r7,#4]
 395 0016 FFF7FEFF 	 bl SDMMC_BLOCK_SD_GetState
 396 001a 0346     	 mov r3,r0
 397 001c FB73     	 strb r3,[r7,#15]
 398              	.L21:
 273:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 274:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 275:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 276:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return disk_status;
 399              	 .loc 1 276 0
 400 001e FB7B     	 ldrb r3,[r7,#15]
 277:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 401              	 .loc 1 277 0
 402 0020 1846     	 mov r0,r3
 403 0022 1037     	 adds r7,r7,#16
 404              	.LCFI29:
 405              	 .cfi_def_cfa_offset 8
 406 0024 BD46     	 mov sp,r7
 407              	.LCFI30:
 408              	 .cfi_def_cfa_register 13
 409              	 
 410 0026 80BD     	 pop {r7,pc}
 411              	 .cfi_endproc
 412              	.LFE226:
 414              	 .section .text.SDMMC_BLOCK_Ioctl,"ax",%progbits
 415              	 .align 2
 416              	 .global SDMMC_BLOCK_Ioctl
 417              	 .thumb
 418              	 .thumb_func
 420              	SDMMC_BLOCK_Ioctl:
 421              	.LFB227:
 278:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 279:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* I/O control */
 280:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Ioctl(SDMMC_BLOCK_t *const obj, const uint8_t command, void *buffe
 281:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 422              	 .loc 1 281 0
 423              	 .cfi_startproc
 424              	 
 425              	 
 426 0000 90B5     	 push {r4,r7,lr}
 427              	.LCFI31:
 428              	 .cfi_def_cfa_offset 12
 429              	 .cfi_offset 4,-12
 430              	 .cfi_offset 7,-8
 431              	 .cfi_offset 14,-4
 432 0002 91B0     	 sub sp,sp,#68
 433              	.LCFI32:
 434              	 .cfi_def_cfa_offset 80
 435 0004 00AF     	 add r7,sp,#0
 436              	.LCFI33:
 437              	 .cfi_def_cfa_register 7
 438 0006 F860     	 str r0,[r7,#12]
 439 0008 0B46     	 mov r3,r1
 440 000a 7A60     	 str r2,[r7,#4]
 441 000c FB72     	 strb r3,[r7,#11]
 282:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 442              	 .loc 1 282 0
 443 000e 0023     	 movs r3,#0
 444 0010 87F83F30 	 strb r3,[r7,#63]
 283:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 445              	 .loc 1 283 0
 446 0014 0023     	 movs r3,#0
 447 0016 87F83E30 	 strb r3,[r7,#62]
 284:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   uint8_t card_status;
 285:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   bool valid_command = true;
 448              	 .loc 1 285 0
 449 001a 0123     	 movs r3,#1
 450 001c 87F83D30 	 strb r3,[r7,#61]
 286:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_ERASE_ADDRESS_t *erase_ptr;
 287:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_LOCK_STRUCTURE_t lock = {0U};
 451              	 .loc 1 287 0
 452 0020 07F11003 	 add r3,r7,#16
 453 0024 0022     	 movs r2,#0
 454 0026 1A60     	 str r2,[r3]
 455 0028 0433     	 adds r3,r3,#4
 456 002a 0022     	 movs r2,#0
 457 002c 1A60     	 str r2,[r3]
 458 002e 0433     	 adds r3,r3,#4
 459 0030 0022     	 movs r2,#0
 460 0032 1A60     	 str r2,[r3]
 461 0034 0433     	 adds r3,r3,#4
 462 0036 0022     	 movs r2,#0
 463 0038 1A60     	 str r2,[r3]
 464 003a 0433     	 adds r3,r3,#4
 465 003c 0022     	 movs r2,#0
 466 003e 1A60     	 str r2,[r3]
 467 0040 0433     	 adds r3,r3,#4
 468 0042 0022     	 movs r2,#0
 469 0044 1A60     	 str r2,[r3]
 470 0046 0433     	 adds r3,r3,#4
 471 0048 0022     	 movs r2,#0
 472 004a 1A60     	 str r2,[r3]
 473 004c 0433     	 adds r3,r3,#4
 474 004e 0022     	 movs r2,#0
 475 0050 1A60     	 str r2,[r3]
 476 0052 0433     	 adds r3,r3,#4
 477 0054 0022     	 movs r2,#0
 478 0056 1A80     	 strh r2,[r3]
 479 0058 0233     	 adds r3,r3,#2
 288:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   const SDMMC_BLOCK_PASSWORD_t *password;
 289:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 290:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_WriteBlock:Null obj is passed as input" , (obj != NULL))
 291:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 292:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   /* If card is not initialized or inserted */
 293:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if ((obj->card_state & (uint8_t)SDMMC_BLOCK_CARD_STATE_NOT_INITIALIZED) == (uint8_t)0)
 480              	 .loc 1 293 0
 481 005a FB68     	 ldr r3,[r7,#12]
 482 005c 1B7A     	 ldrb r3,[r3,#8]
 483 005e 03F00103 	 and r3,r3,#1
 484 0062 002B     	 cmp r3,#0
 485 0064 1ED1     	 bne .L24
 294:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 295:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     card_status = SDMMC_BLOCK_GetStatus(obj);
 486              	 .loc 1 295 0
 487 0066 F868     	 ldr r0,[r7,#12]
 488 0068 FFF7FEFF 	 bl SDMMC_BLOCK_GetStatus
 489 006c 0346     	 mov r3,r0
 490 006e 87F83C30 	 strb r3,[r7,#60]
 296:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 297:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if ((card_status & (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED) != 0U)
 491              	 .loc 1 297 0
 492 0072 97F83C30 	 ldrb r3,[r7,#60]
 493 0076 03F00803 	 and r3,r3,#8
 494 007a 002B     	 cmp r3,#0
 495 007c 18D0     	 beq .L27
 298:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 299:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_LOCKED;
 496              	 .loc 1 299 0
 497 007e 0523     	 movs r3,#5
 498 0080 87F83F30 	 strb r3,[r7,#63]
 300:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       if ((command == (uint8_t)SDMMC_BLOCK_CTRL_SYNC) ||
 499              	 .loc 1 300 0
 500 0084 FB7A     	 ldrb r3,[r7,#11]
 501 0086 002B     	 cmp r3,#0
 502 0088 08D0     	 beq .L26
 503              	 .loc 1 300 0 is_stmt 0 discriminator 1
 504 008a FB7A     	 ldrb r3,[r7,#11]
 505 008c 0D2B     	 cmp r3,#13
 506 008e 05D0     	 beq .L26
 301:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           (command == (uint8_t)SDMMC_BLOCK_MMC_GET_OCR) ||
 507              	 .loc 1 301 0 is_stmt 1
 508 0090 FB7A     	 ldrb r3,[r7,#11]
 509 0092 0E2B     	 cmp r3,#14
 510 0094 02D0     	 beq .L26
 302:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           (command == (uint8_t)SDMMC_BLOCK_MMC_GET_SDSTAT) ||
 511              	 .loc 1 302 0
 512 0096 FB7A     	 ldrb r3,[r7,#11]
 513 0098 042B     	 cmp r3,#4
 514 009a 09D1     	 bne .L27
 515              	.L26:
 303:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           (command == (uint8_t)SDMMC_BLOCK_CTRL_TRIM))
 304:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       {
 305:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         valid_command = false;
 516              	 .loc 1 305 0
 517 009c 0023     	 movs r3,#0
 518 009e 87F83D30 	 strb r3,[r7,#61]
 519 00a2 05E0     	 b .L27
 520              	.L24:
 306:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       }
 307:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 308:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 309:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   else
 310:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 311:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     valid_command = false;
 521              	 .loc 1 311 0
 522 00a4 0023     	 movs r3,#0
 523 00a6 87F83D30 	 strb r3,[r7,#61]
 312:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_STATUS_NOTRDY;
 524              	 .loc 1 312 0
 525 00aa 0323     	 movs r3,#3
 526 00ac 87F83F30 	 strb r3,[r7,#63]
 527              	.L27:
 313:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 314:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 315:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (valid_command == true)
 528              	 .loc 1 315 0
 529 00b0 97F83D30 	 ldrb r3,[r7,#61]
 530 00b4 002B     	 cmp r3,#0
 531 00b6 00F04082 	 beq .L28
 316:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 317:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     /* Switch to the respective IOCTL command */
 318:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     switch (command)
 532              	 .loc 1 318 0
 533 00ba FB7A     	 ldrb r3,[r7,#11]
 534 00bc 252B     	 cmp r3,#37
 535 00be 00F21982 	 bhi .L29
 536 00c2 01A2     	 adr r2,.L31
 537 00c4 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 538              	 .p2align 2
 539              	.L31:
 540 00c8 61010000 	 .word .L30+1
 541 00cc 89010000 	 .word .L32+1
 542 00d0 6F010000 	 .word .L33+1
 543 00d4 CB010000 	 .word .L34+1
 544 00d8 A3010000 	 .word .L35+1
 545 00dc F5040000 	 .word .L29+1
 546 00e0 F5040000 	 .word .L29+1
 547 00e4 DD040000 	 .word .L36+1
 548 00e8 F5040000 	 .word .L29+1
 549 00ec F5040000 	 .word .L29+1
 550 00f0 E5010000 	 .word .L37+1
 551 00f4 FF010000 	 .word .L38+1
 552 00f8 19020000 	 .word .L39+1
 553 00fc 33020000 	 .word .L40+1
 554 0100 4D020000 	 .word .L41+1
 555 0104 F5040000 	 .word .L29+1
 556 0108 F5040000 	 .word .L29+1
 557 010c F5040000 	 .word .L29+1
 558 0110 F5040000 	 .word .L29+1
 559 0114 F5040000 	 .word .L29+1
 560 0118 F5040000 	 .word .L29+1
 561 011c F5040000 	 .word .L29+1
 562 0120 F5040000 	 .word .L29+1
 563 0124 F5040000 	 .word .L29+1
 564 0128 F5040000 	 .word .L29+1
 565 012c F5040000 	 .word .L29+1
 566 0130 F5040000 	 .word .L29+1
 567 0134 F5040000 	 .word .L29+1
 568 0138 F5040000 	 .word .L29+1
 569 013c F5040000 	 .word .L29+1
 570 0140 F5040000 	 .word .L29+1
 571 0144 67020000 	 .word .L42+1
 572 0148 BF020000 	 .word .L43+1
 573 014c 17030000 	 .word .L44+1
 574 0150 AF030000 	 .word .L45+1
 575 0154 07040000 	 .word .L46+1
 576 0158 9F040000 	 .word .L47+1
 577 015c B9040000 	 .word .L48+1
 578              	 .p2align 1
 579              	.L30:
 319:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 320:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 321:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Control sync
 322:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 323:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_CTRL_SYNC:
 324:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         status = SDMMC_BLOCK_lFlushDiskWriteCache(obj);
 580              	 .loc 1 324 0
 581 0160 F868     	 ldr r0,[r7,#12]
 582 0162 FFF7FEFF 	 bl SDMMC_BLOCK_lFlushDiskWriteCache
 583 0166 0346     	 mov r3,r0
 584 0168 87F83F30 	 strb r3,[r7,#63]
 325:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 585              	 .loc 1 325 0
 586 016c C6E1     	 b .L49
 587              	.L33:
 326:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 327:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 328:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get sector size
 329:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 330:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_GET_SECTOR_SIZE:
 331:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 332:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 333:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 334:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetSectorSize(obj, buffer);
 335:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 336:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 337:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 338:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 339:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 588              	 .loc 1 339 0
 589 016e FB68     	 ldr r3,[r7,#12]
 590 0170 1B7B     	 ldrb r3,[r3,#12]
 591 0172 002B     	 cmp r3,#0
 592 0174 07D1     	 bne .L50
 340:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 341:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetSectorSize(obj, buffer);
 593              	 .loc 1 341 0
 594 0176 F868     	 ldr r0,[r7,#12]
 595 0178 7968     	 ldr r1,[r7,#4]
 596 017a FFF7FEFF 	 bl SDMMC_BLOCK_SD_GetSectorSize
 597 017e 0346     	 mov r3,r0
 598 0180 87F83E30 	 strb r3,[r7,#62]
 342:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 343:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 344:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 345:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       break;
 599              	 .loc 1 345 0
 600 0184 BAE1     	 b .L49
 601              	.L50:
 602 0186 B9E1     	 b .L49
 603              	.L32:
 346:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 347:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 348:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get sector count
 349:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 350:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_GET_SECTOR_COUNT:
 351:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 352:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 353:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 354:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetSectorCount(obj, buffer);
 355:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 356:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 357:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 358:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 359:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 604              	 .loc 1 359 0
 605 0188 FB68     	 ldr r3,[r7,#12]
 606 018a 1B7B     	 ldrb r3,[r3,#12]
 607 018c 002B     	 cmp r3,#0
 608 018e 07D1     	 bne .L51
 360:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 361:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetSectorCount(obj, buffer);
 609              	 .loc 1 361 0
 610 0190 F868     	 ldr r0,[r7,#12]
 611 0192 7968     	 ldr r1,[r7,#4]
 612 0194 FFF7FEFF 	 bl SDMMC_BLOCK_SD_GetSectorCount
 613 0198 0346     	 mov r3,r0
 614 019a 87F83E30 	 strb r3,[r7,#62]
 362:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 363:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 364:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 615              	 .loc 1 364 0
 616 019e ADE1     	 b .L49
 617              	.L51:
 618 01a0 ACE1     	 b .L49
 619              	.L35:
 365:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 366:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 367:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Control trim. Erase the content in the specified sectors
 368:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 369:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_CTRL_TRIM:
 370:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         erase_ptr = (SDMMC_BLOCK_ERASE_ADDRESS_t *) buffer;
 620              	 .loc 1 370 0
 621 01a2 7B68     	 ldr r3,[r7,#4]
 622 01a4 BB63     	 str r3,[r7,#56]
 371:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 372:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 373:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 374:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_EraseBlock(obj, (erase_ptr->start_address), (erase_ptr->end
 375:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 376:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 377:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 378:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 379:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 623              	 .loc 1 379 0
 624 01a6 FB68     	 ldr r3,[r7,#12]
 625 01a8 1B7B     	 ldrb r3,[r3,#12]
 626 01aa 002B     	 cmp r3,#0
 627 01ac 0CD1     	 bne .L52
 380:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 381:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_EraseBlock(obj, (erase_ptr->start_address), (erase_ptr->end_
 628              	 .loc 1 381 0
 629 01ae BB6B     	 ldr r3,[r7,#56]
 630 01b0 1A68     	 ldr r2,[r3]
 631 01b2 BB6B     	 ldr r3,[r7,#56]
 632 01b4 5B68     	 ldr r3,[r3,#4]
 633 01b6 F868     	 ldr r0,[r7,#12]
 634 01b8 1146     	 mov r1,r2
 635 01ba 1A46     	 mov r2,r3
 636 01bc FFF7FEFF 	 bl SDMMC_BLOCK_SD_EraseBlock
 637 01c0 0346     	 mov r3,r0
 638 01c2 87F83E30 	 strb r3,[r7,#62]
 382:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 383:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 384:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 639              	 .loc 1 384 0
 640 01c6 99E1     	 b .L49
 641              	.L52:
 642 01c8 98E1     	 b .L49
 643              	.L34:
 385:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 386:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 387:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get block size
 388:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 389:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_GET_BLOCK_SIZE:
 390:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 391:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 392:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 393:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetBlockSize(obj, buffer);
 394:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 395:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 396:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 397:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 398:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 644              	 .loc 1 398 0
 645 01ca FB68     	 ldr r3,[r7,#12]
 646 01cc 1B7B     	 ldrb r3,[r3,#12]
 647 01ce 002B     	 cmp r3,#0
 648 01d0 07D1     	 bne .L53
 399:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 400:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetBlockSize(obj, buffer);
 649              	 .loc 1 400 0
 650 01d2 F868     	 ldr r0,[r7,#12]
 651 01d4 7968     	 ldr r1,[r7,#4]
 652 01d6 FFF7FEFF 	 bl SDMMC_BLOCK_SD_GetBlockSize
 653 01da 0346     	 mov r3,r0
 654 01dc 87F83E30 	 strb r3,[r7,#62]
 401:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 402:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 403:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 655              	 .loc 1 403 0
 656 01e0 8CE1     	 b .L49
 657              	.L53:
 658 01e2 8BE1     	 b .L49
 659              	.L37:
 404:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 405:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 406:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get the type of the card
 407:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 408:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_GET_TYPE:
 409:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 410:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 411:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 412:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetCardType(obj, buffer);
 413:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 414:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 415:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 416:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 417:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 660              	 .loc 1 417 0
 661 01e4 FB68     	 ldr r3,[r7,#12]
 662 01e6 1B7B     	 ldrb r3,[r3,#12]
 663 01e8 002B     	 cmp r3,#0
 664 01ea 07D1     	 bne .L54
 418:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 419:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetCardType(obj, buffer);
 665              	 .loc 1 419 0
 666 01ec F868     	 ldr r0,[r7,#12]
 667 01ee 7968     	 ldr r1,[r7,#4]
 668 01f0 FFF7FEFF 	 bl SDMMC_BLOCK_SD_GetCardType
 669 01f4 0346     	 mov r3,r0
 670 01f6 87F83E30 	 strb r3,[r7,#62]
 420:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 421:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 422:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 671              	 .loc 1 422 0
 672 01fa 7FE1     	 b .L49
 673              	.L54:
 674 01fc 7EE1     	 b .L49
 675              	.L38:
 423:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 424:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 425:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get CSD
 426:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 427:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_GET_CSD:
 428:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 429:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 430:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 431:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetCsd(obj, buffer);
 432:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 433:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 434:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 435:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 436:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 676              	 .loc 1 436 0
 677 01fe FB68     	 ldr r3,[r7,#12]
 678 0200 1B7B     	 ldrb r3,[r3,#12]
 679 0202 002B     	 cmp r3,#0
 680 0204 07D1     	 bne .L55
 437:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 438:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetCsd(obj, buffer);
 681              	 .loc 1 438 0
 682 0206 F868     	 ldr r0,[r7,#12]
 683 0208 7968     	 ldr r1,[r7,#4]
 684 020a FFF7FEFF 	 bl SDMMC_BLOCK_SD_GetCsd
 685 020e 0346     	 mov r3,r0
 686 0210 87F83E30 	 strb r3,[r7,#62]
 439:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 440:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 441:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 687              	 .loc 1 441 0
 688 0214 72E1     	 b .L49
 689              	.L55:
 690 0216 71E1     	 b .L49
 691              	.L39:
 442:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 443:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 444:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get CID
 445:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 446:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_GET_CID:
 447:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 448:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 449:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 450:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetCid(obj, buffer);
 451:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 452:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 453:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 454:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 455:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 692              	 .loc 1 455 0
 693 0218 FB68     	 ldr r3,[r7,#12]
 694 021a 1B7B     	 ldrb r3,[r3,#12]
 695 021c 002B     	 cmp r3,#0
 696 021e 07D1     	 bne .L56
 456:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 457:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetCid(obj, buffer);
 697              	 .loc 1 457 0
 698 0220 F868     	 ldr r0,[r7,#12]
 699 0222 7968     	 ldr r1,[r7,#4]
 700 0224 FFF7FEFF 	 bl SDMMC_BLOCK_SD_GetCid
 701 0228 0346     	 mov r3,r0
 702 022a 87F83E30 	 strb r3,[r7,#62]
 458:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 459:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 460:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 703              	 .loc 1 460 0
 704 022e 65E1     	 b .L49
 705              	.L56:
 706 0230 64E1     	 b .L49
 707              	.L40:
 461:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 462:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 463:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get OCR
 464:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 465:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_GET_OCR:
 466:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 467:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 468:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 469:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetOcr(obj, buffer);
 470:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 471:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 472:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 473:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 474:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 708              	 .loc 1 474 0
 709 0232 FB68     	 ldr r3,[r7,#12]
 710 0234 1B7B     	 ldrb r3,[r3,#12]
 711 0236 002B     	 cmp r3,#0
 712 0238 07D1     	 bne .L57
 475:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 476:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetOcr(obj, buffer);
 713              	 .loc 1 476 0
 714 023a F868     	 ldr r0,[r7,#12]
 715 023c 7968     	 ldr r1,[r7,#4]
 716 023e FFF7FEFF 	 bl SDMMC_BLOCK_SD_GetOcr
 717 0242 0346     	 mov r3,r0
 718 0244 87F83E30 	 strb r3,[r7,#62]
 477:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 478:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 479:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 719              	 .loc 1 479 0
 720 0248 58E1     	 b .L49
 721              	.L57:
 722 024a 57E1     	 b .L49
 723              	.L41:
 480:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 481:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 482:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get SD status
 483:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 484:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_GET_SDSTAT:
 485:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 486:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 487:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 488:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetSdStatus(obj, buffer);
 489:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 490:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 491:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 492:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 493:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 724              	 .loc 1 493 0
 725 024c FB68     	 ldr r3,[r7,#12]
 726 024e 1B7B     	 ldrb r3,[r3,#12]
 727 0250 002B     	 cmp r3,#0
 728 0252 07D1     	 bne .L58
 494:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 495:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetSdStatus(obj, buffer);
 729              	 .loc 1 495 0
 730 0254 F868     	 ldr r0,[r7,#12]
 731 0256 7968     	 ldr r1,[r7,#4]
 732 0258 FFF7FEFF 	 bl SDMMC_BLOCK_SD_GetSdStatus
 733 025c 0346     	 mov r3,r0
 734 025e 87F83E30 	 strb r3,[r7,#62]
 496:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 497:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 498:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 735              	 .loc 1 498 0
 736 0262 4BE1     	 b .L49
 737              	.L58:
 738 0264 4AE1     	 b .L49
 739              	.L42:
 499:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 500:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 501:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Lock card
 502:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 503:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_LOCK_CARD:
 504:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_LOCK;
 740              	 .loc 1 504 0
 741 0266 0423     	 movs r3,#4
 742 0268 3B74     	 strb r3,[r7,#16]
 505:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 743              	 .loc 1 505 0
 744 026a 7B68     	 ldr r3,[r7,#4]
 745 026c 7B63     	 str r3,[r7,#52]
 506:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 507:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         /* Check password length doesn't exceeds the permitted length */
 508:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH)
 746              	 .loc 1 508 0
 747 026e 7B6B     	 ldr r3,[r7,#52]
 748 0270 93F82030 	 ldrb r3,[r3,#32]
 749 0274 102B     	 cmp r3,#16
 750 0276 1DD8     	 bhi .L59
 509:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 510:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           lock.pwd_len = password->old_pwd_len;
 751              	 .loc 1 510 0
 752 0278 7B6B     	 ldr r3,[r7,#52]
 753 027a 93F82030 	 ldrb r3,[r3,#32]
 754 027e 7B74     	 strb r3,[r7,#17]
 511:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(lock.pwd_data, password->old_pwd, lock.pwd_len);
 755              	 .loc 1 511 0
 756 0280 7A6B     	 ldr r2,[r7,#52]
 757 0282 7B7C     	 ldrb r3,[r7,#17]
 758 0284 1C46     	 mov r4,r3
 759 0286 07F11003 	 add r3,r7,#16
 760 028a 0233     	 adds r3,r3,#2
 761 028c 1846     	 mov r0,r3
 762 028e 1146     	 mov r1,r2
 763 0290 2246     	 mov r2,r4
 764 0292 FFF7FEFF 	 bl memcpy
 512:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 513:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 514:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 515:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 516:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_L
 517:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 518:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 519:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 520:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 521:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 765              	 .loc 1 521 0
 766 0296 FB68     	 ldr r3,[r7,#12]
 767 0298 1B7B     	 ldrb r3,[r3,#12]
 768 029a 002B     	 cmp r3,#0
 769 029c 0ED1     	 bne .L61
 522:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 523:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_LO
 770              	 .loc 1 523 0
 771 029e 07F11003 	 add r3,r7,#16
 772 02a2 F868     	 ldr r0,[r7,#12]
 773 02a4 1946     	 mov r1,r3
 774 02a6 0122     	 movs r2,#1
 775 02a8 FFF7FEFF 	 bl SDMMC_BLOCK_SD_LockUnlockCard
 776 02ac 0346     	 mov r3,r0
 777 02ae 87F83E30 	 strb r3,[r7,#62]
 524:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 525:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 526:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 527:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         else
 528:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 529:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 530:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 531:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 778              	 .loc 1 531 0
 779 02b2 23E1     	 b .L49
 780              	.L59:
 529:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 781              	 .loc 1 529 0
 782 02b4 0A23     	 movs r3,#10
 783 02b6 87F83E30 	 strb r3,[r7,#62]
 784              	 .loc 1 531 0
 785 02ba 1FE1     	 b .L49
 786              	.L61:
 787              	 .loc 1 531 0 is_stmt 0 discriminator 1
 788 02bc 1EE1     	 b .L49
 789              	.L43:
 532:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 533:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 534:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Unlock card
 535:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 536:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_UNLOCK_CARD:
 537:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_UNLOCK;
 790              	 .loc 1 537 0 is_stmt 1
 791 02be 0023     	 movs r3,#0
 792 02c0 3B74     	 strb r3,[r7,#16]
 538:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 793              	 .loc 1 538 0
 794 02c2 7B68     	 ldr r3,[r7,#4]
 795 02c4 7B63     	 str r3,[r7,#52]
 539:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 540:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH)
 796              	 .loc 1 540 0
 797 02c6 7B6B     	 ldr r3,[r7,#52]
 798 02c8 93F82030 	 ldrb r3,[r3,#32]
 799 02cc 102B     	 cmp r3,#16
 800 02ce 1DD8     	 bhi .L62
 541:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 542:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           lock.pwd_len = password->old_pwd_len;
 801              	 .loc 1 542 0
 802 02d0 7B6B     	 ldr r3,[r7,#52]
 803 02d2 93F82030 	 ldrb r3,[r3,#32]
 804 02d6 7B74     	 strb r3,[r7,#17]
 543:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(lock.pwd_data, password->old_pwd, lock.pwd_len);
 805              	 .loc 1 543 0
 806 02d8 7A6B     	 ldr r2,[r7,#52]
 807 02da 7B7C     	 ldrb r3,[r7,#17]
 808 02dc 1C46     	 mov r4,r3
 809 02de 07F11003 	 add r3,r7,#16
 810 02e2 0233     	 adds r3,r3,#2
 811 02e4 1846     	 mov r0,r3
 812 02e6 1146     	 mov r1,r2
 813 02e8 2246     	 mov r2,r4
 814 02ea FFF7FEFF 	 bl memcpy
 544:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 545:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 546:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 547:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 548:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_U
 549:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 550:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 551:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 552:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 553:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 815              	 .loc 1 553 0
 816 02ee FB68     	 ldr r3,[r7,#12]
 817 02f0 1B7B     	 ldrb r3,[r3,#12]
 818 02f2 002B     	 cmp r3,#0
 819 02f4 0ED1     	 bne .L64
 554:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 555:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UN
 820              	 .loc 1 555 0
 821 02f6 07F11003 	 add r3,r7,#16
 822 02fa F868     	 ldr r0,[r7,#12]
 823 02fc 1946     	 mov r1,r3
 824 02fe 0022     	 movs r2,#0
 825 0300 FFF7FEFF 	 bl SDMMC_BLOCK_SD_LockUnlockCard
 826 0304 0346     	 mov r3,r0
 827 0306 87F83E30 	 strb r3,[r7,#62]
 556:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 557:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 558:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 559:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         else
 560:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 561:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 562:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 563:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 828              	 .loc 1 563 0
 829 030a F7E0     	 b .L49
 830              	.L62:
 561:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 831              	 .loc 1 561 0
 832 030c 0A23     	 movs r3,#10
 833 030e 87F83E30 	 strb r3,[r7,#62]
 834              	 .loc 1 563 0
 835 0312 F3E0     	 b .L49
 836              	.L64:
 837              	 .loc 1 563 0 is_stmt 0 discriminator 2
 838 0314 F2E0     	 b .L49
 839              	.L44:
 564:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 565:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 566:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Set card password
 567:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 568:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_SET_PASSWD:
 569:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_SET_PASSWD;
 840              	 .loc 1 569 0 is_stmt 1
 841 0316 0123     	 movs r3,#1
 842 0318 3B74     	 strb r3,[r7,#16]
 570:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 843              	 .loc 1 570 0
 844 031a 7B68     	 ldr r3,[r7,#4]
 845 031c 7B63     	 str r3,[r7,#52]
 571:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 572:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if ((password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH) &&
 846              	 .loc 1 572 0
 847 031e 7B6B     	 ldr r3,[r7,#52]
 848 0320 93F82030 	 ldrb r3,[r3,#32]
 849 0324 102B     	 cmp r3,#16
 850 0326 3DD8     	 bhi .L65
 573:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
 851              	 .loc 1 573 0 discriminator 1
 852 0328 7B6B     	 ldr r3,[r7,#52]
 853 032a 93F82130 	 ldrb r3,[r3,#33]
 572:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
 854              	 .loc 1 572 0 discriminator 1
 855 032e 102B     	 cmp r3,#16
 856 0330 38D8     	 bhi .L65
 574:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 575:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           lock.pwd_len = password->old_pwd_len + password->new_pwd_len;
 857              	 .loc 1 575 0
 858 0332 7B6B     	 ldr r3,[r7,#52]
 859 0334 93F82020 	 ldrb r2,[r3,#32]
 860 0338 7B6B     	 ldr r3,[r7,#52]
 861 033a 93F82130 	 ldrb r3,[r3,#33]
 862 033e 1344     	 add r3,r3,r2
 863 0340 DBB2     	 uxtb r3,r3
 864 0342 7B74     	 strb r3,[r7,#17]
 576:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(lock.pwd_data, password->old_pwd, password->old_pwd_len);
 865              	 .loc 1 576 0
 866 0344 7A6B     	 ldr r2,[r7,#52]
 867 0346 7B6B     	 ldr r3,[r7,#52]
 868 0348 93F82030 	 ldrb r3,[r3,#32]
 869 034c 1C46     	 mov r4,r3
 870 034e 07F11003 	 add r3,r7,#16
 871 0352 0233     	 adds r3,r3,#2
 872 0354 1846     	 mov r0,r3
 873 0356 1146     	 mov r1,r2
 874 0358 2246     	 mov r2,r4
 875 035a FFF7FEFF 	 bl memcpy
 577:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(&lock.pwd_data[password->old_pwd_len], password->new_pwd, password->new_pwd_len);
 876              	 .loc 1 577 0
 877 035e 7B6B     	 ldr r3,[r7,#52]
 878 0360 93F82030 	 ldrb r3,[r3,#32]
 879 0364 1A46     	 mov r2,r3
 880 0366 07F11003 	 add r3,r7,#16
 881 036a 1344     	 add r3,r3,r2
 882 036c 991C     	 adds r1,r3,#2
 883 036e 7B6B     	 ldr r3,[r7,#52]
 884 0370 03F11002 	 add r2,r3,#16
 885 0374 7B6B     	 ldr r3,[r7,#52]
 886 0376 93F82130 	 ldrb r3,[r3,#33]
 887 037a 0846     	 mov r0,r1
 888 037c 1146     	 mov r1,r2
 889 037e 1A46     	 mov r2,r3
 890 0380 FFF7FEFF 	 bl memcpy
 578:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 579:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     #ifdef SDMMC_BLOCK_SPI
 580:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 581:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 582:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_U
 583:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 584:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     #endif
 585:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 586:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     #ifdef SDMMC_BLOCK_SD
 587:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 891              	 .loc 1 587 0
 892 0384 FB68     	 ldr r3,[r7,#12]
 893 0386 1B7B     	 ldrb r3,[r3,#12]
 894 0388 002B     	 cmp r3,#0
 895 038a 0AD1     	 bne .L66
 588:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 589:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UN
 896              	 .loc 1 589 0
 897 038c 07F11003 	 add r3,r7,#16
 898 0390 F868     	 ldr r0,[r7,#12]
 899 0392 1946     	 mov r1,r3
 900 0394 0022     	 movs r2,#0
 901 0396 FFF7FEFF 	 bl SDMMC_BLOCK_SD_LockUnlockCard
 902 039a 0346     	 mov r3,r0
 903 039c 87F83E30 	 strb r3,[r7,#62]
 587:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 904              	 .loc 1 587 0
 905 03a0 04E0     	 b .L67
 906              	.L66:
 907 03a2 03E0     	 b .L67
 908              	.L65:
 590:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 591:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     #endif
 592:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 593:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         else
 594:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 595:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 909              	 .loc 1 595 0
 910 03a4 0A23     	 movs r3,#10
 911 03a6 87F83E30 	 strb r3,[r7,#62]
 596:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 597:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 912              	 .loc 1 597 0
 913 03aa A7E0     	 b .L49
 914              	.L67:
 915              	 .loc 1 597 0 is_stmt 0 discriminator 3
 916 03ac A6E0     	 b .L49
 917              	.L45:
 598:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 599:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 600:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Clear card password
 601:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 602:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_CLEAR_PASSWD:
 603:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_CLR_PASSWD;
 918              	 .loc 1 603 0 is_stmt 1
 919 03ae 0223     	 movs r3,#2
 920 03b0 3B74     	 strb r3,[r7,#16]
 604:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 921              	 .loc 1 604 0
 922 03b2 7B68     	 ldr r3,[r7,#4]
 923 03b4 7B63     	 str r3,[r7,#52]
 605:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH)
 924              	 .loc 1 605 0
 925 03b6 7B6B     	 ldr r3,[r7,#52]
 926 03b8 93F82030 	 ldrb r3,[r3,#32]
 927 03bc 102B     	 cmp r3,#16
 928 03be 1DD8     	 bhi .L68
 606:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 607:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           lock.pwd_len = password->old_pwd_len;
 929              	 .loc 1 607 0
 930 03c0 7B6B     	 ldr r3,[r7,#52]
 931 03c2 93F82030 	 ldrb r3,[r3,#32]
 932 03c6 7B74     	 strb r3,[r7,#17]
 608:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(lock.pwd_data, password->old_pwd, lock.pwd_len);
 933              	 .loc 1 608 0
 934 03c8 7A6B     	 ldr r2,[r7,#52]
 935 03ca 7B7C     	 ldrb r3,[r7,#17]
 936 03cc 1C46     	 mov r4,r3
 937 03ce 07F11003 	 add r3,r7,#16
 938 03d2 0233     	 adds r3,r3,#2
 939 03d4 1846     	 mov r0,r3
 940 03d6 1146     	 mov r1,r2
 941 03d8 2246     	 mov r2,r4
 942 03da FFF7FEFF 	 bl memcpy
 609:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 610:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 611:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 612:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 613:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_U
 614:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 615:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 616:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 617:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 618:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 943              	 .loc 1 618 0
 944 03de FB68     	 ldr r3,[r7,#12]
 945 03e0 1B7B     	 ldrb r3,[r3,#12]
 946 03e2 002B     	 cmp r3,#0
 947 03e4 0ED1     	 bne .L70
 619:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 620:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UN
 948              	 .loc 1 620 0
 949 03e6 07F11003 	 add r3,r7,#16
 950 03ea F868     	 ldr r0,[r7,#12]
 951 03ec 1946     	 mov r1,r3
 952 03ee 0022     	 movs r2,#0
 953 03f0 FFF7FEFF 	 bl SDMMC_BLOCK_SD_LockUnlockCard
 954 03f4 0346     	 mov r3,r0
 955 03f6 87F83E30 	 strb r3,[r7,#62]
 621:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 622:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 623:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 624:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         else
 625:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 626:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 627:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 628:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 956              	 .loc 1 628 0
 957 03fa 7FE0     	 b .L49
 958              	.L68:
 626:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 959              	 .loc 1 626 0
 960 03fc 0A23     	 movs r3,#10
 961 03fe 87F83E30 	 strb r3,[r7,#62]
 962              	 .loc 1 628 0
 963 0402 7BE0     	 b .L49
 964              	.L70:
 965              	 .loc 1 628 0 is_stmt 0 discriminator 4
 966 0404 7AE0     	 b .L49
 967              	.L46:
 629:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 630:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 631:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Set card lock
 632:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 633:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_SET_LOCK:
 634:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_SET_PASSWD_AND_LOCK;
 968              	 .loc 1 634 0 is_stmt 1
 969 0406 0523     	 movs r3,#5
 970 0408 3B74     	 strb r3,[r7,#16]
 635:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 971              	 .loc 1 635 0
 972 040a 7B68     	 ldr r3,[r7,#4]
 973 040c 7B63     	 str r3,[r7,#52]
 636:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 637:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if ((password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH) &&
 974              	 .loc 1 637 0
 975 040e 7B6B     	 ldr r3,[r7,#52]
 976 0410 93F82030 	 ldrb r3,[r3,#32]
 977 0414 102B     	 cmp r3,#16
 978 0416 3DD8     	 bhi .L71
 638:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
 979              	 .loc 1 638 0 discriminator 1
 980 0418 7B6B     	 ldr r3,[r7,#52]
 981 041a 93F82130 	 ldrb r3,[r3,#33]
 637:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
 982              	 .loc 1 637 0 discriminator 1
 983 041e 102B     	 cmp r3,#16
 984 0420 38D8     	 bhi .L71
 639:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 640:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           lock.pwd_len = password->old_pwd_len + password->new_pwd_len;
 985              	 .loc 1 640 0
 986 0422 7B6B     	 ldr r3,[r7,#52]
 987 0424 93F82020 	 ldrb r2,[r3,#32]
 988 0428 7B6B     	 ldr r3,[r7,#52]
 989 042a 93F82130 	 ldrb r3,[r3,#33]
 990 042e 1344     	 add r3,r3,r2
 991 0430 DBB2     	 uxtb r3,r3
 992 0432 7B74     	 strb r3,[r7,#17]
 641:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(lock.pwd_data, password->old_pwd, password->old_pwd_len);
 993              	 .loc 1 641 0
 994 0434 7A6B     	 ldr r2,[r7,#52]
 995 0436 7B6B     	 ldr r3,[r7,#52]
 996 0438 93F82030 	 ldrb r3,[r3,#32]
 997 043c 1C46     	 mov r4,r3
 998 043e 07F11003 	 add r3,r7,#16
 999 0442 0233     	 adds r3,r3,#2
 1000 0444 1846     	 mov r0,r3
 1001 0446 1146     	 mov r1,r2
 1002 0448 2246     	 mov r2,r4
 1003 044a FFF7FEFF 	 bl memcpy
 642:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(&lock.pwd_data[password->old_pwd_len], password->new_pwd, password->new_pwd_len);
 1004              	 .loc 1 642 0
 1005 044e 7B6B     	 ldr r3,[r7,#52]
 1006 0450 93F82030 	 ldrb r3,[r3,#32]
 1007 0454 1A46     	 mov r2,r3
 1008 0456 07F11003 	 add r3,r7,#16
 1009 045a 1344     	 add r3,r3,r2
 1010 045c 991C     	 adds r1,r3,#2
 1011 045e 7B6B     	 ldr r3,[r7,#52]
 1012 0460 03F11002 	 add r2,r3,#16
 1013 0464 7B6B     	 ldr r3,[r7,#52]
 1014 0466 93F82130 	 ldrb r3,[r3,#33]
 1015 046a 0846     	 mov r0,r1
 1016 046c 1146     	 mov r1,r2
 1017 046e 1A46     	 mov r2,r3
 1018 0470 FFF7FEFF 	 bl memcpy
 643:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 644:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 645:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 646:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 647:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_L
 648:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 649:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 650:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 651:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 652:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 1019              	 .loc 1 652 0
 1020 0474 FB68     	 ldr r3,[r7,#12]
 1021 0476 1B7B     	 ldrb r3,[r3,#12]
 1022 0478 002B     	 cmp r3,#0
 1023 047a 0AD1     	 bne .L72
 653:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 654:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_LO
 1024              	 .loc 1 654 0
 1025 047c 07F11003 	 add r3,r7,#16
 1026 0480 F868     	 ldr r0,[r7,#12]
 1027 0482 1946     	 mov r1,r3
 1028 0484 0122     	 movs r2,#1
 1029 0486 FFF7FEFF 	 bl SDMMC_BLOCK_SD_LockUnlockCard
 1030 048a 0346     	 mov r3,r0
 1031 048c 87F83E30 	 strb r3,[r7,#62]
 652:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 1032              	 .loc 1 652 0
 1033 0490 04E0     	 b .L73
 1034              	.L72:
 1035 0492 03E0     	 b .L73
 1036              	.L71:
 655:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 656:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 657:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 658:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         else
 659:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 660:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 1037              	 .loc 1 660 0
 1038 0494 0A23     	 movs r3,#10
 1039 0496 87F83E30 	 strb r3,[r7,#62]
 661:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 662:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1040              	 .loc 1 662 0
 1041 049a 2FE0     	 b .L49
 1042              	.L73:
 1043              	 .loc 1 662 0 is_stmt 0 discriminator 5
 1044 049c 2EE0     	 b .L49
 1045              	.L47:
 663:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 664:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 665:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Read lock status
 666:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 667:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_READ_LOCK_STATUS:
 668:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 669:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 670:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 671:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 672:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status =  SDMMC_BLOCK_SPI_GetLockStatus(obj, (SDMMC_BLOCK_CARD_LOCK_STATUS_t *)buffe
 673:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 674:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 675:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 676:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 677:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 1046              	 .loc 1 677 0 is_stmt 1
 1047 049e FB68     	 ldr r3,[r7,#12]
 1048 04a0 1B7B     	 ldrb r3,[r3,#12]
 1049 04a2 002B     	 cmp r3,#0
 1050 04a4 07D1     	 bne .L74
 678:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 679:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetLockStatus(obj, (SDMMC_BLOCK_CARD_LOCK_STATUS_t *)buffer)
 1051              	 .loc 1 679 0
 1052 04a6 F868     	 ldr r0,[r7,#12]
 1053 04a8 7968     	 ldr r1,[r7,#4]
 1054 04aa FFF7FEFF 	 bl SDMMC_BLOCK_SD_GetLockStatus
 1055 04ae 0346     	 mov r3,r0
 1056 04b0 87F83E30 	 strb r3,[r7,#62]
 680:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 681:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 682:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1057              	 .loc 1 682 0
 1058 04b4 22E0     	 b .L49
 1059              	.L74:
 1060 04b6 21E0     	 b .L49
 1061              	.L48:
 683:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 684:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 685:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Force card erase
 686:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 687:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_FORCE_ERASE:
 688:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_FORCE_ERASE;
 1062              	 .loc 1 688 0
 1063 04b8 0823     	 movs r3,#8
 1064 04ba 3B74     	 strb r3,[r7,#16]
 689:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 690:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 691:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 692:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNL
 693:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 694:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 695:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 696:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 697:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 1065              	 .loc 1 697 0
 1066 04bc FB68     	 ldr r3,[r7,#12]
 1067 04be 1B7B     	 ldrb r3,[r3,#12]
 1068 04c0 002B     	 cmp r3,#0
 1069 04c2 0AD1     	 bne .L75
 698:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 699:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLO
 1070              	 .loc 1 699 0
 1071 04c4 07F11003 	 add r3,r7,#16
 1072 04c8 F868     	 ldr r0,[r7,#12]
 1073 04ca 1946     	 mov r1,r3
 1074 04cc 0022     	 movs r2,#0
 1075 04ce FFF7FEFF 	 bl SDMMC_BLOCK_SD_LockUnlockCard
 1076 04d2 0346     	 mov r3,r0
 1077 04d4 87F83E30 	 strb r3,[r7,#62]
 700:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 701:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 702:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1078              	 .loc 1 702 0
 1079 04d8 10E0     	 b .L49
 1080              	.L75:
 1081 04da 0FE0     	 b .L49
 1082              	.L36:
 703:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 704:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 705:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Eject card
 706:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 707:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_CTRL_EJECT:
 708:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 709:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 710:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 711:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_EjectCard(obj);
 712:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 713:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 714:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 715:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 716:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 1083              	 .loc 1 716 0
 1084 04dc FB68     	 ldr r3,[r7,#12]
 1085 04de 1B7B     	 ldrb r3,[r3,#12]
 1086 04e0 002B     	 cmp r3,#0
 1087 04e2 06D1     	 bne .L76
 717:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 718:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_EjectCard(obj);
 1088              	 .loc 1 718 0
 1089 04e4 F868     	 ldr r0,[r7,#12]
 1090 04e6 FFF7FEFF 	 bl SDMMC_BLOCK_SD_EjectCard
 1091 04ea 0346     	 mov r3,r0
 1092 04ec 87F83E30 	 strb r3,[r7,#62]
 719:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 720:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 721:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1093              	 .loc 1 721 0
 1094 04f0 04E0     	 b .L49
 1095              	.L76:
 1096 04f2 03E0     	 b .L49
 1097              	.L29:
 722:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 723:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       default:
 724:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 1098              	 .loc 1 724 0
 1099 04f4 0A23     	 movs r3,#10
 1100 04f6 87F83E30 	 strb r3,[r7,#62]
 725:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1101              	 .loc 1 725 0
 1102 04fa 00BF     	 nop
 1103              	.L49:
 726:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 727:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 728:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (mode_status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 1104              	 .loc 1 728 0
 1105 04fc 97F83E30 	 ldrb r3,[r7,#62]
 1106 0500 002B     	 cmp r3,#0
 1107 0502 03D1     	 bne .L77
 729:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 730:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_SUCCESS;
 1108              	 .loc 1 730 0
 1109 0504 0023     	 movs r3,#0
 1110 0506 87F83F30 	 strb r3,[r7,#63]
 1111 050a 16E0     	 b .L28
 1112              	.L77:
 731:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 732:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     else if (mode_status == SDMMC_BLOCK_MODE_STATUS_WP_VIOLATION_ERROR)
 1113              	 .loc 1 732 0
 1114 050c 97F83E30 	 ldrb r3,[r7,#62]
 1115 0510 0F2B     	 cmp r3,#15
 1116 0512 03D1     	 bne .L78
 733:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 734:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_WRPRT;
 1117              	 .loc 1 734 0
 1118 0514 0223     	 movs r3,#2
 1119 0516 87F83F30 	 strb r3,[r7,#63]
 1120 051a 0EE0     	 b .L28
 1121              	.L78:
 735:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 736:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     else if ((mode_status == SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR) ||
 1122              	 .loc 1 736 0
 1123 051c 97F83E30 	 ldrb r3,[r7,#62]
 1124 0520 0A2B     	 cmp r3,#10
 1125 0522 03D0     	 beq .L79
 1126              	 .loc 1 736 0 is_stmt 0 discriminator 1
 1127 0524 97F83E30 	 ldrb r3,[r7,#62]
 1128 0528 332B     	 cmp r3,#51
 1129 052a 03D1     	 bne .L80
 1130              	.L79:
 737:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****              (mode_status == SDMMC_BLOCK_MODE_STATUS_SECTOR_OUT_OF_BOUND))
 738:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 739:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_PARERR;
 1131              	 .loc 1 739 0 is_stmt 1
 1132 052c 0423     	 movs r3,#4
 1133 052e 87F83F30 	 strb r3,[r7,#63]
 1134 0532 02E0     	 b .L28
 1135              	.L80:
 740:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 741:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     else
 742:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 743:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_FAILURE;
 1136              	 .loc 1 743 0
 1137 0534 0123     	 movs r3,#1
 1138 0536 87F83F30 	 strb r3,[r7,#63]
 1139              	.L28:
 744:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 745:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 746:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 747:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 1140              	 .loc 1 747 0
 1141 053a 97F83F30 	 ldrb r3,[r7,#63]
 748:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 1142              	 .loc 1 748 0
 1143 053e 1846     	 mov r0,r3
 1144 0540 4437     	 adds r7,r7,#68
 1145              	.LCFI34:
 1146              	 .cfi_def_cfa_offset 12
 1147 0542 BD46     	 mov sp,r7
 1148              	.LCFI35:
 1149              	 .cfi_def_cfa_register 13
 1150              	 
 1151 0544 90BD     	 pop {r4,r7,pc}
 1152              	 .cfi_endproc
 1153              	.LFE227:
 1155 0546 00BF     	 .section .text.SDMMC_BLOCK_lFlushDiskWriteCache,"ax",%progbits
 1156              	 .align 2
 1157              	 .thumb
 1158              	 .thumb_func
 1160              	SDMMC_BLOCK_lFlushDiskWriteCache:
 1161              	.LFB228:
 749:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 750:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #if SDMMC_BLOCK_SD_CARD_DETECTION_SUPPORT
 751:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 752:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 753:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 754:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /*
 755:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * Registers the callback function for the card detection
 756:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * mechanism.
 757:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  */
 758:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_RegisterCallback(SDMMC_BLOCK_t *const obj,
 759:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                                   void (*cb)(SDMMC_BLOCK_SD_INTERRUPT_t))
 760:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 761:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_PARERR;
 762:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 763:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   /* Check if the callback is not NULL */
 764:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (cb != NULL)
 765:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 766:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     obj->sdmmc_sd->callback = cb;
 767:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_STATUS_SUCCESS;
 768:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 769:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 770:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 771:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 772:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 773:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif /* SDMMC_BLOCK_SD */
 774:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 775:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif /* SDMMC_BLOCK_SD_CARD_DETECTION_SUPPORT */
 776:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 777:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
 778:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * LOCAL ROUTINES IMPLEMENTATION
 779:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
 780:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 781:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Flush disk cache */
 782:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** static SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_lFlushDiskWriteCache(SDMMC_BLOCK_t *obj)
 783:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 1162              	 .loc 1 783 0
 1163              	 .cfi_startproc
 1164              	 
 1165              	 
 1166              	 
 1167 0000 80B4     	 push {r7}
 1168              	.LCFI36:
 1169              	 .cfi_def_cfa_offset 4
 1170              	 .cfi_offset 7,-4
 1171 0002 83B0     	 sub sp,sp,#12
 1172              	.LCFI37:
 1173              	 .cfi_def_cfa_offset 16
 1174 0004 00AF     	 add r7,sp,#0
 1175              	.LCFI38:
 1176              	 .cfi_def_cfa_register 7
 1177 0006 7860     	 str r0,[r7,#4]
 784:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   /*
 785:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    * A flush is generally meant for writing filled buffers/cache to the
 786:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    * media. We're already ensuring that a write block(s) operation completes
 787:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    * before it exits WriteBlock().
 788:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    * So, this function does nothing at the moment. We are simply going to
 789:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    * return success
 790:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    */
 791:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return SDMMC_BLOCK_STATUS_SUCCESS;
 1178              	 .loc 1 791 0
 1179 0008 0023     	 movs r3,#0
 792:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 1180              	 .loc 1 792 0
 1181 000a 1846     	 mov r0,r3
 1182 000c 0C37     	 adds r7,r7,#12
 1183              	.LCFI39:
 1184              	 .cfi_def_cfa_offset 4
 1185 000e BD46     	 mov sp,r7
 1186              	.LCFI40:
 1187              	 .cfi_def_cfa_register 13
 1188              	 
 1189 0010 5DF8047B 	 ldr r7,[sp],#4
 1190              	.LCFI41:
 1191              	 .cfi_restore 7
 1192              	 .cfi_def_cfa_offset 0
 1193 0014 7047     	 bx lr
 1194              	 .cfi_endproc
 1195              	.LFE228:
 1197 0016 00BF     	 .text
 1198              	.Letext0:
 1199              	 .file 2 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1200              	 .file 3 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1201              	 .file 4 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/XMCLib/inc/xmc_sdmmc.h"
 1202              	 .file 5 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Dave/Generated/DAVE_Common.h"
 1203              	 .file 6 "c:\\users\\erhan\\desktop\\smartlogger\\design\\firmware\\xmc4500\\smart_logger\\smart_logger\\dave\\generated\\systimer\\systimer.h"
 1204              	 .file 7 "../Dave/Generated/SDMMC_BLOCK/sdmmc_block.h"
 1205              	 .file 8 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/CMSIS/Include/core_cm4.h"
 1206              	 .file 9 "C:/Users/erhan/Desktop/smartlogger/design/firmware/xmc4500/smart_logger/smart_logger/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sdmmc_block.c
    {standard input}:20     .text.SDMMC_BLOCK_GetAppVersion:00000000 $t
    {standard input}:25     .text.SDMMC_BLOCK_GetAppVersion:00000000 SDMMC_BLOCK_GetAppVersion
    {standard input}:86     .text.SDMMC_BLOCK_Init:00000000 $t
    {standard input}:91     .text.SDMMC_BLOCK_Init:00000000 SDMMC_BLOCK_Init
    {standard input}:180    .text.SDMMC_BLOCK_Initialize:00000000 $t
    {standard input}:185    .text.SDMMC_BLOCK_Initialize:00000000 SDMMC_BLOCK_Initialize
    {standard input}:244    .text.SDMMC_BLOCK_ReadBlock:00000000 $t
    {standard input}:249    .text.SDMMC_BLOCK_ReadBlock:00000000 SDMMC_BLOCK_ReadBlock
    {standard input}:303    .text.SDMMC_BLOCK_WriteBlock:00000000 $t
    {standard input}:308    .text.SDMMC_BLOCK_WriteBlock:00000000 SDMMC_BLOCK_WriteBlock
    {standard input}:362    .text.SDMMC_BLOCK_GetStatus:00000000 $t
    {standard input}:367    .text.SDMMC_BLOCK_GetStatus:00000000 SDMMC_BLOCK_GetStatus
    {standard input}:415    .text.SDMMC_BLOCK_Ioctl:00000000 $t
    {standard input}:420    .text.SDMMC_BLOCK_Ioctl:00000000 SDMMC_BLOCK_Ioctl
    {standard input}:540    .text.SDMMC_BLOCK_Ioctl:000000c8 $d
    {standard input}:578    .text.SDMMC_BLOCK_Ioctl:00000160 $t
    {standard input}:1160   .text.SDMMC_BLOCK_lFlushDiskWriteCache:00000000 SDMMC_BLOCK_lFlushDiskWriteCache
    {standard input}:1156   .text.SDMMC_BLOCK_lFlushDiskWriteCache:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SDMMC_BLOCK_SD_Init
SDMMC_BLOCK_SD_CardIdentificationProcess
SDMMC_BLOCK_SD_ReadBlock
SDMMC_BLOCK_SD_WriteBlock
SDMMC_BLOCK_SD_GetState
SDMMC_BLOCK_SD_GetSectorSize
SDMMC_BLOCK_SD_GetSectorCount
SDMMC_BLOCK_SD_EraseBlock
SDMMC_BLOCK_SD_GetBlockSize
SDMMC_BLOCK_SD_GetCardType
SDMMC_BLOCK_SD_GetCsd
SDMMC_BLOCK_SD_GetCid
SDMMC_BLOCK_SD_GetOcr
SDMMC_BLOCK_SD_GetSdStatus
memcpy
SDMMC_BLOCK_SD_LockUnlockCard
SDMMC_BLOCK_SD_GetLockStatus
SDMMC_BLOCK_SD_EjectCard
