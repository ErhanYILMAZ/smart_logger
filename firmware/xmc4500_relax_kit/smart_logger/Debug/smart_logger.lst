
smart_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000106d0  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  080106d0  0c0106d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00028000  2**0
                  ALLOC
  3 .data         00000230  20000000  0c0106d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000948  20000230  0c010900  00020230  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  00027fc0  2**2
                  ALLOC
  6 .debug_aranges 00001768  00000000  00000000  00020230  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002078e  00000000  00000000  00021998  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000048e4  00000000  00000000  00042126  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000c4ee  00000000  00000000  00046a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00006cb0  00000000  00000000  00052ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000d42c  00000000  00000000  00059ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ca03  00000000  00000000  00066fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001478  00000000  00000000  000739d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00001084  00000000  00000000  00074e4f  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	1d 26 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     .&..............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 21 a3 00 08 b1 02 00 08     ........!.......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 51 a4 00 08 e1 a3 00 08 b1 02 00 08     ....Q...........
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 f1 30 00 08     .............0..
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0106d0 	.word	0x0c0106d0
 800024c:	20000000 	.word	0x20000000
 8000250:	00000230 	.word	0x00000230
 8000254:	0c010900 	.word	0x0c010900
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0106d0 	.word	0x0c0106d0
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0106d0 	.word	0x0c0106d0
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000230 	.word	0x20000230
 800027c:	00000948 	.word	0x00000948
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800bf2d 	.word	0x0800bf2d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	0800b495 	.word	0x0800b495

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f009 fb7b 	bl	80099c0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f009 fbe3 	bl	8009a94 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f009 fbc2 	bl	8009a80 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	460b      	mov	r3, r1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	089b      	lsrs	r3, r3, #2
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3204      	adds	r2, #4
 80003ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ce:	7afb      	ldrb	r3, [r7, #11]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	4619      	mov	r1, r3
 80003d8:	23f8      	movs	r3, #248	; 0xf8
 80003da:	408b      	lsls	r3, r1
 80003dc:	43db      	mvns	r3, r3
 80003de:	ea02 0103 	and.w	r1, r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1d02      	adds	r2, r0, #4
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	4619      	mov	r1, r3
 80003f4:	2303      	movs	r3, #3
 80003f6:	408b      	lsls	r3, r1
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <XMC_GPIO_Init+0x144>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d003      	beq.n	8000410 <XMC_GPIO_Init+0x68>
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4a39      	ldr	r2, [pc, #228]	; (80004f0 <XMC_GPIO_Init+0x148>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d10a      	bne.n	8000426 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	661a      	str	r2, [r3, #96]	; 0x60
 8000424:	e042      	b.n	80004ac <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	b25b      	sxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	da3c      	bge.n	80004ac <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	409a      	lsls	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	08db      	lsrs	r3, r3, #3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3210      	adds	r2, #16
 8000452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	f003 0307 	and.w	r3, r3, #7
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	4619      	mov	r1, r3
 8000460:	2307      	movs	r3, #7
 8000462:	408b      	lsls	r3, r1
 8000464:	43db      	mvns	r3, r3
 8000466:	ea02 0103 	and.w	r1, r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f100 0210 	add.w	r2, r0, #16
 8000470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000474:	7afb      	ldrb	r3, [r7, #11]
 8000476:	08db      	lsrs	r3, r3, #3
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3210      	adds	r2, #16
 8000488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	7a1b      	ldrb	r3, [r3, #8]
 8000490:	4619      	mov	r1, r3
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	f003 0307 	and.w	r3, r3, #7
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	ea42 0103 	orr.w	r1, r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f100 0210 	add.w	r2, r0, #16
 80004a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004ac:	7afb      	ldrb	r3, [r7, #11]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	7afb      	ldrb	r3, [r7, #11]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	3204      	adds	r2, #4
 80004c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	ea42 0103 	orr.w	r1, r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1d02      	adds	r2, r0, #4
 80004de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	48028e00 	.word	0x48028e00
 80004f0:	48028f00 	.word	0x48028f00

080004f4 <XMC_RTC_IsRunning>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_RTC_Start(), XMC_RTC_Stop()
 */ 
__STATIC_INLINE bool XMC_RTC_IsRunning(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <XMC_RTC_IsRunning+0x20>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	2b00      	cmp	r3, #0
 8000502:	bf14      	ite	ne
 8000504:	2301      	movne	r3, #1
 8000506:	2300      	moveq	r3, #0
 8000508:	b2db      	uxtb	r3, r3
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	50004a00 	.word	0x50004a00

08000518 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <XMC_SCU_GetMirrorStatus+0x14>)
 800051e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000522:	4618      	mov	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	50004000 	.word	0x50004000

08000530 <XMC_RTC_Init>:

/*
 * Initialize the RTC peripheral
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  if (XMC_RTC_IsRunning() == false)
 8000538:	f7ff ffdc 	bl	80004f4 <XMC_RTC_IsRunning>
 800053c:	4603      	mov	r3, r0
 800053e:	f083 0301 	eor.w	r3, r3, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d03e      	beq.n	80005c6 <XMC_RTC_Init+0x96>
  {
    if (XMC_SCU_HIB_IsHibernateDomainEnabled() == false)
 8000548:	f000 fad6 	bl	8000af8 <XMC_SCU_HIB_IsHibernateDomainEnabled>
 800054c:	4603      	mov	r3, r0
 800054e:	f083 0301 	eor.w	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <XMC_RTC_Init+0x2c>
    {
      XMC_SCU_HIB_EnableHibernateDomain();
 8000558:	f000 faa2 	bl	8000aa0 <XMC_SCU_HIB_EnableHibernateDomain>
    }
    
    XMC_RTC_SetPrescaler(config->prescaler);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	8a1b      	ldrh	r3, [r3, #16]
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fac5 	bl	8001af0 <XMC_RTC_SetPrescaler>
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 8000566:	bf00      	nop
 8000568:	f7ff ffd6 	bl	8000518 <XMC_SCU_GetMirrorStatus>
 800056c:	4603      	mov	r3, r0
 800056e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1f8      	bne.n	8000568 <XMC_RTC_Init+0x38>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM0 = config->time.raw0;
 8000576:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <XMC_RTC_Init+0xa0>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6213      	str	r3, [r2, #32]
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 800057e:	bf00      	nop
 8000580:	f7ff ffca 	bl	8000518 <XMC_SCU_GetMirrorStatus>
 8000584:	4603      	mov	r3, r0
 8000586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f8      	bne.n	8000580 <XMC_RTC_Init+0x50>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM1 = config->time.raw1;
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <XMC_RTC_Init+0xa0>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	6253      	str	r3, [r2, #36]	; 0x24
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 8000596:	bf00      	nop
 8000598:	f7ff ffbe 	bl	8000518 <XMC_SCU_GetMirrorStatus>
 800059c:	4603      	mov	r3, r0
 800059e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1f8      	bne.n	8000598 <XMC_RTC_Init+0x68>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM0 = config->alarm.raw0;
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <XMC_RTC_Init+0xa0>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	6193      	str	r3, [r2, #24]
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 80005ae:	bf00      	nop
 80005b0:	f7ff ffb2 	bl	8000518 <XMC_SCU_GetMirrorStatus>
 80005b4:	4603      	mov	r3, r0
 80005b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1f8      	bne.n	80005b0 <XMC_RTC_Init+0x80>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM1 = config->alarm.raw1;    
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <XMC_RTC_Init+0xa0>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	61d3      	str	r3, [r2, #28]
  }  
  return XMC_RTC_STATUS_OK;
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	50004a00 	.word	0x50004a00

080005d4 <XMC_RTC_EnableEvent>:

/*
 * Enable RTC periodic and alarm event(s)
 */ 
void XMC_RTC_EnableEvent(const uint32_t event)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 80005dc:	bf00      	nop
 80005de:	f7ff ff9b 	bl	8000518 <XMC_SCU_GetMirrorStatus>
 80005e2:	4603      	mov	r3, r0
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f8      	bne.n	80005de <XMC_RTC_EnableEvent+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->MSKSR |= event;
 80005ec:	4904      	ldr	r1, [pc, #16]	; (8000600 <XMC_RTC_EnableEvent+0x2c>)
 80005ee:	4b04      	ldr	r3, [pc, #16]	; (8000600 <XMC_RTC_EnableEvent+0x2c>)
 80005f0:	691a      	ldr	r2, [r3, #16]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	610b      	str	r3, [r1, #16]
}
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	50004a00 	.word	0x50004a00

08000604 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800060a:	681b      	ldr	r3, [r3, #0]
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	2000ffc0 	.word	0x2000ffc0

0800061c <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <XMC_SCU_GetMirrorStatus+0x14>)
 8000622:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	50004000 	.word	0x50004000

08000634 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 800063c:	f7ff fe4a 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <XMC_SCU_lDelay+0x3c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <XMC_SCU_lDelay+0x40>)
 8000646:	fba2 2303 	umull	r2, r3, r2, r3
 800064a:	0c9a      	lsrs	r2, r3, #18
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	fb02 f303 	mul.w	r3, r2, r3
 8000652:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	e003      	b.n	8000662 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800065a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3301      	adds	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	429a      	cmp	r2, r3
 8000668:	d3f7      	bcc.n	800065a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000ffc0 	.word	0x2000ffc0
 8000674:	431bde83 	.word	0x431bde83

08000678 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800067e:	685b      	ldr	r3, [r3, #4]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	50004074 	.word	0x50004074

08000690 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000698:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	60d3      	str	r3, [r2, #12]
}
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	50004074 	.word	0x50004074

080006ac <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 f89b 	bl	80007f0 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80006ba:	f000 f9f1 	bl	8000aa0 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	79db      	ldrb	r3, [r3, #7]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d00a      	beq.n	80006dc <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80006c6:	f000 fa47 	bl	8000b58 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80006ca:	bf00      	nop
 80006cc:	f000 fa32 	bl	8000b34 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f083 0301 	eor.w	r3, r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1f7      	bne.n	80006cc <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7a5b      	ldrb	r3, [r3, #9]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f8eb 	bl	80008bc <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80006e6:	bf00      	nop
 80006e8:	f7ff ff98 	bl	800061c <XMC_SCU_GetMirrorStatus>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1fa      	bne.n	80006e8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	7a1b      	ldrb	r3, [r3, #8]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f9ac 	bl	8000a54 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7c1b      	ldrb	r3, [r3, #16]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f8f9 	bl	80008f8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7c5b      	ldrb	r3, [r3, #17]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f91c 	bl	8000948 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7c9b      	ldrb	r3, [r3, #18]
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f903 	bl	8000920 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7cdb      	ldrb	r3, [r3, #19]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f926 	bl	8000970 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	799b      	ldrb	r3, [r3, #6]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00a      	beq.n	8000742 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800072c:	f000 fa4c 	bl	8000bc8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000730:	bf00      	nop
 8000732:	f000 fa71 	bl	8000c18 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000736:	4603      	mov	r3, r0
 8000738:	f083 0301 	eor.w	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f7      	bne.n	8000732 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	78db      	ldrb	r3, [r3, #3]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d102      	bne.n	8000750 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800074a:	f000 fa89 	bl	8000c60 <XMC_SCU_CLOCK_DisableSystemPll>
 800074e:	e014      	b.n	800077a <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000750:	f000 fa76 	bl	8000c40 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	8899      	ldrh	r1, [r3, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000760:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000766:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	4608      	mov	r0, r1
 8000770:	4611      	mov	r1, r2
 8000772:	462a      	mov	r2, r5
 8000774:	4623      	mov	r3, r4
 8000776:	f000 fa83 	bl	8000c80 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000782:	d103      	bne.n	800078c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000784:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000788:	f000 f832 	bl	80007f0 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800078c:	f7ff fda2 	bl	80002d4 <SystemCoreClockUpdate>
}
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bdb0      	pop	{r4, r5, r7, pc}
 8000796:	bf00      	nop

08000798 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	0f1b      	lsrs	r3, r3, #28
 80007a4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80007ac:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	4613      	mov	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	4413      	add	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80007bc:	4413      	add	r3, r2
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	601a      	str	r2, [r3, #0]
}
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	50004414 	.word	0x50004414

080007d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80007d4:	f7ff ff16 	bl	8000604 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80007d8:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80007dc:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	50004600 	.word	0x50004600

080007f0 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80007f8:	4906      	ldr	r1, [pc, #24]	; (8000814 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	50004600 	.word	0x50004600

08000818 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4313      	orrs	r3, r2
 800082e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	50004600 	.word	0x50004600

08000840 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d108      	bne.n	8000862 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800085a:	f023 0301 	bic.w	r3, r3, #1
 800085e:	60d3      	str	r3, [r2, #12]
 8000860:	e007      	b.n	8000872 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000862:	4a06      	ldr	r2, [pc, #24]	; (800087c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	60d3      	str	r3, [r2, #12]
  }
}
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	50004710 	.word	0x50004710

08000880 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800088a:	bf00      	nop
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800088e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f8      	bne.n	800088c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800089a:	4907      	ldr	r1, [pc, #28]	; (80008b8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80008a6:	4313      	orrs	r3, r2
 80008a8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	50004000 	.word	0x50004000
 80008b8:	50004300 	.word	0x50004300

080008bc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80008c6:	bf00      	nop
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80008ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1f8      	bne.n	80008c8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80008d6:	4907      	ldr	r1, [pc, #28]	; (80008f4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80008e2:	4313      	orrs	r3, r2
 80008e4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	50004000 	.word	0x50004000
 80008f4:	50004300 	.word	0x50004300

080008f8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000900:	4906      	ldr	r1, [pc, #24]	; (800091c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800090e:	4313      	orrs	r3, r2
 8000910:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	50004600 	.word	0x50004600

08000920 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000928:	4906      	ldr	r1, [pc, #24]	; (8000944 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000936:	4313      	orrs	r3, r2
 8000938:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	50004600 	.word	0x50004600

08000948 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000950:	4906      	ldr	r1, [pc, #24]	; (800096c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000954:	691b      	ldr	r3, [r3, #16]
 8000956:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800095e:	4313      	orrs	r3, r2
 8000960:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	50004600 	.word	0x50004600

08000970 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000978:	4906      	ldr	r1, [pc, #24]	; (8000994 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000986:	4313      	orrs	r3, r2
 8000988:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	50004600 	.word	0x50004600

08000998 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80009a0:	4906      	ldr	r1, [pc, #24]	; (80009bc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80009ae:	4313      	orrs	r3, r2
 80009b0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	50004600 	.word	0x50004600

080009c0 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	6053      	str	r3, [r2, #4]
}
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	50004600 	.word	0x50004600

080009e0 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009ea:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f043 0310 	orr.w	r3, r3, #16
 8000a00:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a02:	4913      	ldr	r1, [pc, #76]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a10:	4313      	orrs	r3, r2
 8000a12:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a20:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f023 0310 	bic.w	r3, r3, #16
 8000a2a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a2c:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a36:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a38:	bf00      	nop
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0f9      	beq.n	8000a3a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	50004710 	.word	0x50004710

08000a54 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a68:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d10e      	bne.n	8000a8e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a7a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a7c:	2064      	movs	r0, #100	; 0x64
 8000a7e:	f7ff fdd9 	bl	8000634 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a82:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a8c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a8e:	2064      	movs	r0, #100	; 0x64
 8000a90:	f7ff fdd0 	bl	8000634 <XMC_SCU_lDelay>
}
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	50004710 	.word	0x50004710

08000aa0 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d109      	bne.n	8000ac4 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000ab6:	bf00      	nop
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f9      	beq.n	8000ab8 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00a      	beq.n	8000ae6 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad6:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000ad8:	bf00      	nop
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f9      	bne.n	8000ada <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	50004200 	.word	0x50004200
 8000af4:	50004400 	.word	0x50004400

08000af8 <XMC_SCU_HIB_IsHibernateDomainEnabled>:
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d007      	beq.n	8000b18 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	50004200 	.word	0x50004200
 8000b30:	50004400 	.word	0x50004400

08000b34 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	bf0c      	ite	eq
 8000b44:	2301      	moveq	r3, #1
 8000b46:	2300      	movne	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	50004300 	.word	0x50004300

08000b58 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b5c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b60:	f7ff fd96 	bl	8000690 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b64:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b6e:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000b70:	bf00      	nop
 8000b72:	f7ff fd81 	bl	8000678 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f8      	beq.n	8000b72 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000b80:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b84:	f7ff fd84 	bl	8000690 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000b8e:	bf00      	nop
 8000b90:	f7ff fd72 	bl	8000678 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0f8      	beq.n	8000b90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000b9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ba2:	f7ff fd75 	bl	8000690 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000bb2:	bf00      	nop
 8000bb4:	f7ff fd60 	bl	8000678 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f8      	beq.n	8000bb4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	50004300 	.word	0x50004300

08000bc8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000bc8:	b5b0      	push	{r4, r5, r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd6:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000bd8:	4d0d      	ldr	r5, [pc, #52]	; (8000c10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000be2:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000be6:	f008 ff4b 	bl	8009a80 <OSCHP_GetFrequency>
 8000bea:	4602      	mov	r2, r0
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000bee:	fba3 2302 	umull	r2, r3, r3, r2
 8000bf2:	0d1b      	lsrs	r3, r3, #20
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000bfc:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bfe:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c06:	6053      	str	r3, [r2, #4]
}
 8000c08:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	50004710 	.word	0x50004710
 8000c10:	50004700 	.word	0x50004700
 8000c14:	6b5fca6b 	.word	0x6b5fca6b

08000c18 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c24:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c28:	bf0c      	ite	eq
 8000c2a:	2301      	moveq	r3, #1
 8000c2c:	2300      	movne	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	50004710 	.word	0x50004710

08000c40 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c44:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4e:	f023 0302 	bic.w	r3, r3, #2
 8000c52:	6053      	str	r3, [r2, #4]
}
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	50004710 	.word	0x50004710

08000c60 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c64:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6e:	f043 0302 	orr.w	r3, r3, #2
 8000c72:	6053      	str	r3, [r2, #4]
}
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	50004710 	.word	0x50004710

08000c80 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60ba      	str	r2, [r7, #8]
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	81fb      	strh	r3, [r7, #14]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fdd3 	bl	8000840 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c9a:	7b7b      	ldrb	r3, [r7, #13]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	f040 8084 	bne.w	8000daa <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000ca8:	f008 feea 	bl	8009a80 <OSCHP_GetFrequency>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4b4b      	ldr	r3, [pc, #300]	; (8000ddc <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8000cb4:	0c9b      	lsrs	r3, r3, #18
 8000cb6:	059b      	lsls	r3, r3, #22
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e002      	b.n	8000cc2 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000cbc:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000cc0:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	fb02 f203 	mul.w	r2, r2, r3
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	4a42      	ldr	r2, [pc, #264]	; (8000de0 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cda:	091b      	lsrs	r3, r3, #4
 8000cdc:	0d9b      	lsrs	r3, r3, #22
 8000cde:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ce0:	4a40      	ldr	r2, [pc, #256]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ce2:	4b40      	ldr	r3, [pc, #256]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cec:	4a3d      	ldr	r2, [pc, #244]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cee:	4b3d      	ldr	r3, [pc, #244]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cf8:	493a      	ldr	r1, [pc, #232]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	4b3a      	ldr	r3, [pc, #232]	; (8000de8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000d00:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	3a01      	subs	r2, #1
 8000d06:	0212      	lsls	r2, r2, #8
 8000d08:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d10:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d1c:	4a31      	ldr	r2, [pc, #196]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d1e:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d26:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d28:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f023 0310 	bic.w	r3, r3, #16
 8000d32:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d34:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d40:	bf00      	nop
 8000d42:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f9      	beq.n	8000d42 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d4e:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f023 0301 	bic.w	r3, r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d5a:	bf00      	nop
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f9      	bne.n	8000d5c <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	4a20      	ldr	r2, [pc, #128]	; (8000dec <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d70:	095b      	lsrs	r3, r3, #5
 8000d72:	0d9b      	lsrs	r3, r3, #22
 8000d74:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d76:	6a3a      	ldr	r2, [r7, #32]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d202      	bcs.n	8000d84 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d7e:	6938      	ldr	r0, [r7, #16]
 8000d80:	f000 f838 	bl	8000df4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	0d9b      	lsrs	r3, r3, #22
 8000d92:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d94:	6a3a      	ldr	r2, [r7, #32]
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d202      	bcs.n	8000da2 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d9c:	6938      	ldr	r0, [r7, #16]
 8000d9e:	f000 f829 	bl	8000df4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000da2:	6a38      	ldr	r0, [r7, #32]
 8000da4:	f000 f826 	bl	8000df4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000da8:	e015      	b.n	8000dd6 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000daa:	490e      	ldr	r1, [pc, #56]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000db8:	4313      	orrs	r3, r2
 8000dba:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000dc8:	bf00      	nop
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f9      	beq.n	8000dca <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	431bde83 	.word	0x431bde83
 8000de0:	aaaaaaab 	.word	0xaaaaaaab
 8000de4:	50004710 	.word	0x50004710
 8000de8:	f08080ff 	.word	0xf08080ff
 8000dec:	88888889 	.word	0x88888889
 8000df0:	b60b60b7 	.word	0xb60b60b7

08000df4 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000e10:	2032      	movs	r0, #50	; 0x32
 8000e12:	f7ff fc0f 	bl	8000634 <XMC_SCU_lDelay>
}
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	50004710 	.word	0x50004710

08000e20 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bf0c      	ite	eq
 8000e36:	2301      	moveq	r3, #1
 8000e38:	2300      	movne	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4603      	mov	r3, r0
 8000e58:	70fb      	strb	r3, [r7, #3]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	70bb      	strb	r3, [r7, #2]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000e62:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000e64:	78bb      	ldrb	r3, [r7, #2]
 8000e66:	041b      	lsls	r3, r3, #16
 8000e68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000e6c:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000e6e:	787b      	ldrb	r3, [r7, #1]
 8000e70:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000e72:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	601a      	str	r2, [r3, #0]
}
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	bf38      	it	cc
 8000ed6:	4613      	movcc	r3, r2
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	bf28      	it	cs
 8000ef6:	4613      	movcs	r3, r2
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
                                               const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	6852      	ldr	r2, [r2, #4]
 8000f16:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f1a:	fb02 f201 	mul.w	r2, r2, r1
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 808b 	bne.w	800103c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x138>
  {
  uint32_t prescaler;
  uint32_t div8 = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]

  /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8000f38:	2319      	movs	r3, #25
 8000f3a:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000f44:	e048      	b.n	8000fd8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f4e:	6979      	ldr	r1, [r7, #20]
 8000f50:	fb01 f202 	mul.w	r2, r1, r2
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d13b      	bne.n	8000fd2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
      {
    	div8 = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d031      	beq.n	8000fd2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f74:	d82d      	bhi.n	8000fd2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
        {
          if (prescaler >= 64)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	2b3f      	cmp	r3, #63	; 0x3f
 8000f7a:	d907      	bls.n	8000f8c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x88>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d000      	beq.n	8000f88 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x84>
            {
              continue;
 8000f86:	e027      	b.n	8000fd8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
            }
            else
            {
              div8 = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	8912      	ldrh	r2, [r2, #8]
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	4a2b      	ldr	r2, [pc, #172]	; (8001048 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x144>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0b5b      	lsrs	r3, r3, #13
 8000fa0:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d90f      	bls.n	8000fd2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80c      	bhi.n	8000fd2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d909      	bls.n	8000fd2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
        		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2b06      	cmp	r3, #6
 8000fc2:	d806      	bhi.n	8000fd2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	895b      	ldrh	r3, [r3, #10]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d800      	bhi.n	8000fd2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
          {
            break;
 8000fd0:	e005      	b.n	8000fde <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
          }


        }
      }
      --ntq;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	2b07      	cmp	r3, #7
 8000fdc:	d8b3      	bhi.n	8000f46 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x42>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	d92b      	bls.n	800103c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x138>
    {


      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff4d 	bl	8000e84 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	031b      	lsls	r3, r3, #12
 8000ff0:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	895b      	ldrh	r3, [r3, #10]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	019b      	lsls	r3, r3, #6
 8000ffc:	b2db      	uxtb	r3, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000ffe:	431a      	orrs	r2, r3
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	3b01      	subs	r3, #1
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 800100a:	ea42 0103 	orr.w	r1, r2, r3
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	461a      	mov	r2, r3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	40d3      	lsrs	r3, r2
 800101c:	3b01      	subs	r3, #1
 800101e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8001022:	ea41 0203 	orr.w	r2, r1, r3
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	03db      	lsls	r3, r3, #15
 800102a:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 800102c:	431a      	orrs	r2, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	611a      	str	r2, [r3, #16]
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ff36 	bl	8000ea4 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 8001038:	2300      	movs	r3, #0
 800103a:	e000      	b.n	800103e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13a>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	d1b71759 	.word	0xd1b71759

0800104c <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
 8001058:	4613      	mov	r3, r2
 800105a:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 800105c:	bf00      	nop
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fede 	bl	8000e20 <XMC_CAN_IsPanelControlReady>
 8001064:	4603      	mov	r3, r0
 8001066:	f083 0301 	eor.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f6      	bne.n	800105e <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	3301      	adds	r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	78ba      	ldrb	r2, [r7, #2]
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	2102      	movs	r1, #2
 800107c:	f7ff fee4 	bl	8000e48 <XMC_CAN_PanelControl>
}
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop

08001088 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <XMC_CAN_Enable+0x30>)
 8001092:	f7ff fb81 	bl	8000798 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 0201 	bic.w	r2, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 80010a2:	bf00      	nop
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f9      	bne.n	80010a4 <XMC_CAN_Enable+0x1c>
  {
    /*Do nothing*/
  };
}
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	10000010 	.word	0x10000010

080010bc <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#endif  
}
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    default:
      frequency = 0;
      break;
  }
#else
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80010dc:	f7ff fb78 	bl	80007d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80010e0:	60f8      	str	r0, [r7, #12]
#endif  

  return frequency;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	460b      	mov	r3, r1
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	72fb      	strb	r3, [r7, #11]
  uint32_t peripheral_frequency;

  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff ffc4 	bl	8001088 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 8001100:	7afb      	ldrb	r3, [r7, #11]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff ffd9 	bl	80010bc <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7ff ffe2 	bl	80010d4 <XMC_CAN_GetBaudrateClockFrequency>
 8001110:	61f8      	str	r0, [r7, #28]

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800111e:	2000      	movs	r0, #0
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fecf 	bl	8000ec4 <max>
 8001126:	4603      	mov	r3, r0
 8001128:	4618      	mov	r0, r3
 800112a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800112e:	f7ff fed9 	bl	8000ee4 <min>
 8001132:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800114a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	60da      	str	r2, [r3, #12]

  return freq_n;
 8001162:	697b      	ldr	r3, [r7, #20]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 800117c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8001180:	095b      	lsrs	r3, r3, #5
 8001182:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	035a      	lsls	r2, r3, #13
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	6892      	ldr	r2, [r2, #8]
 80011a0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80011a4:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	6891      	ldr	r1, [r2, #8]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	79db      	ldrb	r3, [r3, #7]
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	79db      	ldrb	r3, [r3, #7]
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d100      	bne.n	80011d4 <XMC_CAN_MO_Config+0x68>
 80011d2:	e060      	b.n	8001296 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d000      	beq.n	80011e6 <XMC_CAN_MO_Config+0x7a>
 80011e4:	e057      	b.n	8001296 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2220      	movs	r2, #32
 80011ec:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	79db      	ldrb	r3, [r3, #7]
 80011f2:	f003 0320 	and.w	r3, r3, #32
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d128      	bne.n	800124e <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001208:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001212:	049b      	lsls	r3, r3, #18
 8001214:	461a      	mov	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001230:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800123a:	049b      	lsls	r3, r3, #18
 800123c:	461a      	mov	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	e009      	b.n	8001262 <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6852      	ldr	r2, [r2, #4]
 8001256:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6892      	ldr	r2, [r2, #8]
 8001260:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7e1b      	ldrb	r3, [r3, #24]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10c      	bne.n	8001284 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f81a 	bl	80012a4 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001278:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a07      	ldr	r2, [pc, #28]	; (800129c <XMC_CAN_MO_Config+0x130>)
 8001280:	61da      	str	r2, [r3, #28]
 8001282:	e008      	b.n	8001296 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800128c:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <XMC_CAN_MO_Config+0x134>)
 8001294:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	062000c0 	.word	0x062000c0
 80012a0:	00a00640 	.word	0x00a00640

080012a4 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80012ac:	2303      	movs	r3, #3
 80012ae:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7e1b      	ldrb	r3, [r3, #24]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d122      	bne.n	80012fe <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2220      	movs	r2, #32
 80012be:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	7b12      	ldrb	r2, [r2, #12]
 80012d2:	0612      	lsls	r2, r2, #24
 80012d4:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6912      	ldr	r2, [r2, #16]
 80012e4:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6952      	ldr	r2, [r2, #20]
 80012ee:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <XMC_CAN_MO_UpdateData+0x6c>)
 80012f6:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e001      	b.n	8001302 <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80012fe:	2303      	movs	r3, #3
 8001300:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	00280040 	.word	0x00280040

08001314 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 0320 	and.w	r3, r3, #32
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 8001342:	2304      	movs	r3, #4
 8001344:	75fb      	strb	r3, [r7, #23]
 8001346:	e00c      	b.n	8001362 <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d102      	bne.n	8001354 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800134e:	2302      	movs	r3, #2
 8001350:	75fb      	strb	r3, [r7, #23]
 8001352:	e006      	b.n	8001362 <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800135c:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
}
 8001364:	4618      	mov	r0, r3
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800138e:	0adb      	lsrs	r3, r3, #11
 8001390:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80013a6:	2303      	movs	r3, #3
 80013a8:	75fb      	strb	r3, [r7, #23]
 80013aa:	e0a7      	b.n	80014fc <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d102      	bne.n	80013b8 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 80013b2:	2302      	movs	r3, #2
 80013b4:	75fb      	strb	r3, [r7, #23]
 80013b6:	e0a1      	b.n	80014fc <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2208      	movs	r2, #8
 80013be:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ca:	0f5b      	lsrs	r3, r3, #29
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d140      	bne.n	8001452 <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	79d3      	ldrb	r3, [r2, #7]
 80013d4:	f36f 1345 	bfc	r3, #5, #1
 80013d8:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	699a      	ldr	r2, [r3, #24]
 80013e0:	4b4a      	ldr	r3, [pc, #296]	; (800150c <XMC_CAN_MO_Receive+0x19c>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6853      	ldr	r3, [r2, #4]
 80013ee:	f361 031c 	bfi	r3, r1, #0, #29
 80013f2:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013fe:	0f5b      	lsrs	r3, r3, #29
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	b2d9      	uxtb	r1, r3
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	7ad3      	ldrb	r3, [r2, #11]
 800140c:	f361 1345 	bfi	r3, r1, #5, #1
 8001410:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7adb      	ldrb	r3, [r3, #11]
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00d      	beq.n	800143c <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <XMC_CAN_MO_Receive+0x19c>)
 8001428:	4013      	ands	r3, r2
 800142a:	0c9b      	lsrs	r3, r3, #18
 800142c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6893      	ldr	r3, [r2, #8]
 8001434:	f361 031c 	bfi	r3, r1, #0, #29
 8001438:	6093      	str	r3, [r2, #8]
 800143a:	e032      	b.n	80014a2 <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6893      	ldr	r3, [r2, #8]
 800144a:	f361 031c 	bfi	r3, r1, #0, #29
 800144e:	6093      	str	r3, [r2, #8]
 8001450:	e027      	b.n	80014a2 <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	79d3      	ldrb	r3, [r2, #7]
 8001456:	f043 0320 	orr.w	r3, r3, #32
 800145a:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6853      	ldr	r3, [r2, #4]
 800146a:	f361 031c 	bfi	r3, r1, #0, #29
 800146e:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6893      	ldr	r3, [r2, #8]
 800147e:	f361 031c 	bfi	r3, r1, #0, #29
 8001482:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800148e:	0f5b      	lsrs	r3, r3, #29
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	b2d9      	uxtb	r1, r3
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	7ad3      	ldrb	r3, [r2, #11]
 800149c:	f361 1345 	bfi	r3, r1, #5, #1
 80014a0:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80014ac:	0e1b      	lsrs	r3, r3, #24
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 80014e4:	7dbb      	ldrb	r3, [r7, #22]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <XMC_CAN_MO_Receive+0x182>
 80014ea:	7d7b      	ldrb	r3, [r7, #21]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f47f af63 	bne.w	80013b8 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80014f8:	2300      	movs	r3, #0
 80014fa:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	1ffc0000 	.word	0x1ffc0000

08001510 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001520:	d006      	beq.n	8001530 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e005      	b.n	800153c <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699a      	ldr	r2, [r3, #24]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
}
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60da      	str	r2, [r3, #12]
}
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop

08001568 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <XMC_CCU4_lDeassertReset+0x4c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d103      	bne.n	8001580 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8001578:	2004      	movs	r0, #4
 800157a:	f7ff f90d 	bl	8000798 <XMC_SCU_RESET_DeassertPeripheralReset>
 800157e:	e016      	b.n	80015ae <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <XMC_CCU4_lDeassertReset+0x50>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d103      	bne.n	8001590 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8001588:	2008      	movs	r0, #8
 800158a:	f7ff f905 	bl	8000798 <XMC_SCU_RESET_DeassertPeripheralReset>
 800158e:	e00e      	b.n	80015ae <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <XMC_CCU4_lDeassertReset+0x54>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d103      	bne.n	80015a0 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8001598:	2010      	movs	r0, #16
 800159a:	f7ff f8fd 	bl	8000798 <XMC_SCU_RESET_DeassertPeripheralReset>
 800159e:	e006      	b.n	80015ae <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <XMC_CCU4_lDeassertReset+0x58>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d102      	bne.n	80015ae <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <XMC_CCU4_lDeassertReset+0x5c>)
 80015aa:	f7ff f8f5 	bl	8000798 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	4000c000 	.word	0x4000c000
 80015b8:	40010000 	.word	0x40010000
 80015bc:	40014000 	.word	0x40014000
 80015c0:	48004000 	.word	0x48004000
 80015c4:	10000001 	.word	0x10000001

080015c8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80015d0:	2010      	movs	r0, #16
 80015d2:	f7ff f9f5 	bl	80009c0 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffc6 	bl	8001568 <XMC_CCU4_lDeassertReset>
#endif
}
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop

080015e4 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffe9 	bl	80015c8 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa6 	bl	8001548 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001608:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	039b      	lsls	r3, r3, #14
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	601a      	str	r2, [r3, #0]
}
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	795b      	ldrb	r3, [r3, #5]
 8001636:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	051a      	lsls	r2, r3, #20
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	791b      	ldrb	r3, [r3, #4]
 8001646:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800164a:	b2db      	uxtb	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	795b      	ldrb	r3, [r3, #5]
 8001656:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	795b      	ldrb	r3, [r3, #5]
 8001666:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]
 8001698:	4613      	mov	r3, r2
 800169a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80016a2:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b09      	cmp	r3, #9
 80016a8:	d82c      	bhi.n	8001704 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	080016d9 	.word	0x080016d9
 80016b4:	080016d9 	.word	0x080016d9
 80016b8:	080016e3 	.word	0x080016e3
 80016bc:	080016e3 	.word	0x080016e3
 80016c0:	08001705 	.word	0x08001705
 80016c4:	08001705 	.word	0x08001705
 80016c8:	08001705 	.word	0x08001705
 80016cc:	08001705 	.word	0x08001705
 80016d0:	080016ed 	.word	0x080016ed
 80016d4:	080016f9 	.word	0x080016f9
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80016d8:	2303      	movs	r3, #3
 80016da:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
      break;
 80016e0:	e016      	b.n	8001710 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 80016e2:	230c      	movs	r3, #12
 80016e4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 80016e6:	2302      	movs	r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
      break;
 80016ea:	e011      	b.n	8001710 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80016ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016f0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80016f2:	2308      	movs	r3, #8
 80016f4:	617b      	str	r3, [r7, #20]
      break;
 80016f6:	e00b      	b.n	8001710 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80016f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016fc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80016fe:	230a      	movs	r3, #10
 8001700:	617b      	str	r3, [r7, #20]
      break;
 8001702:	e005      	b.n	8001710 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001704:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001708:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800170a:	230c      	movs	r3, #12
 800170c:	617b      	str	r3, [r7, #20]
      break;
 800170e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 800171a:	78ba      	ldrb	r2, [r7, #2]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop

0800173c <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
 8001748:	4613      	mov	r3, r2
 800174a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3204      	adds	r2, #4
 8001760:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4619      	mov	r1, r3
 800176e:	23f8      	movs	r3, #248	; 0xf8
 8001770:	408b      	lsls	r3, r1
 8001772:	43db      	mvns	r3, r3
 8001774:	ea02 0103 	and.w	r1, r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	1d02      	adds	r2, r0, #4
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3204      	adds	r2, #4
 8001794:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001798:	78bb      	ldrb	r3, [r7, #2]
 800179a:	78f9      	ldrb	r1, [r7, #3]
 800179c:	f001 0103 	and.w	r1, r1, #3
 80017a0:	00c9      	lsls	r1, r1, #3
 80017a2:	408b      	lsls	r3, r1
 80017a4:	ea42 0103 	orr.w	r1, r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	1d02      	adds	r2, r0, #4
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
 80017c8:	4613      	mov	r3, r2
 80017ca:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4619      	mov	r1, r3
 80017d6:	2303      	movs	r3, #3
 80017d8:	408b      	lsls	r3, r1
 80017da:	43db      	mvns	r3, r3
 80017dc:	401a      	ands	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017e6:	78bb      	ldrb	r3, [r7, #2]
 80017e8:	78f9      	ldrb	r1, [r7, #3]
 80017ea:	0049      	lsls	r1, r1, #1
 80017ec:	408b      	lsls	r3, r1
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001812:	b2db      	uxtb	r3, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fa9e 	bl	8001d8c <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a0e      	ldr	r2, [pc, #56]	; (800188c <XMC_I2C_CH_Init+0x4c>)
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	889b      	ldrh	r3, [r3, #4]
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4619      	mov	r1, r3
 800185e:	f000 f817 	bl	8001890 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4619      	mov	r1, r3
 800186a:	f000 f831 	bl	80018d0 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001874:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	073f0303 	.word	0x073f0303

08001890 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 80018a2:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80018a6:	d109      	bne.n	80018bc <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 80018a8:	887b      	ldrh	r3, [r7, #2]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80018ba:	e003      	b.n	80018c4 <XMC_I2C_CH_SetSlaveAddress+0x34>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 80018bc:	887b      	ldrh	r3, [r7, #2]
 80018be:	021a      	lsls	r2, r3, #8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <XMC_I2C_CH_SetBaudrate+0x70>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d810      	bhi.n	8001908 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	220a      	movs	r2, #10
 80018f8:	f000 fa94 	bl	8001e24 <XMC_USIC_CH_SetBaudrate>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d119      	bne.n	8001936 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e016      	b.n	8001936 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <XMC_I2C_CH_SetBaudrate+0x74>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d810      	bhi.n	8001932 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001914:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	2219      	movs	r2, #25
 8001922:	f000 fa7f 	bl	8001e24 <XMC_USIC_CH_SetBaudrate>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d104      	bne.n	8001936 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e001      	b.n	8001936 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	000186a0 	.word	0x000186a0
 8001944:	00061a80 	.word	0x00061a80

08001948 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195e:	b29b      	uxth	r3, r3
 8001960:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8001962:	787b      	ldrb	r3, [r7, #1]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d103      	bne.n	8001970 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001976:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d110      	bne.n	80019a0 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800197e:	bf00      	nop
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff3d 	bl	8001800 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001986:	4603      	mov	r3, r0
 8001988:	2b80      	cmp	r3, #128	; 0x80
 800198a:	d0f9      	beq.n	8001980 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001992:	f7ff ff45 	bl	8001820 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800199e:	e003      	b.n	80019a8 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop

080019b0 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 80019ca:	787b      	ldrb	r3, [r7, #1]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d103      	bne.n	80019d8 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019de:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d110      	bne.n	8001a08 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80019e6:	bf00      	nop
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff09 	bl	8001800 <XMC_USIC_CH_GetTransmitBufferStatus>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b80      	cmp	r3, #128	; 0x80
 80019f2:	d0f9      	beq.n	80019e8 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019fa:	f7ff ff11 	bl	8001820 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a06:	e003      	b.n	8001a10 <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop

08001a18 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a26:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d111      	bne.n	8001a52 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001a2e:	bf00      	nop
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fee5 	bl	8001800 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b80      	cmp	r3, #128	; 0x80
 8001a3a:	d0f9      	beq.n	8001a30 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a42:	f7ff feed 	bl	8001820 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a50:	e004      	b.n	8001a5c <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001a58:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop

08001a64 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a76:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d110      	bne.n	8001aa0 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001a7e:	bf00      	nop
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff febd 	bl	8001800 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b80      	cmp	r3, #128	; 0x80
 8001a8a:	d0f9      	beq.n	8001a80 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a92:	f7ff fec5 	bl	8001820 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a9e:	e003      	b.n	8001aa8 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop

08001ab0 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <XMC_SCU_GetMirrorStatus+0x14>)
 8001ab6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	50004000 	.word	0x50004000

08001ac8 <XMC_RTC_Start>:

/*
 * Enables RTC peripheral to start counting time
 */
void XMC_RTC_Start(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8001acc:	bf00      	nop
 8001ace:	f7ff ffef 	bl	8001ab0 <XMC_SCU_GetMirrorStatus>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f8      	bne.n	8001ace <XMC_RTC_Start+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <XMC_RTC_Start+0x24>)
 8001ade:	4b03      	ldr	r3, [pc, #12]	; (8001aec <XMC_RTC_Start+0x24>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6053      	str	r3, [r2, #4]
}
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	50004a00 	.word	0x50004a00

08001af0 <XMC_RTC_SetPrescaler>:

/*
 * Sets the RTC module prescaler value
 */
void XMC_RTC_SetPrescaler(uint16_t prescaler)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8001afa:	bf00      	nop
 8001afc:	f7ff ffd8 	bl	8001ab0 <XMC_SCU_GetMirrorStatus>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f8      	bne.n	8001afc <XMC_RTC_SetPrescaler+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 8001b0a:	4905      	ldr	r1, [pc, #20]	; (8001b20 <XMC_RTC_SetPrescaler+0x30>)
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <XMC_RTC_SetPrescaler+0x30>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	b29a      	uxth	r2, r3
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	041b      	lsls	r3, r3, #16
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
}
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	50004a00 	.word	0x50004a00

08001b24 <XMC_RTC_SetTime>:

/*
 * Sets the RTC_TIM0, RTC_TIM1 registers with time values
 */
void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const time)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_RTC_SetTime:Wrong week day value", ((uint32_t)time->daysofweek < XMC_RTC_MAXDAYSOFWEEK));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong month value", ((uint32_t)time->month < XMC_RTC_MAXMONTH));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong year value", ((uint32_t)time->year < XMC_RTC_MAXYEAR));

  #if (XMC_RTC_INIT_SEQUENCE == 1U)
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 8001b2c:	bf00      	nop
 8001b2e:	f7ff ffbf 	bl	8001ab0 <XMC_SCU_GetMirrorStatus>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f8      	bne.n	8001b2e <XMC_RTC_SetTime+0xa>
      { 
         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM0 = time->raw0;
 8001b3c:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <XMC_RTC_SetTime+0x40>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6213      	str	r3, [r2, #32]
      
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 8001b44:	bf00      	nop
 8001b46:	f7ff ffb3 	bl	8001ab0 <XMC_SCU_GetMirrorStatus>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f8      	bne.n	8001b46 <XMC_RTC_SetTime+0x22>
      {
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM1 = time->raw1;	     
 8001b54:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <XMC_RTC_SetTime+0x40>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	6253      	str	r3, [r2, #36]	; 0x24
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM0 = time->raw0;
      RTC->TIM1 = time->raw1;	; 
  #endif  
}
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	50004a00 	.word	0x50004a00

08001b68 <XMC_RTC_GetTime>:

/*
 * Gets the RTC module time value
 */
void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  time->raw0 = RTC->TIM0;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <XMC_RTC_GetTime+0x24>)
 8001b72:	6a1a      	ldr	r2, [r3, #32]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	601a      	str	r2, [r3, #0]
  time->raw1 = RTC->TIM1;
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <XMC_RTC_GetTime+0x24>)
 8001b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	605a      	str	r2, [r3, #4]
}
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	50004a00 	.word	0x50004a00

08001b90 <XMC_SDMMC_Enable>:
/*
 * De-assert the peripheral reset. The SDMMC peripheral
 * needs to be initialized
 */
void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <XMC_SDMMC_Enable+0x14>)
 8001b9a:	f7fe fdfd 	bl	8000798 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
}
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	10000040 	.word	0x10000040

08001ba8 <XMC_SDMMC_EnableEventStatus>:
  return XMC_SDMMC_STATUS_SUCCESS;
}

/* Enable event status */
void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SDMMC_EnableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  /* Set INT status enable register */
  sdmmc->EN_INT_STATUS_NORM |= (uint16_t)event;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	869a      	strh	r2, [r3, #52]	; 0x34
  sdmmc->EN_INT_STATUS_ERR |= (uint16_t)(event >> 16U);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	86da      	strh	r2, [r3, #54]	; 0x36
}
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop

08001be4 <XMC_SDMMC_EnableEvent>:
  sdmmc->EN_INT_STATUS_ERR &= (uint16_t)~(event >> 16U);
}

/* Enable SDMMC event */
void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SDMMC_EnableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  
  XMC_SDMMC_EnableEventStatus(sdmmc, event);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	f7ff ffd9 	bl	8001ba8 <XMC_SDMMC_EnableEventStatus>

  sdmmc->EN_INT_SIGNAL_NORM |= (uint16_t)event;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	871a      	strh	r2, [r3, #56]	; 0x38
  sdmmc->EN_INT_SIGNAL_ERR |= (uint16_t)(event >> 16U);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop

08001c24 <XMC_SDMMC_DisableEvent>:

/* Disable SDMMC event without disabling event status */
void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SDMMC_DisableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  /* Clear INT signal enable register */
  sdmmc->EN_INT_SIGNAL_NORM &= (uint16_t)~event;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	871a      	strh	r2, [r3, #56]	; 0x38
  sdmmc->EN_INT_SIGNAL_ERR &= (uint16_t)~(event >> 16U);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4013      	ands	r3, r2
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop

08001c68 <XMC_SDMMC_ClearEvent>:

/* Clear SDMMC event(s) */
void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid bit-field", !(event & XMC_SDMMC_TARGET_RESP_ERR));

  sdmmc->INT_STATUS_NORM = (uint16_t)event;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	861a      	strh	r2, [r3, #48]	; 0x30
  sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	865a      	strh	r2, [r3, #50]	; 0x32
}
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop

08001c90 <XMC_SDMMC_GetEvent>:

/* Get the status of an SDMMC event */
bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event)
{  
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  bool status;
  
  XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid SDMMC event", XMC_SDMMC_CHECK_EVENT(event));

  if (event < XMC_SDMMC_CMD_TIMEOUT_ERR)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d20c      	bcs.n	8001cbc <XMC_SDMMC_GetEvent+0x2c>
  {
    status = (bool)(sdmmc->INT_STATUS_NORM & (uint16_t)event);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	e00c      	b.n	8001cd6 <XMC_SDMMC_GetEvent+0x46>
  }
  else
  {
    status = (bool)(sdmmc->INT_STATUS_ERR & (uint16_t)((uint32_t)event >> 16U));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <XMC_SDMMC_SendCommand>:
  response->response_6 = sdmmc->RESPONSE[3];
}

/* Send SDMMC command */
XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *cmd, uint32_t arg)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_SendCommand: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  
  sdmmc->ARGUMENT1 = arg;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
  sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	881a      	ldrh	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	81da      	strh	r2, [r3, #14]
  
  return XMC_SDMMC_STATUS_SUCCESS;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <XMC_SDMMC_SetDataTransferMode>:

/* Set data transfer mode */
void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const response)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid transfer type", XMC_SDMMC_CHECK_TRANSFER_MODE(response->type));
  
  /* Block size */
  sdmmc->BLOCK_SIZE = (uint16_t)(response->block_size);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	809a      	strh	r2, [r3, #4]
  
  /* Number of blocks */
  sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	80da      	strh	r2, [r3, #6]

  /* Type of data transfer: single, infinite, multiple or stop multiple */
  sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BLOCK_SELECT_Msk) |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	899b      	ldrh	r3, [r3, #12]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f023 0320 	bic.w	r3, r3, #32
 8001d36:	b29a      	uxth	r2, r3
                                    ((uint16_t)response->type));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	7a1b      	ldrb	r3, [r3, #8]
  
  /* Number of blocks */
  sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);

  /* Type of data transfer: single, infinite, multiple or stop multiple */
  sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BLOCK_SELECT_Msk) |
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	819a      	strh	r2, [r3, #12]

  /*
   * Clear block count enable bit; that's only valid for
   * a multi-block transfer
   */
  if (response->type == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	7a1b      	ldrb	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d107      	bne.n	8001d60 <XMC_SDMMC_SetDataTransferMode+0x54>
  {
    sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	899b      	ldrh	r3, [r3, #12]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	f023 0302 	bic.w	r3, r3, #2
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	819a      	strh	r2, [r3, #12]
  }

  /* Auto CMD configuration */
  sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_Msk) |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	899b      	ldrh	r3, [r3, #12]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f023 030c 	bic.w	r3, r3, #12
 8001d6c:	b29a      	uxth	r2, r3
                                    ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Pos));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	7a5b      	ldrb	r3, [r3, #9]
 8001d72:	009b      	lsls	r3, r3, #2
  {
    sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
  }

  /* Auto CMD configuration */
  sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_Msk) |
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	819a      	strh	r2, [r3, #12]
                                    ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Pos));
}
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop

08001d8c <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <XMC_USIC_CH_Enable+0x74>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d003      	beq.n	8001da4 <XMC_USIC_CH_Enable+0x18>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <XMC_USIC_CH_Enable+0x78>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d103      	bne.n	8001dac <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001da4:	4818      	ldr	r0, [pc, #96]	; (8001e08 <XMC_USIC_CH_Enable+0x7c>)
 8001da6:	f000 f8ad 	bl	8001f04 <XMC_USIC_Enable>
 8001daa:	e016      	b.n	8001dda <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <XMC_USIC_CH_Enable+0x80>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d003      	beq.n	8001dbc <XMC_USIC_CH_Enable+0x30>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <XMC_USIC_CH_Enable+0x84>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d103      	bne.n	8001dc4 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001dbc:	4815      	ldr	r0, [pc, #84]	; (8001e14 <XMC_USIC_CH_Enable+0x88>)
 8001dbe:	f000 f8a1 	bl	8001f04 <XMC_USIC_Enable>
 8001dc2:	e00a      	b.n	8001dda <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <XMC_USIC_CH_Enable+0x8c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <XMC_USIC_CH_Enable+0x48>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <XMC_USIC_CH_Enable+0x90>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d102      	bne.n	8001dda <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001dd4:	4812      	ldr	r0, [pc, #72]	; (8001e20 <XMC_USIC_CH_Enable+0x94>)
 8001dd6:	f000 f895 	bl	8001f04 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001de0:	bf00      	nop
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f9      	beq.n	8001de2 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f023 020f 	bic.w	r2, r3, #15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40030000 	.word	0x40030000
 8001e04:	40030200 	.word	0x40030200
 8001e08:	40030008 	.word	0x40030008
 8001e0c:	48020000 	.word	0x48020000
 8001e10:	48020200 	.word	0x48020200
 8001e14:	48020008 	.word	0x48020008
 8001e18:	48024000 	.word	0x48024000
 8001e1c:	48024200 	.word	0x48024200
 8001e20:	48024008 	.word	0x48024008

08001e24 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08e      	sub	sp, #56	; 0x38
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b63      	cmp	r3, #99	; 0x63
 8001e34:	d958      	bls.n	8001ee8 <XMC_USIC_CH_SetBaudrate+0xc4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d055      	beq.n	8001ee8 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001e3c:	f7fe fcc8 	bl	80007d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001e44:	fba3 2302 	umull	r2, r3, r3, r2
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001e60:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001e66:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6c:	e022      	b.n	8001eb4 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e72:	fb02 f203 	mul.w	r2, r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	0a9b      	lsrs	r3, r3, #10
 8001e88:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e90:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	d209      	bcs.n	8001eae <XMC_USIC_CH_SetBaudrate+0x8a>
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d205      	bcs.n	8001eae <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1d9      	bne.n	8001e6e <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001eca:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	3a01      	subs	r2, #1
 8001ed0:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001ed2:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001eda:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ee6:	e002      	b.n	8001eee <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001eee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3738      	adds	r7, #56	; 0x38
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	51eb851f 	.word	0x51eb851f
 8001f00:	fc0080ef 	.word	0xfc0080ef

08001f04 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <XMC_USIC_Enable+0x40>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d104      	bne.n	8001f1e <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001f14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f18:	f7fe fc3e 	bl	8000798 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001f1c:	e00e      	b.n	8001f3c <XMC_USIC_Enable+0x38>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <XMC_USIC_Enable+0x44>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d103      	bne.n	8001f2e <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001f26:	4809      	ldr	r0, [pc, #36]	; (8001f4c <XMC_USIC_Enable+0x48>)
 8001f28:	f7fe fc36 	bl	8000798 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001f2c:	e006      	b.n	8001f3c <XMC_USIC_Enable+0x38>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <XMC_USIC_Enable+0x4c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d102      	bne.n	8001f3c <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001f36:	4807      	ldr	r0, [pc, #28]	; (8001f54 <XMC_USIC_Enable+0x50>)
 8001f38:	f7fe fc2e 	bl	8000798 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40030008 	.word	0x40030008
 8001f48:	48020008 	.word	0x48020008
 8001f4c:	10000080 	.word	0x10000080
 8001f50:	48024008 	.word	0x48024008
 8001f54:	10000100 	.word	0x10000100

08001f58 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <_sbrk+0x5c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <_sbrk+0x5c>)
 8001f6a:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <_sbrk+0x60>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <_sbrk+0x5c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3303      	adds	r3, #3
 8001f78:	f023 0303 	bic.w	r3, r3, #3
 8001f7c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <_sbrk+0x5c>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <_sbrk+0x64>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d207      	bcs.n	8001f9c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <_sbrk+0x5c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <_sbrk+0x5c>)
 8001f96:	6013      	str	r3, [r2, #0]
    return (base);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	e006      	b.n	8001faa <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001f9c:	f009 ffc0 	bl	800bf20 <__errno>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000230 	.word	0x20000230
 8001fb8:	20000b78 	.word	0x20000b78
 8001fbc:	2000ffc0 	.word	0x2000ffc0

08001fc0 <_init>:

/* Init */
void _init(void)
{}
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60da      	str	r2, [r3, #12]
}
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	60da      	str	r2, [r3, #12]
}
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	611a      	str	r2, [r3, #16]
}
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002030:	887a      	ldrh	r2, [r7, #2]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 800204c:	887a      	ldrh	r2, [r7, #2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	611a      	str	r2, [r3, #16]
}
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop

08002078 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d009      	beq.n	80020d4 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d104      	bne.n	80020d4 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f808 	bl	80020e0 <TIMER_CCU4_lInit>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop

080020e0 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f004 faf7 	bl	80066e0 <GLOBAL_CCU4_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7e1b      	ldrb	r3, [r3, #24]
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	f7ff ff62 	bl	8001fcc <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	f7ff fa84 	bl	8001620 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f82d 	bl	8002178 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00f      	beq.n	8002148 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002132:	4610      	mov	r0, r2
 8002134:	2100      	movs	r1, #0
 8002136:	461a      	mov	r2, r3
 8002138:	f7ff faa8 	bl	800168c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	4618      	mov	r0, r3
 8002142:	2100      	movs	r1, #0
 8002144:	f7ff ff98 	bl	8002078 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5d 	bl	800200c <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff43 	bl	8001ff4 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f7ff ff4a 	bl	8002024 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	4618      	mov	r0, r3
 8002196:	2100      	movs	r1, #0
 8002198:	f7ff ff52 	bl	8002040 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7ff ff57 	bl	800205c <XMC_CCU4_EnableShadowTransfer>
}
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021c0:	0a1b      	lsrs	r3, r3, #8
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db0a      	blt.n	80021fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	490d      	ldr	r1, [pc, #52]	; (800221c <__NVIC_SetPriority+0x4c>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	440b      	add	r3, r1
 80021f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80021f8:	e00a      	b.n	8002210 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fa:	4909      	ldr	r1, [pc, #36]	; (8002220 <__NVIC_SetPriority+0x50>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	0092      	lsls	r2, r2, #2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	440b      	add	r3, r1
 800220e:	761a      	strb	r2, [r3, #24]
  }
}
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f1c3 0307 	rsb	r3, r3, #7
 800223e:	2b06      	cmp	r3, #6
 8002240:	bf28      	it	cs
 8002242:	2306      	movcs	r3, #6
 8002244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3306      	adds	r3, #6
 800224a:	2b06      	cmp	r3, #6
 800224c:	d902      	bls.n	8002254 <NVIC_EncodePriority+0x30>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3b01      	subs	r3, #1
 8002252:	e000      	b.n	8002256 <NVIC_EncodePriority+0x32>
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2201      	movs	r2, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	1e5a      	subs	r2, r3, #1
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	401a      	ands	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	1e59      	subs	r1, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002278:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop

08002288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002298:	d301      	bcc.n	800229e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800229a:	2301      	movs	r3, #1
 800229c:	e00f      	b.n	80022be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <SysTick_Config+0x40>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a6:	f04f 30ff 	mov.w	r0, #4294967295
 80022aa:	213f      	movs	r1, #63	; 0x3f
 80022ac:	f7ff ff90 	bl	80021d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <SysTick_Config+0x40>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <SysTick_Config+0x40>)
 80022b8:	2207      	movs	r2, #7
 80022ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	e000e010 	.word	0xe000e010

080022cc <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 80022cc:	b490      	push	{r4, r7}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 80022d8:	496b      	ldr	r1, [pc, #428]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3318      	adds	r3, #24
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 80022ec:	4b67      	ldr	r3, [pc, #412]	; (800248c <SYSTIMER_lInsertTimerList+0x1c0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4a62      	ldr	r2, [pc, #392]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002300:	4413      	add	r3, r2
 8002302:	4a62      	ldr	r2, [pc, #392]	; (800248c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e0bb      	b.n	8002480 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8002308:	4b60      	ldr	r3, [pc, #384]	; (800248c <SYSTIMER_lInsertTimerList+0x1c0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8002312:	e0ab      	b.n	800246c <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	461a      	mov	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	dc7a      	bgt.n	800241c <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d026      	beq.n	800237c <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4a52      	ldr	r2, [pc, #328]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 800233e:	4413      	add	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	4850      	ldr	r0, [pc, #320]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4403      	add	r3, r0
 8002354:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8002356:	494c      	ldr	r1, [pc, #304]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4a45      	ldr	r2, [pc, #276]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002374:	441a      	add	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	e01c      	b.n	80023b6 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <SYSTIMER_lInsertTimerList+0x1c0>)
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	4841      	ldr	r0, [pc, #260]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4403      	add	r3, r0
 800238e:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8002390:	4b3e      	ldr	r3, [pc, #248]	; (800248c <SYSTIMER_lInsertTimerList+0x1c0>)
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 80023a0:	4413      	add	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4a36      	ldr	r2, [pc, #216]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 80023b0:	4413      	add	r3, r2
 80023b2:	4a36      	ldr	r2, [pc, #216]	; (800248c <SYSTIMER_lInsertTimerList+0x1c0>)
 80023b4:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 80023b6:	4934      	ldr	r1, [pc, #208]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	18d1      	adds	r1, r2, r3
 80023cc:	482e      	ldr	r0, [pc, #184]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4403      	add	r3, r0
 80023da:	3318      	adds	r3, #24
 80023dc:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 80023de:	492a      	ldr	r1, [pc, #168]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	4826      	ldr	r0, [pc, #152]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4403      	add	r3, r0
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6998      	ldr	r0, [r3, #24]
 8002400:	4c21      	ldr	r4, [pc, #132]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4423      	add	r3, r4
 800240e:	3318      	adds	r3, #24
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1ac3      	subs	r3, r0, r3
 8002414:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e024      	b.n	8002466 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	dd21      	ble.n	8002466 <SYSTIMER_lInsertTimerList+0x19a>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d11d      	bne.n	8002466 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 800242a:	4917      	ldr	r1, [pc, #92]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4a10      	ldr	r2, [pc, #64]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002448:	441a      	add	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 800244e:	6939      	ldr	r1, [r7, #16]
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4403      	add	r3, r0
 800245e:	3318      	adds	r3, #24
 8002460:	6019      	str	r1, [r3, #0]
          found_flag = true;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <SYSTIMER_lInsertTimerList+0x1b4>
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	f083 0301 	eor.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	f47f af4a 	bne.w	8002314 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bc90      	pop	{r4, r7}
 8002486:	4770      	bx	lr
 8002488:	200004a8 	.word	0x200004a8
 800248c:	20000234 	.word	0x20000234

08002490 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4a29      	ldr	r2, [pc, #164]	; (8002548 <SYSTIMER_lRemoveTimerList+0xb8>)
 80024a4:	4413      	add	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <SYSTIMER_lRemoveTimerList+0x30>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <SYSTIMER_lRemoveTimerList+0xbc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e03d      	b.n	800253c <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d114      	bne.n	80024f2 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1f      	ldr	r2, [pc, #124]	; (800254c <SYSTIMER_lRemoveTimerList+0xbc>)
 80024ce:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <SYSTIMER_lRemoveTimerList+0xbc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <SYSTIMER_lRemoveTimerList+0xbc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <SYSTIMER_lRemoveTimerList+0xbc>)
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	6991      	ldr	r1, [r2, #24]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	6992      	ldr	r2, [r2, #24]
 80024e6:	440a      	add	r2, r1
 80024e8:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e024      	b.n	800253c <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	e018      	b.n	800253c <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	6852      	ldr	r2, [r2, #4]
 800251c:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	6991      	ldr	r1, [r2, #24]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	6992      	ldr	r2, [r2, #24]
 800252c:	440a      	add	r2, r1
 800252e:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	605a      	str	r2, [r3, #4]
  }
}
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200004a8 	.word	0x200004a8
 800254c:	20000234 	.word	0x20000234

08002550 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8002556:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <SYSTIMER_lTimerHandler+0xc4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 800255c:	e050      	b.n	8002600 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff8f 	bl	8002490 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	461a      	mov	r2, r3
 800257e:	2301      	movs	r3, #1
 8002580:	4093      	lsls	r3, r2
 8002582:	43da      	mvns	r2, r3
 8002584:	4b24      	ldr	r3, [pc, #144]	; (8002618 <SYSTIMER_lTimerHandler+0xc8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4013      	ands	r3, r2
 800258a:	4a23      	ldr	r2, [pc, #140]	; (8002618 <SYSTIMER_lTimerHandler+0xc8>)
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e034      	b.n	80025fa <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7b1b      	ldrb	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d112      	bne.n	80025be <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7b5b      	ldrb	r3, [r3, #13]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d12c      	bne.n	80025fa <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff73 	bl	8002490 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6912      	ldr	r2, [r2, #16]
 80025b8:	4610      	mov	r0, r2
 80025ba:	4798      	blx	r3
 80025bc:	e01d      	b.n	80025fa <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7b1b      	ldrb	r3, [r3, #12]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d118      	bne.n	80025f8 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	7b5b      	ldrb	r3, [r3, #13]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d115      	bne.n	80025fa <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff5c 	bl	8002490 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fe71 	bl	80022cc <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6912      	ldr	r2, [r2, #16]
 80025f2:	4610      	mov	r0, r2
 80025f4:	4798      	blx	r3
 80025f6:	e000      	b.n	80025fa <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 80025f8:	e009      	b.n	800260e <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <SYSTIMER_lTimerHandler+0xc4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <SYSTIMER_lTimerHandler+0xbe>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0a7      	beq.n	800255e <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000234 	.word	0x20000234
 8002618:	20000238 	.word	0x20000238

0800261c <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <SysTick_Handler+0x40>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <SysTick_Handler+0x44>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <SysTick_Handler+0x44>)
 8002630:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d905      	bls.n	800264c <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
 800264a:	e004      	b.n	8002656 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8002652:	f7ff ff7d 	bl	8002550 <SYSTIMER_lTimerHandler>
    }
  }
}
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000234 	.word	0x20000234
 8002660:	2000023c 	.word	0x2000023c

08002664 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	f083 0301 	eor.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d020      	beq.n	80026c0 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <SYSTIMER_Init+0x68>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8002684:	4812      	ldr	r0, [pc, #72]	; (80026d0 <SYSTIMER_Init+0x6c>)
 8002686:	f7ff fdff 	bl	8002288 <SysTick_Config>
 800268a:	4603      	mov	r3, r0
 800268c:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d015      	beq.n	80026c0 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8002694:	f7ff fd8e 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 8002698:	4603      	mov	r3, r0
 800269a:	4618      	mov	r0, r3
 800269c:	2101      	movs	r1, #1
 800269e:	2200      	movs	r2, #0
 80026a0:	f7ff fdc0 	bl	8002224 <NVIC_EncodePriority>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f04f 30ff 	mov.w	r0, #4294967295
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7ff fd90 	bl	80021d0 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <SYSTIMER_Init+0x70>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000234 	.word	0x20000234
 80026d0:	0001d4c0 	.word	0x0001d4c0
 80026d4:	20000238 	.word	0x20000238

080026d8 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	460b      	mov	r3, r1
 80026e6:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026fa:	d202      	bcs.n	8002702 <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	e07b      	b.n	80027fa <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e075      	b.n	80027f4 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2201      	movs	r2, #1
 800270c:	409a      	lsls	r2, r3
 800270e:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <SYSTIMER_CreateTimer+0x130>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d16a      	bne.n	80027ee <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2201      	movs	r2, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <SYSTIMER_CreateTimer+0x130>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	4a38      	ldr	r2, [pc, #224]	; (8002808 <SYSTIMER_CreateTimer+0x130>)
 8002726:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8002728:	4938      	ldr	r1, [pc, #224]	; (800280c <SYSTIMER_CreateTimer+0x134>)
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	3310      	adds	r3, #16
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 800273c:	4933      	ldr	r1, [pc, #204]	; (800280c <SYSTIMER_CreateTimer+0x134>)
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3308      	adds	r3, #8
 800274c:	7afa      	ldrb	r2, [r7, #11]
 800274e:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8002750:	492e      	ldr	r1, [pc, #184]	; (800280c <SYSTIMER_CreateTimer+0x134>)
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3308      	adds	r3, #8
 8002760:	2202      	movs	r2, #2
 8002762:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a2a      	ldr	r2, [pc, #168]	; (8002810 <SYSTIMER_CreateTimer+0x138>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	1c59      	adds	r1, r3, #1
 8002774:	4825      	ldr	r0, [pc, #148]	; (800280c <SYSTIMER_CreateTimer+0x134>)
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4403      	add	r3, r0
 8002782:	3318      	adds	r3, #24
 8002784:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8002786:	4921      	ldr	r1, [pc, #132]	; (800280c <SYSTIMER_CreateTimer+0x134>)
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3318      	adds	r3, #24
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 800279a:	491c      	ldr	r1, [pc, #112]	; (800280c <SYSTIMER_CreateTimer+0x134>)
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3308      	adds	r3, #8
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 80027ae:	4917      	ldr	r1, [pc, #92]	; (800280c <SYSTIMER_CreateTimer+0x134>)
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3310      	adds	r3, #16
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 80027c2:	4912      	ldr	r1, [pc, #72]	; (800280c <SYSTIMER_CreateTimer+0x134>)
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 80027d4:	490d      	ldr	r1, [pc, #52]	; (800280c <SYSTIMER_CreateTimer+0x134>)
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
        break;
 80027ec:	e005      	b.n	80027fa <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b07      	cmp	r3, #7
 80027f8:	d986      	bls.n	8002708 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 80027fa:	69fb      	ldr	r3, [r7, #28]
}  
 80027fc:	4618      	mov	r0, r3
 80027fe:	3724      	adds	r7, #36	; 0x24
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	20000238 	.word	0x20000238
 800280c:	200004a8 	.word	0x200004a8
 8002810:	10624dd3 	.word	0x10624dd3

08002814 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	1e5a      	subs	r2, r3, #1
 8002824:	491a      	ldr	r1, [pc, #104]	; (8002890 <SYSTIMER_StartTimer+0x7c>)
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3308      	adds	r3, #8
 8002832:	795b      	ldrb	r3, [r3, #5]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d126      	bne.n	8002886 <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	1e5a      	subs	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	1e59      	subs	r1, r3, #1
 8002840:	4813      	ldr	r0, [pc, #76]	; (8002890 <SYSTIMER_StartTimer+0x7c>)
 8002842:	460b      	mov	r3, r1
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4403      	add	r3, r0
 800284c:	3318      	adds	r3, #24
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	1c59      	adds	r1, r3, #1
 8002852:	480f      	ldr	r0, [pc, #60]	; (8002890 <SYSTIMER_StartTimer+0x7c>)
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4403      	add	r3, r0
 800285e:	3318      	adds	r3, #24
 8002860:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	490a      	ldr	r1, [pc, #40]	; (8002890 <SYSTIMER_StartTimer+0x7c>)
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3308      	adds	r3, #8
 8002874:	2201      	movs	r2, #1
 8002876:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fd25 	bl	80022cc <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	200004a8 	.word	0x200004a8

08002894 <SYSTIMER_StopTimer>:

/*
 *  API to stop the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StopTimer(uint32_t id)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_SUCCESS;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("SYSTIMER_StopTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StopTimer: Error during stop of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));

  if (SYSTIMER_STATE_NOT_INITIALIZED == g_timer_tbl[id - 1U].state)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <SYSTIMER_StopTimer+0x6c>)
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3308      	adds	r3, #8
 80028b2:	795b      	ldrb	r3, [r3, #5]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <SYSTIMER_StopTimer+0x2a>
  {
    status = SYSTIMER_STATUS_FAILURE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e01b      	b.n	80028f6 <SYSTIMER_StopTimer+0x62>
  }
  else
  {
    /* Check whether Timer is in Stop state */
    if (SYSTIMER_STATE_RUNNING == g_timer_tbl[id - 1U].state)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	490f      	ldr	r1, [pc, #60]	; (8002900 <SYSTIMER_StopTimer+0x6c>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3308      	adds	r3, #8
 80028d0:	795b      	ldrb	r3, [r3, #5]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d10f      	bne.n	80028f6 <SYSTIMER_StopTimer+0x62>
    {
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        g_timer_tbl[id - 1U].state = SYSTIMER_STATE_STOPPED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1e5a      	subs	r2, r3, #1
 80028da:	4909      	ldr	r1, [pc, #36]	; (8002900 <SYSTIMER_StopTimer+0x6c>)
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	3308      	adds	r3, #8
 80028e8:	2202      	movs	r2, #2
 80028ea:	715a      	strb	r2, [r3, #5]

        /* remove Timer from node list */
        SYSTIMER_lRemoveTimerList(id - 1U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fdcd 	bl	8002490 <SYSTIMER_lRemoveTimerList>

    }
  }

  return (status);
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200004a8 	.word	0x200004a8

08002904 <SYSTIMER_DeleteTimer>:

/*
 *  Function to delete the Timer instance.
 */
SYSTIMER_STATUS_t SYSTIMER_DeleteTimer(uint32_t id)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_SUCCESS;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_DeleteTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_DeleteTimer: Error during deletion of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));

  /* Check whether Timer is in delete state */
  if (SYSTIMER_STATE_NOT_INITIALIZED == g_timer_tbl[id - 1U].state)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	1e5a      	subs	r2, r3, #1
 8002914:	4920      	ldr	r1, [pc, #128]	; (8002998 <SYSTIMER_DeleteTimer+0x94>)
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	3308      	adds	r3, #8
 8002922:	795b      	ldrb	r3, [r3, #5]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <SYSTIMER_DeleteTimer+0x2a>
  {
      status = SYSTIMER_STATUS_FAILURE;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e02d      	b.n	800298a <SYSTIMER_DeleteTimer+0x86>
  }
  else
  {
    if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	1e5a      	subs	r2, r3, #1
 8002932:	4919      	ldr	r1, [pc, #100]	; (8002998 <SYSTIMER_DeleteTimer+0x94>)
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	3308      	adds	r3, #8
 8002940:	795b      	ldrb	r3, [r3, #5]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d116      	bne.n	8002974 <SYSTIMER_DeleteTimer+0x70>
    {
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      g_timer_tbl[id - 1U].state = SYSTIMER_STATE_NOT_INITIALIZED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	1e5a      	subs	r2, r3, #1
 800294a:	4913      	ldr	r1, [pc, #76]	; (8002998 <SYSTIMER_DeleteTimer+0x94>)
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3308      	adds	r3, #8
 8002958:	2200      	movs	r2, #0
 800295a:	715a      	strb	r2, [r3, #5]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << (id - 1U));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	461a      	mov	r2, r3
 8002962:	2301      	movs	r3, #1
 8002964:	4093      	lsls	r3, r2
 8002966:	43da      	mvns	r2, r3
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <SYSTIMER_DeleteTimer+0x98>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4013      	ands	r3, r2
 800296e:	4a0b      	ldr	r2, [pc, #44]	; (800299c <SYSTIMER_DeleteTimer+0x98>)
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e00a      	b.n	800298a <SYSTIMER_DeleteTimer+0x86>
    }
    else
    {
      /* Yes, remove this timer from timer list during ISR execution */
      g_timer_tbl[id - 1U].delete_swtmr = true;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <SYSTIMER_DeleteTimer+0x94>)
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	3320      	adds	r3, #32
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
    }
  }

  return (status);
 800298a:	7bfb      	ldrb	r3, [r7, #15]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	200004a8 	.word	0x200004a8
 800299c:	20000238 	.word	0x20000238

080029a0 <SDMMC_BLOCK_Init>:
  return version;
}

/* SDMMC_BLOCK initialization function */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Init(SDMMC_BLOCK_t *const obj)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
  SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73bb      	strb	r3, [r7, #14]

  XMC_ASSERT("SDMMC_BLOCK_Init:Null obj is passed as input" , (obj != NULL))

  if (obj->init_flag == 1U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7b5b      	ldrb	r3, [r3, #13]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <SDMMC_BLOCK_Init+0x1e>
  {
    status = SDMMC_BLOCK_STATUS_SUCCESS;
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e01b      	b.n	80029f6 <SDMMC_BLOCK_Init+0x56>
  }
  else
  {
    /* Setup pins */
    if (obj->init_pins != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <SDMMC_BLOCK_Init+0x2c>
    {
      obj->init_pins();
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4798      	blx	r3
      mode_status = SDMMC_BLOCK_SPI_Init(obj);
    }
#endif

#ifdef SDMMC_BLOCK_SD
    if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7b1b      	ldrb	r3, [r3, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d104      	bne.n	80029de <SDMMC_BLOCK_Init+0x3e>
    {
      mode_status = SDMMC_BLOCK_SD_Init(obj);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f003 f9c9 	bl	8005d6c <SDMMC_BLOCK_SD_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	73bb      	strb	r3, [r7, #14]
    }
#endif

    if (mode_status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80029de:	7bbb      	ldrb	r3, [r7, #14]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <SDMMC_BLOCK_Init+0x50>
    {
      status = SDMMC_BLOCK_STATUS_FAILURE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      obj->init_flag = 0U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	735a      	strb	r2, [r3, #13]
 80029ee:	e002      	b.n	80029f6 <SDMMC_BLOCK_Init+0x56>
    }
    else
    {
      obj->init_flag = 1U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	735a      	strb	r2, [r3, #13]
    }
  }

  return status;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <SDMMC_BLOCK_Initialize>:

/* Initialize the card identification process */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Initialize(SDMMC_BLOCK_t *const obj)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_FAILURE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73bb      	strb	r3, [r7, #14]
      mode_status = SDMMC_BLOCK_SPI_CardIdentificationProcess(obj);
    }
#endif

#ifdef SDMMC_BLOCK_SD
    if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7b1b      	ldrb	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d104      	bne.n	8002a22 <SDMMC_BLOCK_Initialize+0x22>
    {
      mode_status = SDMMC_BLOCK_SD_CardIdentificationProcess(obj);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f002 fac1 	bl	8004fa0 <SDMMC_BLOCK_SD_CardIdentificationProcess>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	73fb      	strb	r3, [r7, #15]
    }
#endif

    if (mode_status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <SDMMC_BLOCK_Initialize+0x2c>
    {
      status = SDMMC_BLOCK_STATUS_SUCCESS;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73bb      	strb	r3, [r7, #14]
    }

  return status;
 8002a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop

08002a38 <SDMMC_BLOCK_ReadBlock>:
/* Read the specified number of sectors of data from the specified address */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_ReadBlock(SDMMC_BLOCK_t *const obj,
                                           uint8_t* read_buf,
                                           const uint32_t sector_number,
                                           const uint8_t sector_count)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	70fb      	strb	r3, [r7, #3]
  SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
    status = SDMMC_BLOCK_SPI_ReadBlock(obj, read_buf, sector_number, (uint32_t)sector_count);
  }
#endif

#ifdef SDMMC_BLOCK_SD
  if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	7b1b      	ldrb	r3, [r3, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <SDMMC_BLOCK_ReadBlock+0x2a>
  {
    status = SDMMC_BLOCK_SD_ReadBlock(obj, read_buf, sector_number, sector_count);
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	f003 f9a5 	bl	8005da8 <SDMMC_BLOCK_SD_ReadBlock>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]
  }
#endif

  return status;
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <SDMMC_BLOCK_WriteBlock>:
/* Write the specified number of sectors of data from the specified address */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_WriteBlock(SDMMC_BLOCK_t *const obj,
                                            uint8_t* write_buf,
                                            const uint32_t sector_number,
                                            const uint8_t sector_count)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	70fb      	strb	r3, [r7, #3]
  SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
    status = SDMMC_BLOCK_SPI_WriteBlock(obj, write_buf, sector_number, (uint32_t)sector_count);
  }
#endif

#ifdef SDMMC_BLOCK_SD
  if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	7b1b      	ldrb	r3, [r3, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <SDMMC_BLOCK_WriteBlock+0x2a>
  {
    status = SDMMC_BLOCK_SD_WriteBlock(obj, write_buf, sector_number, sector_count);
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	f003 f9df 	bl	8005e50 <SDMMC_BLOCK_SD_WriteBlock>
 8002a92:	4603      	mov	r3, r0
 8002a94:	75fb      	strb	r3, [r7, #23]
  }
#endif

  return status;
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <SDMMC_BLOCK_GetStatus>:

/* Get the current status of the card */
uint8_t SDMMC_BLOCK_GetStatus(SDMMC_BLOCK_t *const obj)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint8_t disk_status = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]
      disk_status = SDMMC_BLOCK_SPI_GetState(obj);
    }
#endif

#ifdef SDMMC_BLOCK_SD
    if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7b1b      	ldrb	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d104      	bne.n	8002abe <SDMMC_BLOCK_GetStatus+0x1e>
    {
      disk_status = SDMMC_BLOCK_SD_GetState(obj);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f002 ff29 	bl	800590c <SDMMC_BLOCK_SD_GetState>
 8002aba:	4603      	mov	r3, r0
 8002abc:	73fb      	strb	r3, [r7, #15]
    }
#endif

  return disk_status;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <SDMMC_BLOCK_Ioctl>:

/* I/O control */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Ioctl(SDMMC_BLOCK_t *const obj, const uint8_t command, void *buffer)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b091      	sub	sp, #68	; 0x44
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	72fb      	strb	r3, [r7, #11]
  SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  uint8_t card_status;
  bool valid_command = true;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  SDMMC_BLOCK_ERASE_ADDRESS_t *erase_ptr;
  SDMMC_BLOCK_LOCK_STRUCTURE_t lock = {0U};
 8002ae8:	f107 0310 	add.w	r3, r7, #16
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	3304      	adds	r3, #4
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	3304      	adds	r3, #4
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	3304      	adds	r3, #4
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	3302      	adds	r3, #2
  const SDMMC_BLOCK_PASSWORD_t *password;

  XMC_ASSERT("SDMMC_BLOCK_WriteBlock:Null obj is passed as input" , (obj != NULL))

  /* If card is not initialized or inserted */
  if ((obj->card_state & (uint8_t)SDMMC_BLOCK_CARD_STATE_NOT_INITIALIZED) == (uint8_t)0)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	7a1b      	ldrb	r3, [r3, #8]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11e      	bne.n	8002b6c <SDMMC_BLOCK_Ioctl+0xa4>
  {
    card_status = SDMMC_BLOCK_GetStatus(obj);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ffb6 	bl	8002aa0 <SDMMC_BLOCK_GetStatus>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    if ((card_status & (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED) != 0U)
 8002b3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d018      	beq.n	8002b78 <SDMMC_BLOCK_Ioctl+0xb0>
    {
      status = SDMMC_BLOCK_STATUS_LOCKED;
 8002b46:	2305      	movs	r3, #5
 8002b48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      if ((command == (uint8_t)SDMMC_BLOCK_CTRL_SYNC) ||
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <SDMMC_BLOCK_Ioctl+0x9c>
 8002b52:	7afb      	ldrb	r3, [r7, #11]
 8002b54:	2b0d      	cmp	r3, #13
 8002b56:	d005      	beq.n	8002b64 <SDMMC_BLOCK_Ioctl+0x9c>
          (command == (uint8_t)SDMMC_BLOCK_MMC_GET_OCR) ||
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	2b0e      	cmp	r3, #14
 8002b5c:	d002      	beq.n	8002b64 <SDMMC_BLOCK_Ioctl+0x9c>
          (command == (uint8_t)SDMMC_BLOCK_MMC_GET_SDSTAT) ||
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d109      	bne.n	8002b78 <SDMMC_BLOCK_Ioctl+0xb0>
          (command == (uint8_t)SDMMC_BLOCK_CTRL_TRIM))
      {
        valid_command = false;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002b6a:	e005      	b.n	8002b78 <SDMMC_BLOCK_Ioctl+0xb0>
      }
    }
  }
  else
  {
    valid_command = false;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    status = SDMMC_BLOCK_STATUS_NOTRDY;
 8002b72:	2303      	movs	r3, #3
 8002b74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  if (valid_command == true)
 8002b78:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8240 	beq.w	8003002 <SDMMC_BLOCK_Ioctl+0x53a>
  {
    /* Switch to the respective IOCTL command */
    switch (command)
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	2b25      	cmp	r3, #37	; 0x25
 8002b86:	f200 8219 	bhi.w	8002fbc <SDMMC_BLOCK_Ioctl+0x4f4>
 8002b8a:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <SDMMC_BLOCK_Ioctl+0xc8>)
 8002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b90:	08002c29 	.word	0x08002c29
 8002b94:	08002c51 	.word	0x08002c51
 8002b98:	08002c37 	.word	0x08002c37
 8002b9c:	08002c93 	.word	0x08002c93
 8002ba0:	08002c6b 	.word	0x08002c6b
 8002ba4:	08002fbd 	.word	0x08002fbd
 8002ba8:	08002fbd 	.word	0x08002fbd
 8002bac:	08002fa5 	.word	0x08002fa5
 8002bb0:	08002fbd 	.word	0x08002fbd
 8002bb4:	08002fbd 	.word	0x08002fbd
 8002bb8:	08002cad 	.word	0x08002cad
 8002bbc:	08002cc7 	.word	0x08002cc7
 8002bc0:	08002ce1 	.word	0x08002ce1
 8002bc4:	08002cfb 	.word	0x08002cfb
 8002bc8:	08002d15 	.word	0x08002d15
 8002bcc:	08002fbd 	.word	0x08002fbd
 8002bd0:	08002fbd 	.word	0x08002fbd
 8002bd4:	08002fbd 	.word	0x08002fbd
 8002bd8:	08002fbd 	.word	0x08002fbd
 8002bdc:	08002fbd 	.word	0x08002fbd
 8002be0:	08002fbd 	.word	0x08002fbd
 8002be4:	08002fbd 	.word	0x08002fbd
 8002be8:	08002fbd 	.word	0x08002fbd
 8002bec:	08002fbd 	.word	0x08002fbd
 8002bf0:	08002fbd 	.word	0x08002fbd
 8002bf4:	08002fbd 	.word	0x08002fbd
 8002bf8:	08002fbd 	.word	0x08002fbd
 8002bfc:	08002fbd 	.word	0x08002fbd
 8002c00:	08002fbd 	.word	0x08002fbd
 8002c04:	08002fbd 	.word	0x08002fbd
 8002c08:	08002fbd 	.word	0x08002fbd
 8002c0c:	08002d2f 	.word	0x08002d2f
 8002c10:	08002d87 	.word	0x08002d87
 8002c14:	08002ddf 	.word	0x08002ddf
 8002c18:	08002e77 	.word	0x08002e77
 8002c1c:	08002ecf 	.word	0x08002ecf
 8002c20:	08002f67 	.word	0x08002f67
 8002c24:	08002f81 	.word	0x08002f81
    {
      /*
       * Control sync
       */
      case SDMMC_BLOCK_CTRL_SYNC:
        status = SDMMC_BLOCK_lFlushDiskWriteCache(obj);
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f9f1 	bl	8003010 <SDMMC_BLOCK_lFlushDiskWriteCache>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 8002c34:	e1c6      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          mode_status = SDMMC_BLOCK_SPI_GetSectorSize(obj, buffer);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	7b1b      	ldrb	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <SDMMC_BLOCK_Ioctl+0x186>
        {
          mode_status = SDMMC_BLOCK_SD_GetSectorSize(obj, buffer);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	f002 ff79 	bl	8005b38 <SDMMC_BLOCK_SD_GetSectorSize>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif

      break;
 8002c4c:	e1ba      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002c4e:	e1b9      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          mode_status = SDMMC_BLOCK_SPI_GetSectorCount(obj, buffer);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	7b1b      	ldrb	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d107      	bne.n	8002c68 <SDMMC_BLOCK_Ioctl+0x1a0>
        {
          mode_status = SDMMC_BLOCK_SD_GetSectorCount(obj, buffer);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	f002 fefe 	bl	8005a5c <SDMMC_BLOCK_SD_GetSectorCount>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002c66:	e1ad      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002c68:	e1ac      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>

      /*
       * Control trim. Erase the content in the specified sectors
       */
      case SDMMC_BLOCK_CTRL_TRIM:
        erase_ptr = (SDMMC_BLOCK_ERASE_ADDRESS_t *) buffer;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38
          mode_status = SDMMC_BLOCK_SPI_EraseBlock(obj, (erase_ptr->start_address), (erase_ptr->end_address));
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	7b1b      	ldrb	r3, [r3, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <SDMMC_BLOCK_Ioctl+0x1c8>
        {
          mode_status = SDMMC_BLOCK_SD_EraseBlock(obj, (erase_ptr->start_address), (erase_ptr->end_address));
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	4611      	mov	r1, r2
 8002c82:	461a      	mov	r2, r3
 8002c84:	f002 fc84 	bl	8005590 <SDMMC_BLOCK_SD_EraseBlock>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002c8e:	e199      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002c90:	e198      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          mode_status = SDMMC_BLOCK_SPI_GetBlockSize(obj, buffer);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	7b1b      	ldrb	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d107      	bne.n	8002caa <SDMMC_BLOCK_Ioctl+0x1e2>
        {
          mode_status = SDMMC_BLOCK_SD_GetBlockSize(obj, buffer);
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	f002 ff5b 	bl	8005b58 <SDMMC_BLOCK_SD_GetBlockSize>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002ca8:	e18c      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002caa:	e18b      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          mode_status = SDMMC_BLOCK_SPI_GetCardType(obj, buffer);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	7b1b      	ldrb	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <SDMMC_BLOCK_Ioctl+0x1fc>
        {
          mode_status = SDMMC_BLOCK_SD_GetCardType(obj, buffer);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	f002 fe38 	bl	800592c <SDMMC_BLOCK_SD_GetCardType>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002cc2:	e17f      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002cc4:	e17e      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          mode_status = SDMMC_BLOCK_SPI_GetCsd(obj, buffer);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	7b1b      	ldrb	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <SDMMC_BLOCK_Ioctl+0x216>
        {
          mode_status = SDMMC_BLOCK_SD_GetCsd(obj, buffer);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	f002 feaf 	bl	8005a34 <SDMMC_BLOCK_SD_GetCsd>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002cdc:	e172      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002cde:	e171      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          mode_status = SDMMC_BLOCK_SPI_GetCid(obj, buffer);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	7b1b      	ldrb	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <SDMMC_BLOCK_Ioctl+0x230>
        {
          mode_status = SDMMC_BLOCK_SD_GetCid(obj, buffer);
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	f002 fe30 	bl	8005950 <SDMMC_BLOCK_SD_GetCid>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002cf6:	e165      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002cf8:	e164      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          mode_status = SDMMC_BLOCK_SPI_GetOcr(obj, buffer);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	7b1b      	ldrb	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d107      	bne.n	8002d12 <SDMMC_BLOCK_Ioctl+0x24a>
        {
          mode_status = SDMMC_BLOCK_SD_GetOcr(obj, buffer);
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	f002 fe83 	bl	8005a10 <SDMMC_BLOCK_SD_GetOcr>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002d10:	e158      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002d12:	e157      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          mode_status = SDMMC_BLOCK_SPI_GetSdStatus(obj, buffer);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	7b1b      	ldrb	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <SDMMC_BLOCK_Ioctl+0x264>
        {
          mode_status = SDMMC_BLOCK_SD_GetSdStatus(obj, buffer);
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	f002 ff72 	bl	8005c08 <SDMMC_BLOCK_SD_GetSdStatus>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002d2a:	e14b      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002d2c:	e14a      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>

      /*
       * Lock card
       */
      case SDMMC_BLOCK_MMC_LOCK_CARD:
        lock.mode = (uint8_t)SDMMC_BLOCK_LOCK;
 8002d2e:	2304      	movs	r3, #4
 8002d30:	743b      	strb	r3, [r7, #16]
        password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check password length doesn't exceeds the permitted length */
        if (password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH)
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d81d      	bhi.n	8002d7c <SDMMC_BLOCK_Ioctl+0x2b4>
        {
          lock.pwd_len = password->old_pwd_len;
 8002d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d46:	747b      	strb	r3, [r7, #17]
          memcpy(lock.pwd_data, password->old_pwd, lock.pwd_len);
 8002d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d4a:	7c7b      	ldrb	r3, [r7, #17]
 8002d4c:	461c      	mov	r4, r3
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	3302      	adds	r3, #2
 8002d54:	4618      	mov	r0, r3
 8002d56:	4611      	mov	r1, r2
 8002d58:	4622      	mov	r2, r4
 8002d5a:	f009 f90d 	bl	800bf78 <memcpy>
            mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_LOCKED);
          }
#endif

#ifdef SDMMC_BLOCK_SD
          if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	7b1b      	ldrb	r3, [r3, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10e      	bne.n	8002d84 <SDMMC_BLOCK_Ioctl+0x2bc>
          {
            mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_LOCKED);
 8002d66:	f107 0310 	add.w	r3, r7, #16
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f002 fd02 	bl	8005778 <SDMMC_BLOCK_SD_LockUnlockCard>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
        else
        {
          mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
        }
        break;
 8002d7a:	e123      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          }
#endif
        }
        else
        {
          mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 8002d7c:	230a      	movs	r3, #10
 8002d7e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
        break;
 8002d82:	e11f      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002d84:	e11e      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>

      /*
       * Unlock card
       */
      case SDMMC_BLOCK_MMC_UNLOCK_CARD:
        lock.mode = (uint8_t)SDMMC_BLOCK_UNLOCK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	743b      	strb	r3, [r7, #16]
        password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	637b      	str	r3, [r7, #52]	; 0x34

        if (password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH)
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d81d      	bhi.n	8002dd4 <SDMMC_BLOCK_Ioctl+0x30c>
        {
          lock.pwd_len = password->old_pwd_len;
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9e:	747b      	strb	r3, [r7, #17]
          memcpy(lock.pwd_data, password->old_pwd, lock.pwd_len);
 8002da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da2:	7c7b      	ldrb	r3, [r7, #17]
 8002da4:	461c      	mov	r4, r3
 8002da6:	f107 0310 	add.w	r3, r7, #16
 8002daa:	3302      	adds	r3, #2
 8002dac:	4618      	mov	r0, r3
 8002dae:	4611      	mov	r1, r2
 8002db0:	4622      	mov	r2, r4
 8002db2:	f009 f8e1 	bl	800bf78 <memcpy>
            mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED);
          }
#endif

#ifdef SDMMC_BLOCK_SD
          if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	7b1b      	ldrb	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10e      	bne.n	8002ddc <SDMMC_BLOCK_Ioctl+0x314>
          {
            mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED);
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f002 fcd6 	bl	8005778 <SDMMC_BLOCK_SD_LockUnlockCard>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
        else
        {
          mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
        }
        break;
 8002dd2:	e0f7      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          }
#endif
        }
        else
        {
          mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 8002dd4:	230a      	movs	r3, #10
 8002dd6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
        break;
 8002dda:	e0f3      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002ddc:	e0f2      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>

      /*
       * Set card password
       */
      case SDMMC_BLOCK_MMC_SET_PASSWD:
        lock.mode = (uint8_t)SDMMC_BLOCK_SET_PASSWD;
 8002dde:	2301      	movs	r3, #1
 8002de0:	743b      	strb	r3, [r7, #16]
        password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH) &&
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d83d      	bhi.n	8002e6c <SDMMC_BLOCK_Ioctl+0x3a4>
            (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
 8002df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
       */
      case SDMMC_BLOCK_MMC_SET_PASSWD:
        lock.mode = (uint8_t)SDMMC_BLOCK_SET_PASSWD;
        password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;

        if ((password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH) &&
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d838      	bhi.n	8002e6c <SDMMC_BLOCK_Ioctl+0x3a4>
            (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
        {
          lock.pwd_len = password->old_pwd_len + password->new_pwd_len;
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e06:	4413      	add	r3, r2
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	747b      	strb	r3, [r7, #17]
          memcpy(lock.pwd_data, password->old_pwd, password->old_pwd_len);
 8002e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e14:	461c      	mov	r4, r3
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4622      	mov	r2, r4
 8002e22:	f009 f8a9 	bl	800bf78 <memcpy>
          memcpy(&lock.pwd_data[password->old_pwd_len], password->new_pwd, password->new_pwd_len);
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	4413      	add	r3, r2
 8002e34:	1c99      	adds	r1, r3, #2
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	f103 0210 	add.w	r2, r3, #16
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e42:	4608      	mov	r0, r1
 8002e44:	4611      	mov	r1, r2
 8002e46:	461a      	mov	r2, r3
 8002e48:	f009 f896 	bl	800bf78 <memcpy>
            mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED);
          }
    #endif

    #ifdef SDMMC_BLOCK_SD
          if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	7b1b      	ldrb	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <SDMMC_BLOCK_Ioctl+0x3a2>
          {
            mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED);
 8002e54:	f107 0310 	add.w	r3, r7, #16
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f002 fc8b 	bl	8005778 <SDMMC_BLOCK_SD_LockUnlockCard>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED);
          }
    #endif

    #ifdef SDMMC_BLOCK_SD
          if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002e68:	e004      	b.n	8002e74 <SDMMC_BLOCK_Ioctl+0x3ac>
 8002e6a:	e003      	b.n	8002e74 <SDMMC_BLOCK_Ioctl+0x3ac>
          }
    #endif
        }
        else
        {
          mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 8002e6c:	230a      	movs	r3, #10
 8002e6e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
        break;
 8002e72:	e0a7      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002e74:	e0a6      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>

      /*
       * Clear card password
       */
      case SDMMC_BLOCK_MMC_CLEAR_PASSWD:
        lock.mode = (uint8_t)SDMMC_BLOCK_CLR_PASSWD;
 8002e76:	2302      	movs	r3, #2
 8002e78:	743b      	strb	r3, [r7, #16]
        password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
        if (password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH)
 8002e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d81d      	bhi.n	8002ec4 <SDMMC_BLOCK_Ioctl+0x3fc>
        {
          lock.pwd_len = password->old_pwd_len;
 8002e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8e:	747b      	strb	r3, [r7, #17]
          memcpy(lock.pwd_data, password->old_pwd, lock.pwd_len);
 8002e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e92:	7c7b      	ldrb	r3, [r7, #17]
 8002e94:	461c      	mov	r4, r3
 8002e96:	f107 0310 	add.w	r3, r7, #16
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	f009 f869 	bl	800bf78 <memcpy>
            mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED);
          }
#endif

#ifdef SDMMC_BLOCK_SD
          if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	7b1b      	ldrb	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10e      	bne.n	8002ecc <SDMMC_BLOCK_Ioctl+0x404>
          {
            mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED);
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f002 fc5e 	bl	8005778 <SDMMC_BLOCK_SD_LockUnlockCard>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
        else
        {
          mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
        }
        break;
 8002ec2:	e07f      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          }
#endif
        }
        else
        {
          mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 8002ec4:	230a      	movs	r3, #10
 8002ec6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
        break;
 8002eca:	e07b      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002ecc:	e07a      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>

      /*
       * Set card lock
       */
      case SDMMC_BLOCK_MMC_SET_LOCK:
        lock.mode = (uint8_t)SDMMC_BLOCK_SET_PASSWD_AND_LOCK;
 8002ece:	2305      	movs	r3, #5
 8002ed0:	743b      	strb	r3, [r7, #16]
        password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH) &&
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d83d      	bhi.n	8002f5c <SDMMC_BLOCK_Ioctl+0x494>
            (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
       */
      case SDMMC_BLOCK_MMC_SET_LOCK:
        lock.mode = (uint8_t)SDMMC_BLOCK_SET_PASSWD_AND_LOCK;
        password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;

        if ((password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH) &&
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d838      	bhi.n	8002f5c <SDMMC_BLOCK_Ioctl+0x494>
            (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
        {
          lock.pwd_len = password->old_pwd_len + password->new_pwd_len;
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ef6:	4413      	add	r3, r2
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	747b      	strb	r3, [r7, #17]
          memcpy(lock.pwd_data, password->old_pwd, password->old_pwd_len);
 8002efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f04:	461c      	mov	r4, r3
 8002f06:	f107 0310 	add.w	r3, r7, #16
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4622      	mov	r2, r4
 8002f12:	f009 f831 	bl	800bf78 <memcpy>
          memcpy(&lock.pwd_data[password->old_pwd_len], password->new_pwd, password->new_pwd_len);
 8002f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f107 0310 	add.w	r3, r7, #16
 8002f22:	4413      	add	r3, r2
 8002f24:	1c99      	adds	r1, r3, #2
 8002f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f28:	f103 0210 	add.w	r2, r3, #16
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f32:	4608      	mov	r0, r1
 8002f34:	4611      	mov	r1, r2
 8002f36:	461a      	mov	r2, r3
 8002f38:	f009 f81e 	bl	800bf78 <memcpy>
            mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_LOCKED);
          }
#endif

#ifdef SDMMC_BLOCK_SD
          if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	7b1b      	ldrb	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <SDMMC_BLOCK_Ioctl+0x492>
          {
            mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_LOCKED);
 8002f44:	f107 0310 	add.w	r3, r7, #16
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f002 fc13 	bl	8005778 <SDMMC_BLOCK_SD_LockUnlockCard>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_LOCKED);
          }
#endif

#ifdef SDMMC_BLOCK_SD
          if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002f58:	e004      	b.n	8002f64 <SDMMC_BLOCK_Ioctl+0x49c>
 8002f5a:	e003      	b.n	8002f64 <SDMMC_BLOCK_Ioctl+0x49c>
          }
#endif
        }
        else
        {
          mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 8002f5c:	230a      	movs	r3, #10
 8002f5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
        break;
 8002f62:	e02f      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002f64:	e02e      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          mode_status =  SDMMC_BLOCK_SPI_GetLockStatus(obj, (SDMMC_BLOCK_CARD_LOCK_STATUS_t *)buffer);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	7b1b      	ldrb	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <SDMMC_BLOCK_Ioctl+0x4b6>
        {
          mode_status = SDMMC_BLOCK_SD_GetLockStatus(obj, (SDMMC_BLOCK_CARD_LOCK_STATUS_t *)buffer);
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	f002 fc85 	bl	8005880 <SDMMC_BLOCK_SD_GetLockStatus>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002f7c:	e022      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002f7e:	e021      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>

      /*
       * Force card erase
       */
      case SDMMC_BLOCK_MMC_FORCE_ERASE:
        lock.mode = (uint8_t)SDMMC_BLOCK_FORCE_ERASE;
 8002f80:	2308      	movs	r3, #8
 8002f82:	743b      	strb	r3, [r7, #16]
          mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	7b1b      	ldrb	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <SDMMC_BLOCK_Ioctl+0x4da>
        {
          mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED);
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	4619      	mov	r1, r3
 8002f94:	2200      	movs	r2, #0
 8002f96:	f002 fbef 	bl	8005778 <SDMMC_BLOCK_SD_LockUnlockCard>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002fa0:	e010      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002fa2:	e00f      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
          mode_status = SDMMC_BLOCK_SPI_EjectCard(obj);
        }
#endif

#ifdef SDMMC_BLOCK_SD
        if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	7b1b      	ldrb	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <SDMMC_BLOCK_Ioctl+0x4f2>
        {
          mode_status = SDMMC_BLOCK_SD_EjectCard(obj);
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f002 fe77 	bl	8005ca0 <SDMMC_BLOCK_SD_EjectCard>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        }
#endif
        break;
 8002fb8:	e004      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>
 8002fba:	e003      	b.n	8002fc4 <SDMMC_BLOCK_Ioctl+0x4fc>

      default:
        mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 8002fbc:	230a      	movs	r3, #10
 8002fbe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        break;
 8002fc2:	bf00      	nop
    }

    if (mode_status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8002fc4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <SDMMC_BLOCK_Ioctl+0x50c>
    {
      status = SDMMC_BLOCK_STATUS_SUCCESS;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002fd2:	e016      	b.n	8003002 <SDMMC_BLOCK_Ioctl+0x53a>
    }
    else if (mode_status == SDMMC_BLOCK_MODE_STATUS_WP_VIOLATION_ERROR)
 8002fd4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d103      	bne.n	8002fe4 <SDMMC_BLOCK_Ioctl+0x51c>
    {
      status = SDMMC_BLOCK_STATUS_WRPRT;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002fe2:	e00e      	b.n	8003002 <SDMMC_BLOCK_Ioctl+0x53a>
    }
    else if ((mode_status == SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR) ||
 8002fe4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002fe8:	2b0a      	cmp	r3, #10
 8002fea:	d003      	beq.n	8002ff4 <SDMMC_BLOCK_Ioctl+0x52c>
 8002fec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ff0:	2b33      	cmp	r3, #51	; 0x33
 8002ff2:	d103      	bne.n	8002ffc <SDMMC_BLOCK_Ioctl+0x534>
             (mode_status == SDMMC_BLOCK_MODE_STATUS_SECTOR_OUT_OF_BOUND))
    {
      status = SDMMC_BLOCK_STATUS_PARERR;
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002ffa:	e002      	b.n	8003002 <SDMMC_BLOCK_Ioctl+0x53a>
    }
    else
    {
      status = SDMMC_BLOCK_STATUS_FAILURE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }

  return status;
 8003002:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8003006:	4618      	mov	r0, r3
 8003008:	3744      	adds	r7, #68	; 0x44
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}
 800300e:	bf00      	nop

08003010 <SDMMC_BLOCK_lFlushDiskWriteCache>:
 * LOCAL ROUTINES IMPLEMENTATION
 **********************************************************************************************************************/

/* Flush disk cache */
static SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_lFlushDiskWriteCache(SDMMC_BLOCK_t *obj)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
   * media. We're already ensuring that a write block(s) operation completes
   * before it exits WriteBlock().
   * So, this function does nothing at the moment. We are simply going to
   * return success
   */
  return SDMMC_BLOCK_STATUS_SUCCESS;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop

08003028 <XMC_SDMMC_SetCardDetectionSource>:
 *
 * \par<b>Description: </b><br>
 * Selects source for card detection
 */
__STATIC_INLINE void XMC_SDMMC_SetCardDetectionSource(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_CD_SOURCE_t source)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_SDMMC_SetCardDetectionSource: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

#if UC_SERIES == XMC45
  sdmmc->HOST_CTRL |= (sdmmc->HOST_CTRL & (uint32_t)~SDMMC_HOST_CTRL_CARD_DET_SIGNAL_DETECT_Msk) | source;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	ea42 0103 	orr.w	r1, r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800304c:	b2da      	uxtb	r2, r3
 800304e:	b2cb      	uxtb	r3, r1
 8003050:	4313      	orrs	r3, r2
 8003052:	b2da      	uxtb	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#else
  *(uint32_t *)SDMMC_CON = (*(uint32_t *)SDMMC_CON & (uint32_t)~SDMMC_CON_CDSEL_Msk) | source;
#endif

}
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <XMC_SDMMC_SetCardDetectionStatus>:
 * Generates (card ins or card removal) interrupt when the normal interrupt is enabled.
 * @note Only valid if SDMMC card detection signal source is set to XMC_SDMMC_CD_SOURCE_SW <br>
 *
 */
__STATIC_INLINE void XMC_SDMMC_SetCardDetectionStatus(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_CD_STATUS_t status)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_SDMMC_SetCardDetectionStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

#if UC_SERIES == XMC45
  sdmmc->HOST_CTRL |= (sdmmc->HOST_CTRL & (uint32_t)~SDMMC_HOST_CTRL_CARD_DETECT_TEST_LEVEL_Msk) | status;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	ea42 0103 	orr.w	r1, r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003088:	b2da      	uxtb	r2, r3
 800308a:	b2cb      	uxtb	r3, r1
 800308c:	4313      	orrs	r3, r2
 800308e:	b2da      	uxtb	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#else
  *(uint32_t *)SDMMC_CON = (*(uint32_t *)SDMMC_CON & (uint32_t)~SDMMC_CON_CDSVAL_Msk) | status;
#endif
}
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <XMC_SDMMC_EnableDelayCmdDatLines>:
 * \par
 * Use the function to enable delay on the command/data out lines. Invoke this function
 * before selecting the number of delay elements.
 */
__STATIC_INLINE void XMC_SDMMC_EnableDelayCmdDatLines(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  SCU_GENERAL->SDMMCDEL |= (uint32_t)SCU_GENERAL_SDMMCDEL_TAPEN_Msk;
 80030a4:	4a05      	ldr	r2, [pc, #20]	; (80030bc <XMC_SDMMC_EnableDelayCmdDatLines+0x1c>)
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <XMC_SDMMC_EnableDelayCmdDatLines+0x1c>)
 80030a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	50004000 	.word	0x50004000

080030c0 <XMC_SDMMC_SetDelay>:
 * The function writes the delay value to the SDMMC delay control register (SDMMCDEL)
 * within the realm of the SCU peripheral. A delay of tapdel + 1 is considered as the
 * final selected number of delay elements.
 */
__STATIC_INLINE void XMC_SDMMC_SetDelay(uint8_t tapdel)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
  SCU_GENERAL->SDMMCDEL = (uint32_t)((SCU_GENERAL->SDMMCDEL & (uint32_t)~SCU_GENERAL_SDMMCDEL_TAPDEL_Msk) |
 80030ca:	4908      	ldr	r1, [pc, #32]	; (80030ec <XMC_SDMMC_SetDelay+0x2c>)
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <XMC_SDMMC_SetDelay+0x2c>)
 80030ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
                                  (uint32_t)(tapdel << SCU_GENERAL_SDMMCDEL_TAPDEL_Pos));
 80030d6:	79fa      	ldrb	r2, [r7, #7]
 80030d8:	0112      	lsls	r2, r2, #4
 * within the realm of the SCU peripheral. A delay of tapdel + 1 is considered as the
 * final selected number of delay elements.
 */
__STATIC_INLINE void XMC_SDMMC_SetDelay(uint8_t tapdel)
{
  SCU_GENERAL->SDMMCDEL = (uint32_t)((SCU_GENERAL->SDMMCDEL & (uint32_t)~SCU_GENERAL_SDMMCDEL_TAPDEL_Msk) |
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
                                  (uint32_t)(tapdel << SCU_GENERAL_SDMMCDEL_TAPDEL_Pos));
}
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	50004000 	.word	0x50004000

080030f0 <SDMMC0_0_IRQHandler>:
 * FUNCTION DEFINITIONS
 **********************************************************************************************************************/

/* SDMMC SD interrupt handler */
void SDMMC0_0_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  normal_int_status = SDMMC_BLOCK_0.sdmmc_sd->sdmmc->INT_STATUS_NORM;
 80030f4:	4b15      	ldr	r3, [pc, #84]	; (800314c <SDMMC0_0_IRQHandler+0x5c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <SDMMC0_0_IRQHandler+0x60>)
 8003100:	801a      	strh	r2, [r3, #0]
  err_int_status = SDMMC_BLOCK_0.sdmmc_sd->sdmmc->INT_STATUS_ERR;
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <SDMMC0_0_IRQHandler+0x5c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800310a:	b29a      	uxth	r2, r3
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <SDMMC0_0_IRQHandler+0x64>)
 800310e:	801a      	strh	r2, [r3, #0]

  if (normal_int_status & SDMMC_INT_STATUS_NORM_ERR_INT_Msk)
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <SDMMC0_0_IRQHandler+0x60>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	b29b      	uxth	r3, r3
 8003118:	b21b      	sxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	da06      	bge.n	800312c <SDMMC0_0_IRQHandler+0x3c>
  {
    SDMMC_BLOCK_SD_ErrorInterruptHandler(&SDMMC_BLOCK_0, err_int_status);
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <SDMMC0_0_IRQHandler+0x64>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	4809      	ldr	r0, [pc, #36]	; (800314c <SDMMC0_0_IRQHandler+0x5c>)
 8003126:	4619      	mov	r1, r3
 8003128:	f001 fcc0 	bl	8004aac <SDMMC_BLOCK_SD_ErrorInterruptHandler>
  }

  if (normal_int_status & SDMMC_BLOCK_NORMAL_INT_STATUS_BITS)
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <SDMMC0_0_IRQHandler+0x60>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <SDMMC0_0_IRQHandler+0x58>
  {
    SDMMC_BLOCK_SD_NormalInterruptHandler(&SDMMC_BLOCK_0, normal_int_status);
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <SDMMC0_0_IRQHandler+0x60>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	4802      	ldr	r0, [pc, #8]	; (800314c <SDMMC0_0_IRQHandler+0x5c>)
 8003142:	4619      	mov	r1, r3
 8003144:	f001 fc46 	bl	80049d4 <SDMMC_BLOCK_SD_NormalInterruptHandler>
  }
}
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000090 	.word	0x20000090
 8003150:	200005c8 	.word	0x200005c8
 8003154:	200005ca 	.word	0x200005ca

08003158 <SDMMC_BLOCK_0_Config_Init>:
/*
 * Configuration initialization:
 * For pins and other mode specific settings
 */
static void SDMMC_BLOCK_0_Config_Init(void)
{
 8003158:	b598      	push	{r3, r4, r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Enable delay on command and data lines */
  XMC_SDMMC_EnableDelayCmdDatLines();
 800315c:	f7ff ffa0 	bl	80030a0 <XMC_SDMMC_EnableDelayCmdDatLines>

  /* Set the delay value chosen in the APP user interface */
  XMC_SDMMC_SetDelay(SDMMC_BLOCK_SD_NUM_DELAY_ELEMENTS);
 8003160:	2008      	movs	r0, #8
 8003162:	f7ff ffad 	bl	80030c0 <XMC_SDMMC_SetDelay>

  XMC_GPIO_Init(SDMMC_BLOCK_0_COMMAND.port,
 8003166:	4a3a      	ldr	r2, [pc, #232]	; (8003250 <SDMMC_BLOCK_0_Config_Init+0xf8>)
 8003168:	2305      	movs	r3, #5
                SDMMC_BLOCK_0_COMMAND.pin,
                &SDMMC_BLOCK_0_COMMAND.config->config);
 800316a:	493a      	ldr	r1, [pc, #232]	; (8003254 <SDMMC_BLOCK_0_Config_Init+0xfc>)
  XMC_SDMMC_EnableDelayCmdDatLines();

  /* Set the delay value chosen in the APP user interface */
  XMC_SDMMC_SetDelay(SDMMC_BLOCK_SD_NUM_DELAY_ELEMENTS);

  XMC_GPIO_Init(SDMMC_BLOCK_0_COMMAND.port,
 800316c:	460c      	mov	r4, r1
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	4622      	mov	r2, r4
 8003174:	f7fd f918 	bl	80003a8 <XMC_GPIO_Init>
                SDMMC_BLOCK_0_COMMAND.pin,
                &SDMMC_BLOCK_0_COMMAND.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_COMMAND.port,
 8003178:	4935      	ldr	r1, [pc, #212]	; (8003250 <SDMMC_BLOCK_0_Config_Init+0xf8>)
 800317a:	2205      	movs	r2, #5
                              SDMMC_BLOCK_0_COMMAND.pin,
                              SDMMC_BLOCK_0_COMMAND.config->hw_control);
 800317c:	4b35      	ldr	r3, [pc, #212]	; (8003254 <SDMMC_BLOCK_0_Config_Init+0xfc>)
  XMC_SDMMC_SetDelay(SDMMC_BLOCK_SD_NUM_DELAY_ELEMENTS);

  XMC_GPIO_Init(SDMMC_BLOCK_0_COMMAND.port,
                SDMMC_BLOCK_0_COMMAND.pin,
                &SDMMC_BLOCK_0_COMMAND.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_COMMAND.port,
 800317e:	7b1b      	ldrb	r3, [r3, #12]
 8003180:	4608      	mov	r0, r1
 8003182:	4611      	mov	r1, r2
 8003184:	461a      	mov	r2, r3
 8003186:	f7fe fb19 	bl	80017bc <XMC_GPIO_SetHardwareControl>
                              SDMMC_BLOCK_0_COMMAND.pin,
                              SDMMC_BLOCK_0_COMMAND.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_CLK.port,
 800318a:	4a31      	ldr	r2, [pc, #196]	; (8003250 <SDMMC_BLOCK_0_Config_Init+0xf8>)
 800318c:	2306      	movs	r3, #6
                SDMMC_BLOCK_0_CLK.pin,
                &SDMMC_BLOCK_0_CLK.config->config);
 800318e:	4932      	ldr	r1, [pc, #200]	; (8003258 <SDMMC_BLOCK_0_Config_Init+0x100>)
                &SDMMC_BLOCK_0_COMMAND.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_COMMAND.port,
                              SDMMC_BLOCK_0_COMMAND.pin,
                              SDMMC_BLOCK_0_COMMAND.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_CLK.port,
 8003190:	460c      	mov	r4, r1
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	4622      	mov	r2, r4
 8003198:	f7fd f906 	bl	80003a8 <XMC_GPIO_Init>
                SDMMC_BLOCK_0_CLK.pin,
                &SDMMC_BLOCK_0_CLK.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_CLK.port,
 800319c:	492c      	ldr	r1, [pc, #176]	; (8003250 <SDMMC_BLOCK_0_Config_Init+0xf8>)
 800319e:	2206      	movs	r2, #6
                              SDMMC_BLOCK_0_CLK.pin,
                              SDMMC_BLOCK_0_CLK.config->hw_control);
 80031a0:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <SDMMC_BLOCK_0_Config_Init+0x100>)
                              SDMMC_BLOCK_0_COMMAND.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_CLK.port,
                SDMMC_BLOCK_0_CLK.pin,
                &SDMMC_BLOCK_0_CLK.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_CLK.port,
 80031a2:	7b1b      	ldrb	r3, [r3, #12]
 80031a4:	4608      	mov	r0, r1
 80031a6:	4611      	mov	r1, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	f7fe fb07 	bl	80017bc <XMC_GPIO_SetHardwareControl>
                              SDMMC_BLOCK_0_CLK.pin,
                              SDMMC_BLOCK_0_CLK.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_0.port,
 80031ae:	4a2b      	ldr	r2, [pc, #172]	; (800325c <SDMMC_BLOCK_0_Config_Init+0x104>)
 80031b0:	2300      	movs	r3, #0
                SDMMC_BLOCK_0_DATA_0.pin,
                &SDMMC_BLOCK_0_DATA_0.config->config);
 80031b2:	492b      	ldr	r1, [pc, #172]	; (8003260 <SDMMC_BLOCK_0_Config_Init+0x108>)
                &SDMMC_BLOCK_0_CLK.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_CLK.port,
                              SDMMC_BLOCK_0_CLK.pin,
                              SDMMC_BLOCK_0_CLK.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_0.port,
 80031b4:	460c      	mov	r4, r1
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	4622      	mov	r2, r4
 80031bc:	f7fd f8f4 	bl	80003a8 <XMC_GPIO_Init>
                SDMMC_BLOCK_0_DATA_0.pin,
                &SDMMC_BLOCK_0_DATA_0.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_0.port,
 80031c0:	4926      	ldr	r1, [pc, #152]	; (800325c <SDMMC_BLOCK_0_Config_Init+0x104>)
 80031c2:	2200      	movs	r2, #0
                              SDMMC_BLOCK_0_DATA_0.pin,
                              SDMMC_BLOCK_0_DATA_0.config->hw_control);
 80031c4:	4b26      	ldr	r3, [pc, #152]	; (8003260 <SDMMC_BLOCK_0_Config_Init+0x108>)
                              SDMMC_BLOCK_0_CLK.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_0.port,
                SDMMC_BLOCK_0_DATA_0.pin,
                &SDMMC_BLOCK_0_DATA_0.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_0.port,
 80031c6:	7b1b      	ldrb	r3, [r3, #12]
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	f7fe faf5 	bl	80017bc <XMC_GPIO_SetHardwareControl>
                              SDMMC_BLOCK_0_DATA_0.pin,
                              SDMMC_BLOCK_0_DATA_0.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_1.port,
 80031d2:	4a24      	ldr	r2, [pc, #144]	; (8003264 <SDMMC_BLOCK_0_Config_Init+0x10c>)
 80031d4:	2306      	movs	r3, #6
                SDMMC_BLOCK_0_DATA_1.pin,
                &SDMMC_BLOCK_0_DATA_1.config->config);
 80031d6:	4924      	ldr	r1, [pc, #144]	; (8003268 <SDMMC_BLOCK_0_Config_Init+0x110>)
                &SDMMC_BLOCK_0_DATA_0.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_0.port,
                              SDMMC_BLOCK_0_DATA_0.pin,
                              SDMMC_BLOCK_0_DATA_0.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_1.port,
 80031d8:	460c      	mov	r4, r1
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	4622      	mov	r2, r4
 80031e0:	f7fd f8e2 	bl	80003a8 <XMC_GPIO_Init>
                SDMMC_BLOCK_0_DATA_1.pin,
                &SDMMC_BLOCK_0_DATA_1.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_1.port,
 80031e4:	491f      	ldr	r1, [pc, #124]	; (8003264 <SDMMC_BLOCK_0_Config_Init+0x10c>)
 80031e6:	2206      	movs	r2, #6
                              SDMMC_BLOCK_0_DATA_1.pin,
                              SDMMC_BLOCK_0_DATA_1.config->hw_control);
 80031e8:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <SDMMC_BLOCK_0_Config_Init+0x110>)
                              SDMMC_BLOCK_0_DATA_0.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_1.port,
                SDMMC_BLOCK_0_DATA_1.pin,
                &SDMMC_BLOCK_0_DATA_1.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_1.port,
 80031ea:	7b1b      	ldrb	r3, [r3, #12]
 80031ec:	4608      	mov	r0, r1
 80031ee:	4611      	mov	r1, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	f7fe fae3 	bl	80017bc <XMC_GPIO_SetHardwareControl>
                              SDMMC_BLOCK_0_DATA_1.pin,
                              SDMMC_BLOCK_0_DATA_1.config->hw_control);
  
  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_2.port,
 80031f6:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <SDMMC_BLOCK_0_Config_Init+0x10c>)
 80031f8:	2307      	movs	r3, #7
                SDMMC_BLOCK_0_DATA_2.pin,
                &SDMMC_BLOCK_0_DATA_2.config->config);
 80031fa:	491c      	ldr	r1, [pc, #112]	; (800326c <SDMMC_BLOCK_0_Config_Init+0x114>)
                &SDMMC_BLOCK_0_DATA_1.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_1.port,
                              SDMMC_BLOCK_0_DATA_1.pin,
                              SDMMC_BLOCK_0_DATA_1.config->hw_control);
  
  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_2.port,
 80031fc:	460c      	mov	r4, r1
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	4622      	mov	r2, r4
 8003204:	f7fd f8d0 	bl	80003a8 <XMC_GPIO_Init>
                SDMMC_BLOCK_0_DATA_2.pin,
                &SDMMC_BLOCK_0_DATA_2.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_2.port,
 8003208:	4916      	ldr	r1, [pc, #88]	; (8003264 <SDMMC_BLOCK_0_Config_Init+0x10c>)
 800320a:	2207      	movs	r2, #7
                              SDMMC_BLOCK_0_DATA_2.pin,
                              SDMMC_BLOCK_0_DATA_2.config->hw_control);
 800320c:	4b17      	ldr	r3, [pc, #92]	; (800326c <SDMMC_BLOCK_0_Config_Init+0x114>)
                              SDMMC_BLOCK_0_DATA_1.config->hw_control);
  
  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_2.port,
                SDMMC_BLOCK_0_DATA_2.pin,
                &SDMMC_BLOCK_0_DATA_2.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_2.port,
 800320e:	7b1b      	ldrb	r3, [r3, #12]
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	461a      	mov	r2, r3
 8003216:	f7fe fad1 	bl	80017bc <XMC_GPIO_SetHardwareControl>
                              SDMMC_BLOCK_0_DATA_2.pin,
                              SDMMC_BLOCK_0_DATA_2.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_3.port,
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <SDMMC_BLOCK_0_Config_Init+0x104>)
 800321c:	2301      	movs	r3, #1
                SDMMC_BLOCK_0_DATA_3.pin,
                &SDMMC_BLOCK_0_DATA_3.config->config);
 800321e:	4914      	ldr	r1, [pc, #80]	; (8003270 <SDMMC_BLOCK_0_Config_Init+0x118>)
                &SDMMC_BLOCK_0_DATA_2.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_2.port,
                              SDMMC_BLOCK_0_DATA_2.pin,
                              SDMMC_BLOCK_0_DATA_2.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_3.port,
 8003220:	460c      	mov	r4, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	4622      	mov	r2, r4
 8003228:	f7fd f8be 	bl	80003a8 <XMC_GPIO_Init>
                SDMMC_BLOCK_0_DATA_3.pin,
                &SDMMC_BLOCK_0_DATA_3.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_3.port,
 800322c:	490b      	ldr	r1, [pc, #44]	; (800325c <SDMMC_BLOCK_0_Config_Init+0x104>)
 800322e:	2201      	movs	r2, #1
                              SDMMC_BLOCK_0_DATA_3.pin,
                              SDMMC_BLOCK_0_DATA_3.config->hw_control);
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <SDMMC_BLOCK_0_Config_Init+0x118>)
                              SDMMC_BLOCK_0_DATA_2.config->hw_control);

  XMC_GPIO_Init(SDMMC_BLOCK_0_DATA_3.port,
                SDMMC_BLOCK_0_DATA_3.pin,
                &SDMMC_BLOCK_0_DATA_3.config->config);
  XMC_GPIO_SetHardwareControl(SDMMC_BLOCK_0_DATA_3.port,
 8003232:	7b1b      	ldrb	r3, [r3, #12]
 8003234:	4608      	mov	r0, r1
 8003236:	4611      	mov	r1, r2
 8003238:	461a      	mov	r2, r3
 800323a:	f7fe fabf 	bl	80017bc <XMC_GPIO_SetHardwareControl>
                              SDMMC_BLOCK_0_DATA_3.pin,
                              SDMMC_BLOCK_0_DATA_3.config->hw_control);

  XMC_SDMMC_SetCardDetectionSource(XMC_SDMMC, XMC_SDMMC_CD_SOURCE_SW);
 800323e:	480d      	ldr	r0, [pc, #52]	; (8003274 <SDMMC_BLOCK_0_Config_Init+0x11c>)
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	f7ff fef1 	bl	8003028 <XMC_SDMMC_SetCardDetectionSource>
  XMC_SDMMC_SetCardDetectionStatus(XMC_SDMMC, XMC_SDMMC_CD_STATUS_INSERTED);
 8003246:	480b      	ldr	r0, [pc, #44]	; (8003274 <SDMMC_BLOCK_0_Config_Init+0x11c>)
 8003248:	2140      	movs	r1, #64	; 0x40
 800324a:	f7ff ff0b 	bl	8003064 <XMC_SDMMC_SetCardDetectionStatus>

#if (UC_SERIES != XMC45)
  XMC_SDMMC_SetWriteProtectionSource(XMC_SDMMC, XMC_SDMMC_WP_SOURCE_SW);
  XMC_SDMMC_SetWriteProtectionStatus(XMC_SDMMC, XMC_SDMMC_WP_STATUS_NO_WRITE_PROTECTION);
#endif
}
 800324e:	bd98      	pop	{r3, r4, r7, pc}
 8003250:	48028300 	.word	0x48028300
 8003254:	0800fc48 	.word	0x0800fc48
 8003258:	0800fc58 	.word	0x0800fc58
 800325c:	48028400 	.word	0x48028400
 8003260:	0800fc08 	.word	0x0800fc08
 8003264:	48028100 	.word	0x48028100
 8003268:	0800fc18 	.word	0x0800fc18
 800326c:	0800fc28 	.word	0x0800fc28
 8003270:	0800fc38 	.word	0x0800fc38
 8003274:	4801c000 	.word	0x4801c000

08003278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <__NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003284:	0a1b      	lsrs	r3, r3, #8
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db0b      	blt.n	80032be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	4908      	ldr	r1, [pc, #32]	; (80032c8 <__NVIC_EnableIRQ+0x34>)
 80032a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	79fa      	ldrb	r2, [r7, #7]
 80032b0:	f002 021f 	and.w	r2, r2, #31
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	db0c      	blt.n	80032f8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032de:	4909      	ldr	r1, [pc, #36]	; (8003304 <__NVIC_ClearPendingIRQ+0x38>)
 80032e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	79fa      	ldrb	r2, [r7, #7]
 80032e8:	f002 021f 	and.w	r2, r2, #31
 80032ec:	2001      	movs	r0, #1
 80032ee:	fa00 f202 	lsl.w	r2, r0, r2
 80032f2:	3360      	adds	r3, #96	; 0x60
 80032f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000e100 	.word	0xe000e100

08003308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	6039      	str	r1, [r7, #0]
 8003312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003318:	2b00      	cmp	r3, #0
 800331a:	db0a      	blt.n	8003332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331c:	490d      	ldr	r1, [pc, #52]	; (8003354 <__NVIC_SetPriority+0x4c>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	440b      	add	r3, r1
 800332c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003330:	e00a      	b.n	8003348 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003332:	4909      	ldr	r1, [pc, #36]	; (8003358 <__NVIC_SetPriority+0x50>)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	3b04      	subs	r3, #4
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	0092      	lsls	r2, r2, #2
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	440b      	add	r3, r1
 8003346:	761a      	strb	r2, [r3, #24]
  }
}
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	; 0x24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f1c3 0307 	rsb	r3, r3, #7
 8003376:	2b06      	cmp	r3, #6
 8003378:	bf28      	it	cs
 800337a:	2306      	movcs	r3, #6
 800337c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3306      	adds	r3, #6
 8003382:	2b06      	cmp	r3, #6
 8003384:	d902      	bls.n	800338c <NVIC_EncodePriority+0x30>
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3b01      	subs	r3, #1
 800338a:	e000      	b.n	800338e <NVIC_EncodePriority+0x32>
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2201      	movs	r2, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	1e5a      	subs	r2, r3, #1
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	401a      	ands	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2101      	movs	r1, #1
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	1e59      	subs	r1, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80033b0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop

080033c0 <XMC_SDMMC_IsAnyErrorEvent>:
 * Should any error be indicated (If XMC_SDMMC_IsAnyErrorEvent() returns true), the
 * routine may then clear the event after indicating the error event and reset the
 * SDMMC command and data lines.
 */
__STATIC_INLINE bool XMC_SDMMC_IsAnyErrorEvent(XMC_SDMMC_t *const sdmmc)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_IsAnyErrorEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  return (bool)(sdmmc->INT_STATUS_ERR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bf14      	ite	ne
 80033d2:	2301      	movne	r3, #1
 80033d4:	2300      	moveq	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <XMC_SDMMC_GetACMDErrStatus>:
 * \par
 * The function detects the presence of an Auto CMD12 error. A boolean is returned to
 * indicate if an error is detected.
 */
__STATIC_INLINE bool XMC_SDMMC_GetACMDErrStatus(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_ACMD_ERR_t error)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_SDMMC_GetACMDErrStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_GetACMDErrStatus: Invalid ACMD response error", XMC_SDMMC_CHECK_ACMD_ERR(error));
  
  return (bool)(sdmmc->ACMD_ERR_STATUS & (uint16_t)error);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	b2db      	uxtb	r3, r3
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop

08003414 <XMC_SDMMC_ReadFIFO>:
 *
 * \par<b>Description: </b><br>
 * Use this function to read a single word (32 bits) from the SDMMC FIFO. <br>
 */
__STATIC_INLINE uint32_t XMC_SDMMC_ReadFIFO(XMC_SDMMC_t *const sdmmc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_ReadFIFO: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  return (sdmmc->DATA_BUFFER);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <XMC_SDMMC_WriteFIFO>:
 *
 * \par<b>Description: </b><br>
 * Use this function to write a single word (32 bits) to the SDMMC FIFO. <br>
 */
__STATIC_INLINE void XMC_SDMMC_WriteFIFO(XMC_SDMMC_t *const sdmmc, uint32_t *data)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SDMMC_WriteFIFO: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  sdmmc->DATA_BUFFER = *data;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <XMC_SDMMC_BusPowerOn>:
 * \par
 * The function sets the SD_BUS_POWER bit-field in the POWER_CTRL register, enabling the
 * bus power. It may be invoked after enabling the SD clock (XMC_SDMMC_SDClockEnable()).
 */
__STATIC_INLINE void XMC_SDMMC_BusPowerOn(XMC_SDMMC_t *const sdmmc)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_BusPowerOn: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  sdmmc->POWER_CTRL |= (uint8_t)(SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop

08003470 <XMC_SDMMC_Start>:
 *
 * \par<b>Note: </b><br>
 * Invoke XMC_SDMMC_Init() before using this function.
 */
__STATIC_INLINE void XMC_SDMMC_Start(XMC_SDMMC_t *const sdmmc)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_Start: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  
  /* Enable internal clock */
  sdmmc->CLOCK_CTRL |= (uint16_t)SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_EN_Msk;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800347c:	b29b      	uxth	r3, r3
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop

08003494 <XMC_SDMMC_GetClockStability>:
 * \par
 * Use this function to check the internal SDMMC clock stability. The function returns a
 * boolean value indicating internal clock stability (true = stable)
 */
__STATIC_INLINE bool XMC_SDMMC_GetClockStability(XMC_SDMMC_t *const sdmmc)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_GetClockStability: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  
  /* Return clock stability */
  return (bool)(sdmmc->CLOCK_CTRL & SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_STABLE_Msk);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf14      	ite	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	2300      	moveq	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <XMC_SDMMC_Stop>:
 * \par
 * The function disables the internal clock of the SDMMC peripheral. The SDMMC registers
 * can still be read and written even if the internal clock is disabled.
 */
__STATIC_INLINE void XMC_SDMMC_Stop(XMC_SDMMC_t *const sdmmc)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_Stop: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  sdmmc->CLOCK_CTRL &= (uint16_t)~SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_EN_Msk;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <XMC_SDMMC_SDClockEnable>:
 * The function sets the SDCLOCK_EN bit-field of the CLOCK_CTRL register, enabling the
 * SD clock. It can be invoked after the internal clock has achieved stability. SD card
 * initialization process may then follow.
 */
__STATIC_INLINE void XMC_SDMMC_SDClockEnable(XMC_SDMMC_t *const sdmmc)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_SDClockEnable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  sdmmc->CLOCK_CTRL |= (uint16_t)SDMMC_CLOCK_CTRL_SDCLOCK_EN_Msk;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop

08003504 <XMC_SDMMC_SDClockDisable>:
 * \par
 * The function resets the SDCLOCK_EN bit-field of the CLOCK_CTRL register, disabling the
 * SD clock. It can be used alongside a SD card information reset routine (if required).
 */
__STATIC_INLINE void XMC_SDMMC_SDClockDisable(XMC_SDMMC_t *const sdmmc)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_SDClockDisable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  sdmmc->CLOCK_CTRL &= (uint16_t)~SDMMC_CLOCK_CTRL_SDCLOCK_EN_Msk;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003510:	b29b      	uxth	r3, r3
 8003512:	f023 0304 	bic.w	r3, r3, #4
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <XMC_SDMMC_SetSWReset>:
 * 3) bit 2 reset DAT line <br>
 *
 * It is typically used to reset the SD HOST controller's registers.
 */
__STATIC_INLINE void XMC_SDMMC_SetSWReset(XMC_SDMMC_t *const sdmmc, uint32_t reset_mode)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SDMMC_SetSWReset: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  sdmmc->SW_RESET |= (uint8_t)reset_mode;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003538:	b2da      	uxtb	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	4313      	orrs	r3, r2
 8003540:	b2da      	uxtb	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop

08003554 <XMC_SDMMC_GetSWResetStatus>:
 * Since XMC_SDMMC_SetSWReset() is a non-blocking function, XMC_SDMMC_GetSWResetStatus() has
 * been provided to check the software reset status. The return value needs to be masked
 * with the reset mode (XMC_SDMMC_SW_RESET_t) to get a specific software reset status value.
 */
__STATIC_INLINE uint32_t XMC_SDMMC_GetSWResetStatus(XMC_SDMMC_t *const sdmmc)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_GetSWResetStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  
  return (uint32_t)(sdmmc->SW_RESET);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003562:	b2db      	uxtb	r3, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <XMC_SDMMC_IsCommandLineBusy>:
 * The function reads the SDMMC PRESENT_STATE register and returns "true" if the command
 * line is busy ("false" otherwise). The command line must be free before sending an SDMMC
 * command with XMC_SDMMC_SendCommand().
 */
__STATIC_INLINE bool XMC_SDMMC_IsCommandLineBusy(XMC_SDMMC_t *const sdmmc)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_IsCommandLineBusy: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  return (bool)(sdmmc->PRESENT_STATE & SDMMC_PRESENT_STATE_COMMAND_INHIBIT_CMD_Msk);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop

08003598 <XMC_SDMMC_IsDataLineBusy>:
 * The function reads the SDMMC PRESENT_STATE register and returns "true" if the data
 * line is busy ("false" otherwise). The data line must be free before sending an SDMMC
 * command with XMC_SDMMC_SendCommand().
 */
__STATIC_INLINE bool XMC_SDMMC_IsDataLineBusy(XMC_SDMMC_t *const sdmmc)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_IsDataLineBusy: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  return (bool)(sdmmc->PRESENT_STATE & SDMMC_PRESENT_STATE_COMMAND_INHIBIT_DAT_Msk);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop

080035c0 <XMC_SDMMC_IsAllDataLinesHigh>:
 * lines are high. It can be used to handle SDMMC error conditions. For example, if an
 * error event (XMC_SDMMC_IsAnyErrorEvent()) is detected and all data lines are high,
 * the user code can conclude that the error is of a "recoverable" type.
 */
__STATIC_INLINE bool XMC_SDMMC_IsAllDataLinesHigh(XMC_SDMMC_t *const sdmmc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_IsAllDataLinesHigh: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  return ((((sdmmc->PRESENT_STATE & SDMMC_PRESENT_STATE_DAT_3_0_PIN_LEVEL_Msk) >>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80035d0:	0d1b      	lsrs	r3, r3, #20
 80035d2:	2b0f      	cmp	r3, #15
 80035d4:	bf0c      	ite	eq
 80035d6:	2301      	moveq	r3, #1
 80035d8:	2300      	movne	r3, #0
 80035da:	b2db      	uxtb	r3, r3
        SDMMC_PRESENT_STATE_DAT_3_0_PIN_LEVEL_Pos) == 0x0FU) ? true : false);
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <XMC_SDMMC_SDClockFreqSelect>:
 * The internal clock should be disabled before updating frequency clock select. Please
 * see section 2.2.14 -> "Clock Control Register" in the SD HOST specification for more
 * information.
 */
__STATIC_INLINE void XMC_SDMMC_SDClockFreqSelect(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_SDCLK_FREQ_SEL_t clk)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_SDMMC_SDClockFreqSelect: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_SDClockFreqSelect: Invalid clock frequency selection", XMC_SDMMC_CHECK_SDCLK_FREQ(clk));

  sdmmc->CLOCK_CTRL = (uint16_t)((sdmmc->CLOCK_CTRL & (uint32_t)~SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL_Msk) |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	b29b      	uxth	r3, r3
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	b29b      	uxth	r3, r3
 8003606:	4313      	orrs	r3, r2
 8003608:	b29a      	uxth	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	859a      	strh	r2, [r3, #44]	; 0x2c
                                 (uint32_t)(clk << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL_Pos));
}
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <XMC_SDMMC_SetBusVoltage>:
 * The function sets the CLOCK_CTRL register to configure the bus voltage. Currently,
 * 3.3 volts is the supported voltage level. This function is relevant within the host
 * controller initialization routine.
 */
__STATIC_INLINE void XMC_SDMMC_SetBusVoltage(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_BUS_VOLTAGE_t bus_voltage)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_SDMMC_SetBusVoltage: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_SetBusVoltage: Invalid bus voltage", XMC_SDMMC_CHECK_BUS_VOLTAGE(bus_voltage));

  sdmmc->POWER_CTRL = (uint8_t)((sdmmc->POWER_CTRL & (uint32_t)~SDMMC_POWER_CTRL_SD_BUS_VOLTAGE_SEL_Msk) |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f023 030e 	bic.w	r3, r3, #14
 8003630:	b2da      	uxtb	r2, r3
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	b2db      	uxtb	r3, r3
 8003638:	4313      	orrs	r3, r2
 800363a:	b2da      	uxtb	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                (uint32_t)(bus_voltage << SDMMC_POWER_CTRL_SD_BUS_VOLTAGE_SEL_Pos));
}
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <XMC_SDMMC_SetDataLineTimeout>:
 * Use the function to set the interval by which the data line timeouts are detected. The
 * timeout clock frequency is generated by dividing the SD clock (TMCLK) by the timeout argument.
 * This function must be called before setting the bus voltage (XMC_SDMMC_SetBusVoltage()).
 */
__STATIC_INLINE void XMC_SDMMC_SetDataLineTimeout(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_DAT_TIMEOUT_COUNTER_t timeout)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_SDMMC_SetDataLineTimeout: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_SetDataLineTimeout: Invalid timeout", XMC_SDMMC_CHECK_DAT_TIMEOUT_COUNTER(timeout));

  sdmmc->TIMEOUT_CTRL = (uint8_t)((sdmmc->TIMEOUT_CTRL & (uint32_t)~SDMMC_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL_Msk) |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f023 030f 	bic.w	r3, r3, #15
 8003664:	b2da      	uxtb	r2, r3
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	4313      	orrs	r3, r2
 800366a:	b2da      	uxtb	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                                  (uint32_t)(timeout << SDMMC_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL_Pos));
}
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <XMC_SDMMC_SetDataTransferWidth>:
 * \par
 * Use the function to set the data transfer width. Before using this function, an ACMD6
 * command (with R1 response type) must be sent to switch the bus width.
 */
__STATIC_INLINE void XMC_SDMMC_SetDataTransferWidth(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_DATA_LINES_t lines)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_SDMMC_SetDataTransferWidth: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_SetDataTransferWidth: Invalid no. of data lines", XMC_SDMMC_CHECK_DATA_LINES(lines));

  sdmmc->HOST_CTRL &= (uint8_t)~(XMC_SDMMC_DATA_LINES_1 | XMC_SDMMC_DATA_LINES_4 | XMC_SDMMC_DATA_LINES_8);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003694:	b2da      	uxtb	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  sdmmc->HOST_CTRL |= (uint8_t)lines;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop

080036bc <XMC_SDMMC_SetDataTransferDirection>:
 * is typically used to configure block operations (read/write) on the SD card. For
 * example, XMC_SDMMC_DATA_TRANSFER_HOST_TO_CARD must be used for a write block operation.
 */
__STATIC_INLINE void XMC_SDMMC_SetDataTransferDirection(XMC_SDMMC_t *const sdmmc,
                                                        XMC_SDMMC_DATA_TRANSFER_DIR_t dir)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_SDMMC_SetDataTransferDirection: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_SetDataTransferDirection: Invalid direction", XMC_SDMMC_CHECK_DATA_TRANSFER_DIR(dir));

  sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_TX_DIR_SELECT_Msk) |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	899b      	ldrh	r3, [r3, #12]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f023 0310 	bic.w	r3, r3, #16
 80036d4:	b29a      	uxth	r2, r3
                                  (uint16_t)((uint16_t)dir << SDMMC_TRANSFER_MODE_TX_DIR_SELECT_Pos));
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	b29b      	uxth	r3, r3
                                                        XMC_SDMMC_DATA_TRANSFER_DIR_t dir)
{
  XMC_ASSERT("XMC_SDMMC_SetDataTransferDirection: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_SetDataTransferDirection: Invalid direction", XMC_SDMMC_CHECK_DATA_TRANSFER_DIR(dir));

  sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_TX_DIR_SELECT_Msk) |
 80036de:	b29b      	uxth	r3, r3
 80036e0:	4313      	orrs	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	819a      	strh	r2, [r3, #12]
                                  (uint16_t)((uint16_t)dir << SDMMC_TRANSFER_MODE_TX_DIR_SELECT_Pos));
}
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <XMC_SDMMC_EnableHighSpeed>:
 * Use the function to enable high speed operation. The default is a normal speed operation.
 * Once enabled, the host controller outputs command and data lines at the rising edge of the
 * SD clock (up to 50 MHz for SD).
 */
__STATIC_INLINE void XMC_SDMMC_EnableHighSpeed(XMC_SDMMC_t *const sdmmc)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_EnableHighSpeed: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  sdmmc->HOST_CTRL |= (uint8_t)SDMMC_HOST_CTRL_HIGH_SPEED_EN_Msk;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f043 0304 	orr.w	r3, r3, #4
 8003708:	b2da      	uxtb	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop

0800371c <XMC_SDMMC_DisableHighSpeed>:
 * Use the function to disable high speed operation. The host controller will switch back
 * to a normal speed mode. In this mode, the host controller outputs command and data lines
 * at 25 MHz for SD.
 */
__STATIC_INLINE void XMC_SDMMC_DisableHighSpeed(XMC_SDMMC_t *const sdmmc)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SDMMC_DisableHighSpeed: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  sdmmc->HOST_CTRL &= (uint8_t)~SDMMC_HOST_CTRL_HIGH_SPEED_EN_Msk;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	b2da      	uxtb	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop

08003744 <SDMMC_BLOCK_SD_lReset>:
 * API DEFINITIONS
 **********************************************************************************************************************/

/* Resets the Host Controller's register */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lReset(SDMMC_BLOCK_t *const obj, uint32_t reset)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]

  XMC_SDMMC_SetSWReset(obj->sdmmc_sd->sdmmc, reset);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	6839      	ldr	r1, [r7, #0]
 800375c:	f7ff fee4 	bl	8003528 <XMC_SDMMC_SetSWReset>

  (void)SDMMC_BLOCK_SD_lStartTimer(obj, (uint32_t)SDMMC_BLOCK_RESET_DELAY);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4917      	ldr	r1, [pc, #92]	; (80037c0 <SDMMC_BLOCK_SD_lReset+0x7c>)
 8003764:	f001 fc84 	bl	8005070 <SDMMC_BLOCK_SD_lStartTimer>
  if (obj->sdmmc_sd->tmr_id != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	2b00      	cmp	r3, #0
 8003770:	d020      	beq.n	80037b4 <SDMMC_BLOCK_SD_lReset+0x70>
  {
    do
    {
      if (obj->sdmmc_sd->tmr_expire == (bool)0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f083 0301 	eor.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <SDMMC_BLOCK_SD_lReset+0x48>
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
 8003786:	232e      	movs	r3, #46	; 0x2e
 8003788:	73fb      	strb	r3, [r7, #15]
        break;
 800378a:	e00a      	b.n	80037a2 <SDMMC_BLOCK_SD_lReset+0x5e>
      }
    } while (((uint32_t)XMC_SDMMC_GetSWResetStatus(obj->sdmmc_sd->sdmmc)) & (reset));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fede 	bl	8003554 <XMC_SDMMC_GetSWResetStatus>
 8003798:	4602      	mov	r2, r0
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e7      	bne.n	8003772 <SDMMC_BLOCK_SD_lReset+0x2e>

    /* Stop timer and delete it */
    (void)SDMMC_BLOCK_SD_lStopTimer(obj);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f001 fc9e 	bl	80050e4 <SDMMC_BLOCK_SD_lStopTimer>
    (void)SYSTIMER_DeleteTimer(obj->sdmmc_sd->tmr_id);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff f8a8 	bl	8002904 <SYSTIMER_DeleteTimer>
  }

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	0007a120 	.word	0x0007a120

080037c4 <SDMMC_BLOCK_SD_lCardCleanUp>:

/* Clears card specific structures and stops the SD clock */
static void SDMMC_BLOCK_SD_lCardCleanUp(SDMMC_BLOCK_t *const obj)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  memset((void *)&obj->sdmmc_sd->card_info, 0, sizeof(SDMMC_BLOCK_SD_CARD_INFORMATION_t));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3320      	adds	r3, #32
 80037d2:	4618      	mov	r0, r3
 80037d4:	2100      	movs	r1, #0
 80037d6:	2230      	movs	r2, #48	; 0x30
 80037d8:	f008 fbd9 	bl	800bf8e <memset>
  obj->card_type = (uint8_t)0;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	725a      	strb	r2, [r3, #9]
  obj->sdmmc_sd->f8 = (uint8_t)0;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  obj->sdmmc_sd->cmd_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2201      	movs	r2, #1
 80037f2:	765a      	strb	r2, [r3, #25]
  obj->sdmmc_sd->data_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2201      	movs	r2, #1
 80037fa:	761a      	strb	r2, [r3, #24]
  obj->sdmmc_sd->err_recovery_stat = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2201      	movs	r2, #1
 8003802:	771a      	strb	r2, [r3, #28]
  obj->sdmmc_sd->transfer_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	769a      	strb	r2, [r3, #26]
  obj->card_state = (uint8_t)0U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	721a      	strb	r2, [r3, #8]

  /* SD clock disable */
  XMC_SDMMC_SDClockDisable(obj->sdmmc_sd->sdmmc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fe73 	bl	8003504 <XMC_SDMMC_SDClockDisable>
}
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <SDMMC_BLOCK_SD_lCheckDataCommandLines>:

/* Check if CMD and DAT lines are free before issuing a command */
static uint32_t SDMMC_BLOCK_SD_lCheckDataCommandLines(SDMMC_BLOCK_t *const obj, const XMC_SDMMC_COMMAND_t *cmd)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t status = (uint32_t)SDMMC_BLOCK_MODE_STATUS_CMD_LINE_BUSY;
 800382e:	231a      	movs	r3, #26
 8003830:	60fb      	str	r3, [r7, #12]

  status = SDMMC_BLOCK_SD_lStartTimer(obj, SDMMC_BLOCK_DELAY_IN_COMMAND);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4942      	ldr	r1, [pc, #264]	; (8003940 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0x11c>)
 8003836:	f001 fc1b 	bl	8005070 <SDMMC_BLOCK_SD_lStartTimer>
 800383a:	4603      	mov	r3, r0
 800383c:	60fb      	str	r3, [r7, #12]

  if (obj->sdmmc_sd->tmr_id != 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	2b00      	cmp	r3, #0
 8003846:	d027      	beq.n	8003898 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0x74>
  {
    do
    {
      if (obj->sdmmc_sd->tmr_expire == (bool)0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f083 0301 	eor.w	r3, r3, #1
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0x3e>
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
 800385c:	232e      	movs	r3, #46	; 0x2e
 800385e:	60fb      	str	r3, [r7, #12]
        break;
 8003860:	e011      	b.n	8003886 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0x62>
      }
    } while ((XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc) ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fe95 	bl	8003598 <XMC_SDMMC_IsDataLineBusy>
 800386e:	4603      	mov	r3, r0
             (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc))));
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e9      	bne.n	8003848 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0x24>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fe78 	bl	8003570 <XMC_SDMMC_IsCommandLineBusy>
 8003880:	4603      	mov	r3, r0
      if (obj->sdmmc_sd->tmr_expire == (bool)0U)
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
        break;
      }
    } while ((XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc) ||
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e0      	bne.n	8003848 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0x24>
             (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc))));

    /* Stop timer and delete it */
    (void)SDMMC_BLOCK_SD_lStopTimer(obj);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f001 fc2c 	bl	80050e4 <SDMMC_BLOCK_SD_lStopTimer>
    (void)SYSTIMER_DeleteTimer(obj->sdmmc_sd->tmr_id);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff f836 	bl	8002904 <SYSTIMER_DeleteTimer>
  }

  /* Check if command line is not busy; then proceed */
  if (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc) == false)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fe66 	bl	8003570 <XMC_SDMMC_IsCommandLineBusy>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f083 0301 	eor.w	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d041      	beq.n	8003934 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0x110>
  {
    status = (uint32_t)SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
    if (((uint32_t)cmd->dat_present_sel == (uint32_t)1U) ||
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10d      	bne.n	80038de <SDMMC_BLOCK_SD_lCheckDataCommandLines+0xba>
        ((uint32_t)cmd->cmd_index == (uint32_t)SDMMC_BLOCK_SEND_STATUS) ||
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	785b      	ldrb	r3, [r3, #1]
 80038c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ca:	b2db      	uxtb	r3, r3

  /* Check if command line is not busy; then proceed */
  if (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc) == false)
  {
    status = (uint32_t)SDMMC_BLOCK_MODE_STATUS_SUCCESS;
    if (((uint32_t)cmd->dat_present_sel == (uint32_t)1U) ||
 80038cc:	2b0d      	cmp	r3, #13
 80038ce:	d006      	beq.n	80038de <SDMMC_BLOCK_SD_lCheckDataCommandLines+0xba>
        ((uint32_t)cmd->cmd_index == (uint32_t)SDMMC_BLOCK_SEND_STATUS) ||
        ((uint32_t)cmd->response_type_sel == (uint32_t)3U))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	b2db      	uxtb	r3, r3
  /* Check if command line is not busy; then proceed */
  if (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc) == false)
  {
    status = (uint32_t)SDMMC_BLOCK_MODE_STATUS_SUCCESS;
    if (((uint32_t)cmd->dat_present_sel == (uint32_t)1U) ||
        ((uint32_t)cmd->cmd_index == (uint32_t)SDMMC_BLOCK_SEND_STATUS) ||
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d120      	bne.n	8003920 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0xfc>
        ((uint32_t)cmd->response_type_sel == (uint32_t)3U))
    {
      if (XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc) != false)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fe57 	bl	8003598 <XMC_SDMMC_IsDataLineBusy>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0xd2>
      {
        status = (uint32_t)SDMMC_BLOCK_MODE_STATUS_DATA_LINE_BUSY;
 80038f0:	231b      	movs	r3, #27
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e014      	b.n	8003920 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0xfc>
      }
      else
      {
        if (((uint32_t)cmd->dat_present_sel == (uint32_t)1U) || ((uint32_t)cmd->response_type_sel == (uint32_t)3U))
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0xee>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b03      	cmp	r3, #3
 8003910:	d106      	bne.n	8003920 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0xfc>
        {
          /* Update data line state to active */
          obj->card_state |= (uint8_t)SDMMC_BLOCK_CARD_STATE_DATA_ACTIVE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7a1b      	ldrb	r3, [r3, #8]
 8003916:	f043 0320 	orr.w	r3, r3, #32
 800391a:	b2da      	uxtb	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	721a      	strb	r2, [r3, #8]
        }
      }
    }

    if (status == (uint32_t)SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <SDMMC_BLOCK_SD_lCheckDataCommandLines+0x110>
    {
      /* Update command line state to active */
      obj->card_state |= (uint8_t)SDMMC_BLOCK_CARD_STATE_CMD_ACTIVE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7a1b      	ldrb	r3, [r3, #8]
 800392a:	f043 0310 	orr.w	r3, r3, #16
 800392e:	b2da      	uxtb	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	721a      	strb	r2, [r3, #8]
    }
  }

  return status;
 8003934:	68fb      	ldr	r3, [r7, #12]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	000f4240 	.word	0x000f4240

08003944 <SDMMC_BLOCK_SD_lCheckArgumentError>:

/* Check response error types in command's arguments category */
static void SDMMC_BLOCK_SD_lCheckArgumentError(const uint32_t *card_status, uint8_t *err)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_OUT_OF_RANGE_BITMASK) != (uint32_t)0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	da02      	bge.n	800395c <SDMMC_BLOCK_SD_lCheckArgumentError+0x18>
  {
    *err = (uint8_t)1U;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckArgumentError: Out of range error");
  }

  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_ADDRESS_ERROR_BITMASK) != (uint32_t)0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <SDMMC_BLOCK_SD_lCheckArgumentError+0x2a>
  {
    *err = (uint8_t)1U;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckArgumentError: Address error");
  }

  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_BLOCK_LEN_ERROR_BITMASK) != (uint32_t)0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <SDMMC_BLOCK_SD_lCheckArgumentError+0x3c>
  {
    *err = (uint8_t)1U;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckArgumentError: Block length error");
  }

  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_WP_VIOLATION_BITMASK) != (uint32_t)0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <SDMMC_BLOCK_SD_lCheckArgumentError+0x4e>
  {
    *err = (uint8_t)1U;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckArgumentError: Write protection violation error");
  }
}
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <SDMMC_BLOCK_SD_lCheckEraseError>:

/* Checks response error types in erase category */
static void SDMMC_BLOCK_SD_lCheckEraseError(const uint32_t *card_status, uint8_t *err)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* An error in the sequence of erase commands occurred.*/
  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_ERASE_SEQ_ERROR_BITMASK) != (uint32_t)0)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <SDMMC_BLOCK_SD_lCheckEraseError+0x1c>
  {
    *err = (uint8_t)1U;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckEraseError: Sequential erase error");
  }

  /* An invalid selection of write-blocks for erase occurred */
  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_ERASE_PARAM_BITMASK) != (uint32_t)0)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <SDMMC_BLOCK_SD_lCheckEraseError+0x2e>
  {
    *err = (uint8_t)1U;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
  /*
   * Set when only partial address space was erased due to existing
   * write protected blocks OR the temporary/permanent write protected card
   * was erased
   */
  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_WP_ERASE_SKIP_BITMASK) != (uint32_t)0)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <SDMMC_BLOCK_SD_lCheckEraseError+0x40>
  {
    *err = (uint8_t)1U;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckEraseError: Write protection erase skip error");
  }
}
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop

080039e8 <SDMMC_BLOCK_SD_lCheckCardError>:

/* Check response error types in card's internal error category */
static void SDMMC_BLOCK_SD_lCheckCardError(const uint32_t *card_status, uint8_t *err)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Card internal ECC was applied but failed to correct the data */
  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_CARD_ECC_FAILED_BITMASK) != (uint32_t)0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <SDMMC_BLOCK_SD_lCheckCardError+0x1c>
  {
    *err = (uint8_t)1U;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckCardError: Card ECC error");
  }

  /* Internal card controller error */
  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_CC_ERROR_BITMASK) != (uint32_t)0)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <SDMMC_BLOCK_SD_lCheckCardError+0x2e>
  {
    *err = (uint8_t)1U;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckCardError: Internal card controller error");
  }

  /* A general or an unknown error occurred during the operation */
  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_ERROR_BITMASK) != (uint32_t)0)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <SDMMC_BLOCK_SD_lCheckCardError+0x40>
  {
    *err = (uint8_t)1U;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckCardError: Unknown error");
  }
}
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop

08003a34 <SDMMC_BLOCK_SD_lCheckErrorInResponse>:

/* Check for any error in the command's (received) response */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lCheckErrorInResponse(const uint32_t *card_status)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]
  uint8_t err = (uint8_t)0; /* No error */
 8003a40:	2300      	movs	r3, #0
 8003a42:	73bb      	strb	r3, [r7, #14]

  /* Check errors in arguments */
  SDMMC_BLOCK_SD_lCheckArgumentError(card_status, &err);
 8003a44:	f107 030e 	add.w	r3, r7, #14
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f7ff ff7a 	bl	8003944 <SDMMC_BLOCK_SD_lCheckArgumentError>

  /* Check errors specific to erase operation */
  SDMMC_BLOCK_SD_lCheckEraseError(card_status, &err);
 8003a50:	f107 030e 	add.w	r3, r7, #14
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4619      	mov	r1, r3
 8003a58:	f7ff ffa0 	bl	800399c <SDMMC_BLOCK_SD_lCheckEraseError>

  /* Check errors specific to the card */
  SDMMC_BLOCK_SD_lCheckCardError(card_status, &err);
 8003a5c:	f107 030e 	add.w	r3, r7, #14
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4619      	mov	r1, r3
 8003a64:	f7ff ffc0 	bl	80039e8 <SDMMC_BLOCK_SD_lCheckCardError>

  /*
   * Set when a sequence or password error has been detected in
   * lock/unlock card command
   */
  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_LOCK_UNLOCK_FAILED_BITMASK) != (uint32_t)0)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <SDMMC_BLOCK_SD_lCheckErrorInResponse+0x44>
  {
    err = (uint8_t)1;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73bb      	strb	r3, [r7, #14]
  /*
   * Can be one of the following errors:
   * 1) The read only section of the CSD does not match the card content
   * 2) An attempt to reverse the copy or permanent WP bits was made
   */
  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_CSD_OVERWRITE_BITMASK) != (uint32_t)0)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <SDMMC_BLOCK_SD_lCheckErrorInResponse+0x54>
  {
    err = (uint8_t)1;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73bb      	strb	r3, [r7, #14]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckErrorInResponse: CSD overwrite error");
  }

  /* Error in the sequence of the authentication process */
  if ((*card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_ASK_SEQ_ERROR_BITMASK) != (uint32_t)0)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <SDMMC_BLOCK_SD_lCheckErrorInResponse+0x64>
  {
    err = (uint8_t)1;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73bb      	strb	r3, [r7, #14]
    XMC_DEBUG("SDMMC_BLOCK_SD_CheckErrorInResponse: Authentication sequence error");
  }

  /* Some SD cards treat CMD55 as an illegal command */
  if (err == 1U)
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <SDMMC_BLOCK_SD_lCheckErrorInResponse+0x6e>
  {
    status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <SDMMC_BLOCK_SD_lGetCardLockState>:

/* Check for lock status of SD card */
static void SDMMC_BLOCK_SD_lGetCardLockState(SDMMC_BLOCK_t *const obj, uint32_t card_status, uint16_t cmd_index)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
  if (((card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_CARD_IS_LOCKED_BITMASK) != (uint32_t)0) &&
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <SDMMC_BLOCK_SD_lGetCardLockState+0x2e>
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d007      	beq.n	8003ada <SDMMC_BLOCK_SD_lGetCardLockState+0x2e>
      (cmd_index != (uint32_t)SDMMC_BLOCK_SEND_RELATIVE_ADDR))
  {
    obj->card_state |= (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	7a1b      	ldrb	r3, [r3, #8]
 8003ace:	f043 0308 	orr.w	r3, r3, #8
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	721a      	strb	r2, [r3, #8]
 8003ad8:	e006      	b.n	8003ae8 <SDMMC_BLOCK_SD_lGetCardLockState+0x3c>
  }
  else
  {
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	7a1b      	ldrb	r3, [r3, #8]
 8003ade:	f023 0308 	bic.w	r3, r3, #8
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	721a      	strb	r2, [r3, #8]
  }
}
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <SDMMC_BLOCK_SD_lTransferDelay>:

/* Provide transfer delay */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lTransferDelay(SDMMC_BLOCK_t *const obj, uint32_t delay)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
  obj->sdmmc_sd->tmr_expire = (bool)1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Start timer */
  (void)SDMMC_BLOCK_SD_lStartTimer(obj, delay);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	6839      	ldr	r1, [r7, #0]
 8003b10:	f001 faae 	bl	8005070 <SDMMC_BLOCK_SD_lStartTimer>
  if (obj->sdmmc_sd->tmr_id == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <SDMMC_BLOCK_SD_lTransferDelay+0x2e>
  {
    status = SDMMC_BLOCK_MODE_STATUS_START_TIMER_FAILED;
 8003b1e:	2331      	movs	r3, #49	; 0x31
 8003b20:	73fb      	strb	r3, [r7, #15]
  }

  if (status != SDMMC_BLOCK_MODE_STATUS_START_TIMER_FAILED)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b31      	cmp	r3, #49	; 0x31
 8003b26:	d01e      	beq.n	8003b66 <SDMMC_BLOCK_SD_lTransferDelay+0x72>
  {
    do
    {
      if (obj->sdmmc_sd->tmr_expire == (bool)0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f083 0301 	eor.w	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <SDMMC_BLOCK_SD_lTransferDelay+0x4e>
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
 8003b3c:	232e      	movs	r3, #46	; 0x2e
 8003b3e:	73fb      	strb	r3, [r7, #15]
        break;
 8003b40:	e004      	b.n	8003b4c <SDMMC_BLOCK_SD_lTransferDelay+0x58>
      }
    } while (obj->sdmmc_sd->isr_context.transfer_flag == (uint8_t)0U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	7a1b      	ldrb	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ed      	beq.n	8003b28 <SDMMC_BLOCK_SD_lTransferDelay+0x34>

    obj->sdmmc_sd->isr_context.transfer_flag = (uint8_t)0U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	721a      	strb	r2, [r3, #8]

    /* Stop timer and delete it */
    (void)SDMMC_BLOCK_SD_lStopTimer(obj);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f001 fac5 	bl	80050e4 <SDMMC_BLOCK_SD_lStopTimer>
    (void)SYSTIMER_DeleteTimer(obj->sdmmc_sd->tmr_id);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe fecf 	bl	8002904 <SYSTIMER_DeleteTimer>
  }

  if (obj->sdmmc_sd->transfer_int_err != SDMMC_BLOCK_MODE_STATUS_TRANSFER_COMPLETE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	7e9b      	ldrb	r3, [r3, #26]
 8003b6c:	2b1f      	cmp	r3, #31
 8003b6e:	d003      	beq.n	8003b78 <SDMMC_BLOCK_SD_lTransferDelay+0x84>
  {
    status = (SDMMC_BLOCK_MODE_STATUS_t)obj->sdmmc_sd->data_int_err;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	7e1b      	ldrb	r3, [r3, #24]
 8003b76:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop

08003b84 <SDMMC_BLOCK_SD_lReadResponse>:
/* Read response received for the command issued */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lReadResponse(SDMMC_BLOCK_t *const obj,
                                                              const XMC_SDMMC_COMMAND_t *cmd,
                                                              XMC_SDMMC_RESPONSE_TYPE_t resp_type,
                                                              void *resp)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	4613      	mov	r3, r2
 8003b92:	71fb      	strb	r3, [r7, #7]
  uint32_t *ptr;
  uint32_t card_status = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61bb      	str	r3, [r7, #24]
  uint32_t err_status = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* To mask high byte from response register */
  uint32_t resp_high_mask = 0;  
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	623b      	str	r3, [r7, #32]

  /* Check for no-response type commands */
  if (((uint16_t)cmd->cmd_index == (uint16_t)SDMMC_BLOCK_GO_IDLE_STATE) ||
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	785b      	ldrb	r3, [r3, #1]
 8003baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d006      	beq.n	8003bc2 <SDMMC_BLOCK_SD_lReadResponse+0x3e>
      ((uint16_t)cmd->cmd_index == (uint16_t)SDMMC_BLOCK_GO_INACTIVE_STATE))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bbc:	b2db      	uxtb	r3, r3
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
  /* To mask high byte from response register */
  uint32_t resp_high_mask = 0;  

  /* Check for no-response type commands */
  if (((uint16_t)cmd->cmd_index == (uint16_t)SDMMC_BLOCK_GO_IDLE_STATE) ||
 8003bbe:	2b0f      	cmp	r3, #15
 8003bc0:	d103      	bne.n	8003bca <SDMMC_BLOCK_SD_lReadResponse+0x46>
      ((uint16_t)cmd->cmd_index == (uint16_t)SDMMC_BLOCK_GO_INACTIVE_STATE))
  {
    status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bc8:	e096      	b.n	8003cf8 <SDMMC_BLOCK_SD_lReadResponse+0x174>
  }
  else
  {
    ptr = (uint32_t *)resp;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	61fb      	str	r3, [r7, #28]
    card_status = (uint32_t)obj->sdmmc_sd->sdmmc->RESPONSE[0];
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	61bb      	str	r3, [r7, #24]

    /* Check Lock Status */
    SDMMC_BLOCK_SD_lGetCardLockState(obj, card_status, (uint16_t)cmd->cmd_index);
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	785b      	ldrb	r3, [r3, #1]
 8003bde:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	4611      	mov	r1, r2
 8003bea:	461a      	mov	r2, r3
 8003bec:	f7ff ff5e 	bl	8003aac <SDMMC_BLOCK_SD_lGetCardLockState>

    /* Check response type */
    switch (resp_type)
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d87c      	bhi.n	8003cf0 <SDMMC_BLOCK_SD_lReadResponse+0x16c>
 8003bf6:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <SDMMC_BLOCK_SD_lReadResponse+0x78>)
 8003bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfc:	08003ce9 	.word	0x08003ce9
 8003c00:	08003c19 	.word	0x08003c19
 8003c04:	08003c31 	.word	0x08003c31
 8003c08:	08003c5f 	.word	0x08003c5f
 8003c0c:	08003cb9 	.word	0x08003cb9
 8003c10:	08003cc9 	.word	0x08003cc9
 8003c14:	08003cc1 	.word	0x08003cc1
    {
      /* Response R1 */
      case XMC_SDMMC_RESPONSE_TYPE_R1:
        /* check the error bits in the response */
        *ptr = card_status;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	601a      	str	r2, [r3, #0]
        status = SDMMC_BLOCK_SD_lCheckErrorInResponse(&card_status);
 8003c1e:	f107 0318 	add.w	r3, r7, #24
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ff06 	bl	8003a34 <SDMMC_BLOCK_SD_lCheckErrorInResponse>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8003c2e:	e063      	b.n	8003cf8 <SDMMC_BLOCK_SD_lReadResponse+0x174>

      /* Response R1b */
      case XMC_SDMMC_RESPONSE_TYPE_R1b:
        *ptr = card_status;
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	601a      	str	r2, [r3, #0]

        status = SDMMC_BLOCK_SD_lCheckErrorInResponse(&card_status);
 8003c36:	f107 0318 	add.w	r3, r7, #24
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fefa 	bl	8003a34 <SDMMC_BLOCK_SD_lCheckErrorInResponse>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8003c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d006      	beq.n	8003c5c <SDMMC_BLOCK_SD_lReadResponse+0xd8>
        {
          /* Wait for transfer complete interrupt */
          status = SDMMC_BLOCK_SD_lTransferDelay(obj, (uint32_t)SDMMC_BLOCK_DELAY_IN_TRANSFER);
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	492c      	ldr	r1, [pc, #176]	; (8003d04 <SDMMC_BLOCK_SD_lReadResponse+0x180>)
 8003c52:	f7ff ff4f 	bl	8003af4 <SDMMC_BLOCK_SD_lTransferDelay>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          {
            XMC_DEBUG("SDMMC_BLOCK_ReadResponse: For R1b, SDMMC_BLOCK_TransferDelay failed");
          }
        }

        break;
 8003c5c:	e04c      	b.n	8003cf8 <SDMMC_BLOCK_SD_lReadResponse+0x174>

      /* Response R2: response register R0-R7 */
      case XMC_SDMMC_RESPONSE_TYPE_R2:
        *ptr = (uint32_t)((uint32_t)XMC_SDMMC->RESPONSE[0] << 8U); ptr++;
 8003c5e:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <SDMMC_BLOCK_SD_lReadResponse+0x184>)
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	021a      	lsls	r2, r3, #8
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	61fb      	str	r3, [r7, #28]
        resp_high_mask = (uint32_t)(((uint32_t)XMC_SDMMC->RESPONSE[0] & 0xFF000000) >> 24U);
 8003c6e:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <SDMMC_BLOCK_SD_lReadResponse+0x184>)
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	0e1b      	lsrs	r3, r3, #24
 8003c74:	623b      	str	r3, [r7, #32]

        *ptr = (uint32_t)(((uint32_t)XMC_SDMMC->RESPONSE[1] << 8U) | resp_high_mask); ptr++;
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <SDMMC_BLOCK_SD_lReadResponse+0x184>)
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	021a      	lsls	r2, r3, #8
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	3304      	adds	r3, #4
 8003c88:	61fb      	str	r3, [r7, #28]
        resp_high_mask = (uint32_t)(((uint32_t)XMC_SDMMC->RESPONSE[1] & 0xFF000000) >> 24U);
 8003c8a:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <SDMMC_BLOCK_SD_lReadResponse+0x184>)
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	0e1b      	lsrs	r3, r3, #24
 8003c90:	623b      	str	r3, [r7, #32]

        *ptr = (uint32_t)(((uint32_t)XMC_SDMMC->RESPONSE[2] << 8U) | resp_high_mask);
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <SDMMC_BLOCK_SD_lReadResponse+0x184>)
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	021a      	lsls	r2, r3, #8
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	601a      	str	r2, [r3, #0]
        resp_high_mask = (uint32_t)(((uint32_t)XMC_SDMMC->RESPONSE[2] & 0xFF000000) >> 24U);
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <SDMMC_BLOCK_SD_lReadResponse+0x184>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	0e1b      	lsrs	r3, r3, #24
 8003ca6:	623b      	str	r3, [r7, #32]

        *ptr = (uint32_t)(((uint32_t)XMC_SDMMC->RESPONSE[3] << 8U) | resp_high_mask);
 8003ca8:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <SDMMC_BLOCK_SD_lReadResponse+0x184>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	021a      	lsls	r2, r3, #8
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	601a      	str	r2, [r3, #0]
        break;
 8003cb6:	e01f      	b.n	8003cf8 <SDMMC_BLOCK_SD_lReadResponse+0x174>

      /* Responses R3 and R7 */
      case XMC_SDMMC_RESPONSE_TYPE_R3:
        *ptr = card_status;
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	601a      	str	r2, [r3, #0]
        break;
 8003cbe:	e01b      	b.n	8003cf8 <SDMMC_BLOCK_SD_lReadResponse+0x174>

      case XMC_SDMMC_RESPONSE_TYPE_R7:
        *ptr = card_status;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	601a      	str	r2, [r3, #0]
        break;
 8003cc6:	e017      	b.n	8003cf8 <SDMMC_BLOCK_SD_lReadResponse+0x174>

      /* Response R6 */
      case XMC_SDMMC_RESPONSE_TYPE_R6:
        err_status = card_status & (uint32_t)SDMMC_RESPONSE0_RESPONSE0_Msk;
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	617b      	str	r3, [r7, #20]
        status = SDMMC_BLOCK_SD_lCheckErrorInResponse(&err_status);
 8003cce:	f107 0314 	add.w	r3, r7, #20
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff feae 	bl	8003a34 <SDMMC_BLOCK_SD_lCheckErrorInResponse>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Read 16-bit RCA received in response R1 register */
        *ptr = ((uint32_t)(card_status & (uint32_t)SDMMC_RESPONSE0_RESPONSE1_Msk) >> SDMMC_BLOCK_HC_RESPONSE1_BITPOS);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	0c1a      	lsrs	r2, r3, #16
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	601a      	str	r2, [r3, #0]
        break;
 8003ce6:	e007      	b.n	8003cf8 <SDMMC_BLOCK_SD_lReadResponse+0x174>

      /* No response */
      case XMC_SDMMC_RESPONSE_TYPE_NO_RESPONSE:
        status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8003cee:	e003      	b.n	8003cf8 <SDMMC_BLOCK_SD_lReadResponse+0x174>

      default:
        status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8003cf6:	bf00      	nop
    }
  }

  return status;
 8003cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3728      	adds	r7, #40	; 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	000f4240 	.word	0x000f4240
 8003d08:	4801c000 	.word	0x4801c000

08003d0c <SDMMC_BLOCK_SD_lSendCommand>:
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lSendCommand(SDMMC_BLOCK_t *const obj,
                                                             const XMC_SDMMC_COMMAND_t *cmd,
                                                             uint32_t arg,
                                                             XMC_SDMMC_RESPONSE_TYPE_t resp_type,
                                                             void *resp)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	70fb      	strb	r3, [r7, #3]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]

  obj->sdmmc_sd->issue_abort = (uint8_t)0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  obj->sdmmc_sd->cmd_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	765a      	strb	r2, [r3, #25]
  obj->sdmmc_sd->data_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2201      	movs	r2, #1
 8003d36:	761a      	strb	r2, [r3, #24]

  /* Data or command line free? */
  status = (SDMMC_BLOCK_MODE_STATUS_t)SDMMC_BLOCK_SD_lCheckDataCommandLines(obj, cmd);
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	f7ff fd72 	bl	8003824 <SDMMC_BLOCK_SD_lCheckDataCommandLines>
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]
  if (!((status == SDMMC_BLOCK_MODE_STATUS_DATA_LINE_BUSY) ||
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	2b1b      	cmp	r3, #27
 8003d48:	d05d      	beq.n	8003e06 <SDMMC_BLOCK_SD_lSendCommand+0xfa>
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b1a      	cmp	r3, #26
 8003d4e:	d05a      	beq.n	8003e06 <SDMMC_BLOCK_SD_lSendCommand+0xfa>
       (status == SDMMC_BLOCK_MODE_STATUS_CMD_LINE_BUSY)))
  {
    /* Send command */
    (void)XMC_SDMMC_SendCommand(obj->sdmmc_sd->sdmmc, cmd, arg);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	f7fd ffc2 	bl	8001ce4 <XMC_SDMMC_SendCommand>

    /* Block until any of the bit in the interrupt status register gets set */
    if (SDMMC_BLOCK_SD_lStartTimer(obj, (uint32_t)SDMMC_BLOCK_DELAY_IN_COMMAND) == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	492b      	ldr	r1, [pc, #172]	; (8003e10 <SDMMC_BLOCK_SD_lSendCommand+0x104>)
 8003d64:	f001 f984 	bl	8005070 <SDMMC_BLOCK_SD_lStartTimer>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d14b      	bne.n	8003e06 <SDMMC_BLOCK_SD_lSendCommand+0xfa>
    {
      do
      {
        if (obj->sdmmc_sd->tmr_expire == (bool)0)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f083 0301 	eor.w	r3, r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d000      	beq.n	8003d84 <SDMMC_BLOCK_SD_lSendCommand+0x78>
        {
          XMC_DEBUG("SDMMC_BLOCK_SendCommand: Timeout occured");
          break;
 8003d82:	e004      	b.n	8003d8e <SDMMC_BLOCK_SD_lSendCommand+0x82>
        }
      } while ((uint8_t)obj->sdmmc_sd->isr_context.cmd_flag == (uint8_t)0U);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	799b      	ldrb	r3, [r3, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ef      	beq.n	8003d6e <SDMMC_BLOCK_SD_lSendCommand+0x62>

      obj->sdmmc_sd->isr_context.cmd_flag = (uint8_t)0;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	719a      	strb	r2, [r3, #6]

      /* Stop timer and delete it */
      (void)SDMMC_BLOCK_SD_lStopTimer(obj);
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f001 f9a4 	bl	80050e4 <SDMMC_BLOCK_SD_lStopTimer>
      (void)SYSTIMER_DeleteTimer((uint32_t)obj->sdmmc_sd->tmr_id);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fdae 	bl	8002904 <SYSTIMER_DeleteTimer>

      /* Check for possible errors */
      if ((SDMMC_BLOCK_MODE_STATUS_t)obj->sdmmc_sd->cmd_int_err == SDMMC_BLOCK_MODE_STATUS_COMMAND_COMPLETE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	7e5b      	ldrb	r3, [r3, #25]
 8003dae:	2b1c      	cmp	r3, #28
 8003db0:	d109      	bne.n	8003dc6 <SDMMC_BLOCK_SD_lSendCommand+0xba>
      {
        /* Read response received */
        status = SDMMC_BLOCK_SD_lReadResponse(obj, cmd, resp_type, resp);
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	461a      	mov	r2, r3
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f7ff fee2 	bl	8003b84 <SDMMC_BLOCK_SD_lReadResponse>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]
 8003dc4:	e01f      	b.n	8003e06 <SDMMC_BLOCK_SD_lSendCommand+0xfa>
      }
      /* For cmd8, check for cmd timeout interrupt */
      else if (((SDMMC_BLOCK_MODE_STATUS_t)obj->sdmmc_sd->cmd_int_err == SDMMC_BLOCK_MODE_STATUS_COMMAND_TIMEOUT_ERROR) &&
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	7e5b      	ldrb	r3, [r3, #25]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d109      	bne.n	8003de4 <SDMMC_BLOCK_SD_lSendCommand+0xd8>
               ((uint16_t)cmd->cmd_index == (uint16_t)SDMMC_BLOCK_SD_SEND_IF_COND))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	785b      	ldrb	r3, [r3, #1]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd8:	b2db      	uxtb	r3, r3
      {
        /* Read response received */
        status = SDMMC_BLOCK_SD_lReadResponse(obj, cmd, resp_type, resp);
      }
      /* For cmd8, check for cmd timeout interrupt */
      else if (((SDMMC_BLOCK_MODE_STATUS_t)obj->sdmmc_sd->cmd_int_err == SDMMC_BLOCK_MODE_STATUS_COMMAND_TIMEOUT_ERROR) &&
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d102      	bne.n	8003de4 <SDMMC_BLOCK_SD_lSendCommand+0xd8>
               ((uint16_t)cmd->cmd_index == (uint16_t)SDMMC_BLOCK_SD_SEND_IF_COND))
      {
        status = SDMMC_BLOCK_MODE_STATUS_COMMAND_TIMEOUT_ERROR;
 8003dde:	2302      	movs	r3, #2
 8003de0:	75fb      	strb	r3, [r7, #23]
 8003de2:	e010      	b.n	8003e06 <SDMMC_BLOCK_SD_lSendCommand+0xfa>
      }
      else
      {
        if ((uint16_t)cmd->dat_present_sel == (uint16_t)1)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <SDMMC_BLOCK_SD_lSendCommand+0xf0>
        {
          obj->sdmmc_sd->issue_abort = (uint8_t)1;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        }

        /* Error Recovery for the failed command  */
        status = SDMMC_BLOCK_SD_lErrorInterruptRecovery(obj);
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fd17 	bl	8004830 <SDMMC_BLOCK_SD_lErrorInterruptRecovery>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return status;
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	000f4240 	.word	0x000f4240

08003e14 <SDMMC_BLOCK_SD_lSetVoltageWindow>:

/* Set voltage window in the OCR register */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lSetVoltageWindow(SDMMC_BLOCK_t *const obj)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
  uint32_t card_status = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
  uint32_t loop_count = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
  uint32_t arg = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]

  if (obj->sdmmc_sd->f8 == (uint8_t)0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <SDMMC_BLOCK_SD_lSetVoltageWindow+0x2c>
  {
    arg = SDMMC_BLOCK_SD_ACMD41_F80_ARG; /* Set HCS=0 for standard cards */
 8003e38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e001      	b.n	8003e44 <SDMMC_BLOCK_SD_lSetVoltageWindow+0x30>
  }
  else
  {
    arg = SDMMC_BLOCK_SD_ACMD41_F81_ARG; /* Set HCS=1 for high capacity cards */
 8003e40:	4b21      	ldr	r3, [pc, #132]	; (8003ec8 <SDMMC_BLOCK_SD_lSetVoltageWindow+0xb4>)
 8003e42:	60fb      	str	r3, [r7, #12]

  do
  {
    /* Send CMD55 for application specific commands (default RCA: 0) */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                         &(SDMMC_BLOCK_COMMON_COMMAND(55)),
 8003e44:	2319      	movs	r3, #25
  }

  do
  {
    /* Send CMD55 for application specific commands (default RCA: 0) */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4a20      	ldr	r2, [pc, #128]	; (8003ecc <SDMMC_BLOCK_SD_lSetVoltageWindow+0xb8>)
 8003e4a:	441a      	add	r2, r3
 8003e4c:	f107 0308 	add.w	r3, r7, #8
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4611      	mov	r1, r2
 8003e56:	2200      	movs	r2, #0
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f7ff ff57 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	75fb      	strb	r3, [r7, #23]
                                         &(SDMMC_BLOCK_COMMON_COMMAND(55)),
                                         SDMMC_BLOCK_ARGUMENT0,
                                         XMC_SDMMC_RESPONSE_TYPE_R1,
                                         &card_status);

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d11e      	bne.n	8003ea6 <SDMMC_BLOCK_SD_lSetVoltageWindow+0x92>
    {
      /* Send ACMD41 to set card's voltage window */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                           &(SDMMC_BLOCK_SD_COMMAND(62)),
 8003e68:	231f      	movs	r3, #31
                                         &card_status);

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
    {
      /* Send ACMD41 to set card's voltage window */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4a17      	ldr	r2, [pc, #92]	; (8003ecc <SDMMC_BLOCK_SD_lSetVoltageWindow+0xb8>)
 8003e6e:	441a      	add	r2, r3
                                           &(SDMMC_BLOCK_SD_COMMAND(62)),
                                           arg,
                                           XMC_SDMMC_RESPONSE_TYPE_R3,
                                           &(obj->sdmmc_sd->card_info.ocr));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3320      	adds	r3, #32
                                         &card_status);

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
    {
      /* Send ACMD41 to set card's voltage window */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	2304      	movs	r3, #4
 8003e80:	f7ff ff44 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]
                                           &(SDMMC_BLOCK_SD_COMMAND(62)),
                                           arg,
                                           XMC_SDMMC_RESPONSE_TYPE_R3,
                                           &(obj->sdmmc_sd->card_info.ocr));

      if ((status != SDMMC_BLOCK_MODE_STATUS_SUCCESS) &&
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <SDMMC_BLOCK_SD_lSetVoltageWindow+0x82>
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
 8003e90:	2b12      	cmp	r3, #18
 8003e92:	d000      	beq.n	8003e96 <SDMMC_BLOCK_SD_lSetVoltageWindow+0x82>
          (status != SDMMC_BLOCK_MODE_STATUS_ILLEGAL_COMMAND_ERROR))
      {
        break;
 8003e94:	e013      	b.n	8003ebe <SDMMC_BLOCK_SD_lSetVoltageWindow+0xaa>
      }
      status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]

      /* Card takes some time to set power status bit. Card must respond in a second */
      (void)SDMMC_BLOCK_SD_lDelay(obj, (uint32_t)SDMMC_BLOCK_CARD_POWER_DELAY);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003ea0:	f001 f836 	bl	8004f10 <SDMMC_BLOCK_SD_lDelay>
 8003ea4:	e001      	b.n	8003eaa <SDMMC_BLOCK_SD_lSetVoltageWindow+0x96>
    }
    else
    {
      loop_count = 100U;
 8003ea6:	2364      	movs	r3, #100	; 0x64
 8003ea8:	613b      	str	r3, [r7, #16]
    }
  } while (((loop_count++) < (uint32_t)50U) &&
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	613a      	str	r2, [r7, #16]
           (!(((uint32_t)obj->sdmmc_sd->card_info.ocr &
           (uint32_t)SDMMC_BLOCK_OCR_POWER_STATUS_BITMASK)!= (uint32_t)0UL)));
 8003eb0:	2b31      	cmp	r3, #49	; 0x31
 8003eb2:	d804      	bhi.n	8003ebe <SDMMC_BLOCK_SD_lSetVoltageWindow+0xaa>
    else
    {
      loop_count = 100U;
    }
  } while (((loop_count++) < (uint32_t)50U) &&
           (!(((uint32_t)obj->sdmmc_sd->card_info.ocr &
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
    }
    else
    {
      loop_count = 100U;
    }
  } while (((loop_count++) < (uint32_t)50U) &&
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	dac2      	bge.n	8003e44 <SDMMC_BLOCK_SD_lSetVoltageWindow+0x30>
           (!(((uint32_t)obj->sdmmc_sd->card_info.ocr &
           (uint32_t)SDMMC_BLOCK_OCR_POWER_STATUS_BITMASK)!= (uint32_t)0UL)));

  return status;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40100000 	.word	0x40100000
 8003ecc:	0800fc68 	.word	0x0800fc68

08003ed0 <SDMMC_BLOCK_SD_lQueryOperatingCondition>:

/* Query voltage operating condition of the card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lQueryOperatingCondition(SDMMC_BLOCK_t *const obj)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t resp_data = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60bb      	str	r3, [r7, #8]
  SDMMC_BLOCK_MODE_STATUS_t status;

  /* Query voltage operating condition (cmd8) */
  status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                       &(SDMMC_BLOCK_SD_COMMAND(8)),
 8003edc:	2306      	movs	r3, #6
{
  uint32_t resp_data = 0U;
  SDMMC_BLOCK_MODE_STATUS_t status;

  /* Query voltage operating condition (cmd8) */
  status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <SDMMC_BLOCK_SD_lQueryOperatingCondition+0x84>)
 8003ee2:	441a      	add	r2, r3
 8003ee4:	f107 0308 	add.w	r3, r7, #8
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4611      	mov	r1, r2
 8003eee:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003ef2:	2306      	movs	r3, #6
 8003ef4:	f7ff ff0a 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	73fb      	strb	r3, [r7, #15]
                                       &(SDMMC_BLOCK_SD_COMMAND(8)),
                                       SDMMC_BLOCK_SD_CMD8_ARG,
                                       XMC_SDMMC_RESPONSE_TYPE_R7,
                                       &resp_data);

  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d116      	bne.n	8003f30 <SDMMC_BLOCK_SD_lQueryOperatingCondition+0x60>
  {
    /* Check if pattern matches in both the argument and response */
    if (((resp_data >> SDMMC_BLOCK_SD_CMD8_CHECK_PATTERN_BITPOS) & SDMMC_BLOCK_SD_CMD8_CHECK_PATTERN_BITMASK) !=
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2baa      	cmp	r3, #170	; 0xaa
 8003f08:	d002      	beq.n	8003f10 <SDMMC_BLOCK_SD_lQueryOperatingCondition+0x40>
        (SDMMC_BLOCK_SD_CMD8_CHECK_PATTERN_VALUE))
    {
      status = SDMMC_BLOCK_MODE_STATUS_BAD_RESPONSE;
 8003f0a:	2319      	movs	r3, #25
 8003f0c:	73fb      	strb	r3, [r7, #15]
 8003f0e:	e01b      	b.n	8003f48 <SDMMC_BLOCK_SD_lQueryOperatingCondition+0x78>
    }
    /* Check if input voltage accepted by the card in the response  */
    else if (((uint8_t)(resp_data >> SDMMC_BLOCK_SD_CMD8_VHS_BITPOS) & SDMMC_BLOCK_SD_CMD8_VHS_BITMASK) !=
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d002      	beq.n	8003f24 <SDMMC_BLOCK_SD_lQueryOperatingCondition+0x54>
             (SDMMC_BLOCK_SD_VHS_PATTERN_2_7_3_6_VALUE))
    {
      status = SDMMC_BLOCK_MODE_STATUS_BAD_RESPONSE;
 8003f1e:	2319      	movs	r3, #25
 8003f20:	73fb      	strb	r3, [r7, #15]
 8003f22:	e011      	b.n	8003f48 <SDMMC_BLOCK_SD_lQueryOperatingCondition+0x78>
    }
    else
    {
      /* Set Flag f8 */
      obj->sdmmc_sd->f8 = (uint8_t)1U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003f2e:	e00b      	b.n	8003f48 <SDMMC_BLOCK_SD_lQueryOperatingCondition+0x78>
  }
  /* Response received; High capacity cards */
  else
  {
    /*  No response is received for Standard Capacity SD cards or MMC card. */
    if (obj->sdmmc_sd->cmd_int_err == SDMMC_BLOCK_MODE_STATUS_COMMAND_TIMEOUT_ERROR)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	7e5b      	ldrb	r3, [r3, #25]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d106      	bne.n	8003f48 <SDMMC_BLOCK_SD_lQueryOperatingCondition+0x78>
    {
      obj->sdmmc_sd->f8 = (uint8_t)0U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	0800fc68 	.word	0x0800fc68

08003f58 <SDMMC_BLOCK_SD_lQueryVoltage>:

/* Query voltage supported from the card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lQueryVoltage(SDMMC_BLOCK_t *const obj, uint32_t arg)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t card_status = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
  SDMMC_BLOCK_MODE_STATUS_t status;

  /* Send CMD55 for application specific commands with 0 as the default RCA */
  status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                       &(SDMMC_BLOCK_COMMON_COMMAND(55)),
 8003f66:	2319      	movs	r3, #25
{
  uint32_t card_status = 0U;
  SDMMC_BLOCK_MODE_STATUS_t status;

  /* Send CMD55 for application specific commands with 0 as the default RCA */
  status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4a1f      	ldr	r2, [pc, #124]	; (8003fe8 <SDMMC_BLOCK_SD_lQueryVoltage+0x90>)
 8003f6c:	441a      	add	r2, r3
 8003f6e:	f107 0308 	add.w	r3, r7, #8
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	4611      	mov	r1, r2
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f7ff fec6 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]
                                       &(SDMMC_BLOCK_COMMON_COMMAND(55)),
                                       arg,
                                       XMC_SDMMC_RESPONSE_TYPE_R1,
                                       &card_status);

  if (((obj->sdmmc_sd->f8 == (uint8_t)0U) && (status == SDMMC_BLOCK_MODE_STATUS_ILLEGAL_COMMAND_ERROR)) ||
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d102      	bne.n	8003f96 <SDMMC_BLOCK_SD_lQueryVoltage+0x3e>
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b12      	cmp	r3, #18
 8003f94:	d002      	beq.n	8003f9c <SDMMC_BLOCK_SD_lQueryVoltage+0x44>
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d120      	bne.n	8003fde <SDMMC_BLOCK_SD_lQueryVoltage+0x86>
      (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS))
  {
    /* Send ACMD41 to query the card's voltage window */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                         &(SDMMC_BLOCK_SD_COMMAND(62)),
 8003f9c:	231f      	movs	r3, #31

  if (((obj->sdmmc_sd->f8 == (uint8_t)0U) && (status == SDMMC_BLOCK_MODE_STATUS_ILLEGAL_COMMAND_ERROR)) ||
      (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS))
  {
    /* Send ACMD41 to query the card's voltage window */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	4a11      	ldr	r2, [pc, #68]	; (8003fe8 <SDMMC_BLOCK_SD_lQueryVoltage+0x90>)
 8003fa2:	441a      	add	r2, r3
                                         &(SDMMC_BLOCK_SD_COMMAND(62)),
                                         arg,
                                         XMC_SDMMC_RESPONSE_TYPE_R3,
                                         &(obj->sdmmc_sd->card_info.ocr));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3320      	adds	r3, #32

  if (((obj->sdmmc_sd->f8 == (uint8_t)0U) && (status == SDMMC_BLOCK_MODE_STATUS_ILLEGAL_COMMAND_ERROR)) ||
      (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS))
  {
    /* Send ACMD41 to query the card's voltage window */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4611      	mov	r1, r2
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	f7ff feaa 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	73fb      	strb	r3, [r7, #15]
                                         &(SDMMC_BLOCK_SD_COMMAND(62)),
                                         arg,
                                         XMC_SDMMC_RESPONSE_TYPE_R3,
                                         &(obj->sdmmc_sd->card_info.ocr));

    if ((status == SDMMC_BLOCK_MODE_STATUS_ILLEGAL_COMMAND_ERROR) ||
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b12      	cmp	r3, #18
 8003fc0:	d002      	beq.n	8003fc8 <SDMMC_BLOCK_SD_lQueryVoltage+0x70>
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <SDMMC_BLOCK_SD_lQueryVoltage+0x86>
        (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS))
    {
      /* Send ACMD41 with voltage window argument set */
      status = SDMMC_BLOCK_SD_lSetVoltageWindow(obj);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff23 	bl	8003e14 <SDMMC_BLOCK_SD_lSetVoltageWindow>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	73fb      	strb	r3, [r7, #15]
      if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <SDMMC_BLOCK_SD_lQueryVoltage+0x86>
      {
        /* SD Card Type */
        SDMMC_BLOCK_SD_lWriteCardType(obj);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8c7 	bl	800416c <SDMMC_BLOCK_SD_lWriteCardType>
      }
    }
  }

  return status;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	0800fc68 	.word	0x0800fc68

08003fec <SDMMC_BLOCK_SD_lAfterCardInitialize>:

/* Read card registers after the card initialization */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lAfterCardInitialize(SDMMC_BLOCK_t *const obj)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
  uint8_t card_lock = (obj->card_state & (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	7a1b      	ldrb	r3, [r3, #8]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	73bb      	strb	r3, [r7, #14]
  uint32_t card_status;

  /* Read CSD & SCR register & card write protection flags */
  status = SDMMC_BLOCK_SD_lReadCardRegisters(obj);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f932 	bl	800426c <SDMMC_BLOCK_SD_lReadCardRegisters>
 8004008:	4603      	mov	r3, r0
 800400a:	73fb      	strb	r3, [r7, #15]

  /* Explicitly set block size as 512 */
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <SDMMC_BLOCK_SD_lAfterCardInitialize+0x46>
  {
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                         &(SDMMC_BLOCK_COMMON_COMMAND(16)),
 8004012:	230c      	movs	r3, #12
  status = SDMMC_BLOCK_SD_lReadCardRegisters(obj);

  /* Explicitly set block size as 512 */
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
  {
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <SDMMC_BLOCK_SD_lAfterCardInitialize+0x9c>)
 8004018:	441a      	add	r2, r3
 800401a:	f107 0308 	add.w	r3, r7, #8
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4611      	mov	r1, r2
 8004024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004028:	2301      	movs	r3, #1
 800402a:	f7ff fe6f 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]
                                         512U,
                                         XMC_SDMMC_RESPONSE_TYPE_R1,
                                         &card_status);
  }

  if ((status == SDMMC_BLOCK_MODE_STATUS_SUCCESS) && (card_lock == (uint8_t)0U))
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d121      	bne.n	800407c <SDMMC_BLOCK_SD_lAfterCardInitialize+0x90>
 8004038:	7bbb      	ldrb	r3, [r7, #14]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11e      	bne.n	800407c <SDMMC_BLOCK_SD_lAfterCardInitialize+0x90>
  {
#if SDMMC_BLOCK_SD_SUPPORT_4_BUS_WIDTH
    /* Switch to 4-bit bus width if supported */
    status = SDMMC_BLOCK_SD_lSwitchBusWidth(obj);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 faf6 	bl	8004630 <SDMMC_BLOCK_SD_lSwitchBusWidth>
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]

    if (status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <SDMMC_BLOCK_SD_lAfterCardInitialize+0x70>
    {
      /* Switch to default (1-bit) bus width */
      XMC_SDMMC_SetDataTransferWidth(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_LINES_1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	2100      	movs	r1, #0
 8004058:	f7ff fb10 	bl	800367c <XMC_SDMMC_SetDataTransferWidth>
    }

    /* Switch to high speed mode */
    status = SDMMC_BLOCK_SD_lSwitchSpeed(obj);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fb45 	bl	80046ec <SDMMC_BLOCK_SD_lSwitchSpeed>
 8004062:	4603      	mov	r3, r0
 8004064:	73fb      	strb	r3, [r7, #15]
    if (status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <SDMMC_BLOCK_SD_lAfterCardInitialize+0x90>
    {
      /* Switch host controller to normal (default) speed mode */
      XMC_SDMMC_DisableHighSpeed(obj->sdmmc_sd->sdmmc);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fb52 	bl	800371c <XMC_SDMMC_DisableHighSpeed>
      status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
    }
#endif
  }

  return status;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	0800fc68 	.word	0x0800fc68

0800408c <SDMMC_BLOCK_SD_lInitializeCard>:

/* Initialize the SD card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lInitializeCard(SDMMC_BLOCK_t *const obj)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status;
  SDMMC_BLOCK_CARD_LOCK_STATUS_t lock_status;
  uint8_t count = (uint8_t)0U;
 8004094:	2300      	movs	r3, #0
 8004096:	73bb      	strb	r3, [r7, #14]
  /* Repeat the below steps 2 times if bad response is received */
  do
  {
    /* Reset the card (CMD0) */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                         &(SDMMC_BLOCK_COMMON_COMMAND(0)),
 8004098:	2300      	movs	r3, #0

  /* Repeat the below steps 2 times if bad response is received */
  do
  {
    /* Reset the card (CMD0) */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4a32      	ldr	r2, [pc, #200]	; (8004168 <SDMMC_BLOCK_SD_lInitializeCard+0xdc>)
 800409e:	441a      	add	r2, r3
 80040a0:	2300      	movs	r3, #0
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4611      	mov	r1, r2
 80040a8:	2200      	movs	r2, #0
 80040aa:	2300      	movs	r3, #0
 80040ac:	f7ff fe2e 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]
                                         &(SDMMC_BLOCK_COMMON_COMMAND(0)),
                                         SDMMC_BLOCK_ARGUMENT0,
                                         XMC_SDMMC_RESPONSE_TYPE_NO_RESPONSE,
                                         NULL);

    if (status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d000      	beq.n	80040bc <SDMMC_BLOCK_SD_lInitializeCard+0x30>
    {
      break;
 80040ba:	e00d      	b.n	80040d8 <SDMMC_BLOCK_SD_lInitializeCard+0x4c>
    }

    /* Query card's operation condition */
    status = SDMMC_BLOCK_SD_lQueryOperatingCondition(obj);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ff07 	bl	8003ed0 <SDMMC_BLOCK_SD_lQueryOperatingCondition>
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]

    count++;
 80040c6:	7bbb      	ldrb	r3, [r7, #14]
 80040c8:	3301      	adds	r3, #1
 80040ca:	73bb      	strb	r3, [r7, #14]
  } while ((count < (uint8_t)SDMMC_BLOCK_NUM_CARD_RESET_RETRIES) &&
           (status == SDMMC_BLOCK_MODE_STATUS_BAD_RESPONSE));
 80040cc:	7bbb      	ldrb	r3, [r7, #14]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d802      	bhi.n	80040d8 <SDMMC_BLOCK_SD_lInitializeCard+0x4c>

    /* Query card's operation condition */
    status = SDMMC_BLOCK_SD_lQueryOperatingCondition(obj);

    count++;
  } while ((count < (uint8_t)SDMMC_BLOCK_NUM_CARD_RESET_RETRIES) &&
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b19      	cmp	r3, #25
 80040d6:	d0df      	beq.n	8004098 <SDMMC_BLOCK_SD_lInitializeCard+0xc>
           (status == SDMMC_BLOCK_MODE_STATUS_BAD_RESPONSE));

  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d13e      	bne.n	800415c <SDMMC_BLOCK_SD_lInitializeCard+0xd0>
  {
    /* Query and set voltage window  */
    status = SDMMC_BLOCK_SD_lQueryVoltage(obj, (uint32_t)obj->sdmmc_sd->card_info.rca);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4619      	mov	r1, r3
 80040ea:	f7ff ff35 	bl	8003f58 <SDMMC_BLOCK_SD_lQueryVoltage>
 80040ee:	4603      	mov	r3, r0
 80040f0:	73fb      	strb	r3, [r7, #15]

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d131      	bne.n	800415c <SDMMC_BLOCK_SD_lInitializeCard+0xd0>
    {
      /* Read CID */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                           &(SDMMC_BLOCK_COMMON_COMMAND(2)),
 80040f8:	2301      	movs	r3, #1
    status = SDMMC_BLOCK_SD_lQueryVoltage(obj, (uint32_t)obj->sdmmc_sd->card_info.rca);

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
    {
      /* Read CID */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <SDMMC_BLOCK_SD_lInitializeCard+0xdc>)
 80040fe:	441a      	add	r2, r3
                                           &(SDMMC_BLOCK_COMMON_COMMAND(2)),
                                           SDMMC_BLOCK_ARGUMENT0,
                                           XMC_SDMMC_RESPONSE_TYPE_R2,
                                           (void *)obj->sdmmc_sd->card_info.cid);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3324      	adds	r3, #36	; 0x24
    status = SDMMC_BLOCK_SD_lQueryVoltage(obj, (uint32_t)obj->sdmmc_sd->card_info.rca);

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
    {
      /* Read CID */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4611      	mov	r1, r2
 800410c:	2200      	movs	r2, #0
 800410e:	2303      	movs	r3, #3
 8004110:	f7ff fdfc 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8004114:	4603      	mov	r3, r0
 8004116:	73fb      	strb	r3, [r7, #15]
                                           &(SDMMC_BLOCK_COMMON_COMMAND(2)),
                                           SDMMC_BLOCK_ARGUMENT0,
                                           XMC_SDMMC_RESPONSE_TYPE_R2,
                                           (void *)obj->sdmmc_sd->card_info.cid);

      if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d11e      	bne.n	800415c <SDMMC_BLOCK_SD_lInitializeCard+0xd0>
      {
        /* Read RCA */
        status = SDMMC_BLOCK_SD_lReadRca(obj);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f888 	bl	8004234 <SDMMC_BLOCK_SD_lReadRca>
 8004124:	4603      	mov	r3, r0
 8004126:	73fb      	strb	r3, [r7, #15]
        if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d116      	bne.n	800415c <SDMMC_BLOCK_SD_lInitializeCard+0xd0>
        {
          /* Check card lock/unlock status */
          status = SDMMC_BLOCK_SD_GetLockStatus(obj, &lock_status);
 800412e:	f107 030d 	add.w	r3, r7, #13
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4619      	mov	r1, r3
 8004136:	f001 fba3 	bl	8005880 <SDMMC_BLOCK_SD_GetLockStatus>
 800413a:	4603      	mov	r3, r0
 800413c:	73fb      	strb	r3, [r7, #15]
          if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <SDMMC_BLOCK_SD_lInitializeCard+0xd0>
          {
            if (lock_status == SDMMC_BLOCK_CARD_LOCK_STATUS_LOCKED)
 8004144:	7b7b      	ldrb	r3, [r7, #13]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <SDMMC_BLOCK_SD_lInitializeCard+0xc2>
            {
              status = SDMMC_BLOCK_MODE_STATUS_INITIALIZED_BUT_LOCKED;
 800414a:	232b      	movs	r3, #43	; 0x2b
 800414c:	73fb      	strb	r3, [r7, #15]
            }

            /* Update card initialization status */
            obj->card_state &= (uint8_t)~((uint8_t)SDMMC_BLOCK_CARD_STATE_NOT_INITIALIZED |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7a1b      	ldrb	r3, [r3, #8]
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	b2da      	uxtb	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	721a      	strb	r2, [r3, #8]
        }
      }
    }
  }

  return status;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	0800fc68 	.word	0x0800fc68

0800416c <SDMMC_BLOCK_SD_lWriteCardType>:


/* Get card type */
static void SDMMC_BLOCK_SD_lWriteCardType(SDMMC_BLOCK_t *const obj)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* If F8=0; standard capacity v1 card */
  if (obj->sdmmc_sd->f8 == (uint8_t)0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800417c:	2b00      	cmp	r3, #0
 800417e:	d107      	bne.n	8004190 <SDMMC_BLOCK_SD_lWriteCardType+0x24>
  {
    obj->card_type |= (uint8_t)SDMMC_BLOCK_CARD_TYPE_STANDARD_CAPACITY_V1X;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7a5b      	ldrb	r3, [r3, #9]
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	b2da      	uxtb	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	725a      	strb	r2, [r3, #9]
 800418e:	e015      	b.n	80041bc <SDMMC_BLOCK_SD_lWriteCardType+0x50>
  }
  /* If F8=1; standard capacity v2 or high capacity card */
  else
  {
    /* Check CCS bit in the OCR register; CCS=1 implies a high capacity card */
    if (((uint32_t)obj->sdmmc_sd->card_info.ocr & (uint32_t)SDMMC_BLOCK_OCR_CCS_BITMASK) != (uint32_t)0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <SDMMC_BLOCK_SD_lWriteCardType+0x42>
    {
      obj->card_type |= (uint8_t)((uint8_t)SDMMC_BLOCK_CARD_TYPE_HIGH_CAPACITY |
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7a5b      	ldrb	r3, [r3, #9]
 80041a2:	f043 030c 	orr.w	r3, r3, #12
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	725a      	strb	r2, [r3, #9]
 80041ac:	e006      	b.n	80041bc <SDMMC_BLOCK_SD_lWriteCardType+0x50>
                                  (uint8_t)SDMMC_BLOCK_CARD_TYPE_BLOCK_ADDRESSING);
    }
    else
    {
      /* CCS=0 implies standard capacity v2 */
      obj->card_type |= (uint8_t)SDMMC_BLOCK_CARD_TYPE_STANDARD_CAPACITY_V2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	7a5b      	ldrb	r3, [r3, #9]
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	725a      	strb	r2, [r3, #9]
    }
  }
}
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <SDMMC_BLOCK_SD_lGetWriteProtect>:

/* Check write protection status of card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lGetWriteProtect(SDMMC_BLOCK_t *const obj)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b094      	sub	sp, #80	; 0x50
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t sd_status[16] = {0U};
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	2240      	movs	r2, #64	; 0x40
 80041d6:	4618      	mov	r0, r3
 80041d8:	2100      	movs	r1, #0
 80041da:	f007 fed8 	bl	800bf8e <memset>
  uint32_t write_protect;
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  status = SDMMC_BLOCK_SD_GetSdStatus(obj, (void *)&(sd_status[0]));
 80041e4:	f107 0308 	add.w	r3, r7, #8
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4619      	mov	r1, r3
 80041ec:	f001 fd0c 	bl	8005c08 <SDMMC_BLOCK_SD_GetSdStatus>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80041f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d113      	bne.n	8004226 <SDMMC_BLOCK_SD_lGetWriteProtect+0x5e>
  {
    /* Bits 480:495 in the SD status provides write protection information */
    write_protect = ((sd_status[0] & 0xFF000000U) >> 24U) | (((sd_status[0] & 0x00FF0000U) >> 16U) << 8U);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	0e1a      	lsrs	r2, r3, #24
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	4313      	orrs	r3, r2
 800420e:	64bb      	str	r3, [r7, #72]	; 0x48
    if ((write_protect & SDMMC_BLOCK_SD_CARD_TYPE_BITMASK) != 0U)
 8004210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d006      	beq.n	8004226 <SDMMC_BLOCK_SD_lGetWriteProtect+0x5e>
    {
      obj->card_state |= (uint8_t)SDMMC_BLOCK_CARD_STATE_WRITE_PROTECTED;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	7a1b      	ldrb	r3, [r3, #8]
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	b2da      	uxtb	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	721a      	strb	r2, [r3, #8]
    }
  }

  return status;
 8004226:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800422a:	4618      	mov	r0, r3
 800422c:	3750      	adds	r7, #80	; 0x50
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop

08004234 <SDMMC_BLOCK_SD_lReadRca>:

/* Reads RCA (relative card address) of the card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lReadRca(SDMMC_BLOCK_t *const obj)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af02      	add	r7, sp, #8
 800423a:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status;

  status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                       &(SDMMC_BLOCK_COMMON_COMMAND(3)),
 800423c:	2302      	movs	r3, #2
/* Reads RCA (relative card address) of the card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lReadRca(SDMMC_BLOCK_t *const obj)
{
  SDMMC_BLOCK_MODE_STATUS_t status;

  status = SDMMC_BLOCK_SD_lSendCommand(obj,
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4a09      	ldr	r2, [pc, #36]	; (8004268 <SDMMC_BLOCK_SD_lReadRca+0x34>)
 8004242:	441a      	add	r2, r3
                                       &(SDMMC_BLOCK_COMMON_COMMAND(3)),
                                       SDMMC_BLOCK_ARGUMENT0,
                                       XMC_SDMMC_RESPONSE_TYPE_R6,
                                       &(obj->sdmmc_sd->card_info.rca));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	334c      	adds	r3, #76	; 0x4c
/* Reads RCA (relative card address) of the card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lReadRca(SDMMC_BLOCK_t *const obj)
{
  SDMMC_BLOCK_MODE_STATUS_t status;

  status = SDMMC_BLOCK_SD_lSendCommand(obj,
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	4611      	mov	r1, r2
 8004250:	2200      	movs	r2, #0
 8004252:	2305      	movs	r3, #5
 8004254:	f7ff fd5a 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]
                                       &(SDMMC_BLOCK_COMMON_COMMAND(3)),
                                       SDMMC_BLOCK_ARGUMENT0,
                                       XMC_SDMMC_RESPONSE_TYPE_R6,
                                       &(obj->sdmmc_sd->card_info.rca));
  return status;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	0800fc68 	.word	0x0800fc68

0800426c <SDMMC_BLOCK_SD_lReadCardRegisters>:

/* Read the CSD, SCR and Write protection status of the card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lReadCardRegisters(SDMMC_BLOCK_t *const obj)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t arg = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
  uint32_t card_status = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
  SDMMC_BLOCK_MODE_STATUS_t status;
  SDMMC_BLOCK_SCR_t scr_content = {0U};
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
  uint8_t card_lock = (obj->card_state & (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7a1b      	ldrb	r3, [r3, #8]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	75fb      	strb	r3, [r7, #23]

  /* Read CSD Register  */
  arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint16_t)SDMMC_BLOCK_ARG_RCA_BITPOS);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8004296:	041b      	lsls	r3, r3, #16
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4313      	orrs	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]

  status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                       &(SDMMC_BLOCK_COMMON_COMMAND(9)),
 800429e:	2307      	movs	r3, #7
  uint8_t card_lock = (obj->card_state & (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED);

  /* Read CSD Register  */
  arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint16_t)SDMMC_BLOCK_ARG_RCA_BITPOS);

  status = SDMMC_BLOCK_SD_lSendCommand(obj,
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <SDMMC_BLOCK_SD_lReadCardRegisters+0x128>)
 80042a4:	441a      	add	r2, r3
                                       &(SDMMC_BLOCK_COMMON_COMMAND(9)),
                                       arg,
                                       XMC_SDMMC_RESPONSE_TYPE_R2,
                                       (void *)obj->sdmmc_sd->card_info.csd);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3334      	adds	r3, #52	; 0x34
  uint8_t card_lock = (obj->card_state & (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED);

  /* Read CSD Register  */
  arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint16_t)SDMMC_BLOCK_ARG_RCA_BITPOS);

  status = SDMMC_BLOCK_SD_lSendCommand(obj,
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4611      	mov	r1, r2
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	2303      	movs	r3, #3
 80042b6:	f7ff fd29 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 80042ba:	4603      	mov	r3, r0
 80042bc:	77fb      	strb	r3, [r7, #31]
                                       &(SDMMC_BLOCK_COMMON_COMMAND(9)),
                                       arg,
                                       XMC_SDMMC_RESPONSE_TYPE_R2,
                                       (void *)obj->sdmmc_sd->card_info.csd);

  if ((status == SDMMC_BLOCK_MODE_STATUS_SUCCESS) && (card_lock == (uint8_t)0U))
 80042be:	7ffb      	ldrb	r3, [r7, #31]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d155      	bne.n	8004370 <SDMMC_BLOCK_SD_lReadCardRegisters+0x104>
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d152      	bne.n	8004370 <SDMMC_BLOCK_SD_lReadCardRegisters+0x104>
  {
    /* Set write protection flags */
    status = SDMMC_BLOCK_SD_lGetWriteProtect(obj);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff7c 	bl	80041c8 <SDMMC_BLOCK_SD_lGetWriteProtect>
 80042d0:	4603      	mov	r3, r0
 80042d2:	77fb      	strb	r3, [r7, #31]

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80042d4:	7ffb      	ldrb	r3, [r7, #31]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d149      	bne.n	800436e <SDMMC_BLOCK_SD_lReadCardRegisters+0x102>
    {
      /* Read SCR register for SD card */
      if (((uint8_t)obj->card_type & (uint8_t)SDMMC_BLOCK_CARD_TYPE_MMC) == 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	7a5b      	ldrb	r3, [r3, #9]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d143      	bne.n	800436e <SDMMC_BLOCK_SD_lReadCardRegisters+0x102>
      {
        /* Switch to Transferring State. */
        status = SDMMC_BLOCK_SD_lSwitchToTransferState(obj);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fcd8 	bl	8004c9c <SDMMC_BLOCK_SD_lSwitchToTransferState>
 80042ec:	4603      	mov	r3, r0
 80042ee:	77fb      	strb	r3, [r7, #31]

        if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80042f0:	7ffb      	ldrb	r3, [r7, #31]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d13b      	bne.n	800436e <SDMMC_BLOCK_SD_lReadCardRegisters+0x102>
        {
          /* Send application specific command CMD55 */
          arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint32_t)SDMMC_BLOCK_ARG_RCA_BITPOS);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4313      	orrs	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]

          status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                               &(SDMMC_BLOCK_COMMON_COMMAND(55)),
 8004306:	2319      	movs	r3, #25
        if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
        {
          /* Send application specific command CMD55 */
          arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint32_t)SDMMC_BLOCK_ARG_RCA_BITPOS);

          status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4a22      	ldr	r2, [pc, #136]	; (8004394 <SDMMC_BLOCK_SD_lReadCardRegisters+0x128>)
 800430c:	441a      	add	r2, r3
 800430e:	f107 0310 	add.w	r3, r7, #16
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4611      	mov	r1, r2
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	2301      	movs	r3, #1
 800431c:	f7ff fcf6 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8004320:	4603      	mov	r3, r0
 8004322:	77fb      	strb	r3, [r7, #31]
                                               &(SDMMC_BLOCK_COMMON_COMMAND(55)),
                                               arg,
                                               XMC_SDMMC_RESPONSE_TYPE_R1,
                                               &card_status);

          if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004324:	7ffb      	ldrb	r3, [r7, #31]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d121      	bne.n	800436e <SDMMC_BLOCK_SD_lReadCardRegisters+0x102>
          {
            /* Set direction select bit */
            XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	2101      	movs	r1, #1
 8004334:	f7ff f9c2 	bl	80036bc <XMC_SDMMC_SetDataTransferDirection>

            /* Read the transferred SCR data */
            status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
                                                         &(SDMMC_BLOCK_SD_COMMAND(64)),
 8004338:	2321      	movs	r3, #33	; 0x21
          {
            /* Set direction select bit */
            XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST);

            /* Read the transferred SCR data */
            status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4a15      	ldr	r2, [pc, #84]	; (8004394 <SDMMC_BLOCK_SD_lReadCardRegisters+0x128>)
 800433e:	441a      	add	r2, r3
 8004340:	f107 0308 	add.w	r3, r7, #8
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	2301      	movs	r3, #1
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4611      	mov	r1, r2
 800434e:	2200      	movs	r2, #0
 8004350:	2308      	movs	r3, #8
 8004352:	f000 f8db 	bl	800450c <SDMMC_BLOCK_SD_lSingleBlockTransfer>
 8004356:	4603      	mov	r3, r0
 8004358:	77fb      	strb	r3, [r7, #31]
                                                         (uint32_t)SDMMC_BLOCK_ARGUMENT0,
                                                         (uint16_t)8U,
                                                         (uint32_t *)&scr_content,
                                                         SDMMC_BLOCK_SD_DATA_TRANSFER_READ_BUFFER);

            obj->sdmmc_sd->card_info.scr = scr_content;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3344      	adds	r3, #68	; 0x44
 8004360:	f107 0208 	add.w	r2, r7, #8
 8004364:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004368:	e883 0003 	stmia.w	r3, {r0, r1}
  if ((status == SDMMC_BLOCK_MODE_STATUS_SUCCESS) && (card_lock == (uint8_t)0U))
  {
    /* Set write protection flags */
    status = SDMMC_BLOCK_SD_lGetWriteProtect(obj);

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800436c:	e00c      	b.n	8004388 <SDMMC_BLOCK_SD_lReadCardRegisters+0x11c>
 800436e:	e00b      	b.n	8004388 <SDMMC_BLOCK_SD_lReadCardRegisters+0x11c>
      }
    }
  }
  else
  {
    status = SDMMC_BLOCK_SD_lSwitchToTransferState(obj);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fc93 	bl	8004c9c <SDMMC_BLOCK_SD_lSwitchToTransferState>
 8004376:	4603      	mov	r3, r0
 8004378:	77fb      	strb	r3, [r7, #31]
    XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	2101      	movs	r1, #1
 8004384:	f7ff f99a 	bl	80036bc <XMC_SDMMC_SetDataTransferDirection>
  }

  return status;
 8004388:	7ffb      	ldrb	r3, [r7, #31]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	0800fc68 	.word	0x0800fc68

08004398 <SDMMC_BLOCK_SD_lConfigureSingleBlockTransfer>:
/* Configure the registers for a single block transfer */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lConfigureSingleBlockTransfer(SDMMC_BLOCK_t *const obj,
                                                                              const XMC_SDMMC_COMMAND_t *cmd,
                                                                              uint32_t arg,
                                                                              uint16_t block_size)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	807b      	strh	r3, [r7, #2]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t card_status = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	623b      	str	r3, [r7, #32]
  XMC_SDMMC_TRANSFER_MODE_t response;

  response.block_size = block_size;
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	617b      	str	r3, [r7, #20]
  response.type = XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	773b      	strb	r3, [r7, #28]
  response.auto_cmd = XMC_SDMMC_TRANSFER_MODE_AUTO_CMD_DISABLED;
 80043b8:	2300      	movs	r3, #0
 80043ba:	777b      	strb	r3, [r7, #29]

  XMC_SDMMC_SetDataTransferMode(obj->sdmmc_sd->sdmmc, &response);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	f107 0314 	add.w	r3, r7, #20
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	f7fd fc9f 	bl	8001d0c <XMC_SDMMC_SetDataTransferMode>

  status = SDMMC_BLOCK_SD_lSendCommand(obj, cmd, arg, XMC_SDMMC_RESPONSE_TYPE_R1, &card_status);
 80043ce:	f107 0320 	add.w	r3, r7, #32
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	2301      	movs	r3, #1
 80043dc:	f7ff fc96 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  return status;
 80043e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3728      	adds	r7, #40	; 0x28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop

080043f4 <SDMMC_BLOCK_SD_lConfigureMultiBlockTransfer>:
/* Configure the registers for a multi-block transfer */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lConfigureMultiBlockTransfer(SDMMC_BLOCK_t *const obj,
                                                                             uint32_t *arg,
                                                                             uint32_t num_blocks,
                                                                             const XMC_SDMMC_COMMAND_t *cmd)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
  SDMMC_BLOCK_MODE_STATUS_t status;
  uint32_t card_status = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	623b      	str	r3, [r7, #32]
  XMC_SDMMC_TRANSFER_MODE_t response;

  /* Block addressing */
  if (((uint8_t)obj->card_type & (uint8_t)SDMMC_BLOCK_CARD_TYPE_BLOCK_ADDRESSING) == (uint8_t)0U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	7a5b      	ldrb	r3, [r3, #9]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d104      	bne.n	800441c <SDMMC_BLOCK_SD_lConfigureMultiBlockTransfer+0x28>
  {
    *arg *= (uint32_t)512U;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	025a      	lsls	r2, r3, #9
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	601a      	str	r2, [r3, #0]
  }

  response.block_size = SDMMC_BLOCK_TX_BLOCK_SIZE_VALUE;
 800441c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004420:	617b      	str	r3, [r7, #20]
  response.num_blocks = num_blocks;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	61bb      	str	r3, [r7, #24]
  response.type = XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE;
 8004426:	2322      	movs	r3, #34	; 0x22
 8004428:	773b      	strb	r3, [r7, #28]
  response.auto_cmd = XMC_SDMMC_TRANSFER_MODE_AUTO_CMD_12;
 800442a:	2301      	movs	r3, #1
 800442c:	777b      	strb	r3, [r7, #29]

  XMC_SDMMC_SetDataTransferMode(obj->sdmmc_sd->sdmmc, &response);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	f7fd fc66 	bl	8001d0c <XMC_SDMMC_SetDataTransferMode>

  /* Enable ACMD 12 interrupt signal */
  XMC_SDMMC_EnableEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_ACMD_ERR);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800444c:	f7fd fbca 	bl	8001be4 <XMC_SDMMC_EnableEvent>

  /* Send multiple block transfer command */
  status = SDMMC_BLOCK_SD_lSendCommand(obj, cmd, *arg, XMC_SDMMC_RESPONSE_TYPE_R1, &card_status);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	f107 0320 	add.w	r3, r7, #32
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	6839      	ldr	r1, [r7, #0]
 800445e:	2301      	movs	r3, #1
 8004460:	f7ff fc54 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  return status;
 800446a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800446e:	4618      	mov	r0, r3
 8004470:	3728      	adds	r7, #40	; 0x28
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop

08004478 <SDMMC_BLOCK_SD_lMultiBlockTransfer>:
                                                                    uint32_t *addr,
                                                                    uint32_t num_blocks,
                                                                    const XMC_SDMMC_COMMAND_t *cmd,
                                                                    uint32_t *buf,
                                                                    SDMMC_BLOCK_SD_DATA_TRANSFER_t transfer_mode)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  SDMMC_BLOCK_MODE_STATUS_t status;
  obj->sdmmc_sd->transfer_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2201      	movs	r2, #1
 800448c:	769a      	strb	r2, [r3, #26]

  /* Configure registers for Multi block transfer*/
  status = SDMMC_BLOCK_SD_lConfigureMultiBlockTransfer(obj, addr, (uint32_t)num_blocks, cmd);
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f7ff ffad 	bl	80043f4 <SDMMC_BLOCK_SD_lConfigureMultiBlockTransfer>
 800449a:	4603      	mov	r3, r0
 800449c:	75fb      	strb	r3, [r7, #23]
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800449e:	7dfb      	ldrb	r3, [r7, #23]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d12c      	bne.n	80044fe <SDMMC_BLOCK_SD_lMultiBlockTransfer+0x86>
  {
    /* Read/write block data */
    while ((uint32_t)num_blocks > 0U)
 80044a4:	e014      	b.n	80044d0 <SDMMC_BLOCK_SD_lMultiBlockTransfer+0x58>
    {
      /* Perform Transfer */
      status = SDMMC_BLOCK_SD_lDataTransfer(obj, buf, transfer_mode, SDMMC_BLOCK_NUM_QUADLETS_IN_BLOCK);
 80044a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	6a39      	ldr	r1, [r7, #32]
 80044ae:	461a      	mov	r2, r3
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	f000 fc37 	bl	8004d24 <SDMMC_BLOCK_SD_lDataTransfer>
 80044b6:	4603      	mov	r3, r0
 80044b8:	75fb      	strb	r3, [r7, #23]
      if (status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d000      	beq.n	80044c2 <SDMMC_BLOCK_SD_lMultiBlockTransfer+0x4a>
      {
        break;
 80044c0:	e009      	b.n	80044d6 <SDMMC_BLOCK_SD_lMultiBlockTransfer+0x5e>
      }
      /* Decrement number of blocks */
      num_blocks--;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	607b      	str	r3, [r7, #4]
      /* Pointer pointing to the next block pointer */
      buf += (uint32_t)SDMMC_BLOCK_NUM_QUADLETS_IN_BLOCK;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80044ce:	623b      	str	r3, [r7, #32]
  /* Configure registers for Multi block transfer*/
  status = SDMMC_BLOCK_SD_lConfigureMultiBlockTransfer(obj, addr, (uint32_t)num_blocks, cmd);
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
  {
    /* Read/write block data */
    while ((uint32_t)num_blocks > 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e7      	bne.n	80044a6 <SDMMC_BLOCK_SD_lMultiBlockTransfer+0x2e>
      num_blocks--;
      /* Pointer pointing to the next block pointer */
      buf += (uint32_t)SDMMC_BLOCK_NUM_QUADLETS_IN_BLOCK;
    }

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d110      	bne.n	80044fe <SDMMC_BLOCK_SD_lMultiBlockTransfer+0x86>
    {
      /* Block on transfer complete interrupt */
      /* Timeout: 5ms */
      status = SDMMC_BLOCK_SD_lTransferDelay(obj, SDMMC_BLOCK_DELAY_IN_TRANSFER);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	490a      	ldr	r1, [pc, #40]	; (8004508 <SDMMC_BLOCK_SD_lMultiBlockTransfer+0x90>)
 80044e0:	f7ff fb08 	bl	8003af4 <SDMMC_BLOCK_SD_lTransferDelay>
 80044e4:	4603      	mov	r3, r0
 80044e6:	75fb      	strb	r3, [r7, #23]
      if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <SDMMC_BLOCK_SD_lMultiBlockTransfer+0x86>
      {
        /* Check if transfer happened successfully; Check ACMD status */
        if ((SDMMC_BLOCK_MODE_STATUS_t)obj->sdmmc_sd->acmd_int_err == SDMMC_BLOCK_MODE_STATUS_ACMD12_ERROR)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	7edb      	ldrb	r3, [r3, #27]
 80044f4:	2b09      	cmp	r3, #9
 80044f6:	d102      	bne.n	80044fe <SDMMC_BLOCK_SD_lMultiBlockTransfer+0x86>
        {
          /* Call ACMD12 error recovery */
          SDMMC_BLOCK_SD_lAcmdErrorRecovery(obj);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fc83 	bl	8004e04 <SDMMC_BLOCK_SD_lAcmdErrorRecovery>
        }
      }
    }
  }
  return status;
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	000f4240 	.word	0x000f4240

0800450c <SDMMC_BLOCK_SD_lSingleBlockTransfer>:
                                                                     const XMC_SDMMC_COMMAND_t *cmd,
                                                                     uint32_t arg,
                                                                     uint16_t block_size,
                                                                     uint32_t *buf,
                                                                     SDMMC_BLOCK_SD_DATA_TRANSFER_t transfer_mode)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	807b      	strh	r3, [r7, #2]
  SDMMC_BLOCK_MODE_STATUS_t status;
  uint32_t qbytes = (uint32_t)(((((uint32_t)block_size + 3UL) >> 2U) << 2U) >> 2U);
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	3303      	adds	r3, #3
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	613b      	str	r3, [r7, #16]

  status = SDMMC_BLOCK_SD_lConfigureSingleBlockTransfer(obj, cmd, arg, block_size);
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	f7ff ff35 	bl	8004398 <SDMMC_BLOCK_SD_lConfigureSingleBlockTransfer>
 800452e:	4603      	mov	r3, r0
 8004530:	75fb      	strb	r3, [r7, #23]
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d149      	bne.n	80045cc <SDMMC_BLOCK_SD_lSingleBlockTransfer+0xc0>
  {
    /* Perform data transfer */
    status = SDMMC_BLOCK_SD_lDataTransfer(obj, buf, transfer_mode, qbytes);
 8004538:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	6a39      	ldr	r1, [r7, #32]
 8004540:	461a      	mov	r2, r3
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f000 fbee 	bl	8004d24 <SDMMC_BLOCK_SD_lDataTransfer>
 8004548:	4603      	mov	r3, r0
 800454a:	75fb      	strb	r3, [r7, #23]
    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800454c:	7dfb      	ldrb	r3, [r7, #23]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d13c      	bne.n	80045cc <SDMMC_BLOCK_SD_lSingleBlockTransfer+0xc0>
    {
      /* Block on transfer complete interrupt */
      status = SDMMC_BLOCK_SD_lStartTimer(obj, SDMMC_BLOCK_DELAY_IN_TRANSFER);
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	4920      	ldr	r1, [pc, #128]	; (80045d8 <SDMMC_BLOCK_SD_lSingleBlockTransfer+0xcc>)
 8004556:	f000 fd8b 	bl	8005070 <SDMMC_BLOCK_SD_lStartTimer>
 800455a:	4603      	mov	r3, r0
 800455c:	75fb      	strb	r3, [r7, #23]
      if (status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <SDMMC_BLOCK_SD_lSingleBlockTransfer+0x5e>
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
 8004564:	232e      	movs	r3, #46	; 0x2e
 8004566:	75fb      	strb	r3, [r7, #23]
 8004568:	e030      	b.n	80045cc <SDMMC_BLOCK_SD_lSingleBlockTransfer+0xc0>
      }
      else
      {
        do
        {
          if (obj->sdmmc_sd->tmr_expire == (bool)0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f083 0301 	eor.w	r3, r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <SDMMC_BLOCK_SD_lSingleBlockTransfer+0x78>
          {
            status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
 800457e:	232e      	movs	r3, #46	; 0x2e
 8004580:	75fb      	strb	r3, [r7, #23]
            break;
 8004582:	e004      	b.n	800458e <SDMMC_BLOCK_SD_lSingleBlockTransfer+0x82>
          }
        } while ((uint8_t)obj->sdmmc_sd->isr_context.transfer_flag == (uint8_t)0U);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	7a1b      	ldrb	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ed      	beq.n	800456a <SDMMC_BLOCK_SD_lSingleBlockTransfer+0x5e>

        /* Stop timer and delete it */
        (void)SDMMC_BLOCK_SD_lStopTimer(obj);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fda8 	bl	80050e4 <SDMMC_BLOCK_SD_lStopTimer>
        (void)SYSTIMER_DeleteTimer((uint32_t)obj->sdmmc_sd->tmr_id);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe f9b2 	bl	8002904 <SYSTIMER_DeleteTimer>

        obj->sdmmc_sd->isr_context.transfer_flag = (uint8_t)0U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2200      	movs	r2, #0
 80045a6:	721a      	strb	r2, [r3, #8]

        /* Check transfer complete status */
        if ((SDMMC_BLOCK_MODE_STATUS_t)obj->sdmmc_sd->transfer_int_err == SDMMC_BLOCK_MODE_STATUS_TRANSFER_COMPLETE)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	7e9b      	ldrb	r3, [r3, #26]
 80045ae:	2b1f      	cmp	r3, #31
 80045b0:	d102      	bne.n	80045b8 <SDMMC_BLOCK_SD_lSingleBlockTransfer+0xac>
        {
          status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]
 80045b6:	e009      	b.n	80045cc <SDMMC_BLOCK_SD_lSingleBlockTransfer+0xc0>
        }
        else
        {
          obj->sdmmc_sd->issue_abort = (uint8_t)1U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          status = SDMMC_BLOCK_SD_lErrorInterruptRecovery(obj);
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f934 	bl	8004830 <SDMMC_BLOCK_SD_lErrorInterruptRecovery>
 80045c8:	4603      	mov	r3, r0
 80045ca:	75fb      	strb	r3, [r7, #23]
        }
      }
    }
  }

  return status;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	000f4240 	.word	0x000f4240

080045dc <SDMMC_BLOCK_SD_lCheckLockStatus>:

/* Check lock status */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lCheckLockStatus(SDMMC_BLOCK_t *const obj,
                                                                 SDMMC_BLOCK_CARD_LOCK_STATUS_t mode)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
  SDMMC_BLOCK_MODE_STATUS_t status;
  SDMMC_BLOCK_CARD_LOCK_STATUS_t lock_status;

  status = SDMMC_BLOCK_SD_GetLockStatus(obj, &lock_status);
 80045e8:	f107 030e 	add.w	r3, r7, #14
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4619      	mov	r1, r3
 80045f0:	f001 f946 	bl	8005880 <SDMMC_BLOCK_SD_GetLockStatus>
 80045f4:	4603      	mov	r3, r0
 80045f6:	73fb      	strb	r3, [r7, #15]
  /* For lock, card state must be "locked" */
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d113      	bne.n	8004626 <SDMMC_BLOCK_SD_lCheckLockStatus+0x4a>
  {
    if ((lock_status == SDMMC_BLOCK_CARD_LOCK_STATUS_LOCKED) && (mode == SDMMC_BLOCK_CARD_LOCK_STATUS_LOCKED))
 80045fe:	7bbb      	ldrb	r3, [r7, #14]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d105      	bne.n	8004610 <SDMMC_BLOCK_SD_lCheckLockStatus+0x34>
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d102      	bne.n	8004610 <SDMMC_BLOCK_SD_lCheckLockStatus+0x34>
    {
      status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
 800460e:	e00a      	b.n	8004626 <SDMMC_BLOCK_SD_lCheckLockStatus+0x4a>
    }
    /* For unlock, card state must be "unlocked" */
    else if ((lock_status == SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED) && (mode == SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED))
 8004610:	7bbb      	ldrb	r3, [r7, #14]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <SDMMC_BLOCK_SD_lCheckLockStatus+0x46>
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <SDMMC_BLOCK_SD_lCheckLockStatus+0x46>
    {
      status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e001      	b.n	8004626 <SDMMC_BLOCK_SD_lCheckLockStatus+0x4a>
    }
    else
    {
      status = SDMMC_BLOCK_MODE_STATUS_LOCK_UNLOCK_ERROR;
 8004622:	2310      	movs	r3, #16
 8004624:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <SDMMC_BLOCK_SD_lSwitchBusWidth>:

#if SDMMC_BLOCK_SD_SUPPORT_4_BUS_WIDTH

/* Switch bus width to 4-bit if supported */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lSwitchBusWidth(SDMMC_BLOCK_t *const obj)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af02      	add	r7, sp, #8
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t arg = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 800463c:	2301      	movs	r3, #1
 800463e:	75fb      	strb	r3, [r7, #23]
  uint32_t card_status = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]

  /* Switch to transfer state (CMD7) */
  status = SDMMC_BLOCK_SD_lSwitchToTransferState(obj);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fb29 	bl	8004c9c <SDMMC_BLOCK_SD_lSwitchToTransferState>
 800464a:	4603      	mov	r3, r0
 800464c:	75fb      	strb	r3, [r7, #23]

  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d144      	bne.n	80046de <SDMMC_BLOCK_SD_lSwitchBusWidth+0xae>
  {
    /* Disable card insertion interrupt */
    XMC_SDMMC_DisableEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_CARD_INS);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	2140      	movs	r1, #64	; 0x40
 800465e:	f7fd fae1 	bl	8001c24 <XMC_SDMMC_DisableEvent>

    /* Check data transfer width supported in SCR register */
    if ((obj->sdmmc_sd->card_info.scr.sd_bus_width & SDMMC_BLOCK_SCR_BUS_WIDTH4_BITMASK))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800466a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d028      	beq.n	80046ca <SDMMC_BLOCK_SD_lSwitchBusWidth+0x9a>
    {
      /* Set the argument */
      arg |= ((uint32_t)obj->sdmmc_sd->card_info.rca << (uint32_t)SDMMC_BLOCK_ARG_RCA_BITPOS);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

      /* Send application specific command */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                           &(SDMMC_BLOCK_COMMON_COMMAND(55)),
 8004688:	2319      	movs	r3, #25
    {
      /* Set the argument */
      arg |= ((uint32_t)obj->sdmmc_sd->card_info.rca << (uint32_t)SDMMC_BLOCK_ARG_RCA_BITPOS);

      /* Send application specific command */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <SDMMC_BLOCK_SD_lSwitchBusWidth+0xb8>)
 800468e:	441a      	add	r2, r3
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4611      	mov	r1, r2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	2301      	movs	r3, #1
 800469e:	f7ff fb35 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 80046a2:	4603      	mov	r3, r0
 80046a4:	75fb      	strb	r3, [r7, #23]
                                           &(SDMMC_BLOCK_COMMON_COMMAND(55)),
                                           arg,
                                           XMC_SDMMC_RESPONSE_TYPE_R1,
                                           &card_status);

      if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10e      	bne.n	80046ca <SDMMC_BLOCK_SD_lSwitchBusWidth+0x9a>
      {
        /* Send ACMD6 to switch the bus width */
        status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                             &(SDMMC_BLOCK_SD_COMMAND(58)),
 80046ac:	231b      	movs	r3, #27
                                           &card_status);

      if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
      {
        /* Send ACMD6 to switch the bus width */
        status = SDMMC_BLOCK_SD_lSendCommand(obj,
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4a0d      	ldr	r2, [pc, #52]	; (80046e8 <SDMMC_BLOCK_SD_lSwitchBusWidth+0xb8>)
 80046b2:	441a      	add	r2, r3
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4611      	mov	r1, r2
 80046be:	2202      	movs	r2, #2
 80046c0:	2301      	movs	r3, #1
 80046c2:	f7ff fb23 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 80046c6:	4603      	mov	r3, r0
 80046c8:	75fb      	strb	r3, [r7, #23]
                                             XMC_SDMMC_RESPONSE_TYPE_R1,
                                             &card_status);
      }
    }

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <SDMMC_BLOCK_SD_lSwitchBusWidth+0xae>
    {
      /* Set data transfer width */
      XMC_SDMMC_SetDataTransferWidth(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_LINES_4);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	2102      	movs	r1, #2
 80046da:	f7fe ffcf 	bl	800367c <XMC_SDMMC_SetDataTransferWidth>
    }
  }

  return status;
 80046de:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	0800fc68 	.word	0x0800fc68

080046ec <SDMMC_BLOCK_SD_lSwitchSpeed>:

/* Switch the card speed mode to high speed if supported */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lSwitchSpeed(SDMMC_BLOCK_t *const obj)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b096      	sub	sp, #88	; 0x58
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t switch_status[16] = {0U};
 80046f4:	f107 030c 	add.w	r3, r7, #12
 80046f8:	2240      	movs	r2, #64	; 0x40
 80046fa:	4618      	mov	r0, r3
 80046fc:	2100      	movs	r1, #0
 80046fe:	f007 fc46 	bl	800bf8e <memset>
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Check CMD6 support in SCR register */
  if (obj->sdmmc_sd->card_info.scr.sd_spec != 0UL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d031      	beq.n	800477e <SDMMC_BLOCK_SD_lSwitchSpeed+0x92>
  {
    /* Switch to transfer state (CMD7) */
    status = SDMMC_BLOCK_SD_lSwitchToTransferState(obj);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fabe 	bl	8004c9c <SDMMC_BLOCK_SD_lSwitchToTransferState>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004726:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800472a:	2b00      	cmp	r3, #0
 800472c:	d127      	bne.n	800477e <SDMMC_BLOCK_SD_lSwitchSpeed+0x92>
      /*
       * Send the Switch function command and read the transferred block of
       * data from the card
       */
      status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
                                                   &(SDMMC_BLOCK_SD_COMMAND(6)),
 800472e:	2304      	movs	r3, #4
    {
      /*
       * Send the Switch function command and read the transferred block of
       * data from the card
       */
      status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4a16      	ldr	r2, [pc, #88]	; (800478c <SDMMC_BLOCK_SD_lSwitchSpeed+0xa0>)
 8004734:	441a      	add	r2, r3
 8004736:	f107 030c 	add.w	r3, r7, #12
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	2301      	movs	r3, #1
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4611      	mov	r1, r2
 8004744:	4a12      	ldr	r2, [pc, #72]	; (8004790 <SDMMC_BLOCK_SD_lSwitchSpeed+0xa4>)
 8004746:	2340      	movs	r3, #64	; 0x40
 8004748:	f7ff fee0 	bl	800450c <SDMMC_BLOCK_SD_lSingleBlockTransfer>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                                                   SDMMC_BLOCK_SD_HIGH_SPEED_ARG,
                                                   64U,
                                                   (uint32_t *)switch_status,
                                                   SDMMC_BLOCK_SD_DATA_TRANSFER_READ_BUFFER);

      if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004752:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <SDMMC_BLOCK_SD_lSwitchSpeed+0x7e>
      {
        if (((switch_status[4] & (uint32_t)SDMMC_BLOCK_SWITCH_FUNC_GRP1_STATUS_BITMASK) >>
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	2b01      	cmp	r3, #1
 8004762:	d002      	beq.n	800476a <SDMMC_BLOCK_SD_lSwitchSpeed+0x7e>
             (uint32_t)SDMMC_BLOCK_SWITCH_FUNC_GRP1_STATUS_BITPOS) != (uint32_t)1U)
        {
          status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8004764:	2301      	movs	r3, #1
 8004766:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }
      }

      if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800476a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800476e:	2b00      	cmp	r3, #0
 8004770:	d105      	bne.n	800477e <SDMMC_BLOCK_SD_lSwitchSpeed+0x92>
      {
        /* Change speed mode (high speed) in the host controller */
        XMC_SDMMC_EnableHighSpeed(obj->sdmmc_sd->sdmmc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe ffbb 	bl	80036f4 <XMC_SDMMC_EnableHighSpeed>
      }
    }
  }

  return status;
 800477e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004782:	4618      	mov	r0, r3
 8004784:	3750      	adds	r7, #80	; 0x50
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	0800fc68 	.word	0x0800fc68
 8004790:	80000001 	.word	0x80000001

08004794 <SDMMC_BLOCK_SD_lCommandDelay>:

#endif

/* Provides delay in command execution */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lCommandDelay(SDMMC_BLOCK_t *const obj, uint32_t delay)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  obj->sdmmc_sd->tmr_expire = (bool)1U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  status = SDMMC_BLOCK_SD_lStartTimer(obj, delay);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	f000 fc5e 	bl	8005070 <SDMMC_BLOCK_SD_lStartTimer>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
  if (status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d021      	beq.n	8004802 <SDMMC_BLOCK_SD_lCommandDelay+0x6e>
  {
    do
    {
      if (obj->sdmmc_sd->tmr_expire == (bool)0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f083 0301 	eor.w	r3, r3, #1
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <SDMMC_BLOCK_SD_lCommandDelay+0x44>
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
 80047d2:	232e      	movs	r3, #46	; 0x2e
 80047d4:	73fb      	strb	r3, [r7, #15]
        break;
 80047d6:	e014      	b.n	8004802 <SDMMC_BLOCK_SD_lCommandDelay+0x6e>
      }
    } while ((!((obj->sdmmc_sd->isr_context.cmd_flag == 1U) ||
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	799b      	ldrb	r3, [r3, #6]
              (obj->sdmmc_sd->isr_context.data_flag == 1U))) &&
             ((XMC_SDMMC_GetEvent(obj->sdmmc_sd->sdmmc, XMC_SDMMC_CARD_ERR) != 0U)));
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d00f      	beq.n	8004802 <SDMMC_BLOCK_SD_lCommandDelay+0x6e>
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
        break;
      }
    } while ((!((obj->sdmmc_sd->isr_context.cmd_flag == 1U) ||
              (obj->sdmmc_sd->isr_context.data_flag == 1U))) &&
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	79db      	ldrb	r3, [r3, #7]
      if (obj->sdmmc_sd->tmr_expire == (bool)0U)
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
        break;
      }
    } while ((!((obj->sdmmc_sd->isr_context.cmd_flag == 1U) ||
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d00a      	beq.n	8004802 <SDMMC_BLOCK_SD_lCommandDelay+0x6e>
              (obj->sdmmc_sd->isr_context.data_flag == 1U))) &&
             ((XMC_SDMMC_GetEvent(obj->sdmmc_sd->sdmmc, XMC_SDMMC_CARD_ERR) != 0U)));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047f8:	f7fd fa4a 	bl	8001c90 <XMC_SDMMC_GetEvent>
 80047fc:	4603      	mov	r3, r0
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
        break;
      }
    } while ((!((obj->sdmmc_sd->isr_context.cmd_flag == 1U) ||
              (obj->sdmmc_sd->isr_context.data_flag == 1U))) &&
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1dd      	bne.n	80047be <SDMMC_BLOCK_SD_lCommandDelay+0x2a>
             ((XMC_SDMMC_GetEvent(obj->sdmmc_sd->sdmmc, XMC_SDMMC_CARD_ERR) != 0U)));
  }

  /* Stop timer and delete it */
  (void)SDMMC_BLOCK_SD_lStopTimer(obj);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fc6e 	bl	80050e4 <SDMMC_BLOCK_SD_lStopTimer>
  (void)SYSTIMER_DeleteTimer(obj->sdmmc_sd->tmr_id);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe f878 	bl	8002904 <SYSTIMER_DeleteTimer>

  obj->sdmmc_sd->isr_context.cmd_flag = (uint8_t)0U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2200      	movs	r2, #0
 800481a:	719a      	strb	r2, [r3, #6]
  obj->sdmmc_sd->isr_context.data_flag = (uint8_t)0U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2200      	movs	r2, #0
 8004822:	71da      	strb	r2, [r3, #7]

  return status;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop

08004830 <SDMMC_BLOCK_SD_lErrorInterruptRecovery>:

/* Recovery task for error interrupts */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lErrorInterruptRecovery(SDMMC_BLOCK_t *const obj)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  XMC_SDMMC_COMMAND_t *cmd = (XMC_SDMMC_COMMAND_t *)&(SDMMC_BLOCK_COMMON_COMMAND(12));
 8004838:	2309      	movs	r3, #9
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4a61      	ldr	r2, [pc, #388]	; (80049c4 <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x194>)
 800483e:	4413      	add	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_NONRECOVERABLE_ERROR;
 8004842:	2325      	movs	r3, #37	; 0x25
 8004844:	75fb      	strb	r3, [r7, #23]
  uint32_t normal_events = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
  uint32_t error_events = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]

  error_events = ((uint32_t)XMC_SDMMC_CMD_TIMEOUT_ERR)   |
 800484e:	4b5e      	ldr	r3, [pc, #376]	; (80049c8 <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x198>)
 8004850:	60bb      	str	r3, [r7, #8]
                 ((uint32_t)XMC_SDMMC_DATA_END_BIT_ERR)  |
                 ((uint32_t)XMC_SDMMC_CURRENT_LIMIT_ERR) |
                 ((uint32_t)XMC_SDMMC_TARGET_RESP_ERR);

  /* Disable all error events */
  XMC_SDMMC_DisableEvent(obj->sdmmc_sd->sdmmc, error_events);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	f7fd f9e2 	bl	8001c24 <XMC_SDMMC_DisableEvent>

  /* Check error interrupt status bits D0-D3 for CMD line errors */
  if ((((uint32_t)obj->sdmmc_sd->isr_context.int_status_shadow &
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	889b      	ldrh	r3, [r3, #4]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	2b00      	cmp	r3, #0
 800486c:	d108      	bne.n	8004880 <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x50>
        (uint32_t)SDMMC_BLOCK_ERROR_CMD_STATUS_BITMASK) != (uint32_t)0U) ||
      (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc) == true))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe fe7b 	bl	8003570 <XMC_SDMMC_IsCommandLineBusy>
 800487a:	4603      	mov	r3, r0
  /* Disable all error events */
  XMC_SDMMC_DisableEvent(obj->sdmmc_sd->sdmmc, error_events);

  /* Check error interrupt status bits D0-D3 for CMD line errors */
  if ((((uint32_t)obj->sdmmc_sd->isr_context.int_status_shadow &
        (uint32_t)SDMMC_BLOCK_ERROR_CMD_STATUS_BITMASK) != (uint32_t)0U) ||
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x5c>
      (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc) == true))
  {
    /* Set software reset for CMD line */
    status = SDMMC_BLOCK_SD_lReset(obj, (uint32_t)XMC_SDMMC_SW_RST_CMD_LINE);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	2102      	movs	r1, #2
 8004884:	f7fe ff5e 	bl	8003744 <SDMMC_BLOCK_SD_lReset>
 8004888:	4603      	mov	r3, r0
 800488a:	75fb      	strb	r3, [r7, #23]
  }

  /* Check error interrupt status bits D4-D6 for data line errors */
  if ((((uint32_t)obj->sdmmc_sd->isr_context.int_status_shadow &
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	889b      	ldrh	r3, [r3, #4]
 8004892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004896:	2b00      	cmp	r3, #0
 8004898:	d108      	bne.n	80048ac <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x7c>
        (uint32_t)SDMMC_BLOCK_ERROR_DATA_STATUS_BITMASK) != (uint32_t)0U) ||
      (XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc) == true))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fe79 	bl	8003598 <XMC_SDMMC_IsDataLineBusy>
 80048a6:	4603      	mov	r3, r0
    status = SDMMC_BLOCK_SD_lReset(obj, (uint32_t)XMC_SDMMC_SW_RST_CMD_LINE);
  }

  /* Check error interrupt status bits D4-D6 for data line errors */
  if ((((uint32_t)obj->sdmmc_sd->isr_context.int_status_shadow &
        (uint32_t)SDMMC_BLOCK_ERROR_DATA_STATUS_BITMASK) != (uint32_t)0U) ||
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x88>
      (XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc) == true))
  {
    /* Set software reset for data line */
    status = SDMMC_BLOCK_SD_lReset(obj, (uint32_t)XMC_SDMMC_SW_RST_DAT_LINE);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	2104      	movs	r1, #4
 80048b0:	f7fe ff48 	bl	8003744 <SDMMC_BLOCK_SD_lReset>
 80048b4:	4603      	mov	r3, r0
 80048b6:	75fb      	strb	r3, [r7, #23]
  }

  error_events = ((uint32_t)XMC_SDMMC_CMD_TIMEOUT_ERR)   |
 80048b8:	4b44      	ldr	r3, [pc, #272]	; (80049cc <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x19c>)
 80048ba:	60bb      	str	r3, [r7, #8]
                 ((uint32_t)XMC_SDMMC_DATA_CRC_ERR)      |
                 ((uint32_t)XMC_SDMMC_DATA_END_BIT_ERR)  |
                 ((uint32_t)XMC_SDMMC_CURRENT_LIMIT_ERR) |
                 ((uint32_t)XMC_SDMMC_CARD_ERR);

  XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, error_events);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	f7fd f9cf 	bl	8001c68 <XMC_SDMMC_ClearEvent>

  if (obj->sdmmc_sd->issue_abort == (uint8_t)1U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d148      	bne.n	8004968 <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x138>
  {
    /* Issue abort command. Set argument register */
    (void)XMC_SDMMC_SendCommand(obj->sdmmc_sd->sdmmc, cmd, SDMMC_BLOCK_ARGUMENT0);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	6939      	ldr	r1, [r7, #16]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f7fd f9ff 	bl	8001ce4 <XMC_SDMMC_SendCommand>

    /* Wait for any interrupt status bit to be set */

    /* Timeout of 5ms */
    status = SDMMC_BLOCK_SD_lCommandDelay(obj, (uint32_t)SDMMC_BLOCK_DELAY_IN_COMMAND);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4939      	ldr	r1, [pc, #228]	; (80049d0 <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x1a0>)
 80048ea:	f7ff ff53 	bl	8004794 <SDMMC_BLOCK_SD_lCommandDelay>
 80048ee:	4603      	mov	r3, r0
 80048f0:	75fb      	strb	r3, [r7, #23]
    if ((SDMMC_BLOCK_MODE_STATUS_t)status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d11c      	bne.n	8004932 <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x102>
    {
      /* If error status bit is set in the status register */
      if (XMC_SDMMC_IsAnyErrorEvent(obj->sdmmc_sd->sdmmc) == true)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe fd5e 	bl	80033c0 <XMC_SDMMC_IsAnyErrorEvent>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d013      	beq.n	8004932 <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x102>
      {
        status = SDMMC_BLOCK_MODE_STATUS_NONRECOVERABLE_ERROR;
 800490a:	2325      	movs	r3, #37	; 0x25
 800490c:	75fb      	strb	r3, [r7, #23]

        XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, normal_events);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	f7fd f9a6 	bl	8001c68 <XMC_SDMMC_ClearEvent>
        XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, error_events);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	f7fd f99f 	bl	8001c68 <XMC_SDMMC_ClearEvent>

        /* Set software reset for CMD line and data line */
        (void)SDMMC_BLOCK_SD_lReset(obj, (uint32_t)((uint32_t)XMC_SDMMC_SW_RST_CMD_LINE |
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	2106      	movs	r1, #6
 800492e:	f7fe ff09 	bl	8003744 <SDMMC_BLOCK_SD_lReset>
                                                    (uint32_t)XMC_SDMMC_SW_RST_DAT_LINE));
      }
    }

    /* Check Data lines status in present status register */
    if (XMC_SDMMC_IsAnyErrorEvent(obj->sdmmc_sd->sdmmc) == false)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe fd41 	bl	80033c0 <XMC_SDMMC_IsAnyErrorEvent>
 800493e:	4603      	mov	r3, r0
 8004940:	f083 0301 	eor.w	r3, r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d028      	beq.n	800499c <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x16c>
    {
      if (XMC_SDMMC_IsAllDataLinesHigh(obj->sdmmc_sd->sdmmc) == true)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe fe35 	bl	80035c0 <XMC_SDMMC_IsAllDataLinesHigh>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x132>
      {
        status = SDMMC_BLOCK_MODE_STATUS_RECOVERABLE_ERROR;
 800495c:	2324      	movs	r3, #36	; 0x24
 800495e:	75fb      	strb	r3, [r7, #23]
 8004960:	e01c      	b.n	800499c <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x16c>
      }
      else
      {
        status = SDMMC_BLOCK_MODE_STATUS_NONRECOVERABLE_ERROR;
 8004962:	2325      	movs	r3, #37	; 0x25
 8004964:	75fb      	strb	r3, [r7, #23]
 8004966:	e019      	b.n	800499c <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x16c>
      }
    }
  }
  else
  {
    if (XMC_SDMMC_IsAnyErrorEvent(obj->sdmmc_sd->sdmmc) == false)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fd26 	bl	80033c0 <XMC_SDMMC_IsAnyErrorEvent>
 8004974:	4603      	mov	r3, r0
 8004976:	f083 0301 	eor.w	r3, r3, #1
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x16c>
    {
      if (XMC_SDMMC_IsAllDataLinesHigh(obj->sdmmc_sd->sdmmc) == true)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe fe1a 	bl	80035c0 <XMC_SDMMC_IsAllDataLinesHigh>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x168>
      {
        status = SDMMC_BLOCK_MODE_STATUS_RECOVERABLE_ERROR;
 8004992:	2324      	movs	r3, #36	; 0x24
 8004994:	75fb      	strb	r3, [r7, #23]
 8004996:	e001      	b.n	800499c <SDMMC_BLOCK_SD_lErrorInterruptRecovery+0x16c>
      }
      else
      {
        status = SDMMC_BLOCK_MODE_STATUS_NONRECOVERABLE_ERROR;
 8004998:	2325      	movs	r3, #37	; 0x25
 800499a:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  /* Enable the error interrupt signal */
  error_events |= (uint32_t)XMC_SDMMC_TARGET_RESP_ERR;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a2:	60bb      	str	r3, [r7, #8]
  XMC_SDMMC_EnableEvent(obj->sdmmc_sd->sdmmc, error_events);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	f7fd f919 	bl	8001be4 <XMC_SDMMC_EnableEvent>

  /* Global error recovery variable */
  obj->sdmmc_sd->err_recovery_stat = status;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	7dfa      	ldrb	r2, [r7, #23]
 80049b8:	771a      	strb	r2, [r3, #28]

  return status;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	0800fc68 	.word	0x0800fc68
 80049c8:	10ff0000 	.word	0x10ff0000
 80049cc:	00ff8000 	.word	0x00ff8000
 80049d0:	000f4240 	.word	0x000f4240

080049d4 <SDMMC_BLOCK_SD_NormalInterruptHandler>:

/* Handles interrupts in normal interrupt status register */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_NormalInterruptHandler(SDMMC_BLOCK_t *const obj, uint16_t int_status)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 80049e0:	2300      	movs	r3, #0
 80049e2:	73fb      	strb	r3, [r7, #15]
    status = SDMMC_BLOCK_MODE_STATUS_NULL_POINTER;
  }
#endif

  /* Buffer read ready interrupt */
  if (((uint32_t)int_status & (uint32_t)XMC_SDMMC_BUFFER_READ_READY) != (uint32_t)0)
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00e      	beq.n	8004a0c <SDMMC_BLOCK_SD_NormalInterruptHandler+0x38>
  {
    obj->sdmmc_sd->data_int_err = SDMMC_BLOCK_MODE_STATUS_BUFFER_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	221e      	movs	r2, #30
 80049f4:	761a      	strb	r2, [r3, #24]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_BUFFER_READ_READY);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	2120      	movs	r1, #32
 8004a00:	f7fd f932 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->sdmmc_sd->isr_context.data_flag = (uint8_t)1U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	71da      	strb	r2, [r3, #7]
  }

  /* Buffer write ready interrupt */
  if (((uint32_t)int_status & (uint32_t)XMC_SDMMC_BUFFER_WRITE_READY) != (uint32_t)0)
 8004a0c:	887b      	ldrh	r3, [r7, #2]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00e      	beq.n	8004a34 <SDMMC_BLOCK_SD_NormalInterruptHandler+0x60>
  {
    obj->sdmmc_sd->data_int_err = SDMMC_BLOCK_MODE_STATUS_BUFFER_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	221e      	movs	r2, #30
 8004a1c:	761a      	strb	r2, [r3, #24]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_BUFFER_WRITE_READY);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	2110      	movs	r1, #16
 8004a28:	f7fd f91e 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->sdmmc_sd->isr_context.data_flag = (uint8_t)1U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2201      	movs	r2, #1
 8004a32:	71da      	strb	r2, [r3, #7]
  }

  /* Transfer complete interrupt */
  if (((uint32_t)int_status & (uint32_t)XMC_SDMMC_TX_COMPLETE) != (uint32_t)0)
 8004a34:	887b      	ldrh	r3, [r7, #2]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d015      	beq.n	8004a6a <SDMMC_BLOCK_SD_NormalInterruptHandler+0x96>
  {
    obj->sdmmc_sd->transfer_int_err = SDMMC_BLOCK_MODE_STATUS_TRANSFER_COMPLETE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	221f      	movs	r2, #31
 8004a44:	769a      	strb	r2, [r3, #26]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_TX_COMPLETE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	2102      	movs	r1, #2
 8004a50:	f7fd f90a 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_DATA_ACTIVE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7a1b      	ldrb	r3, [r3, #8]
 8004a58:	f023 0320 	bic.w	r3, r3, #32
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	721a      	strb	r2, [r3, #8]
    obj->sdmmc_sd->isr_context.transfer_flag = (uint8_t)1U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2201      	movs	r2, #1
 8004a68:	721a      	strb	r2, [r3, #8]
  }

  /* Command complete interrupt */
  if (((uint32_t)int_status & (uint32_t)XMC_SDMMC_CMD_COMPLETE) != (uint32_t)0)
 8004a6a:	887b      	ldrh	r3, [r7, #2]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d015      	beq.n	8004aa0 <SDMMC_BLOCK_SD_NormalInterruptHandler+0xcc>
  {
    obj->sdmmc_sd->cmd_int_err = SDMMC_BLOCK_MODE_STATUS_COMMAND_COMPLETE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	221c      	movs	r2, #28
 8004a7a:	765a      	strb	r2, [r3, #25]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_CMD_COMPLETE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	2101      	movs	r1, #1
 8004a86:	f7fd f8ef 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_CMD_ACTIVE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	7a1b      	ldrb	r3, [r3, #8]
 8004a8e:	f023 0310 	bic.w	r3, r3, #16
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	721a      	strb	r2, [r3, #8]
    obj->sdmmc_sd->isr_context.cmd_flag = (uint8_t)1;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	719a      	strb	r2, [r3, #6]
  }

  return status;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop

08004aac <SDMMC_BLOCK_SD_ErrorInterruptHandler>:

/* Handles interrupt in error interrupt status register */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_ErrorInterruptHandler(SDMMC_BLOCK_t *const obj,
                                                               uint16_t int_status)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	807b      	strh	r3, [r7, #2]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
  obj->sdmmc_sd->isr_context.int_status_shadow = int_status;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	887a      	ldrh	r2, [r7, #2]
 8004ac2:	809a      	strh	r2, [r3, #4]

  /* Command timeout error interrupt */
  if (((uint32_t)int_status & ((uint32_t)XMC_SDMMC_CMD_TIMEOUT_ERR >> 16U)) != (uint32_t)0)
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <SDMMC_BLOCK_SD_ErrorInterruptHandler+0x50>
  {
    obj->sdmmc_sd->cmd_int_err = SDMMC_BLOCK_MODE_STATUS_COMMAND_TIMEOUT_ERROR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	765a      	strb	r2, [r3, #25]
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_CMD_ACTIVE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7a1b      	ldrb	r3, [r3, #8]
 8004ada:	f023 0310 	bic.w	r3, r3, #16
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	721a      	strb	r2, [r3, #8]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_CMD_TIMEOUT_ERR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004af0:	f7fd f8ba 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->sdmmc_sd->isr_context.cmd_flag = 1U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	719a      	strb	r2, [r3, #6]
  }

  /* Command CRC error interrupt */
  if (((uint32_t)int_status & ((uint32_t)XMC_SDMMC_CMD_CRC_ERR >> 16U)) != (uint32_t)0)
 8004afc:	887b      	ldrh	r3, [r7, #2]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d016      	beq.n	8004b34 <SDMMC_BLOCK_SD_ErrorInterruptHandler+0x88>
  {
    obj->sdmmc_sd->cmd_int_err = SDMMC_BLOCK_MODE_STATUS_COMMAND_CRC_ERROR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	765a      	strb	r2, [r3, #25]
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_CMD_ACTIVE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	7a1b      	ldrb	r3, [r3, #8]
 8004b12:	f023 0310 	bic.w	r3, r3, #16
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	721a      	strb	r2, [r3, #8]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_CMD_CRC_ERR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004b28:	f7fd f89e 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->sdmmc_sd->isr_context.cmd_flag = 1U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2201      	movs	r2, #1
 8004b32:	719a      	strb	r2, [r3, #6]
  }

  /* Command end bit error interrupt */
  if (((uint32_t)int_status & ((uint32_t)XMC_SDMMC_CMD_END_BIT_ERR >> 16U)) != (uint32_t)0)
 8004b34:	887b      	ldrh	r3, [r7, #2]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d016      	beq.n	8004b6c <SDMMC_BLOCK_SD_ErrorInterruptHandler+0xc0>
  {
    obj->sdmmc_sd->cmd_int_err = SDMMC_BLOCK_MODE_STATUS_COMMAND_ENDBIT_ERROR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2204      	movs	r2, #4
 8004b44:	765a      	strb	r2, [r3, #25]
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_CMD_ACTIVE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	7a1b      	ldrb	r3, [r3, #8]
 8004b4a:	f023 0310 	bic.w	r3, r3, #16
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	721a      	strb	r2, [r3, #8]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_CMD_END_BIT_ERR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8004b60:	f7fd f882 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->sdmmc_sd->isr_context.cmd_flag = 1U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	719a      	strb	r2, [r3, #6]
  }

  /* Command index error interrupt */
  if (((uint32_t)int_status & ((uint32_t)XMC_SDMMC_CMD_IND_ERR >> 16U)) != (uint32_t)0)
 8004b6c:	887b      	ldrh	r3, [r7, #2]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d016      	beq.n	8004ba4 <SDMMC_BLOCK_SD_ErrorInterruptHandler+0xf8>
  {
    obj->sdmmc_sd->cmd_int_err = SDMMC_BLOCK_MODE_STATUS_COMMAND_INDEX_ERROR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2205      	movs	r2, #5
 8004b7c:	765a      	strb	r2, [r3, #25]
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_CMD_ACTIVE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	7a1b      	ldrb	r3, [r3, #8]
 8004b82:	f023 0310 	bic.w	r3, r3, #16
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	721a      	strb	r2, [r3, #8]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_CMD_IND_ERR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004b98:	f7fd f866 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->sdmmc_sd->isr_context.cmd_flag = 1U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	719a      	strb	r2, [r3, #6]
  }

  /* Data timeout error interrupt */
  if (((uint32_t)int_status & ((uint32_t)XMC_SDMMC_DATA_TIMEOUT_ERR >> 16U)) != (uint32_t)0)
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <SDMMC_BLOCK_SD_ErrorInterruptHandler+0x130>
  {
    obj->sdmmc_sd->data_int_err = SDMMC_BLOCK_MODE_STATUS_DATA_TIMEOUT_ERROR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2206      	movs	r2, #6
 8004bb4:	761a      	strb	r2, [r3, #24]
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_DATA_ACTIVE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	7a1b      	ldrb	r3, [r3, #8]
 8004bba:	f023 0320 	bic.w	r3, r3, #32
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	721a      	strb	r2, [r3, #8]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_DATA_TIMEOUT_ERR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8004bd0:	f7fd f84a 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->sdmmc_sd->isr_context.data_flag = 1U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	71da      	strb	r2, [r3, #7]
  }

  /* Data CRC error interrupt */
  if (((uint32_t)int_status & ((uint32_t)XMC_SDMMC_DATA_CRC_ERR >> 16U)) != (uint32_t)0)
 8004bdc:	887b      	ldrh	r3, [r7, #2]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d016      	beq.n	8004c14 <SDMMC_BLOCK_SD_ErrorInterruptHandler+0x168>
  {
    obj->sdmmc_sd->data_int_err = SDMMC_BLOCK_MODE_STATUS_DATA_CRC_ERROR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2207      	movs	r2, #7
 8004bec:	761a      	strb	r2, [r3, #24]
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_DATA_ACTIVE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	7a1b      	ldrb	r3, [r3, #8]
 8004bf2:	f023 0320 	bic.w	r3, r3, #32
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	721a      	strb	r2, [r3, #8]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_DATA_CRC_ERR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c08:	f7fd f82e 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->sdmmc_sd->isr_context.data_flag = 1U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2201      	movs	r2, #1
 8004c12:	71da      	strb	r2, [r3, #7]
  }

  /* Data end bit error interrupt */
  if (((uint32_t)int_status & ((uint32_t)XMC_SDMMC_DATA_END_BIT_ERR >> 16U)) != (uint32_t)0)
 8004c14:	887b      	ldrh	r3, [r7, #2]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d016      	beq.n	8004c4c <SDMMC_BLOCK_SD_ErrorInterruptHandler+0x1a0>
  {
    obj->sdmmc_sd->data_int_err = SDMMC_BLOCK_MODE_STATUS_DATA_ENDBIT_ERROR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2208      	movs	r2, #8
 8004c24:	761a      	strb	r2, [r3, #24]
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_DATA_ACTIVE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	7a1b      	ldrb	r3, [r3, #8]
 8004c2a:	f023 0320 	bic.w	r3, r3, #32
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	721a      	strb	r2, [r3, #8]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_DATA_END_BIT_ERR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c40:	f7fd f812 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->sdmmc_sd->isr_context.data_flag = 1U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	71da      	strb	r2, [r3, #7]
  }

  /* ACMD12 error interrupt */
  if (((uint32_t)int_status & ((uint32_t)XMC_SDMMC_ACMD_ERR >> 16U)) != (uint32_t)0)
 8004c4c:	887b      	ldrh	r3, [r7, #2]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01d      	beq.n	8004c92 <SDMMC_BLOCK_SD_ErrorInterruptHandler+0x1e6>
  {
    obj->sdmmc_sd->acmd_int_err = SDMMC_BLOCK_MODE_STATUS_ACMD12_ERROR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2209      	movs	r2, #9
 8004c5c:	76da      	strb	r2, [r3, #27]
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_CMD_ACTIVE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7a1b      	ldrb	r3, [r3, #8]
 8004c62:	f023 0310 	bic.w	r3, r3, #16
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	721a      	strb	r2, [r3, #8]
    obj->card_state &= (uint8_t)~(uint8_t)SDMMC_BLOCK_CARD_STATE_DATA_ACTIVE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	7a1b      	ldrb	r3, [r3, #8]
 8004c70:	f023 0320 	bic.w	r3, r3, #32
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	721a      	strb	r2, [r3, #8]
    XMC_SDMMC_ClearEvent(obj->sdmmc_sd->sdmmc, (uint32_t)XMC_SDMMC_ACMD_ERR);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8004c86:	f7fc ffef 	bl	8001c68 <XMC_SDMMC_ClearEvent>
    obj->sdmmc_sd->isr_context.cmd_flag = 1U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	719a      	strb	r2, [r3, #6]
  }

  return status;
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <SDMMC_BLOCK_SD_lSwitchToTransferState>:

/* Switch the card state to transferring state if it isn't */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lSwitchToTransferState(SDMMC_BLOCK_t *const obj)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75fb      	strb	r3, [r7, #23]
  uint32_t arg = 0UL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	613b      	str	r3, [r7, #16]
  uint32_t card_status = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Check the current state of the card */
  arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint32_t)SDMMC_BLOCK_ARG_RCA_BITPOS);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Send CMD13 to read card status */
  status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                       &(SDMMC_BLOCK_COMMON_COMMAND(13)),
 8004cc0:	230a      	movs	r3, #10

  /* Check the current state of the card */
  arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint32_t)SDMMC_BLOCK_ARG_RCA_BITPOS);

  /* Send CMD13 to read card status */
  status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <SDMMC_BLOCK_SD_lSwitchToTransferState+0x84>)
 8004cc6:	441a      	add	r2, r3
 8004cc8:	f107 030c 	add.w	r3, r7, #12
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f7ff f819 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	75fb      	strb	r3, [r7, #23]
                                       &(SDMMC_BLOCK_COMMON_COMMAND(13)),
                                       arg,
                                       XMC_SDMMC_RESPONSE_TYPE_R1,
                                       &card_status);

  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d117      	bne.n	8004d14 <SDMMC_BLOCK_SD_lSwitchToTransferState+0x78>
  {
    /* Check if it is in transferring state */
    if (((card_status & SDMMC_BLOCK_SD_CSR_CURRENT_STATE_BITMASK) >> SDMMC_BLOCK_SD_CSR_CURRENT_STATE_BITPOS) ==
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f403 53e8 	and.w	r3, r3, #7424	; 0x1d00
 8004cea:	0a5b      	lsrs	r3, r3, #9
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d102      	bne.n	8004cf6 <SDMMC_BLOCK_SD_lSwitchToTransferState+0x5a>
        SDMMC_BLOCK_SD_CSR_CURRENT_STATE_TRANS_VALUE)
    {
      status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	75fb      	strb	r3, [r7, #23]
 8004cf4:	e00e      	b.n	8004d14 <SDMMC_BLOCK_SD_lSwitchToTransferState+0x78>
    }
    else
    {
      /* Switch to transfer state (CMD7) */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                           &(SDMMC_BLOCK_COMMON_COMMAND(7)),
 8004cf6:	2305      	movs	r3, #5
      status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
    }
    else
    {
      /* Switch to transfer state (CMD7) */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <SDMMC_BLOCK_SD_lSwitchToTransferState+0x84>)
 8004cfc:	441a      	add	r2, r3
 8004cfe:	f107 030c 	add.w	r3, r7, #12
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4611      	mov	r1, r2
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	f7fe fffe 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8004d10:	4603      	mov	r3, r0
 8004d12:	75fb      	strb	r3, [r7, #23]
                                           XMC_SDMMC_RESPONSE_TYPE_R1b,
                                           &card_status);
    }
  }

  return status;
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	0800fc68 	.word	0x0800fc68

08004d24 <SDMMC_BLOCK_SD_lDataTransfer>:
/* Do data transfer to OR from card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lDataTransfer(SDMMC_BLOCK_t *const obj,
                                                              uint32_t *buf,
                                                              SDMMC_BLOCK_SD_DATA_TRANSFER_t transfer_mode,
                                                              uint32_t quad_bytes)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75fb      	strb	r3, [r7, #23]
  uint32_t count = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]

  /* Block on buffer read/write ready interrupt */
  status = SDMMC_BLOCK_SD_lStartTimer(obj, (uint32_t)SDMMC_BLOCK_RESET_IN_DATA_TRANSFER);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	4930      	ldr	r1, [pc, #192]	; (8004e00 <SDMMC_BLOCK_SD_lDataTransfer+0xdc>)
 8004d40:	f000 f996 	bl	8005070 <SDMMC_BLOCK_SD_lStartTimer>
 8004d44:	4603      	mov	r3, r0
 8004d46:	75fb      	strb	r3, [r7, #23]
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d153      	bne.n	8004df6 <SDMMC_BLOCK_SD_lDataTransfer+0xd2>
  {
    do
    {
      if (obj->sdmmc_sd->tmr_expire == (bool)0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f083 0301 	eor.w	r3, r3, #1
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <SDMMC_BLOCK_SD_lDataTransfer+0x44>
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
 8004d62:	232e      	movs	r3, #46	; 0x2e
 8004d64:	75fb      	strb	r3, [r7, #23]
        break;
 8004d66:	e004      	b.n	8004d72 <SDMMC_BLOCK_SD_lDataTransfer+0x4e>
      }
    } while (obj->sdmmc_sd->isr_context.data_flag == 0U);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	79db      	ldrb	r3, [r3, #7]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0ed      	beq.n	8004d4e <SDMMC_BLOCK_SD_lDataTransfer+0x2a>

    /* Stop timer and delete it */
    (void)SDMMC_BLOCK_SD_lStopTimer(obj);
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f9b6 	bl	80050e4 <SDMMC_BLOCK_SD_lStopTimer>
    (void)SYSTIMER_DeleteTimer(obj->sdmmc_sd->tmr_id);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd fdc0 	bl	8002904 <SYSTIMER_DeleteTimer>

    obj->sdmmc_sd->isr_context.data_flag = (uint8_t)0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	71da      	strb	r2, [r3, #7]

    /* Check if buffer is ready */
    if (obj->sdmmc_sd->data_int_err == SDMMC_BLOCK_MODE_STATUS_BUFFER_READY)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	7e1b      	ldrb	r3, [r3, #24]
 8004d92:	2b1e      	cmp	r3, #30
 8004d94:	d125      	bne.n	8004de2 <SDMMC_BLOCK_SD_lDataTransfer+0xbe>
    {
      /* 4 bytes data transmission in each iteration */
      for (count = 0U; count < quad_bytes; count++)
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	e01b      	b.n	8004dd4 <SDMMC_BLOCK_SD_lDataTransfer+0xb0>
      {
        if (transfer_mode == SDMMC_BLOCK_SD_DATA_TRANSFER_READ_BUFFER)
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d108      	bne.n	8004db4 <SDMMC_BLOCK_SD_lDataTransfer+0x90>
        {
          *buf = (uint32_t)XMC_SDMMC_ReadFIFO(obj->sdmmc_sd->sdmmc);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fe fb33 	bl	8003414 <XMC_SDMMC_ReadFIFO>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	601a      	str	r2, [r3, #0]
        }

        if (transfer_mode == SDMMC_BLOCK_SD_DATA_TRANSFER_WRITE_BUFFER)
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d106      	bne.n	8004dc8 <SDMMC_BLOCK_SD_lDataTransfer+0xa4>
        {
          XMC_SDMMC_WriteFIFO(obj->sdmmc_sd->sdmmc, buf);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	f7fe fb32 	bl	800342c <XMC_SDMMC_WriteFIFO>
        }

        buf++;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	60bb      	str	r3, [r7, #8]

    /* Check if buffer is ready */
    if (obj->sdmmc_sd->data_int_err == SDMMC_BLOCK_MODE_STATUS_BUFFER_READY)
    {
      /* 4 bytes data transmission in each iteration */
      for (count = 0U; count < quad_bytes; count++)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d3df      	bcc.n	8004d9c <SDMMC_BLOCK_SD_lDataTransfer+0x78>
          XMC_SDMMC_WriteFIFO(obj->sdmmc_sd->sdmmc, buf);
        }

        buf++;
      }
      status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	75fb      	strb	r3, [r7, #23]
 8004de0:	e009      	b.n	8004df6 <SDMMC_BLOCK_SD_lDataTransfer+0xd2>
    }
    else
    {
      obj->sdmmc_sd->issue_abort = (uint8_t)1U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      status = SDMMC_BLOCK_SD_lErrorInterruptRecovery(obj);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff fd1f 	bl	8004830 <SDMMC_BLOCK_SD_lErrorInterruptRecovery>
 8004df2:	4603      	mov	r3, r0
 8004df4:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	000f4240 	.word	0x000f4240

08004e04 <SDMMC_BLOCK_SD_lAcmdErrorRecovery>:

/* Performs the ACMD error recovery */
static void SDMMC_BLOCK_SD_lAcmdErrorRecovery(SDMMC_BLOCK_t *const obj)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	75fb      	strb	r3, [r7, #23]
  uint32_t pcmd_flag = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]
  uint32_t card_status = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Check ACMD12 "Not executed err" in Auto CMD12 error status register */
  if (XMC_SDMMC_GetACMDErrStatus(obj->sdmmc_sd->sdmmc, XMC_SDMMC_ACMD12_NOT_EXEC_ERR) == true)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	2101      	movs	r1, #1
 8004e22:	f7fe fadf 	bl	80033e4 <XMC_SDMMC_GetACMDErrStatus>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d02c      	beq.n	8004e86 <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0x82>
  {
    pcmd_flag = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Check Return Status of Recovery function of CMD_wo_DAT command */
    if (obj->sdmmc_sd->err_recovery_stat == SDMMC_BLOCK_MODE_STATUS_RECOVERABLE_ERROR)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	7f1b      	ldrb	r3, [r3, #28]
 8004e36:	2b24      	cmp	r3, #36	; 0x24
 8004e38:	d10e      	bne.n	8004e58 <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0x54>
    {
      /* For recoverable error, issue CMD12 */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                           &(SDMMC_BLOCK_COMMON_COMMAND(12)),
 8004e3a:	2309      	movs	r3, #9
    pcmd_flag = 1U;
    /* Check Return Status of Recovery function of CMD_wo_DAT command */
    if (obj->sdmmc_sd->err_recovery_stat == SDMMC_BLOCK_MODE_STATUS_RECOVERABLE_ERROR)
    {
      /* For recoverable error, issue CMD12 */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4a29      	ldr	r2, [pc, #164]	; (8004ee4 <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0xe0>)
 8004e40:	441a      	add	r2, r3
 8004e42:	f107 030c 	add.w	r3, r7, #12
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f7fe ff5c 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8004e54:	4603      	mov	r3, r0
 8004e56:	75fb      	strb	r3, [r7, #23]
                                           &(SDMMC_BLOCK_COMMON_COMMAND(12)),
                                           SDMMC_BLOCK_ARGUMENT0,
                                           XMC_SDMMC_RESPONSE_TYPE_R1,
                                           &card_status);
    }
    if ((status != SDMMC_BLOCK_MODE_STATUS_SUCCESS) && (status != SDMMC_BLOCK_MODE_STATUS_NONRECOVERABLE_ERROR))
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d03e      	beq.n	8004edc <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0xd8>
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
 8004e60:	2b25      	cmp	r3, #37	; 0x25
 8004e62:	d03b      	beq.n	8004edc <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0xd8>
    {
      /* Set software reset for data line */
      status = SDMMC_BLOCK_SD_lReset(obj, (uint32_t)XMC_SDMMC_SW_RST_DAT_LINE);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	2104      	movs	r1, #4
 8004e68:	f7fe fc6c 	bl	8003744 <SDMMC_BLOCK_SD_lReset>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	75fb      	strb	r3, [r7, #23]
      if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d132      	bne.n	8004edc <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0xd8>
      {
        /* Check for XMC_SDMMC_CMD_NOT_ISSUED_BY_ACMD12_ERR */
        if (XMC_SDMMC_GetACMDErrStatus(obj->sdmmc_sd->sdmmc, XMC_SDMMC_CMD_NOT_ISSUED_BY_ACMD12_ERR) == true)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	2180      	movs	r1, #128	; 0x80
 8004e80:	f7fe fab0 	bl	80033e4 <XMC_SDMMC_GetACMDErrStatus>
 8004e84:	e02a      	b.n	8004edc <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0xd8>
    }
  }
  else
  {
    /* Set software reset for CMD line */
    status = SDMMC_BLOCK_SD_lReset(obj, (uint32_t)XMC_SDMMC_SW_RST_CMD_LINE);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	2102      	movs	r1, #2
 8004e8a:	f7fe fc5b 	bl	8003744 <SDMMC_BLOCK_SD_lReset>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	75fb      	strb	r3, [r7, #23]
    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d121      	bne.n	8004edc <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0xd8>
    {
      /* Issue CMD12 */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                           &(SDMMC_BLOCK_COMMON_COMMAND(12)),
 8004e98:	2309      	movs	r3, #9
    /* Set software reset for CMD line */
    status = SDMMC_BLOCK_SD_lReset(obj, (uint32_t)XMC_SDMMC_SW_RST_CMD_LINE);
    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
    {
      /* Issue CMD12 */
      status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4a11      	ldr	r2, [pc, #68]	; (8004ee4 <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0xe0>)
 8004e9e:	441a      	add	r2, r3
 8004ea0:	f107 030c 	add.w	r3, r7, #12
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2301      	movs	r3, #1
 8004eae:	f7fe ff2d 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	75fb      	strb	r3, [r7, #23]
                                           &(SDMMC_BLOCK_COMMON_COMMAND(12)),
                                           SDMMC_BLOCK_ARGUMENT0,
                                           XMC_SDMMC_RESPONSE_TYPE_R1,
                                           &card_status);
      if (status != SDMMC_BLOCK_MODE_STATUS_NONRECOVERABLE_ERROR)
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
 8004eb8:	2b25      	cmp	r3, #37	; 0x25
 8004eba:	d00f      	beq.n	8004edc <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0xd8>
      {
        /*Set Software Reset for  Data line*/
        status = SDMMC_BLOCK_SD_lReset(obj, (uint32_t)XMC_SDMMC_SW_RST_DAT_LINE);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	2104      	movs	r1, #4
 8004ec0:	f7fe fc40 	bl	8003744 <SDMMC_BLOCK_SD_lReset>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	75fb      	strb	r3, [r7, #23]
        if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <SDMMC_BLOCK_SD_lAcmdErrorRecovery+0xd8>
        {
          /* Check XMC_SDMMC_CMD_NOT_ISSUED_BY_ACMD12_ERR */
          if (XMC_SDMMC_GetACMDErrStatus(obj->sdmmc_sd->sdmmc, XMC_SDMMC_CMD_NOT_ISSUED_BY_ACMD12_ERR) == true)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	2180      	movs	r1, #128	; 0x80
 8004ed8:	f7fe fa84 	bl	80033e4 <XMC_SDMMC_GetACMDErrStatus>
          }
        }
      }
    }
  }
}
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	0800fc68 	.word	0x0800fc68

08004ee8 <SDMMC_BLOCK_SD_TimerCallback>:

/* Timer callback function */
static void SDMMC_BLOCK_SD_TimerCallback(void *arg)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  if (arg != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d006      	beq.n	8004f04 <SDMMC_BLOCK_SD_TimerCallback+0x1c>
  {
    SDMMC_BLOCK_t *obj = (SDMMC_BLOCK_t *)arg;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60fb      	str	r3, [r7, #12]
    obj->sdmmc_sd->tmr_expire = (bool)0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }
}
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <SDMMC_BLOCK_SD_lDelay>:

/* Delay function */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lDelay(SDMMC_BLOCK_t *const obj, uint32_t delay)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmr_id = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_CREATE_TIMER_FAILED;
 8004f1e:	232f      	movs	r3, #47	; 0x2f
 8004f20:	73fb      	strb	r3, [r7, #15]

  obj->sdmmc_sd->tmr_expire = (bool)1U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  obj->sdmmc_sd->tmr_id = tmr_id;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54

  tmr_id = SYSTIMER_CreateTimer(delay, SYSTIMER_MODE_ONE_SHOT, &SDMMC_BLOCK_SD_TimerCallback, (void *)obj);
 8004f34:	6838      	ldr	r0, [r7, #0]
 8004f36:	2100      	movs	r1, #0
 8004f38:	4a18      	ldr	r2, [pc, #96]	; (8004f9c <SDMMC_BLOCK_SD_lDelay+0x8c>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f7fd fbcc 	bl	80026d8 <SYSTIMER_CreateTimer>
 8004f40:	60b8      	str	r0, [r7, #8]
  if (tmr_id > 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01e      	beq.n	8004f86 <SDMMC_BLOCK_SD_lDelay+0x76>
  {
    obj->sdmmc_sd->tmr_id = tmr_id;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54

    status = (SDMMC_BLOCK_MODE_STATUS_t)SYSTIMER_StartTimer(tmr_id);
 8004f50:	68b8      	ldr	r0, [r7, #8]
 8004f52:	f7fd fc5f 	bl	8002814 <SYSTIMER_StartTimer>
 8004f56:	4603      	mov	r3, r0
 8004f58:	73fb      	strb	r3, [r7, #15]

    /* Is timer started successfully? */
    if (status == (SDMMC_BLOCK_MODE_STATUS_t)SYSTIMER_STATUS_SUCCESS)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d110      	bne.n	8004f82 <SDMMC_BLOCK_SD_lDelay+0x72>
    {
      /* Wait infinitely until timer expires */
      while (obj->sdmmc_sd->tmr_expire)
 8004f60:	bf00      	nop
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f8      	bne.n	8004f62 <SDMMC_BLOCK_SD_lDelay+0x52>
      {
      }

      /* Stop the timer */
      if (SYSTIMER_StopTimer(tmr_id) == SYSTIMER_STATUS_SUCCESS)
 8004f70:	68b8      	ldr	r0, [r7, #8]
 8004f72:	f7fd fc8f 	bl	8002894 <SYSTIMER_StopTimer>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <SDMMC_BLOCK_SD_lDelay+0x76>
      {
        status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	e001      	b.n	8004f86 <SDMMC_BLOCK_SD_lDelay+0x76>
      }
    }
    else
    {
      status = SDMMC_BLOCK_MODE_STATUS_START_TIMER_FAILED;
 8004f82:	2331      	movs	r3, #49	; 0x31
 8004f84:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <SDMMC_BLOCK_SD_lDelay+0x82>
  {
    /* Delete the timer */
    (void)SYSTIMER_DeleteTimer(tmr_id);
 8004f8c:	68b8      	ldr	r0, [r7, #8]
 8004f8e:	f7fd fcb9 	bl	8002904 <SYSTIMER_DeleteTimer>
  }

  return status;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	08004ee9 	.word	0x08004ee9

08004fa0 <SDMMC_BLOCK_SD_CardIdentificationProcess>:
/*
 * Perform host controller initialization and card initialization.
 * Also, reading card registers
 */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_CardIdentificationProcess(SDMMC_BLOCK_t *const obj)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status;

  /* Wait until the internal clock is stable */
  status = SDMMC_BLOCK_SD_lStartTimer(obj, (uint32_t)SDMMC_BLOCK_CLOCK_STABLE_DELAY);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	4930      	ldr	r1, [pc, #192]	; (800506c <SDMMC_BLOCK_SD_CardIdentificationProcess+0xcc>)
 8004fac:	f000 f860 	bl	8005070 <SDMMC_BLOCK_SD_lStartTimer>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	73fb      	strb	r3, [r7, #15]

  if (obj->sdmmc_sd->tmr_id != 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d051      	beq.n	8005062 <SDMMC_BLOCK_SD_CardIdentificationProcess+0xc2>
  {
    do
    {
      if (obj->sdmmc_sd->tmr_expire == (bool)0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f083 0301 	eor.w	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <SDMMC_BLOCK_SD_CardIdentificationProcess+0x38>
      {
        status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
 8004fd2:	232e      	movs	r3, #46	; 0x2e
 8004fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fd6:	e00b      	b.n	8004ff0 <SDMMC_BLOCK_SD_CardIdentificationProcess+0x50>
      }
    } while ((XMC_SDMMC_GetClockStability(obj->sdmmc_sd->sdmmc) == false));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe fa58 	bl	8003494 <XMC_SDMMC_GetClockStability>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f083 0301 	eor.w	r3, r3, #1
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e6      	bne.n	8004fbe <SDMMC_BLOCK_SD_CardIdentificationProcess+0x1e>

    /* Stop timer and delete it */
    (void)SDMMC_BLOCK_SD_lStopTimer(obj);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f877 	bl	80050e4 <SDMMC_BLOCK_SD_lStopTimer>
    (void)SYSTIMER_DeleteTimer(obj->sdmmc_sd->tmr_id);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fd fc81 	bl	8002904 <SYSTIMER_DeleteTimer>

    if (status != SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b2e      	cmp	r3, #46	; 0x2e
 8005006:	d02c      	beq.n	8005062 <SDMMC_BLOCK_SD_CardIdentificationProcess+0xc2>
    {
      /* Enable the SD clock */
      XMC_SDMMC_SDClockEnable(obj->sdmmc_sd->sdmmc);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe fa66 	bl	80034e0 <XMC_SDMMC_SDClockEnable>

      /* Turn the bus power on */
      XMC_SDMMC_BusPowerOn(obj->sdmmc_sd->sdmmc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fa14 	bl	8003448 <XMC_SDMMC_BusPowerOn>

      if (obj->sdmmc_sd->mode_init_flag == false)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8005028:	f083 0301 	eor.w	r3, r3, #1
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d017      	beq.n	8005062 <SDMMC_BLOCK_SD_CardIdentificationProcess+0xc2>
      {
        status = SDMMC_BLOCK_SD_lInitializeCard(obj);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff f82a 	bl	800408c <SDMMC_BLOCK_SD_lInitializeCard>
 8005038:	4603      	mov	r3, r0
 800503a:	73fb      	strb	r3, [r7, #15]
        if ((status == SDMMC_BLOCK_MODE_STATUS_SUCCESS) ||
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <SDMMC_BLOCK_SD_CardIdentificationProcess+0xa8>
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b2b      	cmp	r3, #43	; 0x2b
 8005046:	d10c      	bne.n	8005062 <SDMMC_BLOCK_SD_CardIdentificationProcess+0xc2>
            (status == SDMMC_BLOCK_MODE_STATUS_INITIALIZED_BUT_LOCKED))
        {
          status = SDMMC_BLOCK_SD_lAfterCardInitialize(obj);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fe ffcf 	bl	8003fec <SDMMC_BLOCK_SD_lAfterCardInitialize>
 800504e:	4603      	mov	r3, r0
 8005050:	73fb      	strb	r3, [r7, #15]
          if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <SDMMC_BLOCK_SD_CardIdentificationProcess+0xc2>
          {
            obj->sdmmc_sd->mode_init_flag = 1U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        }
      }
    }
  }

  return status;
 8005062:	7bfb      	ldrb	r3, [r7, #15]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	000f4240 	.word	0x000f4240

08005070 <SDMMC_BLOCK_SD_lStartTimer>:

/* Create and start timer in a non-RTOS environment */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lStartTimer(SDMMC_BLOCK_t *const obj, uint32_t delay)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmr_id = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]
  obj->sdmmc_sd->tmr_expire = (bool)1U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmr_id = SYSTIMER_CreateTimer(delay, SYSTIMER_MODE_ONE_SHOT, &SDMMC_BLOCK_SD_TimerCallback, (void *)obj);
 800508c:	6838      	ldr	r0, [r7, #0]
 800508e:	2100      	movs	r1, #0
 8005090:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <SDMMC_BLOCK_SD_lStartTimer+0x70>)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f7fd fb20 	bl	80026d8 <SYSTIMER_CreateTimer>
 8005098:	60b8      	str	r0, [r7, #8]
  if (tmr_id != (uint32_t)SYSTIMER_STATUS_FAILURE)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d013      	beq.n	80050c8 <SDMMC_BLOCK_SD_lStartTimer+0x58>
  {
    /* Timer creation successful */
    if (SYSTIMER_StartTimer(tmr_id) != SYSTIMER_STATUS_SUCCESS)
 80050a0:	68b8      	ldr	r0, [r7, #8]
 80050a2:	f7fd fbb7 	bl	8002814 <SYSTIMER_StartTimer>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <SDMMC_BLOCK_SD_lStartTimer+0x4e>
    {
      /* Remove timer; it can't be used */
      (void)SYSTIMER_DeleteTimer(tmr_id);
 80050ac:	68b8      	ldr	r0, [r7, #8]
 80050ae:	f7fd fc29 	bl	8002904 <SYSTIMER_DeleteTimer>
      obj->sdmmc_sd->tmr_id = 0U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54
      status = SDMMC_BLOCK_MODE_STATUS_START_TIMER_FAILED;
 80050ba:	2331      	movs	r3, #49	; 0x31
 80050bc:	73fb      	strb	r3, [r7, #15]
    }
    obj->sdmmc_sd->tmr_id = tmr_id;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54
 80050c6:	e005      	b.n	80050d4 <SDMMC_BLOCK_SD_lStartTimer+0x64>
  }
  else
  {
    /* Timer creation failed! */
    obj->sdmmc_sd->tmr_id = 0U;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	655a      	str	r2, [r3, #84]	; 0x54
    status = SDMMC_BLOCK_MODE_STATUS_CREATE_TIMER_FAILED;
 80050d0:	232f      	movs	r3, #47	; 0x2f
 80050d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	08004ee9 	.word	0x08004ee9

080050e4 <SDMMC_BLOCK_SD_lStopTimer>:

/* Stop timer in a non-RTOS environment */
static uint32_t SDMMC_BLOCK_SD_lStopTimer(SDMMC_BLOCK_t *const obj)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tmr_id = obj->sdmmc_sd->tmr_id;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	60bb      	str	r3, [r7, #8]
  uint32_t status;

  status = (uint32_t)SYSTIMER_StopTimer(tmr_id);
 80050f4:	68b8      	ldr	r0, [r7, #8]
 80050f6:	f7fd fbcd 	bl	8002894 <SYSTIMER_StopTimer>
 80050fa:	4603      	mov	r3, r0
 80050fc:	60fb      	str	r3, [r7, #12]
  if (status != (uint32_t)SYSTIMER_STATUS_SUCCESS)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <SDMMC_BLOCK_SD_lStopTimer+0x32>
  {
    /* Remove timer; it can't be used */
    (void)SYSTIMER_DeleteTimer(tmr_id);
 8005104:	68b8      	ldr	r0, [r7, #8]
 8005106:	f7fd fbfd 	bl	8002904 <SYSTIMER_DeleteTimer>
    status = (uint32_t)SDMMC_BLOCK_MODE_STATUS_STOP_TIMER_FAILED;
 800510a:	2332      	movs	r3, #50	; 0x32
 800510c:	60fb      	str	r3, [r7, #12]
    obj->sdmmc_sd->tmr_id = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	655a      	str	r2, [r3, #84]	; 0x54
  }

  return status;
 8005116:	68fb      	ldr	r3, [r7, #12]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <SDMMC_BLOCK_SD_lCheckSectorBound>:

/* Check if the sector address is out of bound */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lCheckSectorBound(SDMMC_BLOCK_t *const obj,
                                                                  uint32_t sector_num,
                                                                  uint32_t sector_count)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status;
  uint32_t local_sector_count = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]

  /* Get sector count function */
  status = SDMMC_BLOCK_SD_GetSectorCount(obj, (void *)&local_sector_count);
 8005130:	f107 0310 	add.w	r3, r7, #16
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	4619      	mov	r1, r3
 8005138:	f000 fc90 	bl	8005a5c <SDMMC_BLOCK_SD_GetSectorCount>
 800513c:	4603      	mov	r3, r0
 800513e:	75fb      	strb	r3, [r7, #23]
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005140:	7dfb      	ldrb	r3, [r7, #23]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <SDMMC_BLOCK_SD_lCheckSectorBound+0x36>
  {
    /* Check the sector count limit */
    if ((sector_num + sector_count) > local_sector_count)
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	441a      	add	r2, r3
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	429a      	cmp	r2, r3
 8005150:	d901      	bls.n	8005156 <SDMMC_BLOCK_SD_lCheckSectorBound+0x36>
    {
      status = SDMMC_BLOCK_MODE_STATUS_SECTOR_OUT_OF_BOUND;
 8005152:	2333      	movs	r3, #51	; 0x33
 8005154:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 8005156:	7dfb      	ldrb	r3, [r7, #23]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <SDMMC_BLOCK_SD_lLocalErase>:
/* Perform erase operation */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lLocalErase(SDMMC_BLOCK_t *const obj,
                                                            uint32_t start_addr,
                                                            uint32_t end_addr,
                                                            uint32_t timeout)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  /* Stores the response received */
  uint32_t card_status = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]

  if (((uint32_t)obj->card_type & (uint32_t)SDMMC_BLOCK_CARD_TYPE_BLOCK_ADDRESSING) == (uint32_t)0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	7a5b      	ldrb	r3, [r3, #9]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <SDMMC_BLOCK_SD_lLocalErase+0x2e>
  {
    start_addr *= (uint32_t)512U;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	025b      	lsls	r3, r3, #9
 8005186:	60bb      	str	r3, [r7, #8]
    end_addr *= (uint32_t)512U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	025b      	lsls	r3, r3, #9
 800518c:	607b      	str	r3, [r7, #4]
  }

  /* SD erase start command */
  status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                       &(SDMMC_BLOCK_SD_COMMAND(32)),
 800518e:	2315      	movs	r3, #21
    start_addr *= (uint32_t)512U;
    end_addr *= (uint32_t)512U;
  }

  /* SD erase start command */
  status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4a36      	ldr	r2, [pc, #216]	; (800526c <SDMMC_BLOCK_SD_lLocalErase+0x10c>)
 8005194:	441a      	add	r2, r3
 8005196:	f107 0310 	add.w	r3, r7, #16
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	4611      	mov	r1, r2
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	2301      	movs	r3, #1
 80051a4:	f7fe fdb2 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 80051a8:	4603      	mov	r3, r0
 80051aa:	75fb      	strb	r3, [r7, #23]
                                       &(SDMMC_BLOCK_SD_COMMAND(32)),
                                       start_addr,
                                       XMC_SDMMC_RESPONSE_TYPE_R1,
                                       &card_status);

  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10e      	bne.n	80051d0 <SDMMC_BLOCK_SD_lLocalErase+0x70>
  {
    /* SD Erase End Command */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                         &(SDMMC_BLOCK_SD_COMMAND(33)),
 80051b2:	2316      	movs	r3, #22
                                       &card_status);

  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
  {
    /* SD Erase End Command */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4a2d      	ldr	r2, [pc, #180]	; (800526c <SDMMC_BLOCK_SD_lLocalErase+0x10c>)
 80051b8:	441a      	add	r2, r3
 80051ba:	f107 0310 	add.w	r3, r7, #16
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	4611      	mov	r1, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	2301      	movs	r3, #1
 80051c8:	f7fe fda0 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 80051cc:	4603      	mov	r3, r0
 80051ce:	75fb      	strb	r3, [r7, #23]
                                         end_addr,
                                         XMC_SDMMC_RESPONSE_TYPE_R1,
                                         &card_status);
  }

  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d145      	bne.n	8005262 <SDMMC_BLOCK_SD_lLocalErase+0x102>
  {
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                         &(SDMMC_BLOCK_SD_COMMAND(38)),
 80051d6:	2317      	movs	r3, #23
                                         &card_status);
  }

  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
  {
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4a24      	ldr	r2, [pc, #144]	; (800526c <SDMMC_BLOCK_SD_lLocalErase+0x10c>)
 80051dc:	441a      	add	r2, r3
 80051de:	f107 0310 	add.w	r3, r7, #16
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	4611      	mov	r1, r2
 80051e8:	2200      	movs	r2, #0
 80051ea:	2302      	movs	r3, #2
 80051ec:	f7fe fd8e 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 80051f0:	4603      	mov	r3, r0
 80051f2:	75fb      	strb	r3, [r7, #23]
                                         &(SDMMC_BLOCK_SD_COMMAND(38)),
                                         SDMMC_BLOCK_ARGUMENT0,
                                         XMC_SDMMC_RESPONSE_TYPE_R1b,
                                         &card_status);

    status = SDMMC_BLOCK_SD_lStartTimer(obj, (timeout * (uint32_t)1000000U));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <SDMMC_BLOCK_SD_lLocalErase+0x110>)
 80051f8:	fb02 f303 	mul.w	r3, r2, r3
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	4619      	mov	r1, r3
 8005200:	f7ff ff36 	bl	8005070 <SDMMC_BLOCK_SD_lStartTimer>
 8005204:	4603      	mov	r3, r0
 8005206:	75fb      	strb	r3, [r7, #23]

    if (obj->sdmmc_sd->tmr_id != 0U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	2b00      	cmp	r3, #0
 8005210:	d027      	beq.n	8005262 <SDMMC_BLOCK_SD_lLocalErase+0x102>
    {
      do
      {
        if (obj->sdmmc_sd->tmr_expire == (bool)0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f083 0301 	eor.w	r3, r3, #1
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <SDMMC_BLOCK_SD_lLocalErase+0xcc>
        {
          status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
 8005226:	232e      	movs	r3, #46	; 0x2e
 8005228:	75fb      	strb	r3, [r7, #23]
          break;
 800522a:	e011      	b.n	8005250 <SDMMC_BLOCK_SD_lLocalErase+0xf0>
        }
      } while ((XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc) ||
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fe f9b0 	bl	8003598 <XMC_SDMMC_IsDataLineBusy>
 8005238:	4603      	mov	r3, r0
               (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc))));
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e9      	bne.n	8005212 <SDMMC_BLOCK_SD_lLocalErase+0xb2>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe f993 	bl	8003570 <XMC_SDMMC_IsCommandLineBusy>
 800524a:	4603      	mov	r3, r0
        if (obj->sdmmc_sd->tmr_expire == (bool)0U)
        {
          status = SDMMC_BLOCK_MODE_STATUS_TIMEOUT_OCCURED;
          break;
        }
      } while ((XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc) ||
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e0      	bne.n	8005212 <SDMMC_BLOCK_SD_lLocalErase+0xb2>
               (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc))));

      /* Stop timer and delete it */
      (void)SDMMC_BLOCK_SD_lStopTimer(obj);
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff ff47 	bl	80050e4 <SDMMC_BLOCK_SD_lStopTimer>
      (void)SYSTIMER_DeleteTimer(obj->sdmmc_sd->tmr_id);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	4618      	mov	r0, r3
 800525e:	f7fd fb51 	bl	8002904 <SYSTIMER_DeleteTimer>
    }
  }

  return status;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	0800fc68 	.word	0x0800fc68
 8005270:	000f4240 	.word	0x000f4240

08005274 <SDMMC_BLOCK_SD_lHostControllerInit>:
 * PUBLIC FUNCTIONS
 */

/* Initialize host controller */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lHostControllerInit(SDMMC_BLOCK_t *const obj)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_HOST_CONTROLLER_INITIALIZED;
 800527c:	232c      	movs	r3, #44	; 0x2c
 800527e:	73fb      	strb	r3, [r7, #15]

  /* Check if host controller is initialized */
  if (((uint32_t)obj->card_state & (uint32_t)SDMMC_BLOCK_CARD_STATE_HC_INITIALIZED) == (uint32_t)0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7a1b      	ldrb	r3, [r3, #8]
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d150      	bne.n	800532e <SDMMC_BLOCK_SD_lHostControllerInit+0xba>
  {
    /* Reset the registers to default values */
    status = SDMMC_BLOCK_SD_lReset(obj, (uint32_t)XMC_SDMMC_SW_RESET_ALL);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	2101      	movs	r1, #1
 8005290:	f7fe fa58 	bl	8003744 <SDMMC_BLOCK_SD_lReset>
 8005294:	4603      	mov	r3, r0
 8005296:	73fb      	strb	r3, [r7, #15]
    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d147      	bne.n	800532e <SDMMC_BLOCK_SD_lHostControllerInit+0xba>
      /*
       * The internal clock should be disabled before
       * updating frequency clock select (Please see
       * section 2.2.14 -> Clock Control Register)
       */
      XMC_SDMMC_Stop(obj->sdmmc_sd->sdmmc);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fe f909 	bl	80034bc <XMC_SDMMC_Stop>

      /* Select SD clock frequency */
      XMC_SDMMC_SDClockFreqSelect(obj->sdmmc_sd->sdmmc, XMC_SDMMC_CLK_DIV_2);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	2101      	movs	r1, #1
 80052b4:	f7fe f998 	bl	80035e8 <XMC_SDMMC_SDClockFreqSelect>

      /* Internal clock enable */
      XMC_SDMMC_Start(obj->sdmmc_sd->sdmmc);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe f8d6 	bl	8003470 <XMC_SDMMC_Start>
      /*
       * Enable all normal interrupt status bits except block-gap
       * event, card interrupt event, DMA int., ADMA and auto cmd
       * errors. Enable the status and the events themselves.
       */
      obj->sdmmc_sd->sdmmc->EN_INT_STATUS_NORM = SDMMC_BLOCK_NORMAL_INT_STATUS_ENABLE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	22f3      	movs	r2, #243	; 0xf3
 80052cc:	869a      	strh	r2, [r3, #52]	; 0x34
      obj->sdmmc_sd->sdmmc->EN_INT_STATUS_ERR = SDMMC_BLOCK_ERROR_INT_STATUS_ENABLE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f24e 02ff 	movw	r2, #57599	; 0xe0ff
 80052d8:	86da      	strh	r2, [r3, #54]	; 0x36
      obj->sdmmc_sd->sdmmc->EN_INT_SIGNAL_NORM = SDMMC_BLOCK_NORMAL_INT_SIGNAL_ENABLE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2233      	movs	r2, #51	; 0x33
 80052e2:	871a      	strh	r2, [r3, #56]	; 0x38
      obj->sdmmc_sd->sdmmc->EN_INT_SIGNAL_ERR = SDMMC_BLOCK_ERROR_INT_SIGNAL_ENABLE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f24e 02ff 	movw	r2, #57599	; 0xe0ff
 80052ee:	875a      	strh	r2, [r3, #58]	; 0x3a
                                                  ((uint32_t)XMC_SDMMC_CARD_INS) |
                                                  ((uint32_t)XMC_SDMMC_CARD_INT));
#endif

      /* Set data-line timeout */
      XMC_SDMMC_SetDataLineTimeout(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_27);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	210e      	movs	r1, #14
 80052fa:	f7fe f9a7 	bl	800364c <XMC_SDMMC_SetDataLineTimeout>

      /* Set bus voltage in the power control register: flattop 3.3 volts */
      XMC_SDMMC_SetBusVoltage(obj->sdmmc_sd->sdmmc, XMC_SDMMC_BUS_VOLTAGE_3_3_VOLTS);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	2107      	movs	r1, #7
 8005308:	f7fe f986 	bl	8003618 <XMC_SDMMC_SetBusVoltage>

      /* Update the state status to card initialized */
      obj->card_state |= (uint8_t)((uint8_t)SDMMC_BLOCK_CARD_STATE_HC_INITIALIZED |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7a1b      	ldrb	r3, [r3, #8]
 8005310:	f043 0343 	orr.w	r3, r3, #67	; 0x43
 8005314:	b2da      	uxtb	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	721a      	strb	r2, [r3, #8]
                                   (uint8_t)SDMMC_BLOCK_CARD_STATE_NO_CARD |
                                   (uint8_t)SDMMC_BLOCK_CARD_STATE_NOT_INITIALIZED);

      /* A stub of delay for initialization */
      for (volatile uint32_t i = 0; (uint32_t)i < (uint32_t)100000U; i++)
 800531a:	2300      	movs	r3, #0
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	e002      	b.n	8005326 <SDMMC_BLOCK_SD_lHostControllerInit+0xb2>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	3301      	adds	r3, #1
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4a03      	ldr	r2, [pc, #12]	; (8005338 <SDMMC_BLOCK_SD_lHostControllerInit+0xc4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d9f8      	bls.n	8005320 <SDMMC_BLOCK_SD_lHostControllerInit+0xac>
      {
      }
    }
  }

  return status;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	0001869f 	.word	0x0001869f

0800533c <SDMMC_BLOCK_SD_lHostControllerDeInit>:

/* De-initialize the host controller */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lHostControllerDeInit(SDMMC_BLOCK_t *const obj)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]

  /* Check if the host controller is initialized */
  if (((uint32_t)obj->card_state & (uint32_t)SDMMC_BLOCK_CARD_STATE_HC_INITIALIZED) != (uint32_t)0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	7a1b      	ldrb	r3, [r3, #8]
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <SDMMC_BLOCK_SD_lHostControllerDeInit+0x2a>
  {
    /* Cleanup the card */
    SDMMC_BLOCK_SD_lCardCleanUp(obj);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7fe fa35 	bl	80037c4 <SDMMC_BLOCK_SD_lCardCleanUp>

    /* Reset host controller's registers */
    status = SDMMC_BLOCK_SD_lReset(obj, (uint32_t)XMC_SDMMC_SW_RESET_ALL);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	2101      	movs	r1, #1
 800535e:	f7fe f9f1 	bl	8003744 <SDMMC_BLOCK_SD_lReset>
 8005362:	4603      	mov	r3, r0
 8005364:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <SDMMC_BLOCK_SD_lCardReadMultipleBlocks>:
/* Read multiple blocks of data from the card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lCardReadMultipleBlocks(SDMMC_BLOCK_t *const obj,
                                                                        uint32_t *read_buf,
                                                                        uint32_t read_addr,
                                                                        uint32_t num_blocks)
{
 8005370:	b590      	push	{r4, r7, lr}
 8005372:	b089      	sub	sp, #36	; 0x24
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_INIT_FAIL;
 800537e:	232a      	movs	r3, #42	; 0x2a
 8005380:	75fb      	strb	r3, [r7, #23]
  obj->sdmmc_sd->cmd_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2201      	movs	r2, #1
 8005388:	765a      	strb	r2, [r3, #25]
  obj->sdmmc_sd->data_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2201      	movs	r2, #1
 8005390:	761a      	strb	r2, [r3, #24]
  obj->sdmmc_sd->transfer_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2201      	movs	r2, #1
 8005398:	769a      	strb	r2, [r3, #26]

  /* Check if initialization is successful */
  if (obj->sdmmc_sd->mode_init_flag == true)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d022      	beq.n	80053ec <SDMMC_BLOCK_SD_lCardReadMultipleBlocks+0x7c>
  {
    /* Ensure that sector number is not out of bound */
    status = SDMMC_BLOCK_SD_lCheckSectorBound(obj, read_addr, num_blocks);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	4619      	mov	r1, r3
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	f7ff feb7 	bl	8005120 <SDMMC_BLOCK_SD_lCheckSectorBound>
 80053b2:	4603      	mov	r3, r0
 80053b4:	75fb      	strb	r3, [r7, #23]

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d117      	bne.n	80053ec <SDMMC_BLOCK_SD_lCardReadMultipleBlocks+0x7c>
    {
      /* Set transfer direction select in the Transfer Mode Register */
      XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	2101      	movs	r1, #1
 80053c6:	f7fe f979 	bl	80036bc <XMC_SDMMC_SetDataTransferDirection>

      /* Send Multiple Block  Read Command i.e CMD18 */
      status = SDMMC_BLOCK_SD_lMultiBlockTransfer(obj,
                                                  &read_addr,
                                                  num_blocks,
                                                  &(SDMMC_BLOCK_COMMON_COMMAND(18)),
 80053ca:	230e      	movs	r3, #14
    {
      /* Set transfer direction select in the Transfer Mode Register */
      XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST);

      /* Send Multiple Block  Read Command i.e CMD18 */
      status = SDMMC_BLOCK_SD_lMultiBlockTransfer(obj,
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <SDMMC_BLOCK_SD_lCardReadMultipleBlocks+0x88>)
 80053d0:	189c      	adds	r4, r3, r2
 80053d2:	1d3a      	adds	r2, r7, #4
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2301      	movs	r3, #1
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	4611      	mov	r1, r2
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	4623      	mov	r3, r4
 80053e4:	f7ff f848 	bl	8004478 <SDMMC_BLOCK_SD_lMultiBlockTransfer>
 80053e8:	4603      	mov	r3, r0
 80053ea:	75fb      	strb	r3, [r7, #23]
                                                  read_buf,
                                                  SDMMC_BLOCK_SD_DATA_TRANSFER_READ_BUFFER);
    }
  }

  return status;
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd90      	pop	{r4, r7, pc}
 80053f6:	bf00      	nop
 80053f8:	0800fc68 	.word	0x0800fc68

080053fc <SDMMC_BLOCK_SD_lCardReadSingleBlock>:

/* Read single block of data from the card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lCardReadSingleBlock(SDMMC_BLOCK_t *const obj,
                                                                     uint32_t *read_buf,
                                                                     uint32_t read_addr)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_INIT_FAIL;
 8005408:	232a      	movs	r3, #42	; 0x2a
 800540a:	75fb      	strb	r3, [r7, #23]
  uint32_t sector_count = 1U;
 800540c:	2301      	movs	r3, #1
 800540e:	613b      	str	r3, [r7, #16]

  /* Check if initialization successful */
  if (obj->sdmmc_sd->mode_init_flag == true)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02a      	beq.n	8005472 <SDMMC_BLOCK_SD_lCardReadSingleBlock+0x76>
  {
    /* Ensure that the sector number is not out of bound */
    status = SDMMC_BLOCK_SD_lCheckSectorBound(obj, read_addr, sector_count);
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	f7ff fe7d 	bl	8005120 <SDMMC_BLOCK_SD_lCheckSectorBound>
 8005426:	4603      	mov	r3, r0
 8005428:	75fb      	strb	r3, [r7, #23]
    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d120      	bne.n	8005472 <SDMMC_BLOCK_SD_lCardReadSingleBlock+0x76>
    {
      /* Block addressing or byte addressing */
      if (((uint32_t)obj->card_type & (uint32_t)SDMMC_BLOCK_CARD_TYPE_BLOCK_ADDRESSING) == (uint32_t)0UL)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	7a5b      	ldrb	r3, [r3, #9]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d102      	bne.n	8005442 <SDMMC_BLOCK_SD_lCardReadSingleBlock+0x46>
      {
        read_addr = (uint32_t)(read_addr * 512UL);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	025b      	lsls	r3, r3, #9
 8005440:	607b      	str	r3, [r7, #4]
      }

      XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	2101      	movs	r1, #1
 800544c:	f7fe f936 	bl	80036bc <XMC_SDMMC_SetDataTransferDirection>
      /* SDMMC->TRANSFER_MODE |= (uint16_t)((uint32_t)1U << (uint32_t)SDMMC_TRANSFER_MODE_TX_DIR_SELECT_Pos); */

      /* Perform the Single block transfer operation */
      status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
                                                   &(SDMMC_BLOCK_COMMON_COMMAND(17)),
 8005450:	230d      	movs	r3, #13

      XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST);
      /* SDMMC->TRANSFER_MODE |= (uint16_t)((uint32_t)1U << (uint32_t)SDMMC_TRANSFER_MODE_TX_DIR_SELECT_Pos); */

      /* Perform the Single block transfer operation */
      status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	4a09      	ldr	r2, [pc, #36]	; (800547c <SDMMC_BLOCK_SD_lCardReadSingleBlock+0x80>)
 8005456:	441a      	add	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	2301      	movs	r3, #1
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	4611      	mov	r1, r2
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800546a:	f7ff f84f 	bl	800450c <SDMMC_BLOCK_SD_lSingleBlockTransfer>
 800546e:	4603      	mov	r3, r0
 8005470:	75fb      	strb	r3, [r7, #23]
                                                   read_buf,
                                                   SDMMC_BLOCK_SD_DATA_TRANSFER_READ_BUFFER);
    }
  }

  return status;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	0800fc68 	.word	0x0800fc68

08005480 <SDMMC_BLOCK_SD_lCardWriteMultipleBlocks>:
/* Write multiple blocks of data on the card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lCardWriteMultipleBlocks(SDMMC_BLOCK_t *const obj,
                                                                         const uint32_t *write_buf,
                                                                         uint32_t write_addr,
                                                                         uint32_t num_blocks)
{
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b089      	sub	sp, #36	; 0x24
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_INIT_FAIL;
 800548e:	232a      	movs	r3, #42	; 0x2a
 8005490:	75fb      	strb	r3, [r7, #23]

  obj->sdmmc_sd->cmd_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2201      	movs	r2, #1
 8005498:	765a      	strb	r2, [r3, #25]
  obj->sdmmc_sd->data_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2201      	movs	r2, #1
 80054a0:	761a      	strb	r2, [r3, #24]
  obj->sdmmc_sd->transfer_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2201      	movs	r2, #1
 80054a8:	769a      	strb	r2, [r3, #26]

  /* Check if initialization is successful */
  if (obj->sdmmc_sd->mode_init_flag == true)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d022      	beq.n	80054fc <SDMMC_BLOCK_SD_lCardWriteMultipleBlocks+0x7c>
  {
    /* Ensure sector number is not out of bound */
    status = SDMMC_BLOCK_SD_lCheckSectorBound(obj, write_addr, num_blocks);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	4619      	mov	r1, r3
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	f7ff fe2f 	bl	8005120 <SDMMC_BLOCK_SD_lCheckSectorBound>
 80054c2:	4603      	mov	r3, r0
 80054c4:	75fb      	strb	r3, [r7, #23]
    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80054c6:	7dfb      	ldrb	r3, [r7, #23]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d117      	bne.n	80054fc <SDMMC_BLOCK_SD_lCardWriteMultipleBlocks+0x7c>
    {
      /* Clear transfer direction select in transfer mode register */
      XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_HOST_TO_CARD);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	2100      	movs	r1, #0
 80054d6:	f7fe f8f1 	bl	80036bc <XMC_SDMMC_SetDataTransferDirection>

      /* Send Multiple Block  Write  Command i.e CMD25 */
      status = SDMMC_BLOCK_SD_lMultiBlockTransfer(obj,
                                                  &write_addr,
                                                  num_blocks,
                                                  &(SDMMC_BLOCK_COMMON_COMMAND(25)),
 80054da:	2310      	movs	r3, #16
    {
      /* Clear transfer direction select in transfer mode register */
      XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_HOST_TO_CARD);

      /* Send Multiple Block  Write  Command i.e CMD25 */
      status = SDMMC_BLOCK_SD_lMultiBlockTransfer(obj,
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <SDMMC_BLOCK_SD_lCardWriteMultipleBlocks+0x88>)
 80054e0:	189c      	adds	r4, r3, r2
 80054e2:	1d3a      	adds	r2, r7, #4
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2302      	movs	r3, #2
 80054ea:	9301      	str	r3, [sp, #4]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	4611      	mov	r1, r2
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	4623      	mov	r3, r4
 80054f4:	f7fe ffc0 	bl	8004478 <SDMMC_BLOCK_SD_lMultiBlockTransfer>
 80054f8:	4603      	mov	r3, r0
 80054fa:	75fb      	strb	r3, [r7, #23]
                                                  (uint32_t *)write_buf,
                                                  SDMMC_BLOCK_SD_DATA_TRANSFER_WRITE_BUFFER);
    }
  }

  return status;
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd90      	pop	{r4, r7, pc}
 8005506:	bf00      	nop
 8005508:	0800fc68 	.word	0x0800fc68

0800550c <SDMMC_BLOCK_SD_lCardWriteSingleBlock>:

/* Write single block of data on the card */
static SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_lCardWriteSingleBlock(SDMMC_BLOCK_t *const obj,
                                                                      const uint32_t *write_buf,
                                                                      uint32_t write_addr)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_INIT_FAIL;
 8005518:	232a      	movs	r3, #42	; 0x2a
 800551a:	75fb      	strb	r3, [r7, #23]
  uint32_t sector_count = 1U;
 800551c:	2301      	movs	r3, #1
 800551e:	613b      	str	r3, [r7, #16]

  /* Check if initialization is successful */
  if (obj->sdmmc_sd->mode_init_flag == true)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8005528:	2b00      	cmp	r3, #0
 800552a:	d02a      	beq.n	8005582 <SDMMC_BLOCK_SD_lCardWriteSingleBlock+0x76>
  {
    /* Check if sector number is not out of bound */
    status = SDMMC_BLOCK_SD_lCheckSectorBound(obj, write_addr, sector_count);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	f7ff fdf5 	bl	8005120 <SDMMC_BLOCK_SD_lCheckSectorBound>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]
    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d120      	bne.n	8005582 <SDMMC_BLOCK_SD_lCardWriteSingleBlock+0x76>
    {
      /* If not block addressing, then multiply by 512 bytes */
      if (((uint32_t)obj->card_type & (uint32_t)SDMMC_BLOCK_CARD_TYPE_BLOCK_ADDRESSING) == (uint32_t)0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	7a5b      	ldrb	r3, [r3, #9]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <SDMMC_BLOCK_SD_lCardWriteSingleBlock+0x46>
      {
        write_addr = (uint32_t)(write_addr * 512U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	025b      	lsls	r3, r3, #9
 8005550:	607b      	str	r3, [r7, #4]
      }

      /* Clear transfer direction select bit */
      XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_HOST_TO_CARD);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	2100      	movs	r1, #0
 800555c:	f7fe f8ae 	bl	80036bc <XMC_SDMMC_SetDataTransferDirection>

      /* Single block transfer function */
      status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
                                                   &(SDMMC_BLOCK_COMMON_COMMAND(24)),
 8005560:	230f      	movs	r3, #15

      /* Clear transfer direction select bit */
      XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_HOST_TO_CARD);

      /* Single block transfer function */
      status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	4a09      	ldr	r2, [pc, #36]	; (800558c <SDMMC_BLOCK_SD_lCardWriteSingleBlock+0x80>)
 8005566:	441a      	add	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	2302      	movs	r3, #2
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	4611      	mov	r1, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800557a:	f7fe ffc7 	bl	800450c <SDMMC_BLOCK_SD_lSingleBlockTransfer>
 800557e:	4603      	mov	r3, r0
 8005580:	75fb      	strb	r3, [r7, #23]
                                                   (uint32_t *)write_buf,
                                                   SDMMC_BLOCK_SD_DATA_TRANSFER_WRITE_BUFFER);
    }
  }

  return status;
 8005582:	7dfb      	ldrb	r3, [r7, #23]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	0800fc68 	.word	0x0800fc68

08005590 <SDMMC_BLOCK_SD_EraseBlock>:

/* Erase data from the card */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_EraseBlock(SDMMC_BLOCK_t *const obj, uint32_t start_addr, uint32_t end_addr)
{
 8005590:	b5b0      	push	{r4, r5, r7, lr}
 8005592:	b0a6      	sub	sp, #152	; 0x98
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_INIT_FAIL;
 800559c:	232a      	movs	r3, #42	; 0x2a
 800559e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmp_start_addr;
  uint32_t num_sectors = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Allocation unit to no. of sectors in 1 AU table mapping */
  uint32_t au_to_sectors[10] = {0U, 32U, 64U, 128U, 256U, 512U, 1024U, 2048U, 4096U, 8192U};
 80055a8:	4b72      	ldr	r3, [pc, #456]	; (8005774 <SDMMC_BLOCK_SD_EraseBlock+0x1e4>)
 80055aa:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80055ae:	461d      	mov	r5, r3
 80055b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80055bc:	e884 0003 	stmia.w	r4, {r0, r1}
  uint16_t erase_size = (uint16_t)0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
  uint8_t erase_offset = (uint8_t)0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
  uint8_t erase_timeout = (uint8_t)0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  uint8_t au_size = (uint8_t)0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t sectors_in_au = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t sectors_in_erase_cluster = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  /* Read SD status  */
  uint32_t sd_status[16] = {0U};
 80055e2:	f107 0310 	add.w	r3, r7, #16
 80055e6:	2240      	movs	r2, #64	; 0x40
 80055e8:	4618      	mov	r0, r3
 80055ea:	2100      	movs	r1, #0
 80055ec:	f006 fccf 	bl	800bf8e <memset>
  uint32_t erase_timeout_per_cluster = 0UL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	67bb      	str	r3, [r7, #120]	; 0x78

  obj->sdmmc_sd->cmd_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2201      	movs	r2, #1
 80055fa:	765a      	strb	r2, [r3, #25]
  obj->sdmmc_sd->data_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2201      	movs	r2, #1
 8005602:	761a      	strb	r2, [r3, #24]
  obj->sdmmc_sd->transfer_int_err = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2201      	movs	r2, #1
 800560a:	769a      	strb	r2, [r3, #26]

  /* If the card is read only or write protected */
  if ((obj->card_state & (uint8_t)SDMMC_BLOCK_CARD_STATE_WRITE_PROTECTED) != (uint8_t)0U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	7a1b      	ldrb	r3, [r3, #8]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <SDMMC_BLOCK_SD_EraseBlock+0x90>
  {
    status = SDMMC_BLOCK_MODE_STATUS_WP_VIOLATION_ERROR;
 8005618:	230f      	movs	r3, #15
 800561a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800561e:	e090      	b.n	8005742 <SDMMC_BLOCK_SD_EraseBlock+0x1b2>
  }
#endif /* SDMMC_BLOCK_CARD_WRITE_PROTECT_SIGNAL */
  /* Assume initialization is successful: This is invoked from IOCTL */
  else
  {
    tmp_start_addr = start_addr;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    num_sectors = (end_addr - tmp_start_addr) + 1U;
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	3301      	adds	r3, #1
 8005630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Check sector number is not out of bound */
    status = SDMMC_BLOCK_SD_lCheckSectorBound(obj, tmp_start_addr, num_sectors);
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800563a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800563e:	f7ff fd6f 	bl	8005120 <SDMMC_BLOCK_SD_lCheckSectorBound>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005648:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800564c:	2b00      	cmp	r3, #0
 800564e:	d178      	bne.n	8005742 <SDMMC_BLOCK_SD_EraseBlock+0x1b2>
    {
      /* Erase timeout calculation */
      /* Get SD status */
      status = SDMMC_BLOCK_SD_GetSdStatus(obj, (void*)&(sd_status[0]));
 8005650:	f107 0310 	add.w	r3, r7, #16
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	4619      	mov	r1, r3
 8005658:	f000 fad6 	bl	8005c08 <SDMMC_BLOCK_SD_GetSdStatus>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005662:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005666:	2b00      	cmp	r3, #0
 8005668:	d16b      	bne.n	8005742 <SDMMC_BLOCK_SD_EraseBlock+0x1b2>
      {
        /* Bits 400-401 in SD status: Erase offset */
        erase_offset =  (uint8_t)(((sd_status[3] & 0x00000300UL)) >> 8U);
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005670:	0a1b      	lsrs	r3, r3, #8
 8005672:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

        /* Bits 402-407: Erase timeout */
        erase_timeout = (uint8_t)(((sd_status[3] & 0x0000FC00UL)) >> 10UL);
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800567c:	0a9b      	lsrs	r3, r3, #10
 800567e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

        /* Bits 408-423: Erase size */
        erase_size = (uint16_t)((((sd_status[2] & 0xFF000000U) >> 24U) << 8U) | (sd_status[3] & 0x000000FFU));
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	0e1b      	lsrs	r3, r3, #24
 8005686:	b29b      	uxth	r3, r3
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	b29a      	uxth	r2, r3
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	b29b      	uxth	r3, r3
 8005690:	b2db      	uxtb	r3, r3
 8005692:	b29b      	uxth	r3, r3
 8005694:	4313      	orrs	r3, r2
 8005696:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

        /* Bits 428-431: Allocation unit size */
        au_size  = (uint8_t)((sd_status[2] & 0x00F00000U) >> 20);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80056a0:	0d1b      	lsrs	r3, r3, #20
 80056a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        /* Erase timeout calculations */
        erase_timeout_per_cluster = ((uint32_t)erase_timeout / (uint32_t)erase_size) + (uint32_t)erase_offset;
 80056a6:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80056aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80056ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80056b2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80056b6:	4413      	add	r3, r2
 80056b8:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Number of sectors in 1 AU */
        sectors_in_au = au_to_sectors[au_size];
 80056ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80056c4:	4413      	add	r3, r2
 80056c6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80056ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        sectors_in_erase_cluster = sectors_in_au * erase_size;
 80056ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80056d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	67fb      	str	r3, [r7, #124]	; 0x7c

        while (num_sectors >= sectors_in_erase_cluster)
 80056dc:	e01e      	b.n	800571c <SDMMC_BLOCK_SD_EraseBlock+0x18c>
        {
          status = SDMMC_BLOCK_SD_lLocalErase(obj,
 80056de:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80056e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056e4:	4413      	add	r3, r2
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056ec:	461a      	mov	r2, r3
 80056ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056f0:	f7ff fd36 	bl	8005160 <SDMMC_BLOCK_SD_lLocalErase>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                                              tmp_start_addr,
                                              (tmp_start_addr + sectors_in_erase_cluster),
                                              erase_timeout_per_cluster);
          if (status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80056fa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d000      	beq.n	8005704 <SDMMC_BLOCK_SD_EraseBlock+0x174>
          {
            break;
 8005702:	e010      	b.n	8005726 <SDMMC_BLOCK_SD_EraseBlock+0x196>
          }
          tmp_start_addr = tmp_start_addr + sectors_in_erase_cluster;
 8005704:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005708:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800570a:	4413      	add	r3, r2
 800570c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
          num_sectors = num_sectors - sectors_in_erase_cluster;
 8005710:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005714:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        /* Number of sectors in 1 AU */
        sectors_in_au = au_to_sectors[au_size];
        sectors_in_erase_cluster = sectors_in_au * erase_size;

        while (num_sectors >= sectors_in_erase_cluster)
 800571c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005722:	429a      	cmp	r2, r3
 8005724:	d2db      	bcs.n	80056de <SDMMC_BLOCK_SD_EraseBlock+0x14e>
          }
          tmp_start_addr = tmp_start_addr + sectors_in_erase_cluster;
          num_sectors = num_sectors - sectors_in_erase_cluster;
        }

        if (num_sectors != 0U)
 8005726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <SDMMC_BLOCK_SD_EraseBlock+0x1b2>
        {
          status = SDMMC_BLOCK_SD_lLocalErase(obj, tmp_start_addr, end_addr, erase_timeout_per_cluster);
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005738:	f7ff fd12 	bl	8005160 <SDMMC_BLOCK_SD_lLocalErase>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      }
    }
  }

  /* Wait for until the command OR data lines aren't busy */
  while ((XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc)) || (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc)))
 8005742:	bf00      	nop
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f7fd ff24 	bl	8003598 <XMC_SDMMC_IsDataLineBusy>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f6      	bne.n	8005744 <SDMMC_BLOCK_SD_EraseBlock+0x1b4>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd ff07 	bl	8003570 <XMC_SDMMC_IsCommandLineBusy>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1ed      	bne.n	8005744 <SDMMC_BLOCK_SD_EraseBlock+0x1b4>
  {
  }

  return status;
 8005768:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800576c:	4618      	mov	r0, r3
 800576e:	3798      	adds	r7, #152	; 0x98
 8005770:	46bd      	mov	sp, r7
 8005772:	bdb0      	pop	{r4, r5, r7, pc}
 8005774:	0800fcb8 	.word	0x0800fcb8

08005778 <SDMMC_BLOCK_SD_LockUnlockCard>:

/* Set, clear password, lock/unlock card */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_LockUnlockCard(SDMMC_BLOCK_t *const obj,
                                                        SDMMC_BLOCK_LOCK_STRUCTURE_t *lock,
                                                        SDMMC_BLOCK_CARD_LOCK_STATUS_t operation_mode)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b08b      	sub	sp, #44	; 0x2c
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	71fb      	strb	r3, [r7, #7]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8005786:	2301      	movs	r3, #1
 8005788:	77fb      	strb	r3, [r7, #31]
  uint32_t data_length = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	61bb      	str	r3, [r7, #24]
  uint32_t card_status;

  /*  Select the card before proceeding */
  status = SDMMC_BLOCK_SD_lSwitchToTransferState(obj);
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f7ff fa84 	bl	8004c9c <SDMMC_BLOCK_SD_lSwitchToTransferState>
 8005794:	4603      	mov	r3, r0
 8005796:	77fb      	strb	r3, [r7, #31]
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005798:	7ffb      	ldrb	r3, [r7, #31]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d168      	bne.n	8005870 <SDMMC_BLOCK_SD_LockUnlockCard+0xf8>
  {
    /* Send CMD42 and write the lock data structure */
    /* Clear transfer direction select in transfer mode register */
    XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_HOST_TO_CARD);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	2100      	movs	r1, #0
 80057a8:	f7fd ff88 	bl	80036bc <XMC_SDMMC_SetDataTransferDirection>

    /* Compute password length */
    data_length = (uint32_t)((((uint32_t)lock->pwd_len + (uint32_t)1U) >> 1U) << 1U) + 2U;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	3301      	adds	r3, #1
 80057b2:	f023 0301 	bic.w	r3, r3, #1
 80057b6:	3302      	adds	r3, #2
 80057b8:	61bb      	str	r3, [r7, #24]

    /* Set block length */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                         &(SDMMC_BLOCK_COMMON_COMMAND(16)),
 80057ba:	230c      	movs	r3, #12

    /* Compute password length */
    data_length = (uint32_t)((((uint32_t)lock->pwd_len + (uint32_t)1U) >> 1U) << 1U) + 2U;

    /* Set block length */
    status = SDMMC_BLOCK_SD_lSendCommand(obj,
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	4a2f      	ldr	r2, [pc, #188]	; (800587c <SDMMC_BLOCK_SD_LockUnlockCard+0x104>)
 80057c0:	441a      	add	r2, r3
 80057c2:	f107 0314 	add.w	r3, r7, #20
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	4611      	mov	r1, r2
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	2301      	movs	r3, #1
 80057d0:	f7fe fa9c 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 80057d4:	4603      	mov	r3, r0
 80057d6:	77fb      	strb	r3, [r7, #31]
                                         &(SDMMC_BLOCK_COMMON_COMMAND(16)),
                                         data_length,
                                         XMC_SDMMC_RESPONSE_TYPE_R1,
                                         &card_status);

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80057d8:	7ffb      	ldrb	r3, [r7, #31]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d148      	bne.n	8005870 <SDMMC_BLOCK_SD_LockUnlockCard+0xf8>
    {
      status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
                                                   &(SDMMC_BLOCK_COMMON_COMMAND(42)),
 80057de:	2318      	movs	r3, #24
                                         XMC_SDMMC_RESPONSE_TYPE_R1,
                                         &card_status);

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
    {
      status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4a26      	ldr	r2, [pc, #152]	; (800587c <SDMMC_BLOCK_SD_LockUnlockCard+0x104>)
 80057e4:	441a      	add	r2, r3
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	b29c      	uxth	r4, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	2302      	movs	r3, #2
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	4611      	mov	r1, r2
 80057f6:	2200      	movs	r2, #0
 80057f8:	4623      	mov	r3, r4
 80057fa:	f7fe fe87 	bl	800450c <SDMMC_BLOCK_SD_lSingleBlockTransfer>
 80057fe:	4603      	mov	r3, r0
 8005800:	77fb      	strb	r3, [r7, #31]
                                                   (uint32_t)SDMMC_BLOCK_ARGUMENT0,
                                                   (uint16_t)data_length,
                                                   (uint32_t *)lock,
                                                   SDMMC_BLOCK_SD_DATA_TRANSFER_WRITE_BUFFER);

      while (XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc))
 8005802:	bf00      	nop
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f7fd fec4 	bl	8003598 <XMC_SDMMC_IsDataLineBusy>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f6      	bne.n	8005804 <SDMMC_BLOCK_SD_LockUnlockCard+0x8c>
      {
      }

      status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                           &(SDMMC_BLOCK_COMMON_COMMAND(16)),
 8005816:	230c      	movs	r3, #12

      while (XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc))
      {
      }

      status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	4a18      	ldr	r2, [pc, #96]	; (800587c <SDMMC_BLOCK_SD_LockUnlockCard+0x104>)
 800581c:	441a      	add	r2, r3
 800581e:	f107 0314 	add.w	r3, r7, #20
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	4611      	mov	r1, r2
 8005828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582c:	2301      	movs	r3, #1
 800582e:	f7fe fa6d 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8005832:	4603      	mov	r3, r0
 8005834:	77fb      	strb	r3, [r7, #31]
                                           512U,
                                           XMC_SDMMC_RESPONSE_TYPE_R1,
                                           &card_status);

      /* Wait for until the command OR data lines aren't busy */
      while ((XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc)) ||
 8005836:	bf00      	nop
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fd feaa 	bl	8003598 <XMC_SDMMC_IsDataLineBusy>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f6      	bne.n	8005838 <SDMMC_BLOCK_SD_LockUnlockCard+0xc0>
             (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc)))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f7fd fe8d 	bl	8003570 <XMC_SDMMC_IsCommandLineBusy>
 8005856:	4603      	mov	r3, r0
                                           512U,
                                           XMC_SDMMC_RESPONSE_TYPE_R1,
                                           &card_status);

      /* Wait for until the command OR data lines aren't busy */
      while ((XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc)) ||
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1ed      	bne.n	8005838 <SDMMC_BLOCK_SD_LockUnlockCard+0xc0>
             (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc)))
      {
      }

      if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 800585c:	7ffb      	ldrb	r3, [r7, #31]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <SDMMC_BLOCK_SD_LockUnlockCard+0xf8>
      {
        status = SDMMC_BLOCK_SD_lCheckLockStatus(obj, operation_mode);
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	4619      	mov	r1, r3
 8005868:	f7fe feb8 	bl	80045dc <SDMMC_BLOCK_SD_lCheckLockStatus>
 800586c:	4603      	mov	r3, r0
 800586e:	77fb      	strb	r3, [r7, #31]
      }
    }
  }
  return status;
 8005870:	7ffb      	ldrb	r3, [r7, #31]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3724      	adds	r7, #36	; 0x24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd90      	pop	{r4, r7, pc}
 800587a:	bf00      	nop
 800587c:	0800fc68 	.word	0x0800fc68

08005880 <SDMMC_BLOCK_SD_GetLockStatus>:

/* Get the lock status from card */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_GetLockStatus(SDMMC_BLOCK_t *const obj,
                                                       SDMMC_BLOCK_CARD_LOCK_STATUS_t *lock_status)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af02      	add	r7, sp, #8
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t card_status = 0UL;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
  uint32_t arg = 0UL;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8005892:	2301      	movs	r3, #1
 8005894:	74fb      	strb	r3, [r7, #19]

  arg |= ((uint32_t)obj->sdmmc_sd->card_info.rca << SDMMC_BLOCK_ARG_RCA_BITPOS);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800589e:	041b      	lsls	r3, r3, #16
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]

  /* Send CMD13 to read card status  */
  status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                       &(SDMMC_BLOCK_COMMON_COMMAND(13)),
 80058a6:	230a      	movs	r3, #10
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;

  arg |= ((uint32_t)obj->sdmmc_sd->card_info.rca << SDMMC_BLOCK_ARG_RCA_BITPOS);

  /* Send CMD13 to read card status  */
  status = SDMMC_BLOCK_SD_lSendCommand(obj,
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <SDMMC_BLOCK_SD_GetLockStatus+0x88>)
 80058ac:	441a      	add	r2, r3
 80058ae:	f107 030c 	add.w	r3, r7, #12
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4611      	mov	r1, r2
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	2301      	movs	r3, #1
 80058bc:	f7fe fa26 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 80058c0:	4603      	mov	r3, r0
 80058c2:	74fb      	strb	r3, [r7, #19]
                                       &(SDMMC_BLOCK_COMMON_COMMAND(13)),
                                       arg,
                                       XMC_SDMMC_RESPONSE_TYPE_R1,
                                       &card_status);

  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d119      	bne.n	80058fe <SDMMC_BLOCK_SD_GetLockStatus+0x7e>
  {
    /* Lock/unlock status bit in the CSR register */
    if (((uint32_t)card_status & (uint32_t)SDMMC_BLOCK_SD_CSR_CARD_IS_LOCKED_BITMASK) != (uint32_t)0)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <SDMMC_BLOCK_SD_GetLockStatus+0x6a>
    {
      *lock_status = SDMMC_BLOCK_CARD_LOCK_STATUS_LOCKED;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
      obj->card_state |= (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7a1b      	ldrb	r3, [r3, #8]
 80058de:	f043 0308 	orr.w	r3, r3, #8
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	721a      	strb	r2, [r3, #8]
 80058e8:	e009      	b.n	80058fe <SDMMC_BLOCK_SD_GetLockStatus+0x7e>
    }
    else
    {
      *lock_status = SDMMC_BLOCK_CARD_LOCK_STATUS_UNLOCKED;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
      obj->card_state &= (uint8_t)~(uint8_t)(SDMMC_BLOCK_CARD_STATE_LOCKED);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	7a1b      	ldrb	r3, [r3, #8]
 80058f4:	f023 0308 	bic.w	r3, r3, #8
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	721a      	strb	r2, [r3, #8]
    }
  }

  return status;
 80058fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	0800fc68 	.word	0x0800fc68

0800590c <SDMMC_BLOCK_SD_GetState>:

/* Get card's current state */
uint8_t SDMMC_BLOCK_SD_GetState(SDMMC_BLOCK_t *obj)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  return (obj->card_state & 0xFU);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	7a1b      	ldrb	r3, [r3, #8]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	b2db      	uxtb	r3, r3
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop

0800592c <SDMMC_BLOCK_SD_GetCardType>:

/* Get card type */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_GetCardType(SDMMC_BLOCK_t *const obj, uint32_t *card_type)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  *card_type = obj->card_type;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	7a5b      	ldrb	r3, [r3, #9]
 800593a:	461a      	mov	r2, r3
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	601a      	str	r2, [r3, #0]

  return SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop

08005950 <SDMMC_BLOCK_SD_GetCid>:

/* Get CID register information of card */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_GetCid(SDMMC_BLOCK_t *const obj, void *buf)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  SDMMC_BLOCK_CID_t *temp = (SDMMC_BLOCK_CID_t *)buf;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	60fb      	str	r3, [r7, #12]

  temp->manufacturing_date = (uint16_t)((obj->sdmmc_sd->card_info.cid[0]) & 0xFFFU);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	b29b      	uxth	r3, r3
 8005966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	801a      	strh	r2, [r3, #0]
  temp->product_serial_num = (obj->sdmmc_sd->card_info.cid[1] << 16U) | (obj->sdmmc_sd->card_info.cid[0] >> 16U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	041a      	lsls	r2, r3, #16
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	0c1b      	lsrs	r3, r3, #16
 8005980:	431a      	orrs	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	605a      	str	r2, [r3, #4]
  temp->product_rev = (uint8_t)((obj->sdmmc_sd->card_info.cid[1] >> 16U) & 0xFFU);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	0c1b      	lsrs	r3, r3, #16
 800598e:	b2da      	uxtb	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	721a      	strb	r2, [r3, #8]
  temp->product_name[0] = (uint8_t)((obj->sdmmc_sd->card_info.cid[2] >> 24U) & 0xFFU);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	0e1b      	lsrs	r3, r3, #24
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	725a      	strb	r2, [r3, #9]
  temp->product_name[1] = (uint8_t)((obj->sdmmc_sd->card_info.cid[2] >> 16U) & 0xFFU);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	0c1b      	lsrs	r3, r3, #16
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	729a      	strb	r2, [r3, #10]
  temp->product_name[2] = (uint8_t)((obj->sdmmc_sd->card_info.cid[2] >> 8U) & 0xFFU);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	72da      	strb	r2, [r3, #11]
  temp->product_name[3] = (uint8_t)((obj->sdmmc_sd->card_info.cid[2] >> 0U) & 0xFFU);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	731a      	strb	r2, [r3, #12]
  temp->product_name[4] = (uint8_t)((obj->sdmmc_sd->card_info.cid[1] >> 24U) & 0xFFU);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	0e1b      	lsrs	r3, r3, #24
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	735a      	strb	r2, [r3, #13]
  temp->app_oem_id[0] = (uint8_t)((obj->sdmmc_sd->card_info.cid[3] >> 8U) & 0xFFU);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	0a1b      	lsrs	r3, r3, #8
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	739a      	strb	r2, [r3, #14]
  temp->app_oem_id[1] = (uint8_t)((obj->sdmmc_sd->card_info.cid[3]) & 0xFFU);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	73da      	strb	r2, [r3, #15]
  temp->manufacturer_id = (uint8_t)((obj->sdmmc_sd->card_info.cid[3] >> 16U) & 0xFFU);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	741a      	strb	r2, [r3, #16]

  return SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop

08005a10 <SDMMC_BLOCK_SD_GetOcr>:

/* Get OCR information */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_GetOcr(SDMMC_BLOCK_t *const obj, void *buf)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  *(uint32_t *)buf = obj->sdmmc_sd->card_info.ocr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	601a      	str	r2, [r3, #0]

  return SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop

08005a34 <SDMMC_BLOCK_SD_GetCsd>:

/* Get CSD information */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_GetCsd(SDMMC_BLOCK_t *const obj, void *buf)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  /*
   * CSD Structure includes 7-bit CRC and 1-bit fixed bit
   * which is not sent by the card. So, skip 1 byte before
   * copying into the structure.
   */
  memcpy(((uint8_t *)buf + 1U), (void *)obj->sdmmc_sd->card_info.csd, 15U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3334      	adds	r3, #52	; 0x34
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	220f      	movs	r2, #15
 8005a4e:	f006 fa93 	bl	800bf78 <memcpy>

  return SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <SDMMC_BLOCK_SD_GetSectorCount>:

/* Get number of sectors present on the card */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_GetSectorCount(SDMMC_BLOCK_t *const obj, void *buf)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08e      	sub	sp, #56	; 0x38
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8005a66:	2300      	movs	r3, #0
 8005a68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t mult = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	633b      	str	r3, [r7, #48]	; 0x30

  if (((uint32_t)obj->card_type & (uint32_t)SDMMC_BLOCK_CARD_TYPE_HIGH_CAPACITY) != (uint32_t)0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	7a5b      	ldrb	r3, [r3, #9]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d026      	beq.n	8005aca <SDMMC_BLOCK_SD_GetSectorCount+0x6e>
  {
    SDMMC_BLOCK_SDV2_CSD_t temp_csd_v2 = {0U};
 8005a7c:	f107 031c 	add.w	r3, r7, #28
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	3304      	adds	r3, #4
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	3304      	adds	r3, #4
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	3304      	adds	r3, #4
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	3304      	adds	r3, #4

    /* Get CSD function */
    status = SDMMC_BLOCK_SD_GetCsd(obj, (void *)&temp_csd_v2);
 8005a9e:	f107 031c 	add.w	r3, r7, #28
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f7ff ffc5 	bl	8005a34 <SDMMC_BLOCK_SD_GetCsd>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d107      	bne.n	8005ac8 <SDMMC_BLOCK_SD_GetSectorCount+0x6c>
    {
      /*
       * For High Capacity SD card, (C_SIZE field value + 1) * 1024
       * gives the sector count
       */
      *(uint32_t *)buf = (uint32_t)(((uint32_t)temp_csd_v2.dev_size + 1) << 10);
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005abe:	3301      	adds	r3, #1
 8005ac0:	029a      	lsls	r2, r3, #10
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e031      	b.n	8005b2c <SDMMC_BLOCK_SD_GetSectorCount+0xd0>
 8005ac8:	e030      	b.n	8005b2c <SDMMC_BLOCK_SD_GetSectorCount+0xd0>
   * For Standard SD (and MMC) cards:
   * Sector Count = (Device Size + 1) * Mult, where Mult =  2 ^ C_SIZE_MULT
   */
  else
  {
    SDMMC_BLOCK_SDV1_CSD_t temp_csd_v1 = {0U};
 8005aca:	f107 0308 	add.w	r3, r7, #8
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	3304      	adds	r3, #4
    /* Get CSD function */
    status = SDMMC_BLOCK_SD_GetCsd(obj, (void *)&temp_csd_v1);
 8005aec:	f107 0308 	add.w	r3, r7, #8
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4619      	mov	r1, r3
 8005af4:	f7ff ff9e 	bl	8005a34 <SDMMC_BLOCK_SD_GetCsd>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005afe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d112      	bne.n	8005b2c <SDMMC_BLOCK_SD_GetSectorCount+0xd0>
    {
      /* Left shift evaluates 1 * 2 ^ (TmpMmcCsd.DeviceSizeMult + 2) */
      mult = (uint32_t)(1 << ((uint32_t)temp_csd_v1.dev_size_mult + 2));
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	3302      	adds	r3, #2
 8005b10:	461a      	mov	r2, r3
 8005b12:	2301      	movs	r3, #1
 8005b14:	4093      	lsls	r3, r2
 8005b16:	633b      	str	r3, [r7, #48]	; 0x30

      /* Sector Count = device_size * mult */
      *(uint32_t *)buf = ((uint32_t)temp_csd_v1.dev_size + 1) * mult;
 8005b18:	8a3b      	ldrh	r3, [r7, #16]
 8005b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3301      	adds	r3, #1
 8005b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b24:	fb02 f203 	mul.w	r2, r2, r3
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8005b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3738      	adds	r7, #56	; 0x38
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <SDMMC_BLOCK_SD_GetSectorSize>:

/* Get sector size info from the card */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_GetSectorSize(SDMMC_BLOCK_t *const obj, void *buf)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  /* Sector Size is fixed to 512 bytes */
  *(uint16_t *)buf = (uint16_t)512U;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b48:	801a      	strh	r2, [r3, #0]

  return SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <SDMMC_BLOCK_SD_GetBlockSize>:

SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_GetBlockSize(SDMMC_BLOCK_t *const obj, void *buf)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08e      	sub	sp, #56	; 0x38
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* SD high capacity card (CSD V2) */
  if (((uint32_t)obj->card_type & (uint32_t)SDMMC_BLOCK_CARD_TYPE_HIGH_CAPACITY) != (uint32_t)0)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	7a5b      	ldrb	r3, [r3, #9]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d021      	beq.n	8005bb8 <SDMMC_BLOCK_SD_GetBlockSize+0x60>
  {
    SDMMC_BLOCK_SDV2_CSD_t temp_csd_v2 = {0U};
 8005b74:	f107 0320 	add.w	r3, r7, #32
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	3304      	adds	r3, #4
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	3304      	adds	r3, #4
    /* Get CSD function */
    status = SDMMC_BLOCK_SD_GetCsd(obj, (void *)&temp_csd_v2);
 8005b96:	f107 0320 	add.w	r3, r7, #32
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	f7ff ff49 	bl	8005a34 <SDMMC_BLOCK_SD_GetCsd>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *(uint32_t *)buf = (uint32_t)((uint32_t)temp_csd_v2.erase_sector_size + (uint32_t)1U);
 8005ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005baa:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	e020      	b.n	8005bfa <SDMMC_BLOCK_SD_GetBlockSize+0xa2>
  }
  /* SD standard capacity card (CSD V1) */
  else
  {
    SDMMC_BLOCK_SDV2_CSD_t temp_csd_v1  = {0U};
 8005bb8:	f107 030c 	add.w	r3, r7, #12
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	3304      	adds	r3, #4
    /* Get CSD function */
    status = SDMMC_BLOCK_SD_GetCsd(obj, (void *)&temp_csd_v1);
 8005bda:	f107 030c 	add.w	r3, r7, #12
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4619      	mov	r1, r3
 8005be2:	f7ff ff27 	bl	8005a34 <SDMMC_BLOCK_SD_GetCsd>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *(uint32_t *)buf = (uint32_t)((uint32_t)temp_csd_v1.erase_sector_size + (uint32_t)1U);
 8005bec:	8a3b      	ldrh	r3, [r7, #16]
 8005bee:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	601a      	str	r2, [r3, #0]
  }

  return status;
 8005bfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3738      	adds	r7, #56	; 0x38
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop

08005c08 <SDMMC_BLOCK_SD_GetSdStatus>:

/* Get SD status information */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_GetSdStatus(SDMMC_BLOCK_t *const obj, void *buf)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t arg = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
  uint32_t card_status = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]

  /* Select the card (CMD7) */
  status = SDMMC_BLOCK_SD_lSwitchToTransferState(obj);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff f83c 	bl	8004c9c <SDMMC_BLOCK_SD_lSwitchToTransferState>
 8005c24:	4603      	mov	r3, r0
 8005c26:	75fb      	strb	r3, [r7, #23]
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d130      	bne.n	8005c90 <SDMMC_BLOCK_SD_GetSdStatus+0x88>
  {
    /* Send CMD55 (application specific command) */
    arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint32_t)SDMMC_BLOCK_ARG_RCA_BITPOS);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]

    status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                         &(SDMMC_BLOCK_COMMON_COMMAND(55)),
 8005c3e:	2319      	movs	r3, #25
  if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
  {
    /* Send CMD55 (application specific command) */
    arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint32_t)SDMMC_BLOCK_ARG_RCA_BITPOS);

    status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	4a16      	ldr	r2, [pc, #88]	; (8005c9c <SDMMC_BLOCK_SD_GetSdStatus+0x94>)
 8005c44:	441a      	add	r2, r3
 8005c46:	f107 030c 	add.w	r3, r7, #12
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	4611      	mov	r1, r2
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	2301      	movs	r3, #1
 8005c54:	f7fe f85a 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	75fb      	strb	r3, [r7, #23]
                                         &(SDMMC_BLOCK_COMMON_COMMAND(55)),
                                         arg,
                                         XMC_SDMMC_RESPONSE_TYPE_R1,
                                         &card_status);

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d116      	bne.n	8005c90 <SDMMC_BLOCK_SD_GetSdStatus+0x88>
    {
      /* Set transfer mode */
      XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	f7fd fd26 	bl	80036bc <XMC_SDMMC_SetDataTransferDirection>

      /* Read the SD status from the data line */
      status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
                                                   &(SDMMC_BLOCK_SD_COMMAND(59)),
 8005c70:	231c      	movs	r3, #28
    {
      /* Set transfer mode */
      XMC_SDMMC_SetDataTransferDirection(obj->sdmmc_sd->sdmmc, XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST);

      /* Read the SD status from the data line */
      status = SDMMC_BLOCK_SD_lSingleBlockTransfer(obj,
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <SDMMC_BLOCK_SD_GetSdStatus+0x94>)
 8005c76:	441a      	add	r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4611      	mov	r1, r2
 8005c84:	2200      	movs	r2, #0
 8005c86:	2340      	movs	r3, #64	; 0x40
 8005c88:	f7fe fc40 	bl	800450c <SDMMC_BLOCK_SD_lSingleBlockTransfer>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	75fb      	strb	r3, [r7, #23]
                                                   (uint32_t *)buf,
                                                   SDMMC_BLOCK_SD_DATA_TRANSFER_READ_BUFFER);
    }
  }

  return status;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	0800fc68 	.word	0x0800fc68

08005ca0 <SDMMC_BLOCK_SD_EjectCard>:

/* Eject SD card */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_EjectCard(SDMMC_BLOCK_t *const obj)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
  uint32_t arg = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60bb      	str	r3, [r7, #8]

  if ((obj->card_state & (uint16_t)SDMMC_BLOCK_CARD_STATE_NO_CARD) == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	7a1b      	ldrb	r3, [r3, #8]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d120      	bne.n	8005cfe <SDMMC_BLOCK_SD_EjectCard+0x5e>
  {
    /* Send CMD15 to deactivate the card */
    arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint32_t)SDMMC_BLOCK_ARG_RCA_BITPOS);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8005cc4:	041b      	lsls	r3, r3, #16
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60bb      	str	r3, [r7, #8]

    status = SDMMC_BLOCK_SD_lSendCommand(obj,
                                         &(SDMMC_BLOCK_SD_COMMAND(15)),
 8005ccc:	230b      	movs	r3, #11
  if ((obj->card_state & (uint16_t)SDMMC_BLOCK_CARD_STATE_NO_CARD) == 0U)
  {
    /* Send CMD15 to deactivate the card */
    arg |= (uint32_t)((uint32_t)obj->sdmmc_sd->card_info.rca << (uint32_t)SDMMC_BLOCK_ARG_RCA_BITPOS);

    status = SDMMC_BLOCK_SD_lSendCommand(obj,
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4a0d      	ldr	r2, [pc, #52]	; (8005d08 <SDMMC_BLOCK_SD_EjectCard+0x68>)
 8005cd2:	441a      	add	r2, r3
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f7fe f814 	bl	8003d0c <SDMMC_BLOCK_SD_lSendCommand>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]
                                         &(SDMMC_BLOCK_SD_COMMAND(15)),
                                         (uint32_t)arg,
                                         (XMC_SDMMC_RESPONSE_TYPE_t)XMC_SDMMC_RESPONSE_TYPE_NO_RESPONSE,
                                         NULL);

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d107      	bne.n	8005cfe <SDMMC_BLOCK_SD_EjectCard+0x5e>
    {
      /* Card Cleanup */
      SDMMC_BLOCK_SD_lCardCleanUp(obj);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fd fd68 	bl	80037c4 <SDMMC_BLOCK_SD_lCardCleanUp>
      obj->sdmmc_sd->mode_init_flag = false;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    }
  }

  return status;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	0800fc68 	.word	0x0800fc68

08005d0c <SDMMC_BLOCK_SD_Start>:
/*
 * Initialize low level drivers, host controller, the card
 * and read card registers.
 */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_Start(SDMMC_BLOCK_t *const obj)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_HOST_CONTROLLER_INITIALIZED;
 8005d14:	232c      	movs	r3, #44	; 0x2c
 8005d16:	73fb      	strb	r3, [r7, #15]

  /* Check If host controller is already initialized */
  if (((uint32_t)obj->card_state & (uint32_t)SDMMC_BLOCK_CARD_STATE_HC_INITIALIZED) == (uint32_t)0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	7a1b      	ldrb	r3, [r3, #8]
 8005d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d11d      	bne.n	8005d60 <SDMMC_BLOCK_SD_Start+0x54>
  {
    /* Enable Interrupt */
    NVIC_SetPriority(SDMMC0_0_IRQn,
 8005d24:	f7fd faa8 	bl	8003278 <__NVIC_GetPriorityGrouping>
 8005d28:	4601      	mov	r1, r0
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                     obj->sdmmc_sd->int_priority,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]

  /* Check If host controller is already initialized */
  if (((uint32_t)obj->card_state & (uint32_t)SDMMC_BLOCK_CARD_STATE_HC_INITIALIZED) == (uint32_t)0U)
  {
    /* Enable Interrupt */
    NVIC_SetPriority(SDMMC0_0_IRQn,
 8005d2e:	68da      	ldr	r2, [r3, #12]
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                     obj->sdmmc_sd->int_priority,
                     obj->sdmmc_sd->int_sub_priority));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]

  /* Check If host controller is already initialized */
  if (((uint32_t)obj->card_state & (uint32_t)SDMMC_BLOCK_CARD_STATE_HC_INITIALIZED) == (uint32_t)0U)
  {
    /* Enable Interrupt */
    NVIC_SetPriority(SDMMC0_0_IRQn,
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	4608      	mov	r0, r1
 8005d38:	4611      	mov	r1, r2
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f7fd fb0e 	bl	800335c <NVIC_EncodePriority>
 8005d40:	4603      	mov	r3, r0
 8005d42:	206a      	movs	r0, #106	; 0x6a
 8005d44:	4619      	mov	r1, r3
 8005d46:	f7fd fadf 	bl	8003308 <__NVIC_SetPriority>
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                     obj->sdmmc_sd->int_priority,
                     obj->sdmmc_sd->int_sub_priority));

    NVIC_ClearPendingIRQ(SDMMC0_0_IRQn);
 8005d4a:	206a      	movs	r0, #106	; 0x6a
 8005d4c:	f7fd fabe 	bl	80032cc <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ(SDMMC0_0_IRQn);
 8005d50:	206a      	movs	r0, #106	; 0x6a
 8005d52:	f7fd fa9f 	bl	8003294 <__NVIC_EnableIRQ>

    /* Host controller initialize */
    status = SDMMC_BLOCK_SD_lHostControllerInit(obj);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fa8c 	bl	8005274 <SDMMC_BLOCK_SD_lHostControllerInit>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop

08005d6c <SDMMC_BLOCK_SD_Init>:

/* De-assert the SDMMC peripheral */
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SD_Init(SDMMC_BLOCK_t *const obj)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Enable SDMMC peripheral */
  XMC_SDMMC_Enable(obj->sdmmc_sd->sdmmc);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fb ff08 	bl	8001b90 <XMC_SDMMC_Enable>

  /* Initialize System timer APP */
  (void)SYSTIMER_Init(obj->sdmmc_sd->systimer);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fc fc6c 	bl	8002664 <SYSTIMER_Init>

  /* Enable SCU clock for SDMMC */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_MMC);
 8005d8c:	2002      	movs	r0, #2
 8005d8e:	f7fa fe17 	bl	80009c0 <XMC_SCU_CLOCK_EnableClock>

  /* De-initialize host controller */
  (void)SDMMC_BLOCK_SD_lHostControllerDeInit(obj);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fad2 	bl	800533c <SDMMC_BLOCK_SD_lHostControllerDeInit>

  /* Initialize LLD and host controller */
  return SDMMC_BLOCK_SD_Start(obj);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ffb7 	bl	8005d0c <SDMMC_BLOCK_SD_Start>
 8005d9e:	4603      	mov	r3, r0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <SDMMC_BLOCK_SD_ReadBlock>:
/* Reads the data from the card */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_SD_ReadBlock(SDMMC_BLOCK_t *const obj,
                                              uint8_t *read_buf,
                                              uint32_t sector_num,
                                              uint8_t sector_count)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	70fb      	strb	r3, [r7, #3]
  SDMMC_BLOCK_MODE_STATUS_t status;
  uint8_t disk_status;
  SDMMC_BLOCK_STATUS_t res;

  /* Check the status before reading data */
  disk_status = obj->card_state;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	7a1b      	ldrb	r3, [r3, #8]
 8005dba:	757b      	strb	r3, [r7, #21]

  if ((disk_status & (uint8_t)SDMMC_BLOCK_CARD_STATE_NOT_INITIALIZED) != (uint8_t)0U)
 8005dbc:	7d7b      	ldrb	r3, [r7, #21]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <SDMMC_BLOCK_SD_ReadBlock+0x24>
  {
    res = SDMMC_BLOCK_STATUS_NOTRDY;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	75bb      	strb	r3, [r7, #22]
 8005dca:	e028      	b.n	8005e1e <SDMMC_BLOCK_SD_ReadBlock+0x76>
  }
  else if ((disk_status & (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED) != (uint8_t)0U)
 8005dcc:	7d7b      	ldrb	r3, [r7, #21]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <SDMMC_BLOCK_SD_ReadBlock+0x34>
  {
    res = SDMMC_BLOCK_STATUS_LOCKED;
 8005dd6:	2305      	movs	r3, #5
 8005dd8:	75bb      	strb	r3, [r7, #22]
 8005dda:	e020      	b.n	8005e1e <SDMMC_BLOCK_SD_ReadBlock+0x76>
  }
  else
  {
    /* Check for single block read or multiple block read based on sector count */
    if (sector_count == (uint8_t)1U)
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d107      	bne.n	8005df2 <SDMMC_BLOCK_SD_ReadBlock+0x4a>
    {
      status = SDMMC_BLOCK_SD_lCardReadSingleBlock(obj, (uint32_t *)read_buf, sector_num);
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	f7ff fb08 	bl	80053fc <SDMMC_BLOCK_SD_lCardReadSingleBlock>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]
 8005df0:	e007      	b.n	8005e02 <SDMMC_BLOCK_SD_ReadBlock+0x5a>
    }
    else
    {
      status = SDMMC_BLOCK_SD_lCardReadMultipleBlocks(obj, (uint32_t *)read_buf, sector_num, (uint32_t)sector_count);
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	f7ff fab9 	bl	8005370 <SDMMC_BLOCK_SD_lCardReadMultipleBlocks>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	75fb      	strb	r3, [r7, #23]
    }

    if (status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <SDMMC_BLOCK_SD_ReadBlock+0x66>
    {
      res = SDMMC_BLOCK_STATUS_SUCCESS;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	75bb      	strb	r3, [r7, #22]
 8005e0c:	e007      	b.n	8005e1e <SDMMC_BLOCK_SD_ReadBlock+0x76>
    }
    else if (status == SDMMC_BLOCK_MODE_STATUS_SECTOR_OUT_OF_BOUND)
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	2b33      	cmp	r3, #51	; 0x33
 8005e12:	d102      	bne.n	8005e1a <SDMMC_BLOCK_SD_ReadBlock+0x72>
    {
      res = SDMMC_BLOCK_STATUS_PARERR;
 8005e14:	2304      	movs	r3, #4
 8005e16:	75bb      	strb	r3, [r7, #22]
 8005e18:	e001      	b.n	8005e1e <SDMMC_BLOCK_SD_ReadBlock+0x76>
    }
    else
    {
      res = SDMMC_BLOCK_STATUS_FAILURE;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /* Wait for until the command OR data lines aren't busy */
  while ((XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc)) || (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc)))
 8005e1e:	bf00      	nop
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fd fbb6 	bl	8003598 <XMC_SDMMC_IsDataLineBusy>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f6      	bne.n	8005e20 <SDMMC_BLOCK_SD_ReadBlock+0x78>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fd fb99 	bl	8003570 <XMC_SDMMC_IsCommandLineBusy>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1ed      	bne.n	8005e20 <SDMMC_BLOCK_SD_ReadBlock+0x78>
  {
  }

  return res;
 8005e44:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop

08005e50 <SDMMC_BLOCK_SD_WriteBlock>:
/* Writes the data on the card */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_SD_WriteBlock(SDMMC_BLOCK_t *const obj,
                                               const uint8_t *write_buf,
                                               uint32_t sector_num,
                                               uint8_t sector_count)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	70fb      	strb	r3, [r7, #3]
  SDMMC_BLOCK_MODE_STATUS_t status;
  uint8_t disk_status;
  SDMMC_BLOCK_STATUS_t res;

  /* Get card state */
  disk_status = obj->card_state;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	7a1b      	ldrb	r3, [r3, #8]
 8005e62:	757b      	strb	r3, [r7, #21]

  /* If the card is not initialized */
  if ((disk_status & (uint8_t)SDMMC_BLOCK_CARD_STATE_NOT_INITIALIZED) != (uint8_t)0U)
 8005e64:	7d7b      	ldrb	r3, [r7, #21]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <SDMMC_BLOCK_SD_WriteBlock+0x24>
  {
    res = SDMMC_BLOCK_STATUS_NOTRDY;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	75bb      	strb	r3, [r7, #22]
 8005e72:	e033      	b.n	8005edc <SDMMC_BLOCK_SD_WriteBlock+0x8c>
  }
  else if ((disk_status & (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED) != (uint8_t)0U)
 8005e74:	7d7b      	ldrb	r3, [r7, #21]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <SDMMC_BLOCK_SD_WriteBlock+0x34>
  {
    res = SDMMC_BLOCK_STATUS_LOCKED;
 8005e7e:	2305      	movs	r3, #5
 8005e80:	75bb      	strb	r3, [r7, #22]
 8005e82:	e02b      	b.n	8005edc <SDMMC_BLOCK_SD_WriteBlock+0x8c>
  }
  /* If the card is read only or write protected */
  else if ((disk_status & (uint8_t)SDMMC_BLOCK_CARD_STATE_WRITE_PROTECTED) != (uint8_t)0U)
 8005e84:	7d7b      	ldrb	r3, [r7, #21]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <SDMMC_BLOCK_SD_WriteBlock+0x44>
  {
    res = SDMMC_BLOCK_STATUS_WRPRT;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	75bb      	strb	r3, [r7, #22]
 8005e92:	e023      	b.n	8005edc <SDMMC_BLOCK_SD_WriteBlock+0x8c>
  }
#endif /* SDMMC_BLOCK_CARD_WRITE_PROTECT_SIGNAL */
  else
  {
    /* Check for single block write or multiple block write */
    if (sector_count == (uint8_t)1U)
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d107      	bne.n	8005eaa <SDMMC_BLOCK_SD_WriteBlock+0x5a>
    {
      status = SDMMC_BLOCK_SD_lCardWriteSingleBlock(obj, (const uint32_t *)write_buf, sector_num);
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	f7ff fb34 	bl	800550c <SDMMC_BLOCK_SD_lCardWriteSingleBlock>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	75fb      	strb	r3, [r7, #23]
 8005ea8:	e007      	b.n	8005eba <SDMMC_BLOCK_SD_WriteBlock+0x6a>
    }
    else
    {
      status = SDMMC_BLOCK_SD_lCardWriteMultipleBlocks(obj,
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	f7ff fae5 	bl	8005480 <SDMMC_BLOCK_SD_lCardWriteMultipleBlocks>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	75fb      	strb	r3, [r7, #23]
                                                       (const uint32_t *)write_buf,
                                                       sector_num,
                                                       (uint32_t)sector_count);
    }

    if ((status == SDMMC_BLOCK_MODE_STATUS_SUCCESS) || (status == SDMMC_BLOCK_MODE_STATUS_BUFFER_READY))
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <SDMMC_BLOCK_SD_WriteBlock+0x76>
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	2b1e      	cmp	r3, #30
 8005ec4:	d102      	bne.n	8005ecc <SDMMC_BLOCK_SD_WriteBlock+0x7c>
    {
      res = SDMMC_BLOCK_STATUS_SUCCESS;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75bb      	strb	r3, [r7, #22]
 8005eca:	e007      	b.n	8005edc <SDMMC_BLOCK_SD_WriteBlock+0x8c>
    }
    else if (status == SDMMC_BLOCK_MODE_STATUS_SECTOR_OUT_OF_BOUND)
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	2b33      	cmp	r3, #51	; 0x33
 8005ed0:	d102      	bne.n	8005ed8 <SDMMC_BLOCK_SD_WriteBlock+0x88>
    {
      res = SDMMC_BLOCK_STATUS_PARERR;
 8005ed2:	2304      	movs	r3, #4
 8005ed4:	75bb      	strb	r3, [r7, #22]
 8005ed6:	e001      	b.n	8005edc <SDMMC_BLOCK_SD_WriteBlock+0x8c>
    }
    else
    {
      res = SDMMC_BLOCK_STATUS_FAILURE;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /* Wait for until the command OR data lines aren't busy */
  while ((XMC_SDMMC_IsDataLineBusy(obj->sdmmc_sd->sdmmc)) || (XMC_SDMMC_IsCommandLineBusy(obj->sdmmc_sd->sdmmc)))
 8005edc:	bf00      	nop
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fd fb57 	bl	8003598 <XMC_SDMMC_IsDataLineBusy>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1f6      	bne.n	8005ede <SDMMC_BLOCK_SD_WriteBlock+0x8e>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fd fb3a 	bl	8003570 <XMC_SDMMC_IsCommandLineBusy>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1ed      	bne.n	8005ede <SDMMC_BLOCK_SD_WriteBlock+0x8e>
  {
  }

  return res;
 8005f02:	7dbb      	ldrb	r3, [r7, #22]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 8005f10:	f7fb fdda 	bl	8001ac8 <XMC_RTC_Start>
}
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop

08005f18 <RTC_Init>:
/*
  Initialization function for the APP. Configures the registers
  based on options selected in UI.
*/
RTC_STATUS_t RTC_Init(RTC_t *const handler)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t rtc_initstatus;
  bool interrupt_configured;

  XMC_ASSERT("RTC_Init: NULL Handler", handler != NULL);

  status = XMC_RTC_STATUS_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	73fb      	strb	r3, [r7, #15]
  rtc_initstatus = RTC_STATUS_FAILURE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	73bb      	strb	r3, [r7, #14]
  rtc_initstatus = (RTC_STATUS_t)GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_HANDLE);
#endif
  if (rtc_initstatus == RTC_STATUS_SUCCESS)
  {
#endif
      if (handler->initialized == false)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	7a1b      	ldrb	r3, [r3, #8]
 8005f2c:	f083 0301 	eor.w	r3, r3, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d029      	beq.n	8005f8a <RTC_Init+0x72>
      {
        /* Initialize the clock source and pre-scalar */
        status = XMC_RTC_Init(handler->time_alarm_config);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fa faf8 	bl	8000530 <XMC_RTC_Init>
 8005f40:	4603      	mov	r3, r0
 8005f42:	73fb      	strb	r3, [r7, #15]

        if (status == XMC_RTC_STATUS_OK)
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d11c      	bne.n	8005f84 <RTC_Init+0x6c>
        {
          /* Configure periodic, alarm and hibernate periodic interrupts */
          interrupt_configured = RTC_lConfigureInterrupts(handler);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f824 	bl	8005f98 <RTC_lConfigureInterrupts>
 8005f50:	4603      	mov	r3, r0
 8005f52:	737b      	strb	r3, [r7, #13]

          if (interrupt_configured == true)
 8005f54:	7b7b      	ldrb	r3, [r7, #13]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <RTC_Init+0x4c>
          {
            status = RTC_lRegister_Callbacks(handler);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f858 	bl	8006010 <RTC_lRegister_Callbacks>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]
          }

          if (status == XMC_RTC_STATUS_OK)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d111      	bne.n	8005f8e <RTC_Init+0x76>
          {
          	/* Check RTC start during init is set or not in UI */
            if (handler->config->start == RTC_START_ENABLE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <RTC_Init+0x60>
            {
              RTC_Start();
 8005f74:	f7ff ffca 	bl	8005f0c <RTC_Start>
            }
            handler->initialized = true;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	721a      	strb	r2, [r3, #8]
            rtc_initstatus = RTC_STATUS_SUCCESS;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	73bb      	strb	r3, [r7, #14]
 8005f82:	e004      	b.n	8005f8e <RTC_Init+0x76>
          }
        }
        else
        {
          rtc_initstatus = RTC_STATUS_FAILURE;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73bb      	strb	r3, [r7, #14]
 8005f88:	e001      	b.n	8005f8e <RTC_Init+0x76>
        }
      }
      else
      {
        rtc_initstatus = RTC_STATUS_SUCCESS;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73bb      	strb	r3, [r7, #14]
      }
#if (RTC_INTERRUPT_ENABLED == 1)
   } /* end of if(rtc_initstatus == GLOBAL_SCU_XMC4_STATUS_OK) */
#endif

  return (rtc_initstatus);
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <RTC_lConfigureInterrupts>:
/*
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  bool interrupt_configured = false;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73fb      	strb	r3, [r7, #15]

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	461a      	mov	r2, r3
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	789b      	ldrb	r3, [r3, #2]
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	78db      	ldrb	r3, [r3, #3]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_day_intr << RTC_MSKSR_MPDA_Pos)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	791b      	ldrb	r3, [r3, #4]
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	795b      	ldrb	r3, [r3, #5]
 8005fd0:	015b      	lsls	r3, r3, #5
 8005fd2:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	799b      	ldrb	r3, [r3, #6]
 8005fda:	019b      	lsls	r3, r3, #6
{
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60bb      	str	r3, [r7, #8]
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));

  /* Enable RTC periodic interrupt in SCU when any of the periodic interrupts
   * are enabled */
  if (regval != 0U)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d004      	beq.n	8005ff0 <RTC_lConfigureInterrupts+0x58>
  {
    XMC_RTC_EnableEvent(regval);
 8005fe6:	68b8      	ldr	r0, [r7, #8]
 8005fe8:	f7fa faf4 	bl	80005d4 <XMC_RTC_EnableEvent>
		XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_NMIREQ_RTC_PI);
#endif
#if ((UC_FAMILY == XMC4) && (RTC_TIMER_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC);
#endif
    interrupt_configured = true;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	79db      	ldrb	r3, [r3, #7]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d105      	bne.n	8006006 <RTC_lConfigureInterrupts+0x6e>
	{
		XMC_RTC_EnableEvent((uint32_t)XMC_RTC_EVENT_ALARM);
 8005ffa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ffe:	f7fa fae9 	bl	80005d4 <XMC_RTC_EnableEvent>
#endif
#if ((UC_FAMILY == XMC4) && (RTC_ALARM_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM);
#endif

		interrupt_configured = true;
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]
	}


  return (interrupt_configured);
 8006006:	7bfb      	ldrb	r3, [r7, #15]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <RTC_lRegister_Callbacks>:

/*
 *  Interface to register the RTC call backs
 */
XMC_RTC_STATUS_t RTC_lRegister_Callbacks(const RTC_t *const handler)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  XMC_RTC_STATUS_t pi_status;
  XMC_RTC_STATUS_t ai_status;

  pi_status = XMC_RTC_STATUS_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
  ai_status = XMC_RTC_STATUS_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	73bb      	strb	r3, [r7, #14]
                                                                     handler->config->ai_listener);
    }
  #endif
#endif

  return (XMC_RTC_STATUS_t)((uint32_t)pi_status & (uint32_t)ai_status);
 8006020:	7bfa      	ldrb	r2, [r7, #15]
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	4013      	ands	r3, r2
 8006026:	b2db      	uxtb	r3, r3
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <RTC_GetTime>:
}
/*
 *  This function is used to get RTC time.
 */
void RTC_GetTime(XMC_RTC_TIME_t *current_time)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("RTC_GetTime: NULL pointer", current_time != NULL);

  XMC_RTC_GetTime(current_time);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7fb fd93 	bl	8001b68 <XMC_RTC_GetTime>

  current_time->days = current_time->days + 1U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	78db      	ldrb	r3, [r3, #3]
 8006046:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800604a:	b2db      	uxtb	r3, r3
 800604c:	3301      	adds	r3, #1
 800604e:	b2db      	uxtb	r3, r3
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	b2d9      	uxtb	r1, r3
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	78d3      	ldrb	r3, [r2, #3]
 800605a:	f361 0304 	bfi	r3, r1, #0, #5
 800605e:	70d3      	strb	r3, [r2, #3]
  current_time->month = current_time->month + 1U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	795b      	ldrb	r3, [r3, #5]
 8006064:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006068:	b2db      	uxtb	r3, r3
 800606a:	3301      	adds	r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	b2d9      	uxtb	r1, r3
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	7953      	ldrb	r3, [r2, #5]
 8006078:	f361 0303 	bfi	r3, r1, #0, #4
 800607c:	7153      	strb	r3, [r2, #5]
}
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006088:	4b04      	ldr	r3, [pc, #16]	; (800609c <__NVIC_GetPriorityGrouping+0x18>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006090:	0a1b      	lsrs	r3, r3, #8
}
 8006092:	4618      	mov	r0, r3
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	e000ed00 	.word	0xe000ed00

080060a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	db0b      	blt.n	80060ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060b2:	4908      	ldr	r1, [pc, #32]	; (80060d4 <__NVIC_EnableIRQ+0x34>)
 80060b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	79fa      	ldrb	r2, [r7, #7]
 80060bc:	f002 021f 	and.w	r2, r2, #31
 80060c0:	2001      	movs	r0, #1
 80060c2:	fa00 f202 	lsl.w	r2, r0, r2
 80060c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	e000e100 	.word	0xe000e100

080060d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	6039      	str	r1, [r7, #0]
 80060e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	db0a      	blt.n	8006102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ec:	490d      	ldr	r1, [pc, #52]	; (8006124 <__NVIC_SetPriority+0x4c>)
 80060ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	0092      	lsls	r2, r2, #2
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	440b      	add	r3, r1
 80060fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8006100:	e00a      	b.n	8006118 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006102:	4909      	ldr	r1, [pc, #36]	; (8006128 <__NVIC_SetPriority+0x50>)
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	3b04      	subs	r3, #4
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	0092      	lsls	r2, r2, #2
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	440b      	add	r3, r1
 8006116:	761a      	strb	r2, [r3, #24]
  }
}
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	e000e100 	.word	0xe000e100
 8006128:	e000ed00 	.word	0xe000ed00

0800612c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800612c:	b480      	push	{r7}
 800612e:	b089      	sub	sp, #36	; 0x24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f1c3 0307 	rsb	r3, r3, #7
 8006146:	2b06      	cmp	r3, #6
 8006148:	bf28      	it	cs
 800614a:	2306      	movcs	r3, #6
 800614c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3306      	adds	r3, #6
 8006152:	2b06      	cmp	r3, #6
 8006154:	d902      	bls.n	800615c <NVIC_EncodePriority+0x30>
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	3b01      	subs	r3, #1
 800615a:	e000      	b.n	800615e <NVIC_EncodePriority+0x32>
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2201      	movs	r2, #1
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	401a      	ands	r2, r3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2101      	movs	r1, #1
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	1e59      	subs	r1, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8006180:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8006182:	4618      	mov	r0, r3
 8006184:	3724      	adds	r7, #36	; 0x24
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop

08006190 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	b25b      	sxtb	r3, r3
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff ff7e 	bl	80060a0 <__NVIC_EnableIRQ>
}
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop

080061ac <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80061ac:	b590      	push	{r4, r7, lr}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	781c      	ldrb	r4, [r3, #0]
 80061b8:	f7ff ff64 	bl	8006084 <__NVIC_GetPriorityGrouping>
 80061bc:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80061c2:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	461a      	mov	r2, r3
 80061ce:	f7ff ffad 	bl	800612c <NVIC_EncodePriority>
 80061d2:	4602      	mov	r2, r0
 80061d4:	b263      	sxtb	r3, r4
 80061d6:	4618      	mov	r0, r3
 80061d8:	4611      	mov	r1, r2
 80061da:	f7ff ff7d 	bl	80060d8 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	78db      	ldrb	r3, [r3, #3]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff ffd2 	bl	8006190 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd90      	pop	{r4, r7, pc}
 80061f6:	bf00      	nop

080061f8 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800620a:	2b00      	cmp	r3, #0
 800620c:	bf14      	ite	ne
 800620e:	2301      	movne	r3, #1
 8006210:	2300      	moveq	r3, #0
 8006212:	b2db      	uxtb	r3, r3
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800622e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006232:	2b00      	cmp	r3, #0
 8006234:	bf14      	ite	ne
 8006236:	2301      	movne	r3, #1
 8006238:	2300      	moveq	r3, #0
 800623a:	b2db      	uxtb	r3, r3
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL))
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff ffb3 	bl	80061f8 <XMC_USIC_CH_TXFIFO_IsFull>
 8006292:	4603      	mov	r3, r0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	4610      	mov	r0, r2
 80062b0:	4619      	mov	r1, r3
 80062b2:	f7fb fbd7 	bl	8001a64 <XMC_I2C_CH_MasterTransmit>
}
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4618      	mov	r0, r3
 80062ca:	2110      	movs	r1, #16
 80062cc:	f7ff ffc8 	bl	8006260 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fb fb9f 	bl	8001a18 <XMC_I2C_CH_MasterStop>
}
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	4613      	mov	r3, r2
 80062ec:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	2104      	movs	r1, #4
 80062f6:	f7ff ffb3 	bl	8006260 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6819      	ldr	r1, [r3, #0]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	b29a      	uxth	r2, r3
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	4608      	mov	r0, r1
 8006306:	4611      	mov	r1, r2
 8006308:	461a      	mov	r2, r3
 800630a:	f7fb fb1d 	bl	8001948 <XMC_I2C_CH_MasterStart>
}
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	4613      	mov	r3, r2
 8006320:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	2108      	movs	r1, #8
 800632a:	f7ff ff99 	bl	8006260 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6819      	ldr	r1, [r3, #0]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	b29a      	uxth	r2, r3
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	461a      	mov	r2, r3
 800633e:	f7fb fb37 	bl	80019b0 <XMC_I2C_CH_MasterRepeatedStart>
}
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d006      	beq.n	8006364 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
 8006362:	e001      	b.n	8006368 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop

08006374 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff ff60 	bl	8006248 <XMC_I2C_CH_GetStatusFlag>
 8006388:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	4013      	ands	r3, r2
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	f7ff ff59 	bl	8006260 <XMC_I2C_CH_ClearStatusFlag>
}
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	460b      	mov	r3, r1
 80063c2:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 80063c4:	2302      	movs	r3, #2
 80063c6:	75fb      	strb	r3, [r7, #23]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d013      	beq.n	80063fc <I2C_MASTER_Transmit+0x48>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
#endif
  }
  else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d00d      	beq.n	80063fc <I2C_MASTER_Transmit+0x48>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 80063e0:	7afa      	ldrb	r2, [r7, #11]
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	4611      	mov	r1, r2
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f000 f832 	bl	800645c <I2C_MASTER_lStartTransmitPolling>
 80063f8:	4603      	mov	r3, r0
 80063fa:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
} /* end of function */
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop

08006408 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	71fb      	strb	r3, [r7, #7]
  if (handle->runtime->bus_acquired == true)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d009      	beq.n	8006438 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x30>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	b29b      	uxth	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	4611      	mov	r1, r2
 8006430:	461a      	mov	r2, r3
 8006432:	f7ff ff6f 	bl	8006314 <I2C_MASTER_SendRepeatedStart>
 8006436:	e00d      	b.n	8006454 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x4c>
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	b29b      	uxth	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	4611      	mov	r1, r2
 800644e:	461a      	mov	r2, r3
 8006450:	f7ff ff46 	bl	80062e0 <I2C_MASTER_SendStart>
  }
}
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop

0800645c <I2C_MASTER_lStartTransmitPolling>:

#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_start,
                                                        const uint32_t slave_address, uint8_t *data,uint32_t size,
                              bool send_stop)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	460b      	mov	r3, r1
 800646a:	72fb      	strb	r3, [r7, #11]
  uint32_t buffer_index;
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 800646c:	2302      	movs	r3, #2
 800646e:	74fb      	strb	r3, [r7, #19]

  buffer_index = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]

  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U)))
 8006474:	7afb      	ldrb	r3, [r7, #11]
 8006476:	f083 0301 	eor.w	r3, r3, #1
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <I2C_MASTER_lStartTransmitPolling+0x38>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006488:	b2db      	uxtb	r3, r3
 800648a:	f083 0301 	eor.w	r3, r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <I2C_MASTER_lStartTransmitPolling+0x44>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <I2C_MASTER_lStartTransmitPolling+0x44>
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d102      	bne.n	80064a6 <I2C_MASTER_lStartTransmitPolling+0x4a>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80064a0:	2301      	movs	r3, #1
 80064a2:	74fb      	strb	r3, [r7, #19]
 80064a4:	e07e      	b.n	80065a4 <I2C_MASTER_lStartTransmitPolling+0x148>
  }
  else
  {
    if (send_start == true)
 80064a6:	7afb      	ldrb	r3, [r7, #11]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01c      	beq.n	80064e6 <I2C_MASTER_lStartTransmitPolling+0x8a>
    {
      if (handle->runtime->bus_acquired == false)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f083 0301 	eor.w	r3, r3, #1
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d012      	beq.n	80064e6 <I2C_MASTER_lStartTransmitPolling+0x8a>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_WRITE);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f7ff ff9f 	bl	8006408 <I2C_MASTER_lSendStart_Or_RepeatedStart>
    while (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 80064ca:	bf00      	nop
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064d2:	f7ff ff4f 	bl	8006374 <I2C_MASTER_GetFlagStatus>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f7      	beq.n	80064cc <I2C_MASTER_lStartTransmitPolling+0x70>
    {
      /* wait for ACK */
    }
    I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064e2:	f7ff ff59 	bl	8006398 <I2C_MASTER_ClearFlag>
    }
    }

  if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d11e      	bne.n	8006530 <I2C_MASTER_lStartTransmitPolling+0xd4>
  {
    /* send data, byte by byte */
    while (buffer_index < size)
 80064f2:	e018      	b.n	8006526 <I2C_MASTER_lStartTransmitPolling+0xca>
    {
    I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	4413      	add	r3, r2
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	4619      	mov	r1, r3
 8006500:	f7ff fecc 	bl	800629c <I2C_MASTER_TransmitByte>
    while (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 8006504:	bf00      	nop
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800650c:	f7ff ff32 	bl	8006374 <I2C_MASTER_GetFlagStatus>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f7      	beq.n	8006506 <I2C_MASTER_lStartTransmitPolling+0xaa>
    {
      /* wait for ACK */
    }
    I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800651c:	f7ff ff3c 	bl	8006398 <I2C_MASTER_ClearFlag>

    buffer_index++;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	3301      	adds	r3, #1
 8006524:	617b      	str	r3, [r7, #20]
    }

  if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
  {
    /* send data, byte by byte */
    while (buffer_index < size)
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	429a      	cmp	r2, r3
 800652c:	d3e2      	bcc.n	80064f4 <I2C_MASTER_lStartTransmitPolling+0x98>
 800652e:	e02b      	b.n	8006588 <I2C_MASTER_lStartTransmitPolling+0x12c>
    buffer_index++;
      }
  }
  else
  {
    while (buffer_index < size)
 8006530:	e01a      	b.n	8006568 <I2C_MASTER_lStartTransmitPolling+0x10c>
    {
    /* Fill the transmit FIFO */
    while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8006532:	e010      	b.n	8006556 <I2C_MASTER_lStartTransmitPolling+0xfa>
    {
      /* transmit each byte till index reaches to the last byte */
      if (buffer_index < size)
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	429a      	cmp	r2, r3
 800653a:	d20b      	bcs.n	8006554 <I2C_MASTER_lStartTransmitPolling+0xf8>
      {
        /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
      I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	4619      	mov	r1, r3
 8006548:	f7ff fea8 	bl	800629c <I2C_MASTER_TransmitByte>
      buffer_index++;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	3301      	adds	r3, #1
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e000      	b.n	8006556 <I2C_MASTER_lStartTransmitPolling+0xfa>
      }
      else
      {
        break;
 8006554:	e008      	b.n	8006568 <I2C_MASTER_lStartTransmitPolling+0x10c>
  else
  {
    while (buffer_index < size)
    {
    /* Fill the transmit FIFO */
    while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff fe92 	bl	8006280 <I2C_MASTER_IsTXFIFOFull>
 800655c:	4603      	mov	r3, r0
 800655e:	f083 0301 	eor.w	r3, r3, #1
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e5      	bne.n	8006534 <I2C_MASTER_lStartTransmitPolling+0xd8>
    buffer_index++;
      }
  }
  else
  {
    while (buffer_index < size)
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	429a      	cmp	r2, r3
 800656e:	d3e0      	bcc.n	8006532 <I2C_MASTER_lStartTransmitPolling+0xd6>
        break;
      }
    }
    }
    /*make sure data is transmitted from FIFO*/
    while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8006570:	bf00      	nop
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fe52 	bl	8006220 <XMC_USIC_CH_TXFIFO_IsEmpty>
 800657c:	4603      	mov	r3, r0
 800657e:	f083 0301 	eor.w	r3, r3, #1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f4      	bne.n	8006572 <I2C_MASTER_lStartTransmitPolling+0x116>
  }

  if(send_stop == true)
 8006588:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <I2C_MASTER_lStartTransmitPolling+0x144>
  {
    handle->runtime->bus_acquired = false;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStop(handle);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fe8e 	bl	80062bc <I2C_MASTER_SendStop>
  }

  status = I2C_MASTER_STATUS_SUCCESS;
 80065a0:	2300      	movs	r3, #0
 80065a2:	74fb      	strb	r3, [r7, #19]
  }

  return (status);
 80065a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop

080065b0 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
 80065bc:	4613      	mov	r3, r2
 80065be:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80065c0:	78f8      	ldrb	r0, [r7, #3]
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	3306      	adds	r3, #6
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80065d2:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80065d4:	431a      	orrs	r2, r3
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	1d83      	adds	r3, r0, #6
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop

080065ec <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	f023 020f 	bic.w	r2, r3, #15
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop

08006614 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	2104      	movs	r1, #4
 8006620:	f7ff ffe4 	bl	80065ec <XMC_USIC_CH_SetMode>
}
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop

0800662c <I2C_LCD_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_LCD_disable_io(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8006630:	4805      	ldr	r0, [pc, #20]	; (8006648 <I2C_LCD_disable_io+0x1c>)
 8006632:	2105      	movs	r1, #5
 8006634:	2200      	movs	r2, #0
 8006636:	f7fb f881 	bl	800173c <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, XMC_GPIO_MODE_INPUT_TRISTATE);
 800663a:	4803      	ldr	r0, [pc, #12]	; (8006648 <I2C_LCD_disable_io+0x1c>)
 800663c:	210b      	movs	r1, #11
 800663e:	2200      	movs	r2, #0
 8006640:	f7fb f87c 	bl	800173c <XMC_GPIO_SetMode>
}
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	48028000 	.word	0x48028000

0800664c <I2C_LCD_enable_io>:

static void I2C_LCD_enable_io(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, I2C_LCD_sda_pin_config.mode);
 8006650:	23d0      	movs	r3, #208	; 0xd0
 8006652:	4806      	ldr	r0, [pc, #24]	; (800666c <I2C_LCD_enable_io+0x20>)
 8006654:	2105      	movs	r1, #5
 8006656:	461a      	mov	r2, r3
 8006658:	f7fb f870 	bl	800173c <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, I2C_LCD_scl_pin_config.mode);
 800665c:	23d0      	movs	r3, #208	; 0xd0
 800665e:	4803      	ldr	r0, [pc, #12]	; (800666c <I2C_LCD_enable_io+0x20>)
 8006660:	210b      	movs	r1, #11
 8006662:	461a      	mov	r2, r3
 8006664:	f7fb f86a 	bl	800173c <XMC_GPIO_SetMode>
}
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	48028000 	.word	0x48028000

08006670 <I2C_LCD_init>:
  .config = &I2C_LCD_config,
  .runtime = &I2C_LCD_runtime,
};

void I2C_LCD_init(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C1_CH0, &I2C_LCD_channel_config);
 8006674:	480d      	ldr	r0, [pc, #52]	; (80066ac <I2C_LCD_init+0x3c>)
 8006676:	490e      	ldr	r1, [pc, #56]	; (80066b0 <I2C_LCD_init+0x40>)
 8006678:	f7fb f8e2 	bl	8001840 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX0, 1);
 800667c:	480b      	ldr	r0, [pc, #44]	; (80066ac <I2C_LCD_init+0x3c>)
 800667e:	2100      	movs	r1, #0
 8006680:	2201      	movs	r2, #1
 8006682:	f7ff ff95 	bl	80065b0 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH0, XMC_USIC_CH_INPUT_DX1, 0);
 8006686:	4809      	ldr	r0, [pc, #36]	; (80066ac <I2C_LCD_init+0x3c>)
 8006688:	2101      	movs	r1, #1
 800668a:	2200      	movs	r2, #0
 800668c:	f7ff ff90 	bl	80065b0 <XMC_USIC_CH_SetInputSource>

  XMC_I2C_CH_Start(XMC_I2C1_CH0);
 8006690:	4806      	ldr	r0, [pc, #24]	; (80066ac <I2C_LCD_init+0x3c>)
 8006692:	f7ff ffbf 	bl	8006614 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, &I2C_LCD_sda_pin_config);
 8006696:	4807      	ldr	r0, [pc, #28]	; (80066b4 <I2C_LCD_init+0x44>)
 8006698:	2105      	movs	r1, #5
 800669a:	4a07      	ldr	r2, [pc, #28]	; (80066b8 <I2C_LCD_init+0x48>)
 800669c:	f7f9 fe84 	bl	80003a8 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, &I2C_LCD_scl_pin_config);
 80066a0:	4804      	ldr	r0, [pc, #16]	; (80066b4 <I2C_LCD_init+0x44>)
 80066a2:	210b      	movs	r1, #11
 80066a4:	4a05      	ldr	r2, [pc, #20]	; (80066bc <I2C_LCD_init+0x4c>)
 80066a6:	f7f9 fe7f 	bl	80003a8 <XMC_GPIO_Init>
}
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	48020000 	.word	0x48020000
 80066b0:	0800fd20 	.word	0x0800fd20
 80066b4:	48028000 	.word	0x48028000
 80066b8:	0800fd08 	.word	0x0800fd08
 80066bc:	0800fd14 	.word	0x0800fd14

080066c0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]
}
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop

080066e0 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7b5b      	ldrb	r3, [r3, #13]
 80066ec:	f083 0301 	eor.w	r3, r3, #1
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00f      	beq.n	8006716 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7b1b      	ldrb	r3, [r3, #12]
 80066fe:	4610      	mov	r0, r2
 8006700:	4619      	mov	r1, r3
 8006702:	f7fa ff6f 	bl	80015e4 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff ffd8 	bl	80066c0 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8006728:	2300      	movs	r3, #0
 800672a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	7a5b      	ldrb	r3, [r3, #9]
 8006730:	f083 0301 	eor.w	r3, r3, #1
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00d      	beq.n	8006756 <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4610      	mov	r0, r2
 8006744:	2101      	movs	r1, #1
 8006746:	461a      	mov	r2, r3
 8006748:	f7fa fcd0 	bl	80010ec <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 8006752:	2300      	movs	r3, #0
 8006754:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8006756:	7bfb      	ldrb	r3, [r7, #15]

}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3301      	adds	r3, #1
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006770:	89fb      	ldrh	r3, [r7, #14]
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	b29a      	uxth	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	4313      	orrs	r3, r2
 800677e:	b29b      	uxth	r3, r3
 8006780:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006782:	89fb      	ldrh	r3, [r7, #14]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3303      	adds	r3, #3
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	3202      	adds	r2, #2
 80067a8:	7812      	ldrb	r2, [r2, #0]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	3201      	adds	r2, #1
 80067b6:	7812      	ldrb	r2, [r2, #0]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80067c8:	68fb      	ldr	r3, [r7, #12]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop

080067d8 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	607a      	str	r2, [r7, #4]
 80067ea:	887a      	ldrh	r2, [r7, #2]
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	887b      	ldrh	r3, [r7, #2]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	887a      	ldrh	r2, [r7, #2]
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]
}
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	0a1b      	lsrs	r3, r3, #8
 8006826:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	0a1b      	lsrs	r3, r3, #8
 8006838:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	0a1b      	lsrs	r3, r3, #8
 800684a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	607a      	str	r2, [r7, #4]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
}
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop

08006864 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00d      	beq.n	800689a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	617a      	str	r2, [r7, #20]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	1c51      	adds	r1, r2, #1
 8006888:	6139      	str	r1, [r7, #16]
 800688a:	7812      	ldrb	r2, [r2, #0]
 800688c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3b01      	subs	r3, #1
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f1      	bne.n	800687e <mem_cpy+0x1a>
	}
}
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	617a      	str	r2, [r7, #20]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	607b      	str	r3, [r7, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f3      	bne.n	80068b4 <mem_set+0x10>
}
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop

080068d8 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 80068d8:	b480      	push	{r7}
 80068da:	b089      	sub	sp, #36	; 0x24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	61fa      	str	r2, [r7, #28]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	4619      	mov	r1, r3
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	61ba      	str	r2, [r7, #24]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	1acb      	subs	r3, r1, r3
 8006904:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3b01      	subs	r3, #1
 800690a:	607b      	str	r3, [r7, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <mem_cmp+0x40>
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0eb      	beq.n	80068f0 <mem_cmp+0x18>

	return r;
 8006918:	697b      	ldr	r3, [r7, #20]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3724      	adds	r7, #36	; 0x24
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop

08006928 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006932:	e002      	b.n	800693a <chk_chr+0x12>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3301      	adds	r3, #1
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <chk_chr+0x26>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d1f2      	bne.n	8006934 <chk_chr+0xc>
	return *str;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	781b      	ldrb	r3, [r3, #0]
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop

08006960 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <dbc_1st+0x14>
 8006970:	2300      	movs	r3, #0
 8006972:	e000      	b.n	8006976 <dbc_1st+0x16>
#endif
	return 0;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop

08006984 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <dbc_2nd+0x14>
 8006994:	2300      	movs	r3, #0
 8006996:	e000      	b.n	800699a <dbc_2nd+0x16>
#endif
	return 0;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop

080069a8 <tchar2uni>:

/* Get a character from TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	617a      	str	r2, [r7, #20]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 80069c0:	8a7b      	ldrh	r3, [r7, #18]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff ffcb 	bl	8006960 <dbc_1st>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d015      	beq.n	80069fc <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	617a      	str	r2, [r7, #20]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 80069da:	7c7b      	ldrb	r3, [r7, #17]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff ffd1 	bl	8006984 <dbc_2nd>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <tchar2uni+0x46>
 80069e8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ec:	e01d      	b.n	8006a2a <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 80069ee:	8a7b      	ldrh	r3, [r7, #18]
 80069f0:	021b      	lsls	r3, r3, #8
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	7c7b      	ldrb	r3, [r7, #17]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 80069fc:	8a7b      	ldrh	r3, [r7, #18]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00d      	beq.n	8006a1e <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 8006a02:	8a7b      	ldrh	r3, [r7, #18]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f240 3152 	movw	r1, #850	; 0x352
 8006a0a:	f002 fdad 	bl	8009568 <ff_oem2uni>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 8006a12:	8a7b      	ldrh	r3, [r7, #18]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <tchar2uni+0x76>
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1c:	e005      	b.n	8006a2a <tchar2uni+0x82>
	}
	uc = wc;
 8006a1e:	8a7b      	ldrh	r3, [r7, #18]
 8006a20:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	601a      	str	r2, [r3, #0]
	return uc;
 8006a28:	68fb      	ldr	r3, [r7, #12]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop

08006a34 <chk_lock>:

static FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search open object table for the object */
	be = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e028      	b.n	8006a9a <chk_lock+0x66>
		if (Files[i].fs) {	/* Existing entry */
 8006a48:	4a26      	ldr	r2, [pc, #152]	; (8006ae4 <chk_lock+0xb0>)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	4413      	add	r3, r2
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01c      	beq.n	8006a90 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 8006a56:	4a23      	ldr	r2, [pc, #140]	; (8006ae4 <chk_lock+0xb0>)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	4413      	add	r3, r2
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d115      	bne.n	8006a94 <chk_lock+0x60>
				Files[i].clu == dp->obj.sclust &&
 8006a68:	4a1e      	ldr	r2, [pc, #120]	; (8006ae4 <chk_lock+0xb0>)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	4413      	add	r3, r2
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]

	/* Search open object table for the object */
	be = 0;
	for (i = 0; i < FF_FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d10c      	bne.n	8006a94 <chk_lock+0x60>
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
 8006a7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ae4 <chk_lock+0xb0>)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	4413      	add	r3, r2
 8006a82:	3308      	adds	r3, #8
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
	/* Search open object table for the object */
	be = 0;
	for (i = 0; i < FF_FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
				Files[i].clu == dp->obj.sclust &&
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d102      	bne.n	8006a94 <chk_lock+0x60>
				Files[i].ofs == dp->dptr) break;
 8006a8e:	e007      	b.n	8006aa0 <chk_lock+0x6c>
		} else {			/* Blank entry */
			be = 1;
 8006a90:	2301      	movs	r3, #1
 8006a92:	60bb      	str	r3, [r7, #8]
{
	UINT i, be;

	/* Search open object table for the object */
	be = 0;
	for (i = 0; i < FF_FS_LOCK; i++) {
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3301      	adds	r3, #1
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0d3      	beq.n	8006a48 <chk_lock+0x14>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d109      	bne.n	8006aba <chk_lock+0x86>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d104      	bne.n	8006ab6 <chk_lock+0x82>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d001      	beq.n	8006ab6 <chk_lock+0x82>
 8006ab2:	2312      	movs	r3, #18
 8006ab4:	e010      	b.n	8006ad8 <chk_lock+0xa4>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e00e      	b.n	8006ad8 <chk_lock+0xa4>
	}

	/* The object was opened. Reject any open against writing file and all write mode open */
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d108      	bne.n	8006ad2 <chk_lock+0x9e>
 8006ac0:	4a08      	ldr	r2, [pc, #32]	; (8006ae4 <chk_lock+0xb0>)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	4413      	add	r3, r2
 8006ac8:	3308      	adds	r3, #8
 8006aca:	889b      	ldrh	r3, [r3, #4]
 8006acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad0:	d101      	bne.n	8006ad6 <chk_lock+0xa2>
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	e000      	b.n	8006ad8 <chk_lock+0xa4>
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	20000278 	.word	0x20000278

08006ae8 <enq_lock>:


static int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 8006aee:	2300      	movs	r3, #0
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	e002      	b.n	8006afa <enq_lock+0x12>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3301      	adds	r3, #1
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d106      	bne.n	8006b0e <enq_lock+0x26>
 8006b00:	4a09      	ldr	r2, [pc, #36]	; (8006b28 <enq_lock+0x40>)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	4413      	add	r3, r2
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f2      	bne.n	8006af4 <enq_lock+0xc>
	return (i == FF_FS_LOCK) ? 0 : 1;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20000278 	.word	0x20000278

08006b2c <inc_lock>:

static UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	e01f      	b.n	8006b7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006b3c:	4a40      	ldr	r2, [pc, #256]	; (8006c40 <inc_lock+0x114>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	4413      	add	r3, r2
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d113      	bne.n	8006b76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006b4e:	4a3c      	ldr	r2, [pc, #240]	; (8006c40 <inc_lock+0x114>)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	4413      	add	r3, r2
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
{
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d10a      	bne.n	8006b76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
 8006b60:	4a37      	ldr	r2, [pc, #220]	; (8006c40 <inc_lock+0x114>)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	4413      	add	r3, r2
 8006b68:	3308      	adds	r3, #8
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	695b      	ldr	r3, [r3, #20]
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
			Files[i].clu == dp->obj.sclust &&
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d100      	bne.n	8006b76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006b74:	e005      	b.n	8006b82 <inc_lock+0x56>
)
{
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0dc      	beq.n	8006b3c <inc_lock+0x10>
		if (Files[i].fs == dp->obj.fs &&
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == FF_FS_LOCK) {				/* Not opened. Register it as new. */
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d131      	bne.n	8006bec <inc_lock+0xc0>
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	e002      	b.n	8006b94 <inc_lock+0x68>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <inc_lock+0x7c>
 8006b9a:	4a29      	ldr	r2, [pc, #164]	; (8006c40 <inc_lock+0x114>)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	4413      	add	r3, r2
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1f2      	bne.n	8006b8e <inc_lock+0x62>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <inc_lock+0x86>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e03f      	b.n	8006c32 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4922      	ldr	r1, [pc, #136]	; (8006c40 <inc_lock+0x114>)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	440b      	add	r3, r1
 8006bbe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	491e      	ldr	r1, [pc, #120]	; (8006c40 <inc_lock+0x114>)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	011b      	lsls	r3, r3, #4
 8006bca:	440b      	add	r3, r1
 8006bcc:	605a      	str	r2, [r3, #4]
		Files[i].ofs = dp->dptr;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	491b      	ldr	r1, [pc, #108]	; (8006c40 <inc_lock+0x114>)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	440b      	add	r3, r1
 8006bda:	3308      	adds	r3, #8
 8006bdc:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006bde:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <inc_lock+0x114>)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	4413      	add	r3, r2
 8006be6:	3308      	adds	r3, #8
 8006be8:	2200      	movs	r2, #0
 8006bea:	809a      	strh	r2, [r3, #4]
	}

	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	dd09      	ble.n	8006c06 <inc_lock+0xda>
 8006bf2:	4a13      	ldr	r2, [pc, #76]	; (8006c40 <inc_lock+0x114>)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	889b      	ldrh	r3, [r3, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <inc_lock+0xda>
 8006c02:	2300      	movs	r3, #0
 8006c04:	e015      	b.n	8006c32 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d108      	bne.n	8006c1e <inc_lock+0xf2>
 8006c0c:	4a0c      	ldr	r2, [pc, #48]	; (8006c40 <inc_lock+0x114>)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	4413      	add	r3, r2
 8006c14:	3308      	adds	r3, #8
 8006c16:	889b      	ldrh	r3, [r3, #4]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	e001      	b.n	8006c22 <inc_lock+0xf6>
 8006c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c22:	4907      	ldr	r1, [pc, #28]	; (8006c40 <inc_lock+0x114>)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	440b      	add	r3, r1
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	809a      	strh	r2, [r3, #4]

	return i + 1;	/* Index number origin from 1 */
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000278 	.word	0x20000278

08006c44 <dec_lock>:


static FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	607b      	str	r3, [r7, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d125      	bne.n	8006ca4 <dec_lock+0x60>
		n = Files[i].ctr;
 8006c58:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <dec_lock+0x74>)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	4413      	add	r3, r2
 8006c60:	3308      	adds	r3, #8
 8006c62:	889b      	ldrh	r3, [r3, #4]
 8006c64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006c66:	89fb      	ldrh	r3, [r7, #14]
 8006c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c6c:	d101      	bne.n	8006c72 <dec_lock+0x2e>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006c72:	89fb      	ldrh	r3, [r7, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <dec_lock+0x3a>
 8006c78:	89fb      	ldrh	r3, [r7, #14]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006c7e:	4a0e      	ldr	r2, [pc, #56]	; (8006cb8 <dec_lock+0x74>)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	4413      	add	r3, r2
 8006c86:	3308      	adds	r3, #8
 8006c88:	89fa      	ldrh	r2, [r7, #14]
 8006c8a:	809a      	strh	r2, [r3, #4]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006c8c:	89fb      	ldrh	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <dec_lock+0x5a>
 8006c92:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <dec_lock+0x74>)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	4413      	add	r3, r2
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	737b      	strb	r3, [r7, #13]
 8006ca2:	e001      	b.n	8006ca8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006ca8:	7b7b      	ldrb	r3, [r7, #13]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20000278 	.word	0x20000278

08006cbc <clear_lock>:


static void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < FF_FS_LOCK; i++) {
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	e010      	b.n	8006cec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006cca:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <clear_lock+0x40>)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	4413      	add	r3, r2
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d105      	bne.n	8006ce6 <clear_lock+0x2a>
 8006cda:	4a08      	ldr	r2, [pc, #32]	; (8006cfc <clear_lock+0x40>)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	4413      	add	r3, r2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < FF_FS_LOCK; i++) {
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0eb      	beq.n	8006cca <clear_lock+0xe>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20000278 	.word	0x20000278

08006d00 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	78db      	ldrb	r3, [r3, #3]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d030      	beq.n	8006d76 <sync_window+0x76>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	7859      	ldrb	r1, [r3, #1]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d22:	4608      	mov	r0, r1
 8006d24:	4611      	mov	r1, r2
 8006d26:	461a      	mov	r2, r3
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f002 fd95 	bl	8009858 <disk_write>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11e      	bne.n	8006d72 <sync_window+0x72>
			fs->wflag = 0;	/* Clear window dirty flag */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	1ad2      	subs	r2, r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d214      	bcs.n	8006d76 <sync_window+0x76>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	789b      	ldrb	r3, [r3, #2]
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d110      	bne.n	8006d76 <sync_window+0x76>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7858      	ldrb	r0, [r3, #1]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	4413      	add	r3, r2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f002 fd74 	bl	8009858 <disk_write>
 8006d70:	e001      	b.n	8006d76 <sync_window+0x76>
			}
		} else {
			res = FR_DISK_ERR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d01c      	beq.n	8006dd2 <move_window+0x52>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff ffb1 	bl	8006d00 <sync_window>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d114      	bne.n	8006dd2 <move_window+0x52>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	785a      	ldrb	r2, [r3, #1]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3338      	adds	r3, #56	; 0x38
 8006db0:	4610      	mov	r0, r2
 8006db2:	4619      	mov	r1, r3
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	2301      	movs	r3, #1
 8006db8:	f002 fd1c 	bl	80097f4 <disk_read>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <move_window+0x4c>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff ff8b 	bl	8006d00 <sync_window>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d157      	bne.n	8006ea4 <sync_fs+0xc8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d147      	bne.n	8006e8c <sync_fs+0xb0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	791b      	ldrb	r3, [r3, #4]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d143      	bne.n	8006e8c <sync_fs+0xb0>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3338      	adds	r3, #56	; 0x38
 8006e08:	4618      	mov	r0, r3
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e10:	f7ff fd48 	bl	80068a4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f203 2336 	addw	r3, r3, #566	; 0x236
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006e20:	f7ff fcda 	bl	80067d8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3338      	adds	r3, #56	; 0x38
 8006e28:	4618      	mov	r0, r3
 8006e2a:	4921      	ldr	r1, [pc, #132]	; (8006eb0 <sync_fs+0xd4>)
 8006e2c:	f7ff fcee 	bl	800680c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8006e36:	4618      	mov	r0, r3
 8006e38:	491e      	ldr	r1, [pc, #120]	; (8006eb4 <sync_fs+0xd8>)
 8006e3a:	f7ff fce7 	bl	800680c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f503 7208 	add.w	r2, r3, #544	; 0x220
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	f7ff fcde 	bl	800680c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f503 7209 	add.w	r2, r3, #548	; 0x224
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	f7ff fcd5 	bl	800680c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7859      	ldrb	r1, [r3, #1]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7a:	4608      	mov	r0, r1
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	461a      	mov	r2, r3
 8006e80:	2301      	movs	r3, #1
 8006e82:	f002 fce9 	bl	8009858 <disk_write>
			fs->fsi_flag = 0;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	4618      	mov	r0, r3
 8006e92:	2100      	movs	r1, #0
 8006e94:	2200      	movs	r2, #0
 8006e96:	f002 fd11 	bl	80098bc <disk_ioctl>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <sync_fs+0xc8>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	41615252 	.word	0x41615252
 8006eb4:	61417272 	.word	0x61417272

08006eb8 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	3b02      	subs	r3, #2
 8006ec6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	1e9a      	subs	r2, r3, #2
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d801      	bhi.n	8006ed8 <clst2sect+0x20>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e008      	b.n	8006eea <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	895b      	ldrh	r3, [r3, #10]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	fb03 f301 	mul.w	r3, r3, r1
 8006ee8:	4413      	add	r3, r2
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop

08006ef8 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d904      	bls.n	8006f18 <get_fat+0x20>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d802      	bhi.n	8006f1e <get_fat+0x26>
		val = 1;	/* Internal error */
 8006f18:	2301      	movs	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e086      	b.n	800702c <get_fat+0x134>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f22:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d047      	beq.n	8006fbc <get_fat+0xc4>
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d05f      	beq.n	8006ff0 <get_fat+0xf8>
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d179      	bne.n	8007028 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	085b      	lsrs	r3, r3, #1
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	0a5b      	lsrs	r3, r3, #9
 8006f4a:	4413      	add	r3, r2
 8006f4c:	6938      	ldr	r0, [r7, #16]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	f7ff ff16 	bl	8006d80 <move_window>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d000      	beq.n	8006f5c <get_fat+0x64>
 8006f5a:	e067      	b.n	800702c <get_fat+0x134>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	60fa      	str	r2, [r7, #12]
 8006f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f6e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	0a5b      	lsrs	r3, r3, #9
 8006f78:	4413      	add	r3, r2
 8006f7a:	6938      	ldr	r0, [r7, #16]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	f7ff feff 	bl	8006d80 <move_window>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d000      	beq.n	8006f8a <get_fat+0x92>
 8006f88:	e050      	b.n	800702c <get_fat+0x134>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <get_fat+0xba>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	091b      	lsrs	r3, r3, #4
 8006fb0:	e002      	b.n	8006fb8 <get_fat+0xc0>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb8:	617b      	str	r3, [r7, #20]
			break;
 8006fba:	e037      	b.n	800702c <get_fat+0x134>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	4413      	add	r3, r2
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	f7ff fed9 	bl	8006d80 <move_window>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d000      	beq.n	8006fd6 <get_fat+0xde>
 8006fd4:	e02a      	b.n	800702c <get_fat+0x134>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006fde:	3338      	adds	r3, #56	; 0x38
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fbbb 	bl	8006760 <ld_word>
 8006fea:	4603      	mov	r3, r0
 8006fec:	617b      	str	r3, [r7, #20]
			break;
 8006fee:	e01d      	b.n	800702c <get_fat+0x134>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	09db      	lsrs	r3, r3, #7
 8006ff8:	4413      	add	r3, r2
 8006ffa:	6938      	ldr	r0, [r7, #16]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	f7ff febf 	bl	8006d80 <move_window>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d000      	beq.n	800700a <get_fat+0x112>
 8007008:	e010      	b.n	800702c <get_fat+0x134>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007012:	3338      	adds	r3, #56	; 0x38
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4413      	add	r3, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff fbb9 	bl	8006790 <ld_dword>
 800701e:	4603      	mov	r3, r0
 8007020:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007024:	617b      	str	r3, [r7, #20]
			break;
 8007026:	e001      	b.n	800702c <get_fat+0x134>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007028:	2301      	movs	r3, #1
 800702a:	617b      	str	r3, [r7, #20]
		}
	}

	return val;
 800702c:	697b      	ldr	r3, [r7, #20]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop

08007038 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007038:	b590      	push	{r4, r7, lr}
 800703a:	b089      	sub	sp, #36	; 0x24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007044:	2302      	movs	r3, #2
 8007046:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b01      	cmp	r3, #1
 800704c:	f240 80cd 	bls.w	80071ea <put_fat+0x1b2>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	429a      	cmp	r2, r3
 8007058:	f240 80c7 	bls.w	80071ea <put_fat+0x1b2>
		switch (fs->fs_type) {
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b02      	cmp	r3, #2
 8007062:	d072      	beq.n	800714a <put_fat+0x112>
 8007064:	2b03      	cmp	r3, #3
 8007066:	f000 8090 	beq.w	800718a <put_fat+0x152>
 800706a:	2b01      	cmp	r3, #1
 800706c:	f040 80bd 	bne.w	80071ea <put_fat+0x1b2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	61bb      	str	r3, [r7, #24]
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	085b      	lsrs	r3, r3, #1
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	4413      	add	r3, r2
 800707c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	0a5b      	lsrs	r3, r3, #9
 8007086:	4413      	add	r3, r2
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	4619      	mov	r1, r3
 800708c:	f7ff fe78 	bl	8006d80 <move_window>
 8007090:	4603      	mov	r3, r0
 8007092:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007094:	7ffb      	ldrb	r3, [r7, #31]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d000      	beq.n	800709c <put_fat+0x64>
 800709a:	e0a6      	b.n	80071ea <put_fat+0x1b2>
			p = fs->win + bc++ % SS(fs);
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	61ba      	str	r2, [r7, #24]
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	3338      	adds	r3, #56	; 0x38
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00d      	beq.n	80070d4 <put_fat+0x9c>
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	4313      	orrs	r3, r2
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	e001      	b.n	80070d8 <put_fat+0xa0>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	0a5b      	lsrs	r3, r3, #9
 80070ea:	4413      	add	r3, r2
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	4619      	mov	r1, r3
 80070f0:	f7ff fe46 	bl	8006d80 <move_window>
 80070f4:	4603      	mov	r3, r0
 80070f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070f8:	7ffb      	ldrb	r3, [r7, #31]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d000      	beq.n	8007100 <put_fat+0xc8>
 80070fe:	e074      	b.n	80071ea <put_fat+0x1b2>
			p = fs->win + bc % SS(fs);
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007106:	3338      	adds	r3, #56	; 0x38
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <put_fat+0xe8>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	091b      	lsrs	r3, r3, #4
 800711c:	b2db      	uxtb	r3, r3
 800711e:	e00e      	b.n	800713e <put_fat+0x106>
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f023 030f 	bic.w	r3, r3, #15
 800712a:	b2da      	uxtb	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	b2db      	uxtb	r3, r3
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	b2db      	uxtb	r3, r3
 8007138:	4313      	orrs	r3, r2
 800713a:	b2db      	uxtb	r3, r3
 800713c:	b2db      	uxtb	r3, r3
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	70da      	strb	r2, [r3, #3]
			break;
 8007148:	e04f      	b.n	80071ea <put_fat+0x1b2>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	0a1b      	lsrs	r3, r3, #8
 8007152:	4413      	add	r3, r2
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	4619      	mov	r1, r3
 8007158:	f7ff fe12 	bl	8006d80 <move_window>
 800715c:	4603      	mov	r3, r0
 800715e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007160:	7ffb      	ldrb	r3, [r7, #31]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d000      	beq.n	8007168 <put_fat+0x130>
 8007166:	e040      	b.n	80071ea <put_fat+0x1b2>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007170:	3338      	adds	r3, #56	; 0x38
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	441a      	add	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	b29b      	uxth	r3, r3
 800717a:	4610      	mov	r0, r2
 800717c:	4619      	mov	r1, r3
 800717e:	f7ff fb2b 	bl	80067d8 <st_word>
			fs->wflag = 1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	70da      	strb	r2, [r3, #3]
			break;
 8007188:	e02f      	b.n	80071ea <put_fat+0x1b2>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	09db      	lsrs	r3, r3, #7
 8007192:	4413      	add	r3, r2
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	4619      	mov	r1, r3
 8007198:	f7ff fdf2 	bl	8006d80 <move_window>
 800719c:	4603      	mov	r3, r0
 800719e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071a0:	7ffb      	ldrb	r3, [r7, #31]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d000      	beq.n	80071a8 <put_fat+0x170>
 80071a6:	e020      	b.n	80071ea <put_fat+0x1b2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80071b6:	3338      	adds	r3, #56	; 0x38
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff fae7 	bl	8006790 <ld_dword>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80071c8:	4323      	orrs	r3, r4
 80071ca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80071d4:	3338      	adds	r3, #56	; 0x38
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4413      	add	r3, r2
 80071da:	4618      	mov	r0, r3
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	f7ff fb15 	bl	800680c <st_dword>
			fs->wflag = 1;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	70da      	strb	r2, [r3, #3]
			break;
 80071e8:	bf00      	nop
		}
	}
	return res;
 80071ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3724      	adds	r7, #36	; 0x24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd90      	pop	{r4, r7, pc}

080071f4 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:entire chain) */
)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d904      	bls.n	800721a <remove_chain+0x26>
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	429a      	cmp	r2, r3
 8007218:	d801      	bhi.n	800721e <remove_chain+0x2a>
 800721a:	2302      	movs	r3, #2
 800721c:	e04a      	b.n	80072b4 <remove_chain+0xc0>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00c      	beq.n	800723e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007224:	69b8      	ldr	r0, [r7, #24]
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	f04f 32ff 	mov.w	r2, #4294967295
 800722c:	f7ff ff04 	bl	8007038 <put_fat>
 8007230:	4603      	mov	r3, r0
 8007232:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007234:	7ffb      	ldrb	r3, [r7, #31]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <remove_chain+0x4a>
 800723a:	7ffb      	ldrb	r3, [r7, #31]
 800723c:	e03a      	b.n	80072b4 <remove_chain+0xc0>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	f7ff fe59 	bl	8006ef8 <get_fat>
 8007246:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d100      	bne.n	8007250 <remove_chain+0x5c>
 800724e:	e030      	b.n	80072b2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <remove_chain+0x66>
 8007256:	2302      	movs	r3, #2
 8007258:	e02c      	b.n	80072b4 <remove_chain+0xc0>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d101      	bne.n	8007266 <remove_chain+0x72>
 8007262:	2301      	movs	r3, #1
 8007264:	e026      	b.n	80072b4 <remove_chain+0xc0>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007266:	69b8      	ldr	r0, [r7, #24]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	2200      	movs	r2, #0
 800726c:	f7ff fee4 	bl	8007038 <put_fat>
 8007270:	4603      	mov	r3, r0
 8007272:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007274:	7ffb      	ldrb	r3, [r7, #31]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <remove_chain+0x8a>
 800727a:	7ffb      	ldrb	r3, [r7, #31]
 800727c:	e01a      	b.n	80072b4 <remove_chain+0xc0>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	695a      	ldr	r2, [r3, #20]
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	3b02      	subs	r3, #2
 8007288:	429a      	cmp	r2, r3
 800728a:	d20b      	bcs.n	80072a4 <remove_chain+0xb0>
			fs->free_clst++;
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	791b      	ldrb	r3, [r3, #4]
 800729a:	f043 0301 	orr.w	r3, r3, #1
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d8c5      	bhi.n	800723e <remove_chain+0x4a>
				}
			}
		}
	}
#endif
	return FR_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3720      	adds	r7, #32
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10d      	bne.n	80072ee <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <create_chain+0x2c>
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	69da      	ldr	r2, [r3, #28]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d81b      	bhi.n	8007320 <create_chain+0x64>
 80072e8:	2301      	movs	r3, #1
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	e018      	b.n	8007320 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	f7ff fe01 	bl	8006ef8 <get_fat>
 80072f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d801      	bhi.n	8007302 <create_chain+0x46>
 80072fe:	2301      	movs	r3, #1
 8007300:	e0aa      	b.n	8007458 <create_chain+0x19c>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007308:	d101      	bne.n	800730e <create_chain+0x52>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	e0a4      	b.n	8007458 <create_chain+0x19c>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	69da      	ldr	r2, [r3, #28]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	429a      	cmp	r2, r3
 8007316:	d901      	bls.n	800731c <create_chain+0x60>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	e09d      	b.n	8007458 <create_chain+0x19c>
		scl = clst;							/* Cluster to start to find */
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <create_chain+0x70>
 8007328:	2300      	movs	r3, #0
 800732a:	e095      	b.n	8007458 <create_chain+0x19c>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d129      	bne.n	800738c <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	3301      	adds	r3, #1
 800733c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	69da      	ldr	r2, [r3, #28]
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	429a      	cmp	r2, r3
 8007346:	d801      	bhi.n	800734c <create_chain+0x90>
 8007348:	2302      	movs	r3, #2
 800734a:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	69f9      	ldr	r1, [r7, #28]
 8007350:	f7ff fdd2 	bl	8006ef8 <get_fat>
 8007354:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d003      	beq.n	8007364 <create_chain+0xa8>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	d101      	bne.n	8007368 <create_chain+0xac>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	e077      	b.n	8007458 <create_chain+0x19c>
			if (cs != 0) {						/* Not free? */
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00e      	beq.n	800738c <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d906      	bls.n	8007388 <create_chain+0xcc>
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	69da      	ldr	r2, [r3, #28]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	429a      	cmp	r2, r3
 8007382:	d901      	bls.n	8007388 <create_chain+0xcc>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d12a      	bne.n	80073e8 <create_chain+0x12c>
			ncl = scl;	/* Start cluster */
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	3301      	adds	r3, #1
 800739a:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	69da      	ldr	r2, [r3, #28]
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d807      	bhi.n	80073b6 <create_chain+0xfa>
					ncl = 2;
 80073a6:	2302      	movs	r3, #2
 80073a8:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d901      	bls.n	80073b6 <create_chain+0xfa>
 80073b2:	2300      	movs	r3, #0
 80073b4:	e050      	b.n	8007458 <create_chain+0x19c>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	69f9      	ldr	r1, [r7, #28]
 80073ba:	f7ff fd9d 	bl	8006ef8 <get_fat>
 80073be:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d100      	bne.n	80073c8 <create_chain+0x10c>
 80073c6:	e00f      	b.n	80073e8 <create_chain+0x12c>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d003      	beq.n	80073d6 <create_chain+0x11a>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d4:	d101      	bne.n	80073da <create_chain+0x11e>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	e03e      	b.n	8007458 <create_chain+0x19c>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d101      	bne.n	80073e6 <create_chain+0x12a>
 80073e2:	2300      	movs	r3, #0
 80073e4:	e038      	b.n	8007458 <create_chain+0x19c>
			}
 80073e6:	e7d6      	b.n	8007396 <create_chain+0xda>
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80073e8:	6938      	ldr	r0, [r7, #16]
 80073ea:	69f9      	ldr	r1, [r7, #28]
 80073ec:	f04f 32ff 	mov.w	r2, #4294967295
 80073f0:	f7ff fe22 	bl	8007038 <put_fat>
 80073f4:	4603      	mov	r3, r0
 80073f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <create_chain+0x156>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d006      	beq.n	8007412 <create_chain+0x156>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8007404:	6938      	ldr	r0, [r7, #16]
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	f7ff fe15 	bl	8007038 <put_fat>
 800740e:	4603      	mov	r3, r0
 8007410:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d116      	bne.n	8007446 <create_chain+0x18a>
		fs->last_clst = ncl;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	695a      	ldr	r2, [r3, #20]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	3b02      	subs	r3, #2
 8007428:	429a      	cmp	r2, r3
 800742a:	d804      	bhi.n	8007436 <create_chain+0x17a>
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	1e5a      	subs	r2, r3, #1
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	791b      	ldrb	r3, [r3, #4]
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	b2da      	uxtb	r2, r3
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	711a      	strb	r2, [r3, #4]
 8007444:	e007      	b.n	8007456 <create_chain+0x19a>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d102      	bne.n	8007452 <create_chain+0x196>
 800744c:	f04f 33ff 	mov.w	r3, #4294967295
 8007450:	e000      	b.n	8007454 <create_chain+0x198>
 8007452:	2301      	movs	r3, #1
 8007454:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007456:	69fb      	ldr	r3, [r7, #28]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3720      	adds	r7, #32
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff fc48 	bl	8006d00 <sync_window>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <dir_clear+0x1a>
 8007476:	2301      	movs	r3, #1
 8007478:	e038      	b.n	80074ec <dir_clear+0x8c>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	f7ff fd1b 	bl	8006eb8 <clst2sect>
 8007482:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	635a      	str	r2, [r3, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3338      	adds	r3, #56	; 0x38
 800748e:	4618      	mov	r0, r3
 8007490:	2100      	movs	r1, #0
 8007492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007496:	f7ff fa05 	bl	80068a4 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3338      	adds	r3, #56	; 0x38
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	2301      	movs	r3, #1
 80074a2:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	e003      	b.n	80074b2 <dir_clear+0x52>
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4413      	add	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	895b      	ldrh	r3, [r3, #10]
 80074b6:	461a      	mov	r2, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d90d      	bls.n	80074da <dir_clear+0x7a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	7859      	ldrb	r1, [r3, #1]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	4413      	add	r3, r2
 80074c8:	4608      	mov	r0, r1
 80074ca:	68f9      	ldr	r1, [r7, #12]
 80074cc:	461a      	mov	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f002 f9c2 	bl	8009858 <disk_write>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d0e7      	beq.n	80074aa <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	895b      	ldrh	r3, [r3, #10]
 80074de:	461a      	mov	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	bf14      	ite	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	2300      	moveq	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800750a:	d204      	bcs.n	8007516 <dir_sdi+0x22>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	f003 031f 	and.w	r3, r3, #31
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007516:	2302      	movs	r3, #2
 8007518:	e062      	b.n	80075e0 <dir_sdi+0xec>
	}
	dp->dptr = ofs;				/* Set current offset */
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d106      	bne.n	800753a <dir_sdi+0x46>
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d902      	bls.n	800753a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10c      	bne.n	800755a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	8912      	ldrh	r2, [r2, #8]
 8007548:	4293      	cmp	r3, r2
 800754a:	d301      	bcc.n	8007550 <dir_sdi+0x5c>
 800754c:	2302      	movs	r3, #2
 800754e:	e047      	b.n	80075e0 <dir_sdi+0xec>
		dp->sect = fs->dirbase;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	61da      	str	r2, [r3, #28]
 8007558:	e029      	b.n	80075ae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	895b      	ldrh	r3, [r3, #10]
 800755e:	025b      	lsls	r3, r3, #9
 8007560:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007562:	e019      	b.n	8007598 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4618      	mov	r0, r3
 8007568:	6979      	ldr	r1, [r7, #20]
 800756a:	f7ff fcc5 	bl	8006ef8 <get_fat>
 800756e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007576:	d101      	bne.n	800757c <dir_sdi+0x88>
 8007578:	2301      	movs	r3, #1
 800757a:	e031      	b.n	80075e0 <dir_sdi+0xec>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d904      	bls.n	800758c <dir_sdi+0x98>
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	69da      	ldr	r2, [r3, #28]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	429a      	cmp	r2, r3
 800758a:	d801      	bhi.n	8007590 <dir_sdi+0x9c>
 800758c:	2302      	movs	r3, #2
 800758e:	e027      	b.n	80075e0 <dir_sdi+0xec>
			ofs -= csz;
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	603b      	str	r3, [r7, #0]
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	429a      	cmp	r2, r3
 800759e:	d2e1      	bcs.n	8007564 <dir_sdi+0x70>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clst2sect(fs, clst);
 80075a0:	6938      	ldr	r0, [r7, #16]
 80075a2:	6979      	ldr	r1, [r7, #20]
 80075a4:	f7ff fc88 	bl	8006eb8 <clst2sect>
 80075a8:	4602      	mov	r2, r0
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_INT_ERR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <dir_sdi+0xcc>
 80075bc:	2302      	movs	r3, #2
 80075be:	e00f      	b.n	80075e0 <dir_sdi+0xec>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	69da      	ldr	r2, [r3, #28]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	0a5b      	lsrs	r3, r3, #9
 80075c8:	441a      	add	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d4:	3338      	adds	r3, #56	; 0x38
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	441a      	add	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	3320      	adds	r3, #32
 80075fe:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007606:	d302      	bcc.n	800760e <dir_next+0x26>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	61da      	str	r2, [r3, #28]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <dir_next+0x32>
 8007616:	2304      	movs	r3, #4
 8007618:	e077      	b.n	800770a <dir_next+0x122>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007620:	2b00      	cmp	r3, #0
 8007622:	d166      	bne.n	80076f2 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	61da      	str	r2, [r3, #28]

		if (dp->clust == 0) {	/* Static table */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	095b      	lsrs	r3, r3, #5
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	8912      	ldrh	r2, [r2, #8]
 800763e:	4293      	cmp	r3, r2
 8007640:	d357      	bcc.n	80076f2 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	61da      	str	r2, [r3, #28]
 8007648:	2304      	movs	r3, #4
 800764a:	e05e      	b.n	800770a <dir_next+0x122>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	0a5b      	lsrs	r3, r3, #9
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	8952      	ldrh	r2, [r2, #10]
 8007654:	3a01      	subs	r2, #1
 8007656:	4013      	ands	r3, r2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d14a      	bne.n	80076f2 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	4610      	mov	r0, r2
 8007664:	4619      	mov	r1, r3
 8007666:	f7ff fc47 	bl	8006ef8 <get_fat>
 800766a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d801      	bhi.n	8007676 <dir_next+0x8e>
 8007672:	2302      	movs	r3, #2
 8007674:	e049      	b.n	800770a <dir_next+0x122>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767c:	d101      	bne.n	8007682 <dir_next+0x9a>
 800767e:	2301      	movs	r3, #1
 8007680:	e043      	b.n	800770a <dir_next+0x122>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	69da      	ldr	r2, [r3, #28]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	429a      	cmp	r2, r3
 800768a:	d828      	bhi.n	80076de <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d104      	bne.n	800769c <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	61da      	str	r2, [r3, #28]
 8007698:	2304      	movs	r3, #4
 800769a:	e036      	b.n	800770a <dir_next+0x122>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	4610      	mov	r0, r2
 80076a4:	4619      	mov	r1, r3
 80076a6:	f7ff fe09 	bl	80072bc <create_chain>
 80076aa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <dir_next+0xce>
 80076b2:	2307      	movs	r3, #7
 80076b4:	e029      	b.n	800770a <dir_next+0x122>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <dir_next+0xd8>
 80076bc:	2302      	movs	r3, #2
 80076be:	e024      	b.n	800770a <dir_next+0x122>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d101      	bne.n	80076cc <dir_next+0xe4>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e01e      	b.n	800770a <dir_next+0x122>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80076cc:	6938      	ldr	r0, [r7, #16]
 80076ce:	6979      	ldr	r1, [r7, #20]
 80076d0:	f7ff fec6 	bl	8007460 <dir_clear>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <dir_next+0xf6>
 80076da:	2301      	movs	r3, #1
 80076dc:	e015      	b.n	800770a <dir_next+0x122>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	619a      	str	r2, [r3, #24]
				dp->sect = clst2sect(fs, clst);
 80076e4:	6938      	ldr	r0, [r7, #16]
 80076e6:	6979      	ldr	r1, [r7, #20]
 80076e8:	f7ff fbe6 	bl	8006eb8 <clst2sect>
 80076ec:	4602      	mov	r2, r0
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fe:	3338      	adds	r3, #56	; 0x38
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	441a      	add	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop

08007714 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	2100      	movs	r1, #0
 8007728:	f7ff fee4 	bl	80074f4 <dir_sdi>
 800772c:	4603      	mov	r3, r0
 800772e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d12b      	bne.n	800778e <dir_alloc+0x7a>
		n = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	4619      	mov	r1, r3
 8007742:	f7ff fb1d 	bl	8006d80 <move_window>
 8007746:	4603      	mov	r3, r0
 8007748:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d000      	beq.n	8007752 <dir_alloc+0x3e>
 8007750:	e01d      	b.n	800778e <dir_alloc+0x7a>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2be5      	cmp	r3, #229	; 0xe5
 800775a:	d004      	beq.n	8007766 <dir_alloc+0x52>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d108      	bne.n	8007778 <dir_alloc+0x64>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	3301      	adds	r3, #1
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	429a      	cmp	r2, r3
 8007772:	d100      	bne.n	8007776 <dir_alloc+0x62>
 8007774:	e00b      	b.n	800778e <dir_alloc+0x7a>
 8007776:	e001      	b.n	800777c <dir_alloc+0x68>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007778:	2300      	movs	r3, #0
 800777a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	2101      	movs	r1, #1
 8007780:	f7ff ff32 	bl	80075e8 <dir_next>
 8007784:	4603      	mov	r3, r0
 8007786:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0d5      	beq.n	800773a <dir_alloc+0x26>
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	2b04      	cmp	r3, #4
 8007792:	d101      	bne.n	8007798 <dir_alloc+0x84>
 8007794:	2307      	movs	r3, #7
 8007796:	75fb      	strb	r3, [r7, #23]
	return res;
 8007798:	7dfb      	ldrb	r3, [r7, #23]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop

080077a4 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	331a      	adds	r3, #26
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe ffd4 	bl	8006760 <ld_word>
 80077b8:	4603      	mov	r3, r0
 80077ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d109      	bne.n	80077d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	3314      	adds	r3, #20
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe ffc9 	bl	8006760 <ld_word>
 80077ce:	4603      	mov	r3, r0
 80077d0:	041b      	lsls	r3, r3, #16
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80077d8:	68fb      	ldr	r3, [r7, #12]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop

080077e4 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f103 021a 	add.w	r2, r3, #26
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	4619      	mov	r1, r3
 80077fe:	f7fe ffeb 	bl	80067d8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b03      	cmp	r3, #3
 8007808:	d109      	bne.n	800781e <st_clust+0x3a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f103 0214 	add.w	r2, r3, #20
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	0c1b      	lsrs	r3, r3, #16
 8007814:	b29b      	uxth	r3, r3
 8007816:	4610      	mov	r0, r2
 8007818:	4619      	mov	r1, r3
 800781a:	f7fe ffdd 	bl	80067d8 <st_word>
	}
}
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007824:	b590      	push	{r4, r7, lr}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	331a      	adds	r3, #26
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe ff94 	bl	8006760 <ld_word>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <cmp_lfn+0x1e>
 800783e:	2300      	movs	r3, #0
 8007840:	e058      	b.n	80078f4 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800784a:	1e5a      	subs	r2, r3, #1
 800784c:	4613      	mov	r3, r2
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007858:	2301      	movs	r3, #1
 800785a:	81fb      	strh	r3, [r7, #14]
 800785c:	2300      	movs	r3, #0
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	e032      	b.n	80078c8 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007862:	4a26      	ldr	r2, [pc, #152]	; (80078fc <cmp_lfn+0xd8>)
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	4413      	add	r3, r2
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	4413      	add	r3, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe ff75 	bl	8006760 <ld_word>
 8007876:	4603      	mov	r3, r0
 8007878:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800787a:	89fb      	ldrh	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d019      	beq.n	80078b4 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2bfe      	cmp	r3, #254	; 0xfe
 8007884:	d811      	bhi.n	80078aa <cmp_lfn+0x86>
 8007886:	89bb      	ldrh	r3, [r7, #12]
 8007888:	4618      	mov	r0, r3
 800788a:	f001 fe99 	bl	80095c0 <ff_wtoupper>
 800788e:	4604      	mov	r4, r0
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	617a      	str	r2, [r7, #20]
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	4413      	add	r3, r2
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 fe8e 	bl	80095c0 <ff_wtoupper>
 80078a4:	4603      	mov	r3, r0
 80078a6:	429c      	cmp	r4, r3
 80078a8:	d001      	beq.n	80078ae <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 80078aa:	2300      	movs	r3, #0
 80078ac:	e022      	b.n	80078f4 <cmp_lfn+0xd0>
			}
			wc = uc;
 80078ae:	89bb      	ldrh	r3, [r7, #12]
 80078b0:	81fb      	strh	r3, [r7, #14]
 80078b2:	e006      	b.n	80078c2 <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80078b4:	89bb      	ldrh	r3, [r7, #12]
 80078b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d001      	beq.n	80078c2 <cmp_lfn+0x9e>
 80078be:	2300      	movs	r3, #0
 80078c0:	e018      	b.n	80078f4 <cmp_lfn+0xd0>

	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	3301      	adds	r3, #1
 80078c6:	613b      	str	r3, [r7, #16]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b0c      	cmp	r3, #12
 80078cc:	d9c9      	bls.n	8007862 <cmp_lfn+0x3e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <cmp_lfn+0xce>
 80078da:	89fb      	ldrh	r3, [r7, #14]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d008      	beq.n	80078f2 <cmp_lfn+0xce>
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	4413      	add	r3, r2
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <cmp_lfn+0xce>
 80078ee:	2300      	movs	r3, #0
 80078f0:	e000      	b.n	80078f4 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 80078f2:	2301      	movs	r3, #1
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd90      	pop	{r4, r7, pc}
 80078fc:	0800fd54 	.word	0x0800fd54

08007900 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4611      	mov	r1, r2
 800790c:	461a      	mov	r2, r3
 800790e:	460b      	mov	r3, r1
 8007910:	71fb      	strb	r3, [r7, #7]
 8007912:	4613      	mov	r3, r2
 8007914:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	330d      	adds	r3, #13
 800791a:	79ba      	ldrb	r2, [r7, #6]
 800791c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	330b      	adds	r3, #11
 8007922:	220f      	movs	r2, #15
 8007924:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	330c      	adds	r3, #12
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	331a      	adds	r3, #26
 8007932:	4618      	mov	r0, r3
 8007934:	2100      	movs	r1, #0
 8007936:	f7fe ff4f 	bl	80067d8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	1e5a      	subs	r2, r3, #1
 800793e:	4613      	mov	r3, r2
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	82fb      	strh	r3, [r7, #22]
 800794e:	2300      	movs	r3, #0
 8007950:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007952:	8afb      	ldrh	r3, [r7, #22]
 8007954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007958:	4293      	cmp	r3, r2
 800795a:	d007      	beq.n	800796c <put_lfn+0x6c>
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	61fa      	str	r2, [r7, #28]
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800796c:	4a16      	ldr	r2, [pc, #88]	; (80079c8 <put_lfn+0xc8>)
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	4413      	add	r3, r2
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	441a      	add	r2, r3
 800797a:	8afb      	ldrh	r3, [r7, #22]
 800797c:	4610      	mov	r0, r2
 800797e:	4619      	mov	r1, r3
 8007980:	f7fe ff2a 	bl	80067d8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007984:	8afb      	ldrh	r3, [r7, #22]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <put_lfn+0x90>
 800798a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800798e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	3301      	adds	r3, #1
 8007994:	61bb      	str	r3, [r7, #24]
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b0c      	cmp	r3, #12
 800799a:	d9da      	bls.n	8007952 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800799c:	8afb      	ldrh	r3, [r7, #22]
 800799e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d006      	beq.n	80079b4 <put_lfn+0xb4>
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4413      	add	r3, r2
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d103      	bne.n	80079bc <put_lfn+0xbc>
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	79fa      	ldrb	r2, [r7, #7]
 80079c0:	701a      	strb	r2, [r3, #0]
}
 80079c2:	3720      	adds	r7, #32
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	0800fd54 	.word	0x0800fd54

080079cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08c      	sub	sp, #48	; 0x30
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	68b9      	ldr	r1, [r7, #8]
 80079de:	220b      	movs	r2, #11
 80079e0:	f7fe ff40 	bl	8006864 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d92b      	bls.n	8007a42 <gen_numname+0x76>
		sr = seq;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 80079ee:	e022      	b.n	8007a36 <gen_numname+0x6a>
			wc = *lfn++;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	1c9a      	adds	r2, r3, #2
 80079f4:	607a      	str	r2, [r7, #4]
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80079fa:	2300      	movs	r3, #0
 80079fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80079fe:	e017      	b.n	8007a30 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	005a      	lsls	r2, r3, #1
 8007a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	4413      	add	r3, r2
 8007a0c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007a0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a10:	085b      	lsrs	r3, r3, #1
 8007a12:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <gen_numname+0x5e>
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007a24:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007a28:	61fb      	str	r3, [r7, #28]

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
		sr = seq;
		while (*lfn) {	/* Create a CRC as hash value */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	2b0f      	cmp	r3, #15
 8007a34:	d9e4      	bls.n	8007a00 <gen_numname+0x34>

	mem_cpy(dst, src, 11);

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
		sr = seq;
		while (*lfn) {	/* Create a CRC as hash value */
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1d8      	bne.n	80079f0 <gen_numname+0x24>
				sr = (sr << 1) + (wc & 1);
				wc >>= 1;
				if (sr & 0x10000) sr ^= 0x11021;
			}
		}
		seq = (UINT)sr;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007a42:	2307      	movs	r3, #7
 8007a44:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f003 030f 	and.w	r3, r3, #15
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	3330      	adds	r3, #48	; 0x30
 8007a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a5a:	2b39      	cmp	r3, #57	; 0x39
 8007a5c:	d904      	bls.n	8007a68 <gen_numname+0x9c>
 8007a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a62:	3307      	adds	r3, #7
 8007a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	1e5a      	subs	r2, r3, #1
 8007a6c:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007a72:	4413      	add	r3, r2
 8007a74:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007a78:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	091b      	lsrs	r3, r3, #4
 8007a80:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1de      	bne.n	8007a46 <gen_numname+0x7a>
	ns[i] = '~';
 8007a88:	f107 0214 	add.w	r2, r7, #20
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	4413      	add	r3, r2
 8007a90:	227e      	movs	r2, #126	; 0x7e
 8007a92:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007a94:	2300      	movs	r3, #0
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
 8007a98:	e015      	b.n	8007ac6 <gen_numname+0xfa>
		if (dbc_1st(dst[j])) {
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	4413      	add	r3, r2
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe ff5c 	bl	8006960 <dbc_1st>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d008      	beq.n	8007ac0 <gen_numname+0xf4>
			if (j == i - 1) break;
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	1e5a      	subs	r2, r3, #1
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d100      	bne.n	8007aba <gen_numname+0xee>
 8007ab8:	e00f      	b.n	8007ada <gen_numname+0x10e>
			j++;
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	3301      	adds	r3, #1
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
		seq /= 16;
	} while (seq);
	ns[i] = '~';

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d205      	bcs.n	8007ada <gen_numname+0x10e>
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	4413      	add	r3, r2
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d1df      	bne.n	8007a9a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	627a      	str	r2, [r7, #36]	; 0x24
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	441a      	add	r2, r3
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	2b07      	cmp	r3, #7
 8007ae8:	d808      	bhi.n	8007afc <gen_numname+0x130>
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	1c59      	adds	r1, r3, #1
 8007aee:	62b9      	str	r1, [r7, #40]	; 0x28
 8007af0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007af4:	440b      	add	r3, r1
 8007af6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8007afa:	e000      	b.n	8007afe <gen_numname+0x132>
 8007afc:	2320      	movs	r3, #32
 8007afe:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	2b07      	cmp	r3, #7
 8007b04:	d9e9      	bls.n	8007ada <gen_numname+0x10e>
}
 8007b06:	3730      	adds	r7, #48	; 0x30
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007b18:	230b      	movs	r3, #11
 8007b1a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	0852      	lsrs	r2, r2, #1
 8007b22:	01db      	lsls	r3, r3, #7
 8007b24:	4313      	orrs	r3, r2
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	1c59      	adds	r1, r3, #1
 8007b2c:	6079      	str	r1, [r7, #4]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	4413      	add	r3, r2
 8007b32:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	60bb      	str	r3, [r7, #8]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1ed      	bne.n	8007b1c <sum_sfn+0x10>
	return sum;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop

08007b50 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	2100      	movs	r1, #0
 8007b62:	f7ff fcc7 	bl	80074f4 <dir_sdi>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <dir_find+0x24>
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	e0a6      	b.n	8007cc2 <dir_find+0x172>
		return res;
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007b74:	23ff      	movs	r3, #255	; 0xff
 8007b76:	753b      	strb	r3, [r7, #20]
 8007b78:	7d3b      	ldrb	r3, [r7, #20]
 8007b7a:	757b      	strb	r3, [r7, #21]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b82:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	6938      	ldr	r0, [r7, #16]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	f7ff f8f8 	bl	8006d80 <move_window>
 8007b90:	4603      	mov	r3, r0
 8007b92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d000      	beq.n	8007b9c <dir_find+0x4c>
 8007b9a:	e091      	b.n	8007cc0 <dir_find+0x170>
		c = dp->dir[DIR_Name];
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007ba4:	7dbb      	ldrb	r3, [r7, #22]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d102      	bne.n	8007bb0 <dir_find+0x60>
 8007baa:	2304      	movs	r3, #4
 8007bac:	75fb      	strb	r3, [r7, #23]
 8007bae:	e087      	b.n	8007cc0 <dir_find+0x170>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	330b      	adds	r3, #11
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bbc:	73fb      	strb	r3, [r7, #15]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	7bfa      	ldrb	r2, [r7, #15]
 8007bc2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007bc4:	7dbb      	ldrb	r3, [r7, #22]
 8007bc6:	2be5      	cmp	r3, #229	; 0xe5
 8007bc8:	d007      	beq.n	8007bda <dir_find+0x8a>
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d009      	beq.n	8007be8 <dir_find+0x98>
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	2b0f      	cmp	r3, #15
 8007bd8:	d006      	beq.n	8007be8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007bda:	23ff      	movs	r3, #255	; 0xff
 8007bdc:	757b      	strb	r3, [r7, #21]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f04f 32ff 	mov.w	r2, #4294967295
 8007be4:	631a      	str	r2, [r3, #48]	; 0x30
 8007be6:	e061      	b.n	8007cac <dir_find+0x15c>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	2b0f      	cmp	r3, #15
 8007bec:	d136      	bne.n	8007c5c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d157      	bne.n	8007cac <dir_find+0x15c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007bfc:	7dbb      	ldrb	r3, [r7, #22]
 8007bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00d      	beq.n	8007c22 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	7b5b      	ldrb	r3, [r3, #13]
 8007c0c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007c0e:	7dbb      	ldrb	r3, [r7, #22]
 8007c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c14:	75bb      	strb	r3, [r7, #22]
 8007c16:	7dbb      	ldrb	r3, [r7, #22]
 8007c18:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	695a      	ldr	r2, [r3, #20]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007c22:	7dba      	ldrb	r2, [r7, #22]
 8007c24:	7d7b      	ldrb	r3, [r7, #21]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d115      	bne.n	8007c56 <dir_find+0x106>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	330d      	adds	r3, #13
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	7d3a      	ldrb	r2, [r7, #20]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d10e      	bne.n	8007c56 <dir_find+0x106>
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	4610      	mov	r0, r2
 8007c42:	4619      	mov	r1, r3
 8007c44:	f7ff fdee 	bl	8007824 <cmp_lfn>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <dir_find+0x106>
 8007c4e:	7d7b      	ldrb	r3, [r7, #21]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	e000      	b.n	8007c58 <dir_find+0x108>
 8007c56:	23ff      	movs	r3, #255	; 0xff
 8007c58:	757b      	strb	r3, [r7, #21]
 8007c5a:	e027      	b.n	8007cac <dir_find+0x15c>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007c5c:	7d7b      	ldrb	r3, [r7, #21]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <dir_find+0x128>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff ff50 	bl	8007b0c <sum_sfn>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	7d3b      	ldrb	r3, [r7, #20]
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d100      	bne.n	8007c78 <dir_find+0x128>
 8007c76:	e023      	b.n	8007cc0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10c      	bne.n	8007ca0 <dir_find+0x150>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	3324      	adds	r3, #36	; 0x24
 8007c8e:	4610      	mov	r0, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	220b      	movs	r2, #11
 8007c94:	f7fe fe20 	bl	80068d8 <mem_cmp>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d100      	bne.n	8007ca0 <dir_find+0x150>
 8007c9e:	e00f      	b.n	8007cc0 <dir_find+0x170>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007ca0:	23ff      	movs	r3, #255	; 0xff
 8007ca2:	757b      	strb	r3, [r7, #21]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	2100      	movs	r1, #0
 8007cb0:	f7ff fc9a 	bl	80075e8 <dir_next>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f43f af62 	beq.w	8007b84 <dir_find+0x34>

	return res;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop

08007ccc <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08c      	sub	sp, #48	; 0x30
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	61fb      	str	r3, [r7, #28]
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ce0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <dir_register+0x20>
 8007ce8:	2306      	movs	r3, #6
 8007cea:	e0e2      	b.n	8007eb2 <dir_register+0x1e6>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007cec:	2300      	movs	r3, #0
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf0:	e002      	b.n	8007cf8 <dir_register+0x2c>
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	4413      	add	r3, r2
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1f4      	bne.n	8007cf2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3324      	adds	r3, #36	; 0x24
 8007d0c:	f107 020c 	add.w	r2, r7, #12
 8007d10:	4610      	mov	r0, r2
 8007d12:	4619      	mov	r1, r3
 8007d14:	220c      	movs	r2, #12
 8007d16:	f7fe fda5 	bl	8006864 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d034      	beq.n	8007d8e <dir_register+0xc2>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2240      	movs	r2, #64	; 0x40
 8007d28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d30:	e01a      	b.n	8007d68 <dir_register+0x9c>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f107 020c 	add.w	r2, r7, #12
 8007d40:	4608      	mov	r0, r1
 8007d42:	4611      	mov	r1, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	f7ff fe40 	bl	80079cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff feff 	bl	8007b50 <dir_find>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007d58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d000      	beq.n	8007d62 <dir_register+0x96>
 8007d60:	e005      	b.n	8007d6e <dir_register+0xa2>
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
		for (n = 1; n < 100; n++) {
 8007d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d64:	3301      	adds	r3, #1
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	2b63      	cmp	r3, #99	; 0x63
 8007d6c:	d9e1      	bls.n	8007d32 <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	2b64      	cmp	r3, #100	; 0x64
 8007d72:	d101      	bne.n	8007d78 <dir_register+0xac>
 8007d74:	2307      	movs	r3, #7
 8007d76:	e09c      	b.n	8007eb2 <dir_register+0x1e6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007d78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d002      	beq.n	8007d86 <dir_register+0xba>
 8007d80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d84:	e095      	b.n	8007eb2 <dir_register+0x1e6>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007d86:	7dfa      	ldrb	r2, [r7, #23]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d007      	beq.n	8007da8 <dir_register+0xdc>
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	4a47      	ldr	r2, [pc, #284]	; (8007ebc <dir_register+0x1f0>)
 8007d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007da2:	089b      	lsrs	r3, r3, #2
 8007da4:	3301      	adds	r3, #1
 8007da6:	e000      	b.n	8007daa <dir_register+0xde>
 8007da8:	2301      	movs	r3, #1
 8007daa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	6a39      	ldr	r1, [r7, #32]
 8007db0:	f7ff fcb0 	bl	8007714 <dir_alloc>
 8007db4:	4603      	mov	r3, r0
 8007db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d147      	bne.n	8007e52 <dir_register+0x186>
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	623b      	str	r3, [r7, #32]
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d041      	beq.n	8007e52 <dir_register+0x186>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695a      	ldr	r2, [r3, #20]
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	015b      	lsls	r3, r3, #5
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	f7ff fb8a 	bl	80074f4 <dir_sdi>
 8007de0:	4603      	mov	r3, r0
 8007de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d131      	bne.n	8007e52 <dir_register+0x186>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3324      	adds	r3, #36	; 0x24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff fe8a 	bl	8007b0c <sum_sfn>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	69f8      	ldr	r0, [r7, #28]
 8007e02:	4619      	mov	r1, r3
 8007e04:	f7fe ffbc 	bl	8006d80 <move_window>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d000      	beq.n	8007e18 <dir_register+0x14c>
 8007e16:	e01c      	b.n	8007e52 <dir_register+0x186>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	68d8      	ldr	r0, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a19      	ldr	r1, [r3, #32]
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	7efb      	ldrb	r3, [r7, #27]
 8007e26:	f7ff fd6b 	bl	8007900 <put_lfn>
				fs->wflag = 1;
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	2100      	movs	r1, #0
 8007e34:	f7ff fbd8 	bl	80075e8 <dir_next>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d105      	bne.n	8007e52 <dir_register+0x186>
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	623b      	str	r3, [r7, #32]
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1d4      	bne.n	8007dfc <dir_register+0x130>
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d129      	bne.n	8007eae <dir_register+0x1e2>
		res = move_window(fs, dp->sect);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	69f8      	ldr	r0, [r7, #28]
 8007e60:	4619      	mov	r1, r3
 8007e62:	f7fe ff8d 	bl	8006d80 <move_window>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007e6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d11c      	bne.n	8007eae <dir_register+0x1e2>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f7fe fd11 	bl	80068a4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1a      	ldr	r2, [r3, #32]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3324      	adds	r3, #36	; 0x24
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	220b      	movs	r2, #11
 8007e90:	f7fe fce8 	bl	8006864 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	330c      	adds	r3, #12
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8007ea0:	f002 0218 	and.w	r2, r2, #24
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007eae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3730      	adds	r7, #48	; 0x30
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	4ec4ec4f 	.word	0x4ec4ec4f

08007ec0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	; 0x28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	60bb      	str	r3, [r7, #8]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8007edc:	f107 0308 	add.w	r3, r7, #8
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe fd61 	bl	80069a8 <tchar2uni>
 8007ee6:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eee:	d101      	bne.n	8007ef4 <create_name+0x34>
 8007ef0:	2306      	movs	r3, #6
 8007ef2:	e1ff      	b.n	80082f4 <create_name+0x434>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efa:	d309      	bcc.n	8007f10 <create_name+0x50>
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	617a      	str	r2, [r7, #20]
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	4413      	add	r3, r2
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	0c12      	lsrs	r2, r2, #16
 8007f0c:	b292      	uxth	r2, r2
 8007f0e:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 8007f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f16:	2b1f      	cmp	r3, #31
 8007f18:	d920      	bls.n	8007f5c <create_name+0x9c>
 8007f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f1c:	2b2f      	cmp	r3, #47	; 0x2f
 8007f1e:	d01d      	beq.n	8007f5c <create_name+0x9c>
 8007f20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f22:	2b5c      	cmp	r3, #92	; 0x5c
 8007f24:	d01a      	beq.n	8007f5c <create_name+0x9c>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f28:	2b7f      	cmp	r3, #127	; 0x7f
 8007f2a:	d809      	bhi.n	8007f40 <create_name+0x80>
 8007f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f2e:	48a8      	ldr	r0, [pc, #672]	; (80081d0 <create_name+0x310>)
 8007f30:	4619      	mov	r1, r3
 8007f32:	f7fe fcf9 	bl	8006928 <chk_chr>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <create_name+0x80>
 8007f3c:	2306      	movs	r3, #6
 8007f3e:	e1d9      	b.n	80082f4 <create_name+0x434>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2bfe      	cmp	r3, #254	; 0xfe
 8007f44:	d901      	bls.n	8007f4a <create_name+0x8a>
 8007f46:	2306      	movs	r3, #6
 8007f48:	e1d4      	b.n	80082f4 <create_name+0x434>
		lfn[di++] = wc;					/* Store the Unicode character */
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	617a      	str	r2, [r7, #20]
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4413      	add	r3, r2
 8007f56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f58:	801a      	strh	r2, [r3, #0]
	}
 8007f5a:	e7bf      	b.n	8007edc <create_name+0x1c>
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8007f5c:	e002      	b.n	8007f64 <create_name+0xa4>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	3301      	adds	r3, #1
 8007f62:	60bb      	str	r3, [r7, #8]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b2f      	cmp	r3, #47	; 0x2f
 8007f6a:	d0f8      	beq.n	8007f5e <create_name+0x9e>
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b5c      	cmp	r3, #92	; 0x5c
 8007f72:	d0f4      	beq.n	8007f5e <create_name+0x9e>
	*path = p;							/* Return pointer to the next segment */
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	601a      	str	r2, [r3, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f7c:	2b1f      	cmp	r3, #31
 8007f7e:	d801      	bhi.n	8007f84 <create_name+0xc4>
 8007f80:	2304      	movs	r3, #4
 8007f82:	e000      	b.n	8007f86 <create_name+0xc6>
 8007f84:	2300      	movs	r3, #0
 8007f86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d109      	bne.n	8007fa4 <create_name+0xe4>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007f96:	3b01      	subs	r3, #1
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8007fa2:	d016      	beq.n	8007fd2 <create_name+0x112>
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d13c      	bne.n	8008024 <create_name+0x164>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	2b2e      	cmp	r3, #46	; 0x2e
 8007fbc:	d132      	bne.n	8008024 <create_name+0x164>
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007fc4:	3b02      	subs	r3, #2
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	2b2e      	cmp	r3, #46	; 0x2e
 8007fd0:	d128      	bne.n	8008024 <create_name+0x164>
		lfn[di] = 0;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	4413      	add	r3, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8007fde:	2300      	movs	r3, #0
 8007fe0:	623b      	str	r3, [r7, #32]
 8007fe2:	e00f      	b.n	8008004 <create_name+0x144>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8007fe4:	6a3a      	ldr	r2, [r7, #32]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d201      	bcs.n	8007ff0 <create_name+0x130>
 8007fec:	212e      	movs	r1, #46	; 0x2e
 8007fee:	e000      	b.n	8007ff2 <create_name+0x132>
 8007ff0:	2120      	movs	r1, #32
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	3320      	adds	r3, #32
 8007ffa:	460a      	mov	r2, r1
 8007ffc:	711a      	strb	r2, [r3, #4]

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
		lfn[di] = 0;
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	3301      	adds	r3, #1
 8008002:	623b      	str	r3, [r7, #32]
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	2b0a      	cmp	r3, #10
 8008008:	d9ec      	bls.n	8007fe4 <create_name+0x124>
			dp->fn[i] = (i < di) ? '.' : ' ';
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800800a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800800e:	f043 0320 	orr.w	r3, r3, #32
 8008012:	b2d9      	uxtb	r1, r3
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	4413      	add	r3, r2
 800801a:	3320      	adds	r3, #32
 800801c:	460a      	mov	r2, r1
 800801e:	711a      	strb	r2, [r3, #4]
		return FR_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	e167      	b.n	80082f4 <create_name+0x434>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008024:	e012      	b.n	800804c <create_name+0x18c>
		wc = lfn[di - 1];
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800802c:	3b01      	subs	r3, #1
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4413      	add	r3, r2
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
 8008038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800803a:	2b20      	cmp	r3, #32
 800803c:	d003      	beq.n	8008046 <create_name+0x186>
 800803e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008040:	2b2e      	cmp	r3, #46	; 0x2e
 8008042:	d000      	beq.n	8008046 <create_name+0x186>
 8008044:	e005      	b.n	8008052 <create_name+0x192>
		di--;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	3b01      	subs	r3, #1
 800804a:	617b      	str	r3, [r7, #20]
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e9      	bne.n	8008026 <create_name+0x166>
		wc = lfn[di - 1];
		if (wc != ' ' && wc != '.') break;
		di--;
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4413      	add	r3, r2
 800805a:	2200      	movs	r2, #0
 800805c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <create_name+0x1a8>
 8008064:	2306      	movs	r3, #6
 8008066:	e145      	b.n	80082f4 <create_name+0x434>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8008068:	2300      	movs	r3, #0
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	e002      	b.n	8008074 <create_name+0x1b4>
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	3301      	adds	r3, #1
 8008072:	61bb      	str	r3, [r7, #24]
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	4413      	add	r3, r2
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	2b20      	cmp	r3, #32
 8008080:	d0f5      	beq.n	800806e <create_name+0x1ae>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d106      	bne.n	8008096 <create_name+0x1d6>
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4413      	add	r3, r2
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	2b2e      	cmp	r3, #46	; 0x2e
 8008094:	d105      	bne.n	80080a2 <create_name+0x1e2>
 8008096:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800809a:	f043 0303 	orr.w	r3, r3, #3
 800809e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 80080a2:	e002      	b.n	80080aa <create_name+0x1ea>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d009      	beq.n	80080c4 <create_name+0x204>
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80080b6:	3b01      	subs	r3, #1
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4413      	add	r3, r2
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	2b2e      	cmp	r3, #46	; 0x2e
 80080c2:	d1ef      	bne.n	80080a4 <create_name+0x1e4>

	mem_set(dp->fn, ' ', 11);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	3324      	adds	r3, #36	; 0x24
 80080c8:	4618      	mov	r0, r3
 80080ca:	2120      	movs	r1, #32
 80080cc:	220b      	movs	r2, #11
 80080ce:	f7fe fbe9 	bl	80068a4 <mem_set>
	i = b = 0; ni = 8;
 80080d2:	2300      	movs	r3, #0
 80080d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80080d8:	2300      	movs	r3, #0
 80080da:	623b      	str	r3, [r7, #32]
 80080dc:	2308      	movs	r3, #8
 80080de:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	61ba      	str	r2, [r7, #24]
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4413      	add	r3, r2
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 80080f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d100      	bne.n	80080f8 <create_name+0x238>
 80080f6:	e0b6      	b.n	8008266 <create_name+0x3a6>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 80080f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	d006      	beq.n	800810c <create_name+0x24c>
 80080fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008100:	2b2e      	cmp	r3, #46	; 0x2e
 8008102:	d10a      	bne.n	800811a <create_name+0x25a>
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	429a      	cmp	r2, r3
 800810a:	d006      	beq.n	800811a <create_name+0x25a>
			cf |= NS_LOSS | NS_LFN;
 800810c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008110:	f043 0303 	orr.w	r3, r3, #3
 8008114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
 8008118:	e0a4      	b.n	8008264 <create_name+0x3a4>
		}

		if (i >= ni || si == di) {		/* End of field? */
 800811a:	6a3a      	ldr	r2, [r7, #32]
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	429a      	cmp	r2, r3
 8008120:	d203      	bcs.n	800812a <create_name+0x26a>
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	429a      	cmp	r2, r3
 8008128:	d124      	bne.n	8008174 <create_name+0x2b4>
			if (ni == 11) {				/* Name extension overflow? */
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	2b0b      	cmp	r3, #11
 800812e:	d106      	bne.n	800813e <create_name+0x27e>
				cf |= NS_LOSS | NS_LFN;
 8008130:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008134:	f043 0303 	orr.w	r3, r3, #3
 8008138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 800813c:	e093      	b.n	8008266 <create_name+0x3a6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	429a      	cmp	r2, r3
 8008144:	d005      	beq.n	8008152 <create_name+0x292>
 8008146:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800814a:	f043 0303 	orr.w	r3, r3, #3
 800814e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	429a      	cmp	r2, r3
 8008158:	d900      	bls.n	800815c <create_name+0x29c>
 800815a:	e084      	b.n	8008266 <create_name+0x3a6>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	61bb      	str	r3, [r7, #24]
 8008160:	2308      	movs	r3, #8
 8008162:	623b      	str	r3, [r7, #32]
 8008164:	230b      	movs	r3, #11
 8008166:	61fb      	str	r3, [r7, #28]
 8008168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
 8008172:	e077      	b.n	8008264 <create_name+0x3a4>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8008174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008176:	2b7f      	cmp	r3, #127	; 0x7f
 8008178:	d918      	bls.n	80081ac <create_name+0x2ec>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800817a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800817e:	f043 0302 	orr.w	r3, r3, #2
 8008182:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* At DBCS */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8008186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008188:	4618      	mov	r0, r3
 800818a:	f240 3152 	movw	r1, #850	; 0x352
 800818e:	f001 f9b1 	bl	80094f4 <ff_uni2oem>
 8008192:	4603      	mov	r3, r0
 8008194:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8008196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <create_name+0x2ec>
 80081a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a6:	4a0b      	ldr	r2, [pc, #44]	; (80081d4 <create_name+0x314>)
 80081a8:	5cd3      	ldrb	r3, [r2, r3]
 80081aa:	84bb      	strh	r3, [r7, #36]	; 0x24
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 80081ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081ae:	2bff      	cmp	r3, #255	; 0xff
 80081b0:	d91f      	bls.n	80081f2 <create_name+0x332>
			if (i >= ni - 1) {			/* Field overflow? */
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	1e5a      	subs	r2, r3, #1
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d80d      	bhi.n	80081d8 <create_name+0x318>
				cf |= NS_LOSS | NS_LFN;
 80081bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081c0:	f043 0303 	orr.w	r3, r3, #3
 80081c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	623b      	str	r3, [r7, #32]
 80081cc:	e04a      	b.n	8008264 <create_name+0x3a4>
 80081ce:	bf00      	nop
 80081d0:	0800fde4 	.word	0x0800fde4
 80081d4:	0800fd64 	.word	0x0800fd64
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	623a      	str	r2, [r7, #32]
 80081de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80081e0:	0a12      	lsrs	r2, r2, #8
 80081e2:	b292      	uxth	r2, r2
 80081e4:	b2d1      	uxtb	r1, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4413      	add	r3, r2
 80081ea:	460a      	mov	r2, r1
 80081ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80081f0:	e02e      	b.n	8008250 <create_name+0x390>
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 80081f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <create_name+0x348>
 80081f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081fa:	4840      	ldr	r0, [pc, #256]	; (80082fc <create_name+0x43c>)
 80081fc:	4619      	mov	r1, r3
 80081fe:	f7fe fb93 	bl	8006928 <chk_chr>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d008      	beq.n	800821a <create_name+0x35a>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008208:	235f      	movs	r3, #95	; 0x5f
 800820a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800820c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008210:	f043 0303 	orr.w	r3, r3, #3
 8008214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008218:	e01a      	b.n	8008250 <create_name+0x390>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800821a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800821c:	2b40      	cmp	r3, #64	; 0x40
 800821e:	d908      	bls.n	8008232 <create_name+0x372>
 8008220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008222:	2b5a      	cmp	r3, #90	; 0x5a
 8008224:	d805      	bhi.n	8008232 <create_name+0x372>
					b |= 2;
 8008226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800822a:	f043 0302 	orr.w	r3, r3, #2
 800822e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8008232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008234:	2b60      	cmp	r3, #96	; 0x60
 8008236:	d90b      	bls.n	8008250 <create_name+0x390>
 8008238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800823a:	2b7a      	cmp	r3, #122	; 0x7a
 800823c:	d808      	bhi.n	8008250 <create_name+0x390>
					b |= 1; wc -= 0x20;
 800823e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800824a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800824c:	3b20      	subs	r3, #32
 800824e:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	623a      	str	r2, [r7, #32]
 8008256:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008258:	b2d1      	uxtb	r1, r2
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4413      	add	r3, r2
 800825e:	460a      	mov	r2, r1
 8008260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
 8008264:	e73c      	b.n	80080e0 <create_name+0x220>

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800826c:	2be5      	cmp	r3, #229	; 0xe5
 800826e:	d103      	bne.n	8008278 <create_name+0x3b8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2205      	movs	r2, #5
 8008274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	2b08      	cmp	r3, #8
 800827c:	d104      	bne.n	8008288 <create_name+0x3c8>
 800827e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8008288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800828c:	f003 030c 	and.w	r3, r3, #12
 8008290:	2b0c      	cmp	r3, #12
 8008292:	d005      	beq.n	80082a0 <create_name+0x3e0>
 8008294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008298:	f003 0303 	and.w	r3, r3, #3
 800829c:	2b03      	cmp	r3, #3
 800829e:	d105      	bne.n	80082ac <create_name+0x3ec>
 80082a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082a4:	f043 0302 	orr.w	r3, r3, #2
 80082a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 80082ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d117      	bne.n	80082e8 <create_name+0x428>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 80082b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <create_name+0x410>
 80082c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082c8:	f043 0310 	orr.w	r3, r3, #16
 80082cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 80082d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <create_name+0x428>
 80082dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082e0:	f043 0308 	orr.w	r3, r3, #8
 80082e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80082f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3728      	adds	r7, #40	; 0x28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	0800fdf0 	.word	0x0800fdf0

08008300 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	613b      	str	r3, [r7, #16]


#if FF_FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	2b2f      	cmp	r3, #47	; 0x2f
 8008316:	d008      	beq.n	800832a <follow_path+0x2a>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b5c      	cmp	r3, #92	; 0x5c
 800831e:	d004      	beq.n	800832a <follow_path+0x2a>
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	699a      	ldr	r2, [r3, #24]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	609a      	str	r2, [r3, #8]
 8008328:	e00e      	b.n	8008348 <follow_path+0x48>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800832a:	e002      	b.n	8008332 <follow_path+0x32>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	3301      	adds	r3, #1
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	2b2f      	cmp	r3, #47	; 0x2f
 8008338:	d0f8      	beq.n	800832c <follow_path+0x2c>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b5c      	cmp	r3, #92	; 0x5c
 8008340:	d0f4      	beq.n	800832c <follow_path+0x2c>
		dp->obj.sclust = 0;					/* Start from root directory */
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	2b1f      	cmp	r3, #31
 800834e:	d80a      	bhi.n	8008366 <follow_path+0x66>
		dp->fn[NSFLAG] = NS_NONAME;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2280      	movs	r2, #128	; 0x80
 8008354:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	2100      	movs	r1, #0
 800835c:	f7ff f8ca 	bl	80074f4 <dir_sdi>
 8008360:	4603      	mov	r3, r0
 8008362:	75fb      	strb	r3, [r7, #23]
 8008364:	e052      	b.n	800840c <follow_path+0x10c>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008366:	463b      	mov	r3, r7
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	4619      	mov	r1, r3
 800836c:	f7ff fda8 	bl	8007ec0 <create_name>
 8008370:	4603      	mov	r3, r0
 8008372:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008374:	7dfb      	ldrb	r3, [r7, #23]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d000      	beq.n	800837c <follow_path+0x7c>
 800837a:	e047      	b.n	800840c <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff fbe7 	bl	8007b50 <dir_find>
 8008382:	4603      	mov	r3, r0
 8008384:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800838c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d01d      	beq.n	80083d0 <follow_path+0xd0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	2b04      	cmp	r3, #4
 8008398:	d119      	bne.n	80083ce <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	f003 0320 	and.w	r3, r3, #32
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00c      	beq.n	80083be <follow_path+0xbe>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	f003 0304 	and.w	r3, r3, #4
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d100      	bne.n	80083b0 <follow_path+0xb0>
 80083ae:	e02c      	b.n	800840a <follow_path+0x10a>
						dp->fn[NSFLAG] = NS_NONAME;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2280      	movs	r2, #128	; 0x80
 80083b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	75fb      	strb	r3, [r7, #23]
 80083bc:	e007      	b.n	80083ce <follow_path+0xce>
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <follow_path+0xce>
 80083c8:	2305      	movs	r3, #5
 80083ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80083cc:	e01e      	b.n	800840c <follow_path+0x10c>
 80083ce:	e01d      	b.n	800840c <follow_path+0x10c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d000      	beq.n	80083dc <follow_path+0xdc>
 80083da:	e017      	b.n	800840c <follow_path+0x10c>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	799b      	ldrb	r3, [r3, #6]
 80083e0:	f003 0310 	and.w	r3, r3, #16
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <follow_path+0xee>
				res = FR_NO_PATH; break;
 80083e8:	2305      	movs	r3, #5
 80083ea:	75fb      	strb	r3, [r7, #23]
 80083ec:	e00e      	b.n	800840c <follow_path+0x10c>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f6:	3338      	adds	r3, #56	; 0x38
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	4413      	add	r3, r2
 80083fc:	6938      	ldr	r0, [r7, #16]
 80083fe:	4619      	mov	r1, r3
 8008400:	f7ff f9d0 	bl	80077a4 <ld_clust>
 8008404:	4602      	mov	r2, r0
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	609a      	str	r2, [r3, #8]
			}
		}
 800840a:	e7ac      	b.n	8008366 <follow_path+0x66>
	}

	return res;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop

08008418 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8008418:	b480      	push	{r7}
 800841a:	b089      	sub	sp, #36	; 0x24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8008420:	f04f 33ff 	mov.w	r3, #4294967295
 8008424:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <get_ldnumber+0x22>
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	e02e      	b.n	8008498 <get_ldnumber+0x80>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	61fa      	str	r2, [r7, #28]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	73fb      	strb	r3, [r7, #15]
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	2b1f      	cmp	r3, #31
 8008448:	d902      	bls.n	8008450 <get_ldnumber+0x38>
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	2b3a      	cmp	r3, #58	; 0x3a
 800844e:	d1f4      	bne.n	800843a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	2b3a      	cmp	r3, #58	; 0x3a
 8008454:	d11c      	bne.n	8008490 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8008456:	2301      	movs	r3, #1
 8008458:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b2f      	cmp	r3, #47	; 0x2f
 8008460:	d90c      	bls.n	800847c <get_ldnumber+0x64>
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b39      	cmp	r3, #57	; 0x39
 8008468:	d808      	bhi.n	800847c <get_ldnumber+0x64>
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1c9a      	adds	r2, r3, #2
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	429a      	cmp	r2, r3
 8008472:	d103      	bne.n	800847c <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	3b30      	subs	r3, #48	; 0x30
 800847a:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d104      	bne.n	800848c <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69fa      	ldr	r2, [r7, #28]
 800848a:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	e003      	b.n	8008498 <get_ldnumber+0x80>
		}
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 8008490:	4b04      	ldr	r3, [pc, #16]	; (80084a4 <get_ldnumber+0x8c>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8008496:	697b      	ldr	r3, [r7, #20]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3724      	adds	r7, #36	; 0x24
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	20000276 	.word	0x20000276

080084a8 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	70da      	strb	r2, [r3, #3]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f04f 32ff 	mov.w	r2, #4294967295
 80084be:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	f7fe fc5c 	bl	8006d80 <move_window>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <check_fs+0x2a>
 80084ce:	2304      	movs	r3, #4
 80084d0:	e035      	b.n	800853e <check_fs+0x96>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f203 2336 	addw	r3, r3, #566	; 0x236
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe f941 	bl	8006760 <ld_word>
 80084de:	4603      	mov	r3, r0
 80084e0:	461a      	mov	r2, r3
 80084e2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d001      	beq.n	80084ee <check_fs+0x46>
 80084ea:	2303      	movs	r3, #3
 80084ec:	e027      	b.n	800853e <check_fs+0x96>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084f4:	2be9      	cmp	r3, #233	; 0xe9
 80084f6:	d009      	beq.n	800850c <check_fs+0x64>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084fe:	2beb      	cmp	r3, #235	; 0xeb
 8008500:	d004      	beq.n	800850c <check_fs+0x64>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008508:	2be8      	cmp	r3, #232	; 0xe8
 800850a:	d117      	bne.n	800853c <check_fs+0x94>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	336e      	adds	r3, #110	; 0x6e
 8008510:	4618      	mov	r0, r3
 8008512:	490d      	ldr	r1, [pc, #52]	; (8008548 <check_fs+0xa0>)
 8008514:	2203      	movs	r2, #3
 8008516:	f7fe f9df 	bl	80068d8 <mem_cmp>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <check_fs+0x7c>
 8008520:	2300      	movs	r3, #0
 8008522:	e00c      	b.n	800853e <check_fs+0x96>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	338a      	adds	r3, #138	; 0x8a
 8008528:	4618      	mov	r0, r3
 800852a:	4908      	ldr	r1, [pc, #32]	; (800854c <check_fs+0xa4>)
 800852c:	2205      	movs	r2, #5
 800852e:	f7fe f9d3 	bl	80068d8 <mem_cmp>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <check_fs+0x94>
 8008538:	2300      	movs	r3, #0
 800853a:	e000      	b.n	800853e <check_fs+0x96>
	}
	return 2;	/* Valid BS but not FAT */
 800853c:	2302      	movs	r3, #2
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	0800fdf8 	.word	0x0800fdf8
 800854c:	0800fdfc 	.word	0x0800fdfc

08008550 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b096      	sub	sp, #88	; 0x58
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	4613      	mov	r3, r2
 800855c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f7ff ff57 	bl	8008418 <get_ldnumber>
 800856a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800856c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856e:	2b00      	cmp	r3, #0
 8008570:	da01      	bge.n	8008576 <find_volume+0x26>
 8008572:	230b      	movs	r3, #11
 8008574:	e229      	b.n	80089ca <find_volume+0x47a>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8008576:	4aa4      	ldr	r2, [pc, #656]	; (8008808 <find_volume+0x2b8>)
 8008578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800857e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <find_volume+0x3a>
 8008586:	230c      	movs	r3, #12
 8008588:	e21f      	b.n	80089ca <find_volume+0x47a>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800858e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	f023 0301 	bic.w	r3, r3, #1
 8008596:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01a      	beq.n	80085d6 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 f8ff 	bl	80097a8 <disk_status>
 80085aa:	4603      	mov	r3, r0
 80085ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80085b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10c      	bne.n	80085d6 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80085bc:	79fb      	ldrb	r3, [r7, #7]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d007      	beq.n	80085d2 <find_volume+0x82>
 80085c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80085ce:	230a      	movs	r3, #10
 80085d0:	e1fb      	b.n	80089ca <find_volume+0x47a>
			}
			return FR_OK;				/* The filesystem object is valid */
 80085d2:	2300      	movs	r3, #0
 80085d4:	e1f9      	b.n	80089ca <find_volume+0x47a>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	2200      	movs	r2, #0
 80085da:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80085dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	785b      	ldrb	r3, [r3, #1]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 f8b5 	bl	8009758 <disk_initialize>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80085f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008600:	2303      	movs	r3, #3
 8008602:	e1e2      	b.n	80089ca <find_volume+0x47a>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d007      	beq.n	800861a <find_volume+0xca>
 800860a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008616:	230a      	movs	r3, #10
 8008618:	e1d7      	b.n	80089ca <find_volume+0x47a>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800861e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008620:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008622:	f7ff ff41 	bl	80084a8 <check_fs>
 8008626:	4603      	mov	r3, r0
 8008628:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800862c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008630:	2b02      	cmp	r3, #2
 8008632:	d14a      	bne.n	80086ca <find_volume+0x17a>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008634:	2300      	movs	r3, #0
 8008636:	643b      	str	r3, [r7, #64]	; 0x40
 8008638:	e01e      	b.n	8008678 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800863a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008642:	3338      	adds	r3, #56	; 0x38
 8008644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008646:	4413      	add	r3, r2
 8008648:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	3304      	adds	r3, #4
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d006      	beq.n	8008662 <find_volume+0x112>
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	3308      	adds	r3, #8
 8008658:	4618      	mov	r0, r3
 800865a:	f7fe f899 	bl	8006790 <ld_dword>
 800865e:	4602      	mov	r2, r0
 8008660:	e000      	b.n	8008664 <find_volume+0x114>
 8008662:	2200      	movs	r2, #0
 8008664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800866c:	440b      	add	r3, r1
 800866e:	f843 2c44 	str.w	r2, [r3, #-68]

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008674:	3301      	adds	r3, #1
 8008676:	643b      	str	r3, [r7, #64]	; 0x40
 8008678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867a:	2b03      	cmp	r3, #3
 800867c:	d9dd      	bls.n	800863a <find_volume+0xea>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800867e:	2300      	movs	r3, #0
 8008680:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8008682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <find_volume+0x13e>
 8008688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800868a:	3b01      	subs	r3, #1
 800868c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800868e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008696:	4413      	add	r3, r2
 8008698:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800869c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800869e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <find_volume+0x160>
 80086a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086a8:	f7ff fefe 	bl	80084a8 <check_fs>
 80086ac:	4603      	mov	r3, r0
 80086ae:	e000      	b.n	80086b2 <find_volume+0x162>
 80086b0:	2303      	movs	r3, #3
 80086b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80086b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d905      	bls.n	80086ca <find_volume+0x17a>
 80086be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c0:	3301      	adds	r3, #1
 80086c2:	643b      	str	r3, [r7, #64]	; 0x40
 80086c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d9e1      	bls.n	800868e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80086ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d101      	bne.n	80086d6 <find_volume+0x186>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e179      	b.n	80089ca <find_volume+0x47a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80086d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d901      	bls.n	80086e2 <find_volume+0x192>
 80086de:	230d      	movs	r3, #13
 80086e0:	e173      	b.n	80089ca <find_volume+0x47a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	3343      	adds	r3, #67	; 0x43
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe f83a 	bl	8006760 <ld_word>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f2:	d001      	beq.n	80086f8 <find_volume+0x1a8>
 80086f4:	230d      	movs	r3, #13
 80086f6:	e168      	b.n	80089ca <find_volume+0x47a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	334e      	adds	r3, #78	; 0x4e
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe f82f 	bl	8006760 <ld_word>
 8008702:	4603      	mov	r3, r0
 8008704:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008708:	2b00      	cmp	r3, #0
 800870a:	d105      	bne.n	8008718 <find_volume+0x1c8>
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	335c      	adds	r3, #92	; 0x5c
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe f83d 	bl	8006790 <ld_dword>
 8008716:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800871c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	789b      	ldrb	r3, [r3, #2]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d005      	beq.n	800873c <find_volume+0x1ec>
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	789b      	ldrb	r3, [r3, #2]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d001      	beq.n	800873c <find_volume+0x1ec>
 8008738:	230d      	movs	r3, #13
 800873a:	e146      	b.n	80089ca <find_volume+0x47a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	789b      	ldrb	r3, [r3, #2]
 8008740:	461a      	mov	r2, r3
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	fb02 f303 	mul.w	r3, r2, r3
 8008748:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008750:	b29a      	uxth	r2, r3
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008758:	895b      	ldrh	r3, [r3, #10]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d008      	beq.n	8008770 <find_volume+0x220>
 800875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008760:	895b      	ldrh	r3, [r3, #10]
 8008762:	461a      	mov	r2, r3
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	895b      	ldrh	r3, [r3, #10]
 8008768:	3b01      	subs	r3, #1
 800876a:	4013      	ands	r3, r2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <find_volume+0x224>
 8008770:	230d      	movs	r3, #13
 8008772:	e12a      	b.n	80089ca <find_volume+0x47a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	3349      	adds	r3, #73	; 0x49
 8008778:	4618      	mov	r0, r3
 800877a:	f7fd fff1 	bl	8006760 <ld_word>
 800877e:	4603      	mov	r3, r0
 8008780:	461a      	mov	r2, r3
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	891b      	ldrh	r3, [r3, #8]
 800878a:	f003 030f 	and.w	r3, r3, #15
 800878e:	b29b      	uxth	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <find_volume+0x248>
 8008794:	230d      	movs	r3, #13
 8008796:	e118      	b.n	80089ca <find_volume+0x47a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	334b      	adds	r3, #75	; 0x4b
 800879c:	4618      	mov	r0, r3
 800879e:	f7fd ffdf 	bl	8006760 <ld_word>
 80087a2:	4603      	mov	r3, r0
 80087a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80087a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d105      	bne.n	80087b8 <find_volume+0x268>
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	3358      	adds	r3, #88	; 0x58
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fd ffed 	bl	8006790 <ld_dword>
 80087b6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	3346      	adds	r3, #70	; 0x46
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fd ffcf 	bl	8006760 <ld_word>
 80087c2:	4603      	mov	r3, r0
 80087c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80087c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <find_volume+0x280>
 80087cc:	230d      	movs	r3, #13
 80087ce:	e0fc      	b.n	80089ca <find_volume+0x47a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80087d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80087d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d4:	4413      	add	r3, r2
 80087d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087d8:	8912      	ldrh	r2, [r2, #8]
 80087da:	0912      	lsrs	r2, r2, #4
 80087dc:	b292      	uxth	r2, r2
 80087de:	4413      	add	r3, r2
 80087e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80087e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d201      	bcs.n	80087ee <find_volume+0x29e>
 80087ea:	230d      	movs	r3, #13
 80087ec:	e0ed      	b.n	80089ca <find_volume+0x47a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80087ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087f6:	8952      	ldrh	r2, [r2, #10]
 80087f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	2b00      	cmp	r3, #0
 8008802:	d103      	bne.n	800880c <find_volume+0x2bc>
 8008804:	230d      	movs	r3, #13
 8008806:	e0e0      	b.n	80089ca <find_volume+0x47a>
 8008808:	20000270 	.word	0x20000270
		fmt = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	4a6f      	ldr	r2, [pc, #444]	; (80089d4 <find_volume+0x484>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d802      	bhi.n	8008820 <find_volume+0x2d0>
 800881a:	2303      	movs	r3, #3
 800881c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008826:	4293      	cmp	r3, r2
 8008828:	d802      	bhi.n	8008830 <find_volume+0x2e0>
 800882a:	2302      	movs	r3, #2
 800882c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008836:	4293      	cmp	r3, r2
 8008838:	d802      	bhi.n	8008840 <find_volume+0x2f0>
 800883a:	2301      	movs	r3, #1
 800883c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8008840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <find_volume+0x2fc>
 8008848:	230d      	movs	r3, #13
 800884a:	e0be      	b.n	80089ca <find_volume+0x47a>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	1c9a      	adds	r2, r3, #2
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008858:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800885a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800885c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800885e:	441a      	add	r2, r3
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008864:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	441a      	add	r2, r3
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800886e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008872:	2b03      	cmp	r3, #3
 8008874:	d11c      	bne.n	80088b0 <find_volume+0x360>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	3362      	adds	r3, #98	; 0x62
 800887a:	4618      	mov	r0, r3
 800887c:	f7fd ff70 	bl	8006760 <ld_word>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <find_volume+0x33a>
 8008886:	230d      	movs	r3, #13
 8008888:	e09f      	b.n	80089ca <find_volume+0x47a>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	891b      	ldrh	r3, [r3, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <find_volume+0x346>
 8008892:	230d      	movs	r3, #13
 8008894:	e099      	b.n	80089ca <find_volume+0x47a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	3364      	adds	r3, #100	; 0x64
 800889a:	4618      	mov	r0, r3
 800889c:	f7fd ff78 	bl	8006790 <ld_dword>
 80088a0:	4602      	mov	r2, r0
 80088a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80088a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	647b      	str	r3, [r7, #68]	; 0x44
 80088ae:	e01f      	b.n	80088f0 <find_volume+0x3a0>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	891b      	ldrh	r3, [r3, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <find_volume+0x36c>
 80088b8:	230d      	movs	r3, #13
 80088ba:	e086      	b.n	80089ca <find_volume+0x47a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80088bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c2:	441a      	add	r2, r3
 80088c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80088c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d103      	bne.n	80088d8 <find_volume+0x388>
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	e00a      	b.n	80088ee <find_volume+0x39e>
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	69da      	ldr	r2, [r3, #28]
 80088dc:	4613      	mov	r3, r2
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	4413      	add	r3, r2
 80088e2:	085a      	lsrs	r2, r3, #1
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	69db      	ldr	r3, [r3, #28]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	4413      	add	r3, r2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80088ee:	647b      	str	r3, [r7, #68]	; 0x44
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	6a1a      	ldr	r2, [r3, #32]
 80088f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80088fa:	0a5b      	lsrs	r3, r3, #9
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d201      	bcs.n	8008904 <find_volume+0x3b4>
 8008900:	230d      	movs	r3, #13
 8008902:	e062      	b.n	80089ca <find_volume+0x47a>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	f04f 32ff 	mov.w	r2, #4294967295
 800890a:	615a      	str	r2, [r3, #20]
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	695a      	ldr	r2, [r3, #20]
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	2280      	movs	r2, #128	; 0x80
 8008918:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800891a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800891e:	2b03      	cmp	r3, #3
 8008920:	d13b      	bne.n	800899a <find_volume+0x44a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	3368      	adds	r3, #104	; 0x68
 8008926:	4618      	mov	r0, r3
 8008928:	f7fd ff1a 	bl	8006760 <ld_word>
 800892c:	4603      	mov	r3, r0
 800892e:	2b01      	cmp	r3, #1
 8008930:	d133      	bne.n	800899a <find_volume+0x44a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008934:	3301      	adds	r3, #1
 8008936:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008938:	4619      	mov	r1, r3
 800893a:	f7fe fa21 	bl	8006d80 <move_window>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d12a      	bne.n	800899a <find_volume+0x44a>
		{
			fs->fsi_flag = 0;
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	2200      	movs	r2, #0
 8008948:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	f203 2336 	addw	r3, r3, #566	; 0x236
 8008950:	4618      	mov	r0, r3
 8008952:	f7fd ff05 	bl	8006760 <ld_word>
 8008956:	4603      	mov	r3, r0
 8008958:	461a      	mov	r2, r3
 800895a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800895e:	429a      	cmp	r2, r3
 8008960:	d11b      	bne.n	800899a <find_volume+0x44a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	3338      	adds	r3, #56	; 0x38
 8008966:	4618      	mov	r0, r3
 8008968:	f7fd ff12 	bl	8006790 <ld_dword>
 800896c:	4602      	mov	r2, r0
 800896e:	4b1a      	ldr	r3, [pc, #104]	; (80089d8 <find_volume+0x488>)
 8008970:	429a      	cmp	r2, r3
 8008972:	d112      	bne.n	800899a <find_volume+0x44a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008976:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800897a:	4618      	mov	r0, r3
 800897c:	f7fd ff08 	bl	8006790 <ld_dword>
 8008980:	4602      	mov	r2, r0
 8008982:	4b16      	ldr	r3, [pc, #88]	; (80089dc <find_volume+0x48c>)
 8008984:	429a      	cmp	r2, r3
 8008986:	d108      	bne.n	800899a <find_volume+0x44a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800898e:	4618      	mov	r0, r3
 8008990:	f7fd fefe 	bl	8006790 <ld_dword>
 8008994:	4602      	mov	r2, r0
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80089a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80089a2:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <find_volume+0x490>)
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	4b0d      	ldr	r3, [pc, #52]	; (80089e0 <find_volume+0x490>)
 80089ac:	801a      	strh	r2, [r3, #0]
 80089ae:	4b0c      	ldr	r3, [pc, #48]	; (80089e0 <find_volume+0x490>)
 80089b0:	881a      	ldrh	r2, [r3, #0]
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	4a0a      	ldr	r2, [pc, #40]	; (80089e4 <find_volume+0x494>)
 80089ba:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80089bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089be:	2200      	movs	r2, #0
 80089c0:	619a      	str	r2, [r3, #24]
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80089c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089c4:	f7fe f97a 	bl	8006cbc <clear_lock>
#endif
	return FR_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3758      	adds	r7, #88	; 0x58
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	0ffffff5 	.word	0x0ffffff5
 80089d8:	41615252 	.word	0x41615252
 80089dc:	61417272 	.word	0x61417272
 80089e0:	20000274 	.word	0x20000274
 80089e4:	20000288 	.word	0x20000288

080089e8 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80089f2:	2309      	movs	r3, #9
 80089f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01c      	beq.n	8008a36 <validate+0x4e>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d018      	beq.n	8008a36 <validate+0x4e>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d013      	beq.n	8008a36 <validate+0x4e>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	889a      	ldrh	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	88db      	ldrh	r3, [r3, #6]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d10c      	bne.n	8008a36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	785b      	ldrb	r3, [r3, #1]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fec0 	bl	80097a8 <disk_status>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <validate+0x4e>
			res = FR_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d102      	bne.n	8008a42 <validate+0x5a>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	e000      	b.n	8008a44 <validate+0x5c>
 8008a42:	2300      	movs	r3, #0
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	6013      	str	r3, [r2, #0]
	return res;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop

08008a54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008a66:	f107 0310 	add.w	r3, r7, #16
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff fcd4 	bl	8008418 <get_ldnumber>
 8008a70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	da01      	bge.n	8008a7c <f_mount+0x28>
 8008a78:	230b      	movs	r3, #11
 8008a7a:	e029      	b.n	8008ad0 <f_mount+0x7c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008a7c:	4a16      	ldr	r2, [pc, #88]	; (8008ad8 <f_mount+0x84>)
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <f_mount+0x44>
#if FF_FS_LOCK != 0
		clear_lock(cfs);
 8008a8c:	69b8      	ldr	r0, [r7, #24]
 8008a8e:	f7fe f915 	bl	8006cbc <clear_lock>
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2200      	movs	r2, #0
 8008a96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d002      	beq.n	8008aa4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	490c      	ldr	r1, [pc, #48]	; (8008ad8 <f_mount+0x84>)
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <f_mount+0x64>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e00b      	b.n	8008ad0 <f_mount+0x7c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008ab8:	f107 0208 	add.w	r2, r7, #8
 8008abc:	f107 030c 	add.w	r3, r7, #12
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f7ff fd43 	bl	8008550 <find_volume>
 8008aca:	4603      	mov	r3, r0
 8008acc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20000270 	.word	0x20000270

08008adc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008adc:	b590      	push	{r4, r7, lr}
 8008ade:	b09b      	sub	sp, #108	; 0x6c
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <f_open+0x18>
 8008af0:	2309      	movs	r3, #9
 8008af2:	e1ac      	b.n	8008e4e <f_open+0x372>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008afa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008afc:	f107 0108 	add.w	r1, r7, #8
 8008b00:	f107 0214 	add.w	r2, r7, #20
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	4608      	mov	r0, r1
 8008b08:	4611      	mov	r1, r2
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f7ff fd20 	bl	8008550 <find_volume>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008b16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f040 818e 	bne.w	8008e3c <f_open+0x360>
		dj.obj.fs = fs;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f107 0218 	add.w	r2, r7, #24
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f7ff fbe7 	bl	8008300 <follow_path>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8008b38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d11b      	bne.n	8008b78 <f_open+0x9c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008b40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	b25b      	sxtb	r3, r3
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	da03      	bge.n	8008b54 <f_open+0x78>
				res = FR_INVALID_NAME;
 8008b4c:	2306      	movs	r3, #6
 8008b4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008b52:	e011      	b.n	8008b78 <f_open+0x9c>
			}
#if FF_FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	f023 0301 	bic.w	r3, r3, #1
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bf14      	ite	ne
 8008b5e:	2301      	movne	r3, #1
 8008b60:	2300      	moveq	r3, #0
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	461a      	mov	r2, r3
 8008b66:	f107 0318 	add.w	r3, r7, #24
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	f7fd ff61 	bl	8006a34 <chk_lock>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	f003 031c 	and.w	r3, r3, #28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d07b      	beq.n	8008c7a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8008b82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d017      	beq.n	8008bba <f_open+0xde>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008b8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d10e      	bne.n	8008bb0 <f_open+0xd4>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008b92:	f7fd ffa9 	bl	8006ae8 <enq_lock>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d006      	beq.n	8008baa <f_open+0xce>
 8008b9c:	f107 0318 	add.w	r3, r7, #24
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff f893 	bl	8007ccc <dir_register>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	e000      	b.n	8008bac <f_open+0xd0>
 8008baa:	2312      	movs	r3, #18
 8008bac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	f043 0308 	orr.w	r3, r3, #8
 8008bb6:	71fb      	strb	r3, [r7, #7]
 8008bb8:	e010      	b.n	8008bdc <f_open+0x100>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008bba:	7fbb      	ldrb	r3, [r7, #30]
 8008bbc:	f003 0311 	and.w	r3, r3, #17
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <f_open+0xf0>
					res = FR_DENIED;
 8008bc4:	2307      	movs	r3, #7
 8008bc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008bca:	e007      	b.n	8008bdc <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <f_open+0x100>
 8008bd6:	2308      	movs	r3, #8
 8008bd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8008bdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d164      	bne.n	8008cae <f_open+0x1d2>
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d05f      	beq.n	8008cae <f_open+0x1d2>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	f7fe fdd5 	bl	80077a4 <ld_clust>
 8008bfa:	65b8      	str	r0, [r7, #88]	; 0x58
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	f103 040e 	add.w	r4, r3, #14
 8008c02:	f000 fe87 	bl	8009914 <get_fattime>
 8008c06:	4603      	mov	r3, r0
 8008c08:	4620      	mov	r0, r4
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	f7fd fdfe 	bl	800680c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	330b      	adds	r3, #11
 8008c14:	2220      	movs	r2, #32
 8008c16:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	2200      	movs	r2, #0
 8008c22:	f7fe fddf 	bl	80077e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c28:	331c      	adds	r3, #28
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	f7fd fded 	bl	800680c <st_dword>
					fs->wflag = 1;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2201      	movs	r2, #1
 8008c36:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8008c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d037      	beq.n	8008cae <f_open+0x1d2>
						dw = fs->winsect;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c42:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8008c44:	f107 0318 	add.w	r3, r7, #24
 8008c48:	4618      	mov	r0, r3
 8008c4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f7fe fad1 	bl	80071f4 <remove_chain>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008c58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d126      	bne.n	8008cae <f_open+0x1d2>
							res = move_window(fs, dw);
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	4618      	mov	r0, r3
 8008c64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c66:	f7fe f88b 	bl	8006d80 <move_window>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c74:	3a01      	subs	r2, #1
 8008c76:	611a      	str	r2, [r3, #16]
 8008c78:	e019      	b.n	8008cae <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8008c7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d115      	bne.n	8008cae <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8008c82:	7fbb      	ldrb	r3, [r7, #30]
 8008c84:	f003 0310 	and.w	r3, r3, #16
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <f_open+0x1b8>
					res = FR_NO_FILE;
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008c92:	e00c      	b.n	8008cae <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d007      	beq.n	8008cae <f_open+0x1d2>
 8008c9e:	7fbb      	ldrb	r3, [r7, #30]
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <f_open+0x1d2>
						res = FR_DENIED;
 8008ca8:	2307      	movs	r3, #7
 8008caa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008cae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d128      	bne.n	8008d08 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	f003 0308 	and.w	r3, r3, #8
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <f_open+0x1ec>
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	629a      	str	r2, [r3, #40]	; 0x28
#if FF_FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	f023 0301 	bic.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bf14      	ite	ne
 8008ce0:	2301      	movne	r3, #1
 8008ce2:	2300      	moveq	r3, #0
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f107 0318 	add.w	r3, r7, #24
 8008cec:	4618      	mov	r0, r3
 8008cee:	4611      	mov	r1, r2
 8008cf0:	f7fd ff1c 	bl	8006b2c <inc_lock>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	611a      	str	r2, [r3, #16]
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <f_open+0x22c>
 8008d02:	2302      	movs	r3, #2
 8008d04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008d08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f040 8095 	bne.w	8008e3c <f_open+0x360>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	4610      	mov	r0, r2
 8008d18:	4619      	mov	r1, r3
 8008d1a:	f7fe fd43 	bl	80077a4 <ld_clust>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	331c      	adds	r3, #28
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fd fd31 	bl	8006790 <ld_dword>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	88da      	ldrh	r2, [r3, #6]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	79fa      	ldrb	r2, [r7, #7]
 8008d46:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	619a      	str	r2, [r3, #24]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	332c      	adds	r3, #44	; 0x2c
 8008d5e:	4618      	mov	r0, r3
 8008d60:	2100      	movs	r1, #0
 8008d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d66:	f7fd fd9d 	bl	80068a4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	f003 0320 	and.w	r3, r3, #32
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d063      	beq.n	8008e3c <f_open+0x360>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d05f      	beq.n	8008e3c <f_open+0x360>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	895b      	ldrh	r3, [r3, #10]
 8008d88:	025b      	lsls	r3, r3, #9
 8008d8a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d98:	e016      	b.n	8008dc8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008da0:	f7fe f8aa 	bl	8006ef8 <get_fat>
 8008da4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d802      	bhi.n	8008db2 <f_open+0x2d6>
 8008dac:	2302      	movs	r3, #2
 8008dae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d102      	bne.n	8008dc0 <f_open+0x2e4>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008dc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <f_open+0x2fc>
 8008dd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d8e0      	bhi.n	8008d9a <f_open+0x2be>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ddc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008dde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d12a      	bne.n	8008e3c <f_open+0x360>
 8008de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d025      	beq.n	8008e3c <f_open+0x360>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	4618      	mov	r0, r3
 8008df4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008df6:	f7fe f85f 	bl	8006eb8 <clst2sect>
 8008dfa:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d103      	bne.n	8008e0a <f_open+0x32e>
						res = FR_INT_ERR;
 8008e02:	2302      	movs	r3, #2
 8008e04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008e08:	e018      	b.n	8008e3c <f_open+0x360>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e0c:	0a5a      	lsrs	r2, r3, #9
 8008e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e10:	441a      	add	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	621a      	str	r2, [r3, #32]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	7859      	ldrb	r1, [r3, #1]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	4608      	mov	r0, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	461a      	mov	r2, r3
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f000 fce2 	bl	80097f4 <disk_read>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <f_open+0x360>
 8008e36:	2301      	movs	r3, #1
 8008e38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008e3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <f_open+0x36e>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	376c      	adds	r7, #108	; 0x6c
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd90      	pop	{r4, r7, pc}
 8008e56:	bf00      	nop

08008e58 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08c      	sub	sp, #48	; 0x30
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	f107 0310 	add.w	r3, r7, #16
 8008e76:	4610      	mov	r0, r2
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f7ff fdb5 	bl	80089e8 <validate>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d107      	bne.n	8008e9c <f_write+0x44>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	7d5b      	ldrb	r3, [r3, #21]
 8008e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008e94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <f_write+0x4a>
 8008e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ea0:	e143      	b.n	800912a <f_write+0x2d2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	7d1b      	ldrb	r3, [r3, #20]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <f_write+0x5a>
 8008eae:	2307      	movs	r3, #7
 8008eb0:	e13b      	b.n	800912a <f_write+0x2d2>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	441a      	add	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d203      	bcs.n	8008eca <f_write+0x72>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	43db      	mvns	r3, r3
 8008ec8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008eca:	e122      	b.n	8009112 <f_write+0x2ba>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f040 80de 	bne.w	8009096 <f_write+0x23e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	0a5b      	lsrs	r3, r3, #9
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	8952      	ldrh	r2, [r2, #10]
 8008ee4:	3a01      	subs	r2, #1
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d137      	bne.n	8008f60 <f_write+0x108>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10c      	bne.n	8008f12 <f_write+0xba>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10e      	bne.n	8008f22 <f_write+0xca>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4618      	mov	r0, r3
 8008f08:	2100      	movs	r1, #0
 8008f0a:	f7fe f9d7 	bl	80072bc <create_chain>
 8008f0e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f10:	e007      	b.n	8008f22 <f_write+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	f7fe f9ce 	bl	80072bc <create_chain>
 8008f20:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d100      	bne.n	8008f2a <f_write+0xd2>
 8008f28:	e0f7      	b.n	800911a <f_write+0x2c2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d104      	bne.n	8008f3a <f_write+0xe2>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2202      	movs	r2, #2
 8008f34:	755a      	strb	r2, [r3, #21]
 8008f36:	2302      	movs	r3, #2
 8008f38:	e0f7      	b.n	800912a <f_write+0x2d2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d104      	bne.n	8008f4c <f_write+0xf4>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	755a      	strb	r2, [r3, #21]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e0ee      	b.n	800912a <f_write+0x2d2>
				fp->clust = clst;			/* Update current cluster */
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f50:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d102      	bne.n	8008f60 <f_write+0x108>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f5e:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	7d1b      	ldrb	r3, [r3, #20]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	b25b      	sxtb	r3, r3
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	da1b      	bge.n	8008fa4 <f_write+0x14c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	7859      	ldrb	r1, [r3, #1]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	4608      	mov	r0, r1
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	461a      	mov	r2, r3
 8008f80:	2301      	movs	r3, #1
 8008f82:	f000 fc69 	bl	8009858 <disk_write>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <f_write+0x13e>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	755a      	strb	r2, [r3, #21]
 8008f92:	2301      	movs	r3, #1
 8008f94:	e0c9      	b.n	800912a <f_write+0x2d2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	7d1b      	ldrb	r3, [r3, #20]
 8008f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	4610      	mov	r0, r2
 8008fac:	4619      	mov	r1, r3
 8008fae:	f7fd ff83 	bl	8006eb8 <clst2sect>
 8008fb2:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d104      	bne.n	8008fc4 <f_write+0x16c>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	755a      	strb	r2, [r3, #21]
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e0b2      	b.n	800912a <f_write+0x2d2>
			sect += csect;
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	4413      	add	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	0a5b      	lsrs	r3, r3, #9
 8008fd0:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d03e      	beq.n	8009056 <f_write+0x1fe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	4413      	add	r3, r2
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	8952      	ldrh	r2, [r2, #10]
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d905      	bls.n	8008ff2 <f_write+0x19a>
					cc = fs->csize - csect;
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	895b      	ldrh	r3, [r3, #10]
 8008fea:	461a      	mov	r2, r3
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	785b      	ldrb	r3, [r3, #1]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	69f9      	ldr	r1, [r7, #28]
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	f000 fc2b 	bl	8009858 <disk_write>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <f_write+0x1ba>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2201      	movs	r2, #1
 800900c:	755a      	strb	r2, [r3, #21]
 800900e:	2301      	movs	r3, #1
 8009010:	e08b      	b.n	800912a <f_write+0x2d2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6a1a      	ldr	r2, [r3, #32]
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	1ad2      	subs	r2, r2, r3
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	429a      	cmp	r2, r3
 800901e:	d216      	bcs.n	800904e <f_write+0x1f6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6a1a      	ldr	r2, [r3, #32]
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	025b      	lsls	r3, r3, #9
 8009030:	69fa      	ldr	r2, [r7, #28]
 8009032:	4413      	add	r3, r2
 8009034:	4608      	mov	r0, r1
 8009036:	4619      	mov	r1, r3
 8009038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800903c:	f7fd fc12 	bl	8006864 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	7d1b      	ldrb	r3, [r3, #20]
 8009044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009048:	b2da      	uxtb	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	025b      	lsls	r3, r3, #9
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009054:	e040      	b.n	80090d8 <f_write+0x280>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6a1a      	ldr	r2, [r3, #32]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	429a      	cmp	r2, r3
 800905e:	d017      	beq.n	8009090 <f_write+0x238>
				fp->fptr < fp->obj.objsize &&
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	699a      	ldr	r2, [r3, #24]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	68db      	ldr	r3, [r3, #12]
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009068:	429a      	cmp	r2, r3
 800906a:	d211      	bcs.n	8009090 <f_write+0x238>
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	785a      	ldrb	r2, [r3, #1]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	332c      	adds	r3, #44	; 0x2c
 8009074:	4610      	mov	r0, r2
 8009076:	4619      	mov	r1, r3
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	2301      	movs	r3, #1
 800907c:	f000 fbba 	bl	80097f4 <disk_read>
 8009080:	4603      	mov	r3, r0
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
 8009082:	2b00      	cmp	r3, #0
 8009084:	d004      	beq.n	8009090 <f_write+0x238>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2201      	movs	r2, #1
 800908a:	755a      	strb	r2, [r3, #21]
 800908c:	2301      	movs	r3, #1
 800908e:	e04c      	b.n	800912a <f_write+0x2d2>
			}
#endif
			fp->sect = sect;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80090a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d901      	bls.n	80090b0 <f_write+0x258>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b8:	3328      	adds	r3, #40	; 0x28
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	4413      	add	r3, r2
 80090be:	3304      	adds	r3, #4
 80090c0:	4618      	mov	r0, r3
 80090c2:	69f9      	ldr	r1, [r7, #28]
 80090c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c6:	f7fd fbcd 	bl	8006864 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	7d1b      	ldrb	r3, [r3, #20]
 80090ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	751a      	strb	r2, [r3, #20]
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	607b      	str	r3, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	441a      	add	r2, r3
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	4413      	add	r3, r2
 80090f2:	61fb      	str	r3, [r7, #28]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	699a      	ldr	r2, [r3, #24]
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	441a      	add	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	619a      	str	r2, [r3, #24]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	68da      	ldr	r2, [r3, #12]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	429a      	cmp	r2, r3
 800910a:	bf38      	it	cc
 800910c:	461a      	movcc	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	60da      	str	r2, [r3, #12]
	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f47f aed9 	bne.w	8008ecc <f_write+0x74>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	7d1b      	ldrb	r3, [r3, #20]
 800911e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009122:	b2da      	uxtb	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3730      	adds	r7, #48	; 0x30
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop

08009134 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	f107 0308 	add.w	r3, r7, #8
 8009142:	4610      	mov	r0, r2
 8009144:	4619      	mov	r1, r3
 8009146:	f7ff fc4f 	bl	80089e8 <validate>
 800914a:	4603      	mov	r3, r0
 800914c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800914e:	7dfb      	ldrb	r3, [r7, #23]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d16d      	bne.n	8009230 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	7d1b      	ldrb	r3, [r3, #20]
 8009158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915c:	2b00      	cmp	r3, #0
 800915e:	d067      	beq.n	8009230 <f_sync+0xfc>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	7d1b      	ldrb	r3, [r3, #20]
 8009164:	b2db      	uxtb	r3, r3
 8009166:	b25b      	sxtb	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	da18      	bge.n	800919e <f_sync+0x6a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	7859      	ldrb	r1, [r3, #1]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	4608      	mov	r0, r1
 800917c:	4611      	mov	r1, r2
 800917e:	461a      	mov	r2, r3
 8009180:	2301      	movs	r3, #1
 8009182:	f000 fb69 	bl	8009858 <disk_write>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <f_sync+0x5c>
 800918c:	2301      	movs	r3, #1
 800918e:	e050      	b.n	8009232 <f_sync+0xfe>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	7d1b      	ldrb	r3, [r3, #20]
 8009194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009198:	b2da      	uxtb	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800919e:	f000 fbb9 	bl	8009914 <get_fattime>
 80091a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	4610      	mov	r0, r2
 80091ac:	4619      	mov	r1, r3
 80091ae:	f7fd fde7 	bl	8006d80 <move_window>
 80091b2:	4603      	mov	r3, r0
 80091b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d139      	bne.n	8009230 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	330b      	adds	r3, #11
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	320b      	adds	r2, #11
 80091ca:	7812      	ldrb	r2, [r2, #0]
 80091cc:	f042 0220 	orr.w	r2, r2, #32
 80091d0:	b2d2      	uxtb	r2, r2
 80091d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	4610      	mov	r0, r2
 80091de:	68f9      	ldr	r1, [r7, #12]
 80091e0:	461a      	mov	r2, r3
 80091e2:	f7fe faff 	bl	80077e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f103 021c 	add.w	r2, r3, #28
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	4610      	mov	r0, r2
 80091f2:	4619      	mov	r1, r3
 80091f4:	f7fd fb0a 	bl	800680c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3316      	adds	r3, #22
 80091fc:	4618      	mov	r0, r3
 80091fe:	6939      	ldr	r1, [r7, #16]
 8009200:	f7fd fb04 	bl	800680c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3312      	adds	r3, #18
 8009208:	4618      	mov	r0, r3
 800920a:	2100      	movs	r1, #0
 800920c:	f7fd fae4 	bl	80067d8 <st_word>
					fs->wflag = 1;
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2201      	movs	r2, #1
 8009214:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	4618      	mov	r0, r3
 800921a:	f7fd fddf 	bl	8006ddc <sync_fs>
 800921e:	4603      	mov	r3, r0
 8009220:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	7d1b      	ldrb	r3, [r3, #20]
 8009226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800922a:	b2da      	uxtb	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009230:	7dfb      	ldrb	r3, [r7, #23]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop

0800923c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff ff75 	bl	8009134 <f_sync>
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d118      	bne.n	8009286 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	f107 0308 	add.w	r3, r7, #8
 800925a:	4610      	mov	r0, r2
 800925c:	4619      	mov	r1, r3
 800925e:	f7ff fbc3 	bl	80089e8 <validate>
 8009262:	4603      	mov	r3, r0
 8009264:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10c      	bne.n	8009286 <f_close+0x4a>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	4618      	mov	r0, r3
 8009272:	f7fd fce7 	bl	8006c44 <dec_lock>
 8009276:	4603      	mov	r3, r0
 8009278:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <f_close+0x4a>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	f107 0308 	add.w	r3, r7, #8
 80092a0:	4610      	mov	r0, r2
 80092a2:	4619      	mov	r1, r3
 80092a4:	f7ff fba0 	bl	80089e8 <validate>
 80092a8:	4603      	mov	r3, r0
 80092aa:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) res = (FRESULT)fp->err;
 80092ac:	7ffb      	ldrb	r3, [r7, #31]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d102      	bne.n	80092b8 <f_lseek+0x28>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	7d5b      	ldrb	r3, [r3, #21]
 80092b6:	77fb      	strb	r3, [r7, #31]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80092b8:	7ffb      	ldrb	r3, [r7, #31]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <f_lseek+0x32>
 80092be:	7ffb      	ldrb	r3, [r7, #31]
 80092c0:	e114      	b.n	80094ec <f_lseek+0x25c>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d208      	bcs.n	80092de <f_lseek+0x4e>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	7d1b      	ldrb	r3, [r3, #20]
 80092d0:	f003 0302 	and.w	r3, r3, #2
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d102      	bne.n	80092de <f_lseek+0x4e>
			ofs = fp->obj.objsize;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	619a      	str	r2, [r3, #24]
		if (ofs > 0) {
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 80a7 	beq.w	8009444 <f_lseek+0x1b4>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	895b      	ldrh	r3, [r3, #10]
 80092fa:	025b      	lsls	r3, r3, #9
 80092fc:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01b      	beq.n	800933c <f_lseek+0xac>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	1e5a      	subs	r2, r3, #1
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	fbb2 f2f3 	udiv	r2, r2, r3
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	1e59      	subs	r1, r3, #1
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	fbb1 f3f3 	udiv	r3, r1, r3
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs > 0) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
 8009318:	429a      	cmp	r2, r3
 800931a:	d30f      	bcc.n	800933c <f_lseek+0xac>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	1e5a      	subs	r2, r3, #1
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	425b      	negs	r3, r3
 8009324:	401a      	ands	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	e022      	b.n	8009382 <f_lseek+0xf2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	61bb      	str	r3, [r7, #24]
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d119      	bne.n	800937c <f_lseek+0xec>
					clst = create_chain(&fp->obj, 0);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4618      	mov	r0, r3
 800934c:	2100      	movs	r1, #0
 800934e:	f7fd ffb5 	bl	80072bc <create_chain>
 8009352:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d104      	bne.n	8009364 <f_lseek+0xd4>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2202      	movs	r2, #2
 800935e:	755a      	strb	r2, [r3, #21]
 8009360:	2302      	movs	r3, #2
 8009362:	e0c3      	b.n	80094ec <f_lseek+0x25c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936a:	d104      	bne.n	8009376 <f_lseek+0xe6>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	755a      	strb	r2, [r3, #21]
 8009372:	2301      	movs	r3, #1
 8009374:	e0ba      	b.n	80094ec <f_lseek+0x25c>
					fp->obj.sclust = clst;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d05d      	beq.n	8009444 <f_lseek+0x1b4>
				while (ofs > bcs) {						/* Cluster following loop */
 8009388:	e03a      	b.n	8009400 <f_lseek+0x170>
					ofs -= bcs; fp->fptr += bcs;
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	603b      	str	r3, [r7, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699a      	ldr	r2, [r3, #24]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	441a      	add	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	619a      	str	r2, [r3, #24]
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	7d1b      	ldrb	r3, [r3, #20]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00b      	beq.n	80093c2 <f_lseek+0x132>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4618      	mov	r0, r3
 80093ae:	69b9      	ldr	r1, [r7, #24]
 80093b0:	f7fd ff84 	bl	80072bc <create_chain>
 80093b4:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d108      	bne.n	80093ce <f_lseek+0x13e>
							ofs = 0; break;
 80093bc:	2300      	movs	r3, #0
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	e022      	b.n	8009408 <f_lseek+0x178>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4618      	mov	r0, r3
 80093c6:	69b9      	ldr	r1, [r7, #24]
 80093c8:	f7fd fd96 	bl	8006ef8 <get_fat>
 80093cc:	61b8      	str	r0, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d4:	d104      	bne.n	80093e0 <f_lseek+0x150>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	755a      	strb	r2, [r3, #21]
 80093dc:	2301      	movs	r3, #1
 80093de:	e085      	b.n	80094ec <f_lseek+0x25c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d904      	bls.n	80093f0 <f_lseek+0x160>
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	69da      	ldr	r2, [r3, #28]
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d804      	bhi.n	80093fa <f_lseek+0x16a>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2202      	movs	r2, #2
 80093f4:	755a      	strb	r2, [r3, #21]
 80093f6:	2302      	movs	r3, #2
 80093f8:	e078      	b.n	80094ec <f_lseek+0x25c>
					fp->clust = clst;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	61da      	str	r2, [r3, #28]
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	429a      	cmp	r2, r3
 8009406:	d8c0      	bhi.n	800938a <f_lseek+0xfa>
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
				}
				fp->fptr += ofs;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	699a      	ldr	r2, [r3, #24]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	441a      	add	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941a:	2b00      	cmp	r3, #0
 800941c:	d012      	beq.n	8009444 <f_lseek+0x1b4>
					nsect = clst2sect(fs, clst);	/* Current sector */
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	4618      	mov	r0, r3
 8009422:	69b9      	ldr	r1, [r7, #24]
 8009424:	f7fd fd48 	bl	8006eb8 <clst2sect>
 8009428:	6178      	str	r0, [r7, #20]
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d104      	bne.n	800943a <f_lseek+0x1aa>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2202      	movs	r2, #2
 8009434:	755a      	strb	r2, [r3, #21]
 8009436:	2302      	movs	r3, #2
 8009438:	e058      	b.n	80094ec <f_lseek+0x25c>
					nsect += (DWORD)(ofs / SS(fs));
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	0a5b      	lsrs	r3, r3, #9
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	4413      	add	r3, r2
 8009442:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	699a      	ldr	r2, [r3, #24]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	429a      	cmp	r2, r3
 800944e:	d90a      	bls.n	8009466 <f_lseek+0x1d6>
			fp->obj.objsize = fp->fptr;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	699a      	ldr	r2, [r3, #24]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	7d1b      	ldrb	r3, [r3, #20]
 800945c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009460:	b2da      	uxtb	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946e:	2b00      	cmp	r3, #0
 8009470:	d03b      	beq.n	80094ea <f_lseek+0x25a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1a      	ldr	r2, [r3, #32]
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	429a      	cmp	r2, r3
 800947a:	d036      	beq.n	80094ea <f_lseek+0x25a>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	7d1b      	ldrb	r3, [r3, #20]
 8009480:	b2db      	uxtb	r3, r3
 8009482:	b25b      	sxtb	r3, r3
 8009484:	2b00      	cmp	r3, #0
 8009486:	da1b      	bge.n	80094c0 <f_lseek+0x230>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	7859      	ldrb	r1, [r3, #1]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	4608      	mov	r0, r1
 8009498:	4611      	mov	r1, r2
 800949a:	461a      	mov	r2, r3
 800949c:	2301      	movs	r3, #1
 800949e:	f000 f9db 	bl	8009858 <disk_write>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d004      	beq.n	80094b2 <f_lseek+0x222>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	755a      	strb	r2, [r3, #21]
 80094ae:	2301      	movs	r3, #1
 80094b0:	e01c      	b.n	80094ec <f_lseek+0x25c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	7d1b      	ldrb	r3, [r3, #20]
 80094b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	785a      	ldrb	r2, [r3, #1]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	332c      	adds	r3, #44	; 0x2c
 80094c8:	4610      	mov	r0, r2
 80094ca:	4619      	mov	r1, r3
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	2301      	movs	r3, #1
 80094d0:	f000 f990 	bl	80097f4 <disk_read>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d004      	beq.n	80094e4 <f_lseek+0x254>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	755a      	strb	r2, [r3, #21]
 80094e0:	2301      	movs	r3, #1
 80094e2:	e003      	b.n	80094ec <f_lseek+0x25c>
#endif
			fp->sect = nsect;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80094ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3720      	adds	r7, #32
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	81fb      	strh	r3, [r7, #14]
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);
 8009504:	4b17      	ldr	r3, [pc, #92]	; (8009564 <ff_uni2oem+0x70>)
 8009506:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b7f      	cmp	r3, #127	; 0x7f
 800950c:	d802      	bhi.n	8009514 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	81fb      	strh	r3, [r7, #14]
 8009512:	e01f      	b.n	8009554 <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800951a:	d21b      	bcs.n	8009554 <ff_uni2oem+0x60>
 800951c:	887b      	ldrh	r3, [r7, #2]
 800951e:	f240 3252 	movw	r2, #850	; 0x352
 8009522:	4293      	cmp	r3, r2
 8009524:	d116      	bne.n	8009554 <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8009526:	2300      	movs	r3, #0
 8009528:	81fb      	strh	r3, [r7, #14]
 800952a:	e002      	b.n	8009532 <ff_uni2oem+0x3e>
 800952c:	89fb      	ldrh	r3, [r7, #14]
 800952e:	3301      	adds	r3, #1
 8009530:	81fb      	strh	r3, [r7, #14]
 8009532:	89fb      	ldrh	r3, [r7, #14]
 8009534:	2b7f      	cmp	r3, #127	; 0x7f
 8009536:	d808      	bhi.n	800954a <ff_uni2oem+0x56>
 8009538:	89fb      	ldrh	r3, [r7, #14]
 800953a:	005b      	lsls	r3, r3, #1
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	4413      	add	r3, r2
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	429a      	cmp	r2, r3
 8009548:	d1f0      	bne.n	800952c <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 800954a:	89fb      	ldrh	r3, [r7, #14]
 800954c:	3380      	adds	r3, #128	; 0x80
 800954e:	b29b      	uxth	r3, r3
 8009550:	b2db      	uxtb	r3, r3
 8009552:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009554:	89fb      	ldrh	r3, [r7, #14]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	0800fe04 	.word	0x0800fe04

08009568 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	460a      	mov	r2, r1
 8009572:	80fb      	strh	r3, [r7, #6]
 8009574:	4613      	mov	r3, r2
 8009576:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	81fb      	strh	r3, [r7, #14]
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <ff_oem2uni+0x54>)
 800957e:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 8009580:	88fb      	ldrh	r3, [r7, #6]
 8009582:	2b7f      	cmp	r3, #127	; 0x7f
 8009584:	d802      	bhi.n	800958c <ff_oem2uni+0x24>
		c = oem;
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	81fb      	strh	r3, [r7, #14]
 800958a:	e010      	b.n	80095ae <ff_oem2uni+0x46>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 800958c:	88bb      	ldrh	r3, [r7, #4]
 800958e:	f240 3252 	movw	r2, #850	; 0x352
 8009592:	4293      	cmp	r3, r2
 8009594:	d10b      	bne.n	80095ae <ff_oem2uni+0x46>
			if (oem < 0x100) c = p[oem - 0x80];
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	2bff      	cmp	r3, #255	; 0xff
 800959a:	d808      	bhi.n	80095ae <ff_oem2uni+0x46>
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80095a2:	3b80      	subs	r3, #128	; 0x80
 80095a4:	005b      	lsls	r3, r3, #1
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	4413      	add	r3, r2
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80095ae:	89fb      	ldrh	r3, [r7, #14]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	0800fe04 	.word	0x0800fe04

080095c0 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ce:	d27d      	bcs.n	80096cc <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 80095d4:	8a7b      	ldrh	r3, [r7, #18]
 80095d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095da:	d201      	bcs.n	80095e0 <ff_wtoupper+0x20>
 80095dc:	4b3f      	ldr	r3, [pc, #252]	; (80096dc <ff_wtoupper+0x11c>)
 80095de:	e000      	b.n	80095e2 <ff_wtoupper+0x22>
 80095e0:	4b3f      	ldr	r3, [pc, #252]	; (80096e0 <ff_wtoupper+0x120>)
 80095e2:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	1c9a      	adds	r2, r3, #2
 80095e8:	617a      	str	r2, [r7, #20]
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 80095ee:	8a3b      	ldrh	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d069      	beq.n	80096c8 <ff_wtoupper+0x108>
 80095f4:	8a7a      	ldrh	r2, [r7, #18]
 80095f6:	8a3b      	ldrh	r3, [r7, #16]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d365      	bcc.n	80096c8 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	1c9a      	adds	r2, r3, #2
 8009600:	617a      	str	r2, [r7, #20]
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	81fb      	strh	r3, [r7, #14]
 8009606:	89fb      	ldrh	r3, [r7, #14]
 8009608:	0a1b      	lsrs	r3, r3, #8
 800960a:	81bb      	strh	r3, [r7, #12]
 800960c:	89fb      	ldrh	r3, [r7, #14]
 800960e:	b2db      	uxtb	r3, r3
 8009610:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 8009612:	8a7a      	ldrh	r2, [r7, #18]
 8009614:	8a39      	ldrh	r1, [r7, #16]
 8009616:	89fb      	ldrh	r3, [r7, #14]
 8009618:	440b      	add	r3, r1
 800961a:	429a      	cmp	r2, r3
 800961c:	da4a      	bge.n	80096b4 <ff_wtoupper+0xf4>
				switch (cmd) {
 800961e:	89bb      	ldrh	r3, [r7, #12]
 8009620:	2b08      	cmp	r3, #8
 8009622:	d850      	bhi.n	80096c6 <ff_wtoupper+0x106>
 8009624:	a201      	add	r2, pc, #4	; (adr r2, 800962c <ff_wtoupper+0x6c>)
 8009626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962a:	bf00      	nop
 800962c:	08009651 	.word	0x08009651
 8009630:	08009663 	.word	0x08009663
 8009634:	08009679 	.word	0x08009679
 8009638:	08009681 	.word	0x08009681
 800963c:	08009689 	.word	0x08009689
 8009640:	08009691 	.word	0x08009691
 8009644:	08009699 	.word	0x08009699
 8009648:	080096a1 	.word	0x080096a1
 800964c:	080096a9 	.word	0x080096a9
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8009650:	8a7a      	ldrh	r2, [r7, #18]
 8009652:	8a3b      	ldrh	r3, [r7, #16]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4413      	add	r3, r2
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	827b      	strh	r3, [r7, #18]
 8009660:	e027      	b.n	80096b2 <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8009662:	8a7a      	ldrh	r2, [r7, #18]
 8009664:	8a3b      	ldrh	r3, [r7, #16]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	b29b      	uxth	r3, r3
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	b29b      	uxth	r3, r3
 8009670:	8a7a      	ldrh	r2, [r7, #18]
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	827b      	strh	r3, [r7, #18]
 8009676:	e01c      	b.n	80096b2 <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 8009678:	8a7b      	ldrh	r3, [r7, #18]
 800967a:	3b10      	subs	r3, #16
 800967c:	827b      	strh	r3, [r7, #18]
 800967e:	e018      	b.n	80096b2 <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8009680:	8a7b      	ldrh	r3, [r7, #18]
 8009682:	3b20      	subs	r3, #32
 8009684:	827b      	strh	r3, [r7, #18]
 8009686:	e014      	b.n	80096b2 <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8009688:	8a7b      	ldrh	r3, [r7, #18]
 800968a:	3b30      	subs	r3, #48	; 0x30
 800968c:	827b      	strh	r3, [r7, #18]
 800968e:	e010      	b.n	80096b2 <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8009690:	8a7b      	ldrh	r3, [r7, #18]
 8009692:	3b1a      	subs	r3, #26
 8009694:	827b      	strh	r3, [r7, #18]
 8009696:	e00c      	b.n	80096b2 <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 8009698:	8a7b      	ldrh	r3, [r7, #18]
 800969a:	3308      	adds	r3, #8
 800969c:	827b      	strh	r3, [r7, #18]
 800969e:	e008      	b.n	80096b2 <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 80096a0:	8a7b      	ldrh	r3, [r7, #18]
 80096a2:	3b50      	subs	r3, #80	; 0x50
 80096a4:	827b      	strh	r3, [r7, #18]
 80096a6:	e004      	b.n	80096b2 <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 80096a8:	8a7b      	ldrh	r3, [r7, #18]
 80096aa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80096ae:	827b      	strh	r3, [r7, #18]
 80096b0:	bf00      	nop
				}
				break;
 80096b2:	e008      	b.n	80096c6 <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 80096b4:	89bb      	ldrh	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d104      	bne.n	80096c4 <ff_wtoupper+0x104>
 80096ba:	89fb      	ldrh	r3, [r7, #14]
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4413      	add	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]
		}
 80096c4:	e78e      	b.n	80095e4 <ff_wtoupper+0x24>
				case 5:	uc -= 26; break;			/* Shift -26 */
				case 6:	uc += 8; break;				/* Shift +8 */
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
 80096c6:	bf00      	nop
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
 80096c8:	8a7b      	ldrh	r3, [r7, #18]
 80096ca:	607b      	str	r3, [r7, #4]
	}

	return uni;
 80096cc:	687b      	ldr	r3, [r7, #4]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	0800ff04 	.word	0x0800ff04
 80096e0:	080100f8 	.word	0x080100f8

080096e4 <FATFS_Init>:

/*
 * API to initialize the FATFS APP
 */
FATFS_STATUS_t FATFS_Init(FATFS_t *const handle)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
  FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]
  if (handle->initialized == false)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	791b      	ldrb	r3, [r3, #4]
 80096f4:	f083 0301 	eor.w	r3, r3, #1
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d022      	beq.n	8009744 <FATFS_Init+0x60>
  {
  for (int i = 0; i<FF_VOLUMES; i++)
 80096fe:	2300      	movs	r3, #0
 8009700:	60bb      	str	r3, [r7, #8]
 8009702:	e00e      	b.n	8009722 <FATFS_Init+0x3e>
  {
    status |= (FATFS_STATUS_t)SDMMC_BLOCK_Init(sdmmc_block[i]);
 8009704:	4a13      	ldr	r2, [pc, #76]	; (8009754 <FATFS_Init+0x70>)
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800970c:	4618      	mov	r0, r3
 800970e:	f7f9 f947 	bl	80029a0 <SDMMC_BLOCK_Init>
 8009712:	4603      	mov	r3, r0
 8009714:	461a      	mov	r2, r3
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	4313      	orrs	r3, r2
 800971a:	73fb      	strb	r3, [r7, #15]
{
  XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
  FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
  if (handle->initialized == false)
  {
  for (int i = 0; i<FF_VOLUMES; i++)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	3301      	adds	r3, #1
 8009720:	60bb      	str	r3, [r7, #8]
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0ed      	beq.n	8009704 <FATFS_Init+0x20>
#if (FATFS_STANDARDLIBRARY == 1U)
  SLTHA_Init();
#endif

#if (FF_FS_NORTC == 0U)
  if (status == FATFS_STATUS_SUCCESS)
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <FATFS_Init+0x58>
  {
    status = (FATFS_STATUS_t)RTC_Init(handle->rtc_handle);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4618      	mov	r0, r3
 8009734:	f7fc fbf0 	bl	8005f18 <RTC_Init>
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]
  }
#endif
    handle->initialized = true;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	711a      	strb	r2, [r3, #4]
 8009742:	e001      	b.n	8009748 <FATFS_Init+0x64>
  }
  else
  {
    status = FATFS_STATUS_FAILURE;
 8009744:	2301      	movs	r3, #1
 8009746:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8009748:	7bfb      	ldrb	r3, [r7, #15]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	080101b4 	.word	0x080101b4

08009758 <disk_initialize>:

/*
 * The function performs the disk initialization.
 */
DSTATUS disk_initialize(BYTE drive) /* Physical drive number (0..) */
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	71fb      	strb	r3, [r7, #7]
  DSTATUS diskstatus = (DSTATUS)0;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]
  uint32_t status;

  /* If drive number is greater than the maximum drives allowed  */
  if (drive >= FF_VOLUMES)
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <disk_initialize+0x1a>
  {
    diskstatus = (DSTATUS)((uint8_t)STA_NODISK | (uint8_t)STA_NOINIT);
 800976c:	2303      	movs	r3, #3
 800976e:	73fb      	strb	r3, [r7, #15]
 8009770:	e00e      	b.n	8009790 <disk_initialize+0x38>
  }
  else
  {
    /* Call the Initialize function. */
    status = FATFS_devicefunc.InitializePtr(sdmmc_block[drive]);
 8009772:	4b0a      	ldr	r3, [pc, #40]	; (800979c <disk_initialize+0x44>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	79fa      	ldrb	r2, [r7, #7]
 8009778:	4909      	ldr	r1, [pc, #36]	; (80097a0 <disk_initialize+0x48>)
 800977a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800977e:	4610      	mov	r0, r2
 8009780:	4798      	blx	r3
 8009782:	4603      	mov	r3, r0
 8009784:	60bb      	str	r3, [r7, #8]
    /* Fatfs to Device Abstraction Layer Error Code Mapping */
    diskstatus = FATFS_statuscodes[status];
 8009786:	4a07      	ldr	r2, [pc, #28]	; (80097a4 <disk_initialize+0x4c>)
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4413      	add	r3, r2
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	73fb      	strb	r3, [r7, #15]
  }
  return (diskstatus);
 8009790:	7bfb      	ldrb	r3, [r7, #15]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	200000e0 	.word	0x200000e0
 80097a0:	080101b4 	.word	0x080101b4
 80097a4:	200000dc 	.word	0x200000dc

080097a8 <disk_status>:

/*
 * The function gets the disk status information.
 */
DSTATUS disk_status(BYTE drive)		/* Physical drive number (0..) */
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS diskstatus;
  uint32_t status;
  /* If drive number is greater than the maximum drives allowed  */
  if (drive >= (uint8_t)FF_VOLUMES)
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <disk_status+0x16>
  {
    diskstatus = (DSTATUS)((uint8_t)STA_NODISK | (uint8_t)STA_NOINIT);
 80097b8:	2303      	movs	r3, #3
 80097ba:	73fb      	strb	r3, [r7, #15]
 80097bc:	e00e      	b.n	80097dc <disk_status+0x34>
  }
  else
  {
    /* Call the Initialize function.*/
    status = FATFS_devicefunc.GetStatusPtr(sdmmc_block[drive]);
 80097be:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <disk_status+0x40>)
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	79fa      	ldrb	r2, [r7, #7]
 80097c4:	4909      	ldr	r1, [pc, #36]	; (80097ec <disk_status+0x44>)
 80097c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80097ca:	4610      	mov	r0, r2
 80097cc:	4798      	blx	r3
 80097ce:	4603      	mov	r3, r0
 80097d0:	60bb      	str	r3, [r7, #8]
    /* Fatfs to Block Layer Error Code Mapping */
    diskstatus = FATFS_statuscodes[status];
 80097d2:	4a07      	ldr	r2, [pc, #28]	; (80097f0 <disk_status+0x48>)
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4413      	add	r3, r2
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	73fb      	strb	r3, [r7, #15]
  }
  return (diskstatus);
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	200000e0 	.word	0x200000e0
 80097ec:	080101b4 	.word	0x080101b4
 80097f0:	200000dc 	.word	0x200000dc

080097f4 <disk_read>:
  BYTE drive,		  /* Physical drive number (0..) */
  BYTE *buffer,	      /* Data buffer to store read data */
  DWORD sectornumber, /* Sector address (LBA) */
  UINT sectorcount    /* Number of sectors to read */
)
{
 80097f4:	b590      	push	{r4, r7, lr}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	607a      	str	r2, [r7, #4]
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	4603      	mov	r3, r0
 8009802:	73fb      	strb	r3, [r7, #15]
  DRESULT diskresult;
  uint32_t result;
  /* If drive number is greater than the maximum drives allowed  */
  if (drive >= (uint8_t)FF_VOLUMES )
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <disk_read+0x1c>
  {
    diskresult = RES_PARERR;
 800980a:	2304      	movs	r3, #4
 800980c:	75fb      	strb	r3, [r7, #23]
 800980e:	e018      	b.n	8009842 <disk_read+0x4e>
  }
  /* If sector count is less than 1. Minimum 1 sector is needed*/
  else if (sectorcount < (uint8_t)1)
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d102      	bne.n	800981c <disk_read+0x28>
  {
    diskresult = RES_PARERR;
 8009816:	2304      	movs	r3, #4
 8009818:	75fb      	strb	r3, [r7, #23]
 800981a:	e012      	b.n	8009842 <disk_read+0x4e>
  }
  /*Call the ReadBlkPtr function.*/
  else
  {
    result = (uint32_t)FATFS_devicefunc.ReadBlkPtr(sdmmc_block[drive], (uint8_t *)buffer,
 800981c:	4b0b      	ldr	r3, [pc, #44]	; (800984c <disk_read+0x58>)
 800981e:	689c      	ldr	r4, [r3, #8]
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	4a0b      	ldr	r2, [pc, #44]	; (8009850 <disk_read+0x5c>)
 8009824:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	4610      	mov	r0, r2
 800982e:	68b9      	ldr	r1, [r7, #8]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	47a0      	blx	r4
 8009834:	4603      	mov	r3, r0
 8009836:	613b      	str	r3, [r7, #16]
                                                          (uint32_t)sectornumber, sectorcount);

    /* FatFs to Device Abstraction Layer Error Code Mapping */
    diskresult = FATFS_errorcodes[result];
 8009838:	4a06      	ldr	r2, [pc, #24]	; (8009854 <disk_read+0x60>)
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	4413      	add	r3, r2
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	75fb      	strb	r3, [r7, #23]
  }
  return (diskresult);
 8009842:	7dfb      	ldrb	r3, [r7, #23]
}
 8009844:	4618      	mov	r0, r3
 8009846:	371c      	adds	r7, #28
 8009848:	46bd      	mov	sp, r7
 800984a:	bd90      	pop	{r4, r7, pc}
 800984c:	200000e0 	.word	0x200000e0
 8009850:	080101b4 	.word	0x080101b4
 8009854:	200000d4 	.word	0x200000d4

08009858 <disk_write>:
  BYTE drive,			/* Physical drive number (0..) */
  const BYTE *buffer,	/* Data to be written */
  DWORD sectornumber,	/* Sector address (LBA) */
  UINT sectorcount	    /* Number of sectors to write */
)
{
 8009858:	b590      	push	{r4, r7, lr}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	607a      	str	r2, [r7, #4]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]
  DRESULT diskresult;
  uint32_t result;
  /* If drive number is greater than the maximum drives allowed  */
  if (drive >= (uint8_t)FF_VOLUMES)
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <disk_write+0x1c>
  {
    diskresult = RES_PARERR;
 800986e:	2304      	movs	r3, #4
 8009870:	75fb      	strb	r3, [r7, #23]
 8009872:	e018      	b.n	80098a6 <disk_write+0x4e>
  }
  /* If sector count is less than 1. Minimum 1 sector is needed*/
  else if (sectorcount < (uint8_t)1)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d102      	bne.n	8009880 <disk_write+0x28>
  {
    diskresult = RES_PARERR;
 800987a:	2304      	movs	r3, #4
 800987c:	75fb      	strb	r3, [r7, #23]
 800987e:	e012      	b.n	80098a6 <disk_write+0x4e>
  }
  /*Call the WriteBlkPtr function.*/
  else
  {
    result = (uint32_t)FATFS_devicefunc.WriteBlkPtr(sdmmc_block[drive],(uint8_t *)buffer, 
 8009880:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <disk_write+0x58>)
 8009882:	68dc      	ldr	r4, [r3, #12]
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	4a0b      	ldr	r2, [pc, #44]	; (80098b4 <disk_write+0x5c>)
 8009888:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	b2db      	uxtb	r3, r3
 8009890:	4610      	mov	r0, r2
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	47a0      	blx	r4
 8009898:	4603      	mov	r3, r0
 800989a:	613b      	str	r3, [r7, #16]
                                                           (uint32_t)sectornumber, sectorcount);
    /* FatFs to Device Abstraction Layer Error Code Mapping */
    diskresult = FATFS_errorcodes[result];
 800989c:	4a06      	ldr	r2, [pc, #24]	; (80098b8 <disk_write+0x60>)
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	4413      	add	r3, r2
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	75fb      	strb	r3, [r7, #23]
  }
  return (diskresult);
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	371c      	adds	r7, #28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd90      	pop	{r4, r7, pc}
 80098b0:	200000e0 	.word	0x200000e0
 80098b4:	080101b4 	.word	0x080101b4
 80098b8:	200000d4 	.word	0x200000d4

080098bc <disk_ioctl>:
DRESULT disk_ioctl(
  BYTE drive,		/* Physical drive number (0..) */
  BYTE command,	    /* Control code */
  void *buffer      /* Buffer to send/receive control data */
)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	603a      	str	r2, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
 80098c8:	460b      	mov	r3, r1
 80098ca:	71bb      	strb	r3, [r7, #6]
  DRESULT diskresult;
  uint32_t result;
  if (drive >= (uint8_t)FF_VOLUMES)
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d002      	beq.n	80098d8 <disk_ioctl+0x1c>
  {
    diskresult = RES_PARERR;
 80098d2:	2304      	movs	r3, #4
 80098d4:	73fb      	strb	r3, [r7, #15]
 80098d6:	e011      	b.n	80098fc <disk_ioctl+0x40>
  }
  /*Call the Ioctl function.*/
  else
  {
    result = FATFS_devicefunc.IoctlPtr(sdmmc_block[drive],command, buffer);
 80098d8:	4b0b      	ldr	r3, [pc, #44]	; (8009908 <disk_ioctl+0x4c>)
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	79fa      	ldrb	r2, [r7, #7]
 80098de:	490b      	ldr	r1, [pc, #44]	; (800990c <disk_ioctl+0x50>)
 80098e0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80098e4:	79ba      	ldrb	r2, [r7, #6]
 80098e6:	4608      	mov	r0, r1
 80098e8:	4611      	mov	r1, r2
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	4798      	blx	r3
 80098ee:	4603      	mov	r3, r0
 80098f0:	60bb      	str	r3, [r7, #8]
    /* FatFs to Block Layer Error Code Mapping */
    diskresult = FATFS_errorcodes[result];
 80098f2:	4a07      	ldr	r2, [pc, #28]	; (8009910 <disk_ioctl+0x54>)
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	4413      	add	r3, r2
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	73fb      	strb	r3, [r7, #15]
  }
  return (diskresult);
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	200000e0 	.word	0x200000e0
 800990c:	080101b4 	.word	0x080101b4
 8009910:	200000d4 	.word	0x200000d4

08009914 <get_fattime>:

/**
 * This is a real time clock service to be called from FatFs module.
 */
DWORD get_fattime()
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
#if ((FF_FS_NORTC == 0U) && (FF_FS_READONLY == 0U))
  XMC_RTC_TIME_t Time = {{0UL}};
 800991a:	2300      	movs	r3, #0
 800991c:	603b      	str	r3, [r7, #0]
 800991e:	2300      	movs	r3, #0
 8009920:	607b      	str	r3, [r7, #4]

  RTC_GetTime(&Time);
 8009922:	463b      	mov	r3, r7
 8009924:	4618      	mov	r0, r3
 8009926:	f7fc fb85 	bl	8006034 <RTC_GetTime>

  /* Pack date and time into a DWORD variable */
  return (((DWORD)(Time.year - 1980UL) << 25UL) | ((DWORD)Time.month << 21UL) | ((DWORD)Time.days << 16UL)
 800992a:	88fb      	ldrh	r3, [r7, #6]
 800992c:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 8009930:	065a      	lsls	r2, r3, #25
 8009932:	797b      	ldrb	r3, [r7, #5]
 8009934:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009938:	b2db      	uxtb	r3, r3
 800993a:	055b      	lsls	r3, r3, #21
 800993c:	431a      	orrs	r2, r3
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009944:	b2db      	uxtb	r3, r3
 8009946:	041b      	lsls	r3, r3, #16
 8009948:	431a      	orrs	r2, r3
          | ((DWORD)Time.hours << 11UL)
 800994a:	78bb      	ldrb	r3, [r7, #2]
 800994c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009950:	b2db      	uxtb	r3, r3
 8009952:	02db      	lsls	r3, r3, #11
 8009954:	431a      	orrs	r2, r3
          | ((DWORD)Time.minutes << 5UL)
 8009956:	787b      	ldrb	r3, [r7, #1]
 8009958:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800995c:	b2db      	uxtb	r3, r3
 800995e:	015b      	lsls	r3, r3, #5
 8009960:	4313      	orrs	r3, r2
          | ((DWORD)Time.seconds >> 1UL));
 8009962:	783a      	ldrb	r2, [r7, #0]
 8009964:	f3c2 0205 	ubfx	r2, r2, #0, #6
 8009968:	b2d2      	uxtb	r2, r2
 800996a:	0852      	lsrs	r2, r2, #1
 800996c:	b2d2      	uxtb	r2, r2
  XMC_RTC_TIME_t Time = {{0UL}};

  RTC_GetTime(&Time);

  /* Pack date and time into a DWORD variable */
  return (((DWORD)(Time.year - 1980UL) << 25UL) | ((DWORD)Time.month << 21UL) | ((DWORD)Time.days << 16UL)
 800996e:	4313      	orrs	r3, r2
  current_time = (((stdtime.tm_year - 1980UL) << 25UL)  | (stdtime.tm_mon << 21UL) | (stdtime.tm_mday << 16UL) |
                   (stdtime.tm_hour << 11UL) | (stdtime.tm_min << 5UL) | (stdtime.tm_sec >> 1UL));

  return (current_time);
#endif
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009988:	4b0c      	ldr	r3, [pc, #48]	; (80099bc <__NVIC_SetPriorityGrouping+0x44>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009994:	4013      	ands	r3, r2
 8009996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80099a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80099a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80099aa:	4a04      	ldr	r2, [pc, #16]	; (80099bc <__NVIC_SetPriorityGrouping+0x44>)
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	60d3      	str	r3, [r2, #12]
}
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	e000ed00 	.word	0xe000ed00

080099c0 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80099c6:	2001      	movs	r0, #1
 80099c8:	f7ff ffd6 	bl	8009978 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80099cc:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80099ce:	4b21      	ldr	r3, [pc, #132]	; (8009a54 <SystemCoreSetup+0x94>)
 80099d0:	4a21      	ldr	r2, [pc, #132]	; (8009a58 <SystemCoreSetup+0x98>)
 80099d2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80099d4:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80099d8:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80099da:	4a1e      	ldr	r2, [pc, #120]	; (8009a54 <SystemCoreSetup+0x94>)
 80099dc:	4b1d      	ldr	r3, [pc, #116]	; (8009a54 <SystemCoreSetup+0x94>)
 80099de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80099ea:	4b1c      	ldr	r3, [pc, #112]	; (8009a5c <SystemCoreSetup+0x9c>)
 80099ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f0:	3314      	adds	r3, #20
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f023 030f 	bic.w	r3, r3, #15
 80099fc:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f043 0303 	orr.w	r3, r3, #3
 8009a04:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8009a06:	4b15      	ldr	r3, [pc, #84]	; (8009a5c <SystemCoreSetup+0x9c>)
 8009a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a0c:	3314      	adds	r3, #20
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8009a12:	4a10      	ldr	r2, [pc, #64]	; (8009a54 <SystemCoreSetup+0x94>)
 8009a14:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <SystemCoreSetup+0x94>)
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	f023 0310 	bic.w	r3, r3, #16
 8009a1c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8009a1e:	4a0d      	ldr	r2, [pc, #52]	; (8009a54 <SystemCoreSetup+0x94>)
 8009a20:	4b0c      	ldr	r3, [pc, #48]	; (8009a54 <SystemCoreSetup+0x94>)
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	f023 0308 	bic.w	r3, r3, #8
 8009a28:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8009a2a:	4a0a      	ldr	r2, [pc, #40]	; (8009a54 <SystemCoreSetup+0x94>)
 8009a2c:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <SystemCoreSetup+0x94>)
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a34:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8009a36:	4a07      	ldr	r2, [pc, #28]	; (8009a54 <SystemCoreSetup+0x94>)
 8009a38:	4b06      	ldr	r3, [pc, #24]	; (8009a54 <SystemCoreSetup+0x94>)
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a40:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8009a42:	4a04      	ldr	r2, [pc, #16]	; (8009a54 <SystemCoreSetup+0x94>)
 8009a44:	4b03      	ldr	r3, [pc, #12]	; (8009a54 <SystemCoreSetup+0x94>)
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a4c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	e000ed00 	.word	0xe000ed00
 8009a58:	08000000 	.word	0x08000000
 8009a5c:	58001000 	.word	0x58001000

08009a60 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	701a      	strb	r2, [r3, #0]

  return (status);
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8009a80:	b480      	push	{r7}
 8009a82:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8009a84:	4b02      	ldr	r3, [pc, #8]	; (8009a90 <OSCHP_GetFrequency+0x10>)
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	00b71b00 	.word	0x00b71b00

08009a94 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8009a94:	b5b0      	push	{r4, r5, r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8009a9a:	4b0d      	ldr	r3, [pc, #52]	; (8009ad0 <SystemCoreClockSetup+0x3c>)
 8009a9c:	1d3c      	adds	r4, r7, #4
 8009a9e:	461d      	mov	r5, r3
 8009aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8009aa8:	1d3b      	adds	r3, r7, #4
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7f6 fdfe 	bl	80006ac <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_ULP);
 8009ab0:	2040      	movs	r0, #64	; 0x40
 8009ab2:	f7f6 fee5 	bl	8000880 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	f7f6 feae 	bl	8000818 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8009abc:	2004      	movs	r0, #4
 8009abe:	f7f6 ff6b 	bl	8000998 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	2120      	movs	r1, #32
 8009ac6:	f7f6 ff8b 	bl	80009e0 <XMC_SCU_CLOCK_StartUsbPll>
#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
#endif

}
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bdb0      	pop	{r4, r5, r7, pc}
 8009ad0:	080101b8 	.word	0x080101b8

08009ad4 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	460b      	mov	r3, r1
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	689a      	ldr	r2, [r3, #8]
 8009ae6:	7afb      	ldrb	r3, [r7, #11]
 8009ae8:	2107      	movs	r1, #7
 8009aea:	fa01 f303 	lsl.w	r3, r1, r3
 8009aee:	43db      	mvns	r3, r3
 8009af0:	401a      	ands	r2, r3
 8009af2:	7afb      	ldrb	r3, [r7, #11]
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	fa01 f303 	lsl.w	r3, r1, r3
 8009afa:	431a      	orrs	r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	609a      	str	r2, [r3, #8]
}
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop

08009b0c <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 8009b20:	78fb      	ldrb	r3, [r7, #3]
 8009b22:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8009b26:	431a      	orrs	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop

08009b38 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	60da      	str	r2, [r3, #12]
}
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop

08009b58 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	601a      	str	r2, [r3, #0]
}
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop

08009b78 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	601a      	str	r2, [r3, #0]
}
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop

08009b98 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f043 0201 	orr.w	r2, r3, #1
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	601a      	str	r2, [r3, #0]
}
 8009bac:	370c      	adds	r7, #12
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop

08009bb8 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f023 0201 	bic.w	r2, r3, #1
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	601a      	str	r2, [r3, #0]
}
 8009bcc:	370c      	adds	r7, #12
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop

08009bd8 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	460b      	mov	r3, r1
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	6812      	ldr	r2, [r2, #0]
 8009bee:	6891      	ldr	r1, [r2, #8]
 8009bf0:	7afa      	ldrb	r2, [r7, #11]
 8009bf2:	2007      	movs	r0, #7
 8009bf4:	fa00 f202 	lsl.w	r2, r0, r2
 8009bf8:	43d2      	mvns	r2, r2
 8009bfa:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 8009bfc:	7afa      	ldrb	r2, [r7, #11]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8009c04:	430a      	orrs	r2, r1
 8009c06:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop

08009c14 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	6811      	ldr	r1, [r2, #0]
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	601a      	str	r2, [r3, #0]
}
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8009c4a:	f7ff ffe3 	bl	8009c14 <XMC_CAN_MO_EnableEvent>
}
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009c66:	f7ff ffd5 	bl	8009c14 <XMC_CAN_MO_EnableEvent>
}
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f831 	bl	8009ce4 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f043 0302 	orr.w	r3, r3, #2
 8009c92:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f043 0304 	orr.w	r3, r3, #4
 8009ca4:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d003      	beq.n	8009cb8 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f043 0308 	orr.w	r3, r3, #8
 8009cb6:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	68f9      	ldr	r1, [r7, #12]
 8009cc0:	f7f7 fc26 	bl	8001510 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d006      	beq.n	8009cdc <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009cd8:	f7f7 fc1a 	bl	8001510 <XMC_CAN_NODE_EnableEvent>
  }

}
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop

08009ce4 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cf6:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	f7ff fee9 	bl	8009ad4 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d0c:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8009d0e:	4610      	mov	r0, r2
 8009d10:	2104      	movs	r1, #4
 8009d12:	461a      	mov	r2, r3
 8009d14:	f7ff fede 	bl	8009ad4 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d22:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8009d24:	4610      	mov	r0, r2
 8009d26:	2108      	movs	r1, #8
 8009d28:	461a      	mov	r2, r3
 8009d2a:	f7ff fed3 	bl	8009ad4 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d38:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	210c      	movs	r1, #12
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f7ff fec8 	bl	8009ad4 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop

08009d4c <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7f7 fa07 	bl	800116c <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	79db      	ldrb	r3, [r3, #7]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00b      	beq.n	8009d7e <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	795b      	ldrb	r3, [r3, #5]
 8009d6e:	4610      	mov	r0, r2
 8009d70:	2104      	movs	r1, #4
 8009d72:	461a      	mov	r2, r3
 8009d74:	f7ff ff30 	bl	8009bd8 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff ff5d 	bl	8009c38 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	7a1b      	ldrb	r3, [r3, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00b      	beq.n	8009d9e <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	799b      	ldrb	r3, [r3, #6]
 8009d8e:	4610      	mov	r0, r2
 8009d90:	2100      	movs	r1, #0
 8009d92:	461a      	mov	r2, r3
 8009d94:	f7ff ff20 	bl	8009bd8 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff ff5b 	bl	8009c54 <CAN_NODE_MO_EnableRxEvent>
  }

}
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7f7 faad 	bl	8001314 <XMC_CAN_MO_Transmit>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  return (status);
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7f7 fac9 	bl	8001370 <XMC_CAN_MO_Receive>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
  return (status);
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	6812      	ldr	r2, [r2, #0]
 8009e06:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	6852      	ldr	r2, [r2, #4]
 8009e10:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7f7 fa44 	bl	80012a4 <XMC_CAN_MO_UpdateData>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]
  return (status);
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop

08009e2c <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fc fc6b 	bl	8006720 <GLOBAL_CAN_Init>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f040 8082 	bne.w	8009f5a <CAN_NODE_Init+0x12e>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	4610      	mov	r0, r2
 8009e60:	4619      	mov	r1, r3
 8009e62:	f7f7 f84f 	bl	8000f04 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d173      	bne.n	8009f54 <CAN_NODE_Init+0x128>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff fe71 	bl	8009b58 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff fe8c 	bl	8009b98 <XMC_CAN_NODE_SetInitBit>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <CAN_NODE_Init+0x6a>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff fe52 	bl	8009b38 <XMC_CAN_NODE_EnableLoopBack>
 8009e94:	e018      	b.n	8009ec8 <CAN_NODE_Init+0x9c>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e9c:	6819      	ldr	r1, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ea4:	791a      	ldrb	r2, [r3, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	f7f6 fa79 	bl	80003a8 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	f7ff fe22 	bl	8009b0c <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff fed1 	bl	8009c70 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8009ece:	2300      	movs	r3, #0
 8009ed0:	613b      	str	r3, [r7, #16]
 8009ed2:	e019      	b.n	8009f08 <CAN_NODE_Init+0xdc>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	3302      	adds	r3, #2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6859      	ldr	r1, [r3, #4]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	791b      	ldrb	r3, [r3, #4]
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7f7 f8a8 	bl	800104c <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 8009efc:	68b8      	ldr	r0, [r7, #8]
 8009efe:	f7ff ff25 	bl	8009d4c <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	3301      	adds	r3, #1
 8009f06:	613b      	str	r3, [r7, #16]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8009f0e:	461a      	mov	r2, r3
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d8de      	bhi.n	8009ed4 <CAN_NODE_Init+0xa8>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7ff fe2c 	bl	8009b78 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7ff fe47 	bl	8009bb8 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8009f30:	f083 0301 	eor.w	r3, r3, #1
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d011      	beq.n	8009f5e <CAN_NODE_Init+0x132>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6819      	ldr	r1, [r3, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	791a      	ldrb	r2, [r3, #4]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f48:	4608      	mov	r0, r1
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	f7f6 fa2b 	bl	80003a8 <XMC_GPIO_Init>
 8009f52:	e004      	b.n	8009f5e <CAN_NODE_Init+0x132>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 8009f54:	2301      	movs	r3, #1
 8009f56:	75fb      	strb	r3, [r7, #23]
 8009f58:	e001      	b.n	8009f5e <CAN_NODE_Init+0x132>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8009f72:	4821      	ldr	r0, [pc, #132]	; (8009ff8 <DAVE_Init+0x90>)
 8009f74:	f7ff fd74 	bl	8009a60 <CLOCK_XMC4_Init>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8009f7c:	79fb      	ldrb	r3, [r7, #7]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d104      	bne.n	8009f8c <DAVE_Init+0x24>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TIMER */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TIMER); 
 8009f82:	481e      	ldr	r0, [pc, #120]	; (8009ffc <DAVE_Init+0x94>)
 8009f84:	f7fc f912 	bl	80061ac <INTERRUPT_Init>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009f8c:	79fb      	ldrb	r3, [r7, #7]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d104      	bne.n	8009f9c <DAVE_Init+0x34>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8009f92:	481b      	ldr	r0, [pc, #108]	; (800a000 <DAVE_Init+0x98>)
 8009f94:	f7f8 f886 	bl	80020a4 <TIMER_Init>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d104      	bne.n	8009fac <DAVE_Init+0x44>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_OBDII */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_OBDII); 
 8009fa2:	4818      	ldr	r0, [pc, #96]	; (800a004 <DAVE_Init+0x9c>)
 8009fa4:	f7ff ff42 	bl	8009e2c <CAN_NODE_Init>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d104      	bne.n	8009fbc <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_CAN_RX */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_CAN_RX); 
 8009fb2:	4815      	ldr	r0, [pc, #84]	; (800a008 <DAVE_Init+0xa0>)
 8009fb4:	f7fc f8fa 	bl	80061ac <INTERRUPT_Init>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d104      	bne.n	8009fcc <DAVE_Init+0x64>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_LCD */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_LCD); 
 8009fc2:	4812      	ldr	r0, [pc, #72]	; (800a00c <DAVE_Init+0xa4>)
 8009fc4:	f7fc f9c0 	bl	8006348 <I2C_MASTER_Init>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009fcc:	79fb      	ldrb	r3, [r7, #7]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d104      	bne.n	8009fdc <DAVE_Init+0x74>
  {
	 /**  Initialization of FATFS APP instance FATFS_0 */
	 init_status = (DAVE_STATUS_t)FATFS_Init(&FATFS_0); 
 8009fd2:	480f      	ldr	r0, [pc, #60]	; (800a010 <DAVE_Init+0xa8>)
 8009fd4:	f7ff fb86 	bl	80096e4 <FATFS_Init>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d104      	bne.n	8009fec <DAVE_Init+0x84>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_CAN_RX2 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_CAN_RX2); 
 8009fe2:	480c      	ldr	r0, [pc, #48]	; (800a014 <DAVE_Init+0xac>)
 8009fe4:	f7fc f8e2 	bl	80061ac <INTERRUPT_Init>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8009fec:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000488 	.word	0x20000488
 8009ffc:	0800fcfc 	.word	0x0800fcfc
 800a000:	20000008 	.word	0x20000008
 800a004:	0801021c 	.word	0x0801021c
 800a008:	0800fd00 	.word	0x0800fd00
 800a00c:	200000ac 	.word	0x200000ac
 800a010:	200000f4 	.word	0x200000f4
 800a014:	0800fd04 	.word	0x0800fd04

0800a018 <LCDWriteData>:
 for(i=0;i<=n;i++)
 for(j=0;j<=10;j++);
}

void LCDWriteData(uint8_t data)
{
 800a018:	b590      	push	{r4, r7, lr}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	4603      	mov	r3, r0
 800a020:	71fb      	strb	r3, [r7, #7]

	uint8_t temp;
	temp = (data & 0xf0) + 9;
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	f023 030f 	bic.w	r3, r3, #15
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	3309      	adds	r3, #9
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a030:	f107 040f 	add.w	r4, r7, #15
 800a034:	2301      	movs	r3, #1
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	2301      	movs	r3, #1
 800a03a:	9301      	str	r3, [sp, #4]
 800a03c:	482e      	ldr	r0, [pc, #184]	; (800a0f8 <LCDWriteData+0xe0>)
 800a03e:	2101      	movs	r1, #1
 800a040:	224e      	movs	r2, #78	; 0x4e
 800a042:	4623      	mov	r3, r4
 800a044:	f7fc f9b6 	bl	80063b4 <I2C_MASTER_Transmit>

	temp = temp + 0x4;
 800a048:	7bfb      	ldrb	r3, [r7, #15]
 800a04a:	3304      	adds	r3, #4
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a050:	f107 040f 	add.w	r4, r7, #15
 800a054:	2301      	movs	r3, #1
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	2301      	movs	r3, #1
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	4826      	ldr	r0, [pc, #152]	; (800a0f8 <LCDWriteData+0xe0>)
 800a05e:	2101      	movs	r1, #1
 800a060:	224e      	movs	r2, #78	; 0x4e
 800a062:	4623      	mov	r3, r4
 800a064:	f7fc f9a6 	bl	80063b4 <I2C_MASTER_Transmit>
	temp = temp & 0xFA;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	f023 0305 	bic.w	r3, r3, #5
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a072:	f107 040f 	add.w	r4, r7, #15
 800a076:	2301      	movs	r3, #1
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	2301      	movs	r3, #1
 800a07c:	9301      	str	r3, [sp, #4]
 800a07e:	481e      	ldr	r0, [pc, #120]	; (800a0f8 <LCDWriteData+0xe0>)
 800a080:	2101      	movs	r1, #1
 800a082:	224e      	movs	r2, #78	; 0x4e
 800a084:	4623      	mov	r3, r4
 800a086:	f7fc f995 	bl	80063b4 <I2C_MASTER_Transmit>

	temp = ((data << 4) & 0xf0) + 9;
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	011b      	lsls	r3, r3, #4
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	3309      	adds	r3, #9
 800a092:	b2db      	uxtb	r3, r3
 800a094:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a096:	f107 040f 	add.w	r4, r7, #15
 800a09a:	2301      	movs	r3, #1
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	2301      	movs	r3, #1
 800a0a0:	9301      	str	r3, [sp, #4]
 800a0a2:	4815      	ldr	r0, [pc, #84]	; (800a0f8 <LCDWriteData+0xe0>)
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	224e      	movs	r2, #78	; 0x4e
 800a0a8:	4623      	mov	r3, r4
 800a0aa:	f7fc f983 	bl	80063b4 <I2C_MASTER_Transmit>

	temp = temp + 0x4;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a0b6:	f107 040f 	add.w	r4, r7, #15
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	2301      	movs	r3, #1
 800a0c0:	9301      	str	r3, [sp, #4]
 800a0c2:	480d      	ldr	r0, [pc, #52]	; (800a0f8 <LCDWriteData+0xe0>)
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	224e      	movs	r2, #78	; 0x4e
 800a0c8:	4623      	mov	r3, r4
 800a0ca:	f7fc f973 	bl	80063b4 <I2C_MASTER_Transmit>
	temp = temp & 0xFA;
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	f023 0305 	bic.w	r3, r3, #5
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a0d8:	f107 040f 	add.w	r4, r7, #15
 800a0dc:	2301      	movs	r3, #1
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	4804      	ldr	r0, [pc, #16]	; (800a0f8 <LCDWriteData+0xe0>)
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	224e      	movs	r2, #78	; 0x4e
 800a0ea:	4623      	mov	r3, r4
 800a0ec:	f7fc f962 	bl	80063b4 <I2C_MASTER_Transmit>

}
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd90      	pop	{r4, r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	200000ac 	.word	0x200000ac

0800a0fc <LCDWriteCommand>:

void LCDWriteCommand(uint8_t command)
{
 800a0fc:	b590      	push	{r4, r7, lr}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af02      	add	r7, sp, #8
 800a102:	4603      	mov	r3, r0
 800a104:	71fb      	strb	r3, [r7, #7]

	uint8_t temp;
	temp = (command & 0xf0) + 8;
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	f023 030f 	bic.w	r3, r3, #15
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	3308      	adds	r3, #8
 800a110:	b2db      	uxtb	r3, r3
 800a112:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a114:	f107 040f 	add.w	r4, r7, #15
 800a118:	2301      	movs	r3, #1
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	2301      	movs	r3, #1
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	482e      	ldr	r0, [pc, #184]	; (800a1dc <LCDWriteCommand+0xe0>)
 800a122:	2101      	movs	r1, #1
 800a124:	224e      	movs	r2, #78	; 0x4e
 800a126:	4623      	mov	r3, r4
 800a128:	f7fc f944 	bl	80063b4 <I2C_MASTER_Transmit>

	temp = temp + 0x4;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	3304      	adds	r3, #4
 800a130:	b2db      	uxtb	r3, r3
 800a132:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a134:	f107 040f 	add.w	r4, r7, #15
 800a138:	2301      	movs	r3, #1
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	2301      	movs	r3, #1
 800a13e:	9301      	str	r3, [sp, #4]
 800a140:	4826      	ldr	r0, [pc, #152]	; (800a1dc <LCDWriteCommand+0xe0>)
 800a142:	2101      	movs	r1, #1
 800a144:	224e      	movs	r2, #78	; 0x4e
 800a146:	4623      	mov	r3, r4
 800a148:	f7fc f934 	bl	80063b4 <I2C_MASTER_Transmit>
	temp = temp & 0xFA;
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	f023 0305 	bic.w	r3, r3, #5
 800a152:	b2db      	uxtb	r3, r3
 800a154:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a156:	f107 040f 	add.w	r4, r7, #15
 800a15a:	2301      	movs	r3, #1
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	2301      	movs	r3, #1
 800a160:	9301      	str	r3, [sp, #4]
 800a162:	481e      	ldr	r0, [pc, #120]	; (800a1dc <LCDWriteCommand+0xe0>)
 800a164:	2101      	movs	r1, #1
 800a166:	224e      	movs	r2, #78	; 0x4e
 800a168:	4623      	mov	r3, r4
 800a16a:	f7fc f923 	bl	80063b4 <I2C_MASTER_Transmit>

	temp = ((command << 4) & 0xf0) + 8;
 800a16e:	79fb      	ldrb	r3, [r7, #7]
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	b2db      	uxtb	r3, r3
 800a174:	3308      	adds	r3, #8
 800a176:	b2db      	uxtb	r3, r3
 800a178:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a17a:	f107 040f 	add.w	r4, r7, #15
 800a17e:	2301      	movs	r3, #1
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	2301      	movs	r3, #1
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	4815      	ldr	r0, [pc, #84]	; (800a1dc <LCDWriteCommand+0xe0>)
 800a188:	2101      	movs	r1, #1
 800a18a:	224e      	movs	r2, #78	; 0x4e
 800a18c:	4623      	mov	r3, r4
 800a18e:	f7fc f911 	bl	80063b4 <I2C_MASTER_Transmit>

	temp = temp + 0x4;
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	3304      	adds	r3, #4
 800a196:	b2db      	uxtb	r3, r3
 800a198:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a19a:	f107 040f 	add.w	r4, r7, #15
 800a19e:	2301      	movs	r3, #1
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	480d      	ldr	r0, [pc, #52]	; (800a1dc <LCDWriteCommand+0xe0>)
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	224e      	movs	r2, #78	; 0x4e
 800a1ac:	4623      	mov	r3, r4
 800a1ae:	f7fc f901 	bl	80063b4 <I2C_MASTER_Transmit>
	temp = temp & 0xFA;
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	f023 0305 	bic.w	r3, r3, #5
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	73fb      	strb	r3, [r7, #15]
	I2C_MASTER_Transmit(&I2C_LCD,true,0x4e,&temp,1,true);
 800a1bc:	f107 040f 	add.w	r4, r7, #15
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	4804      	ldr	r0, [pc, #16]	; (800a1dc <LCDWriteCommand+0xe0>)
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	224e      	movs	r2, #78	; 0x4e
 800a1ce:	4623      	mov	r3, r4
 800a1d0:	f7fc f8f0 	bl	80063b4 <I2C_MASTER_Transmit>

}
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd90      	pop	{r4, r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	200000ac 	.word	0x200000ac

0800a1e0 <LCDCursorXY>:

void LCDCursorXY(uint8_t x, uint8_t y)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	460a      	mov	r2, r1
 800a1ea:	71fb      	strb	r3, [r7, #7]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	71bb      	strb	r3, [r7, #6]
	uint8_t address =0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73fb      	strb	r3, [r7, #15]
    switch (x) {
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d826      	bhi.n	800a248 <LCDCursorXY+0x68>
 800a1fa:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <LCDCursorXY+0x20>)
 800a1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a200:	0800a211 	.word	0x0800a211
 800a204:	0800a21f 	.word	0x0800a21f
 800a208:	0800a22d 	.word	0x0800a22d
 800a20c:	0800a23b 	.word	0x0800a23b
        case (0) : address = 0x80 + (y & 0x0f);
 800a210:	79bb      	ldrb	r3, [r7, #6]
 800a212:	f003 030f 	and.w	r3, r3, #15
 800a216:	b2db      	uxtb	r3, r3
 800a218:	3b80      	subs	r3, #128	; 0x80
 800a21a:	73fb      	strb	r3, [r7, #15]
        break;
 800a21c:	e014      	b.n	800a248 <LCDCursorXY+0x68>
        case (1) : address = 0xc0 + (y & 0x0f);
 800a21e:	79bb      	ldrb	r3, [r7, #6]
 800a220:	f003 030f 	and.w	r3, r3, #15
 800a224:	b2db      	uxtb	r3, r3
 800a226:	3b40      	subs	r3, #64	; 0x40
 800a228:	73fb      	strb	r3, [r7, #15]
        break;
 800a22a:	e00d      	b.n	800a248 <LCDCursorXY+0x68>
        case (2) : address = 0x94 + (y & 0x0f);
 800a22c:	79bb      	ldrb	r3, [r7, #6]
 800a22e:	f003 030f 	and.w	r3, r3, #15
 800a232:	b2db      	uxtb	r3, r3
 800a234:	3b6c      	subs	r3, #108	; 0x6c
 800a236:	73fb      	strb	r3, [r7, #15]
        break;
 800a238:	e006      	b.n	800a248 <LCDCursorXY+0x68>
        case (3) : address = 0xD4 + (y & 0x0f);
 800a23a:	79bb      	ldrb	r3, [r7, #6]
 800a23c:	f003 030f 	and.w	r3, r3, #15
 800a240:	b2db      	uxtb	r3, r3
 800a242:	3b2c      	subs	r3, #44	; 0x2c
 800a244:	73fb      	strb	r3, [r7, #15]
        break;
 800a246:	bf00      	nop
    }

    LCDWriteCommand(address);
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7ff ff56 	bl	800a0fc <LCDWriteCommand>

}
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop

0800a258 <LCDWriteString>:

void LCDWriteString(char *s)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
	while(*s)
 800a260:	e007      	b.n	800a272 <LCDWriteString+0x1a>
	{
		LCDWriteData(*s);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	4618      	mov	r0, r3
 800a268:	f7ff fed6 	bl	800a018 <LCDWriteData>
		s++;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	3301      	adds	r3, #1
 800a270:	607b      	str	r3, [r7, #4]

}

void LCDWriteString(char *s)
{
	while(*s)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1f3      	bne.n	800a262 <LCDWriteString+0xa>
	{
		LCDWriteData(*s);
		s++;
	}
}
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <LCDInit>:


void LCDInit(void)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
	LCDWriteCommand(0x33);
 800a284:	2033      	movs	r0, #51	; 0x33
 800a286:	f7ff ff39 	bl	800a0fc <LCDWriteCommand>
	LCDWriteCommand(0x32);
 800a28a:	2032      	movs	r0, #50	; 0x32
 800a28c:	f7ff ff36 	bl	800a0fc <LCDWriteCommand>
	LCDWriteCommand(0x28); // 4 bit mode
 800a290:	2028      	movs	r0, #40	; 0x28
 800a292:	f7ff ff33 	bl	800a0fc <LCDWriteCommand>
	LCDWriteCommand(0x01); // clear the screen
 800a296:	2001      	movs	r0, #1
 800a298:	f7ff ff30 	bl	800a0fc <LCDWriteCommand>
	LCDWriteCommand(0x0F); // display on cursor on, cursor blink
 800a29c:	200f      	movs	r0, #15
 800a29e:	f7ff ff2d 	bl	800a0fc <LCDWriteCommand>
	LCDWriteCommand(0x06); // increment cursor
 800a2a2:	2006      	movs	r0, #6
 800a2a4:	f7ff ff2a 	bl	800a0fc <LCDWriteCommand>
	LCDWriteCommand(0x80); // row 1 column 1
 800a2a8:	2080      	movs	r0, #128	; 0x80
 800a2aa:	f7ff ff27 	bl	800a0fc <LCDWriteCommand>
}
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a2c2:	409a      	lsls	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	605a      	str	r2, [r3, #4]
}
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop

0800a2d4 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 800a2e0:	78fb      	ldrb	r3, [r7, #3]
 800a2e2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800a2e6:	409a      	lsls	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	605a      	str	r2, [r3, #4]
}
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop

0800a2f8 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	fa22 f303 	lsr.w	r3, r2, r3
 800a30e:	f003 0301 	and.w	r3, r3, #1
}
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop

0800a320 <CCU43_1_IRQHandler>:
 */



void TimerIRQHandler(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0
	if(!onProcess)
 800a324:	4b27      	ldr	r3, [pc, #156]	; (800a3c4 <CCU43_1_IRQHandler+0xa4>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d12c      	bne.n	800a386 <CCU43_1_IRQHandler+0x66>
	{
		samplingTimer++;
 800a32c:	4b26      	ldr	r3, [pc, #152]	; (800a3c8 <CCU43_1_IRQHandler+0xa8>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	3301      	adds	r3, #1
 800a332:	b2da      	uxtb	r2, r3
 800a334:	4b24      	ldr	r3, [pc, #144]	; (800a3c8 <CCU43_1_IRQHandler+0xa8>)
 800a336:	701a      	strb	r2, [r3, #0]
		if(samplingTimer >= SAMPLING_PERIOD)
 800a338:	4b23      	ldr	r3, [pc, #140]	; (800a3c8 <CCU43_1_IRQHandler+0xa8>)
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d022      	beq.n	800a386 <CCU43_1_IRQHandler+0x66>
		{


			samplingTimer=0;
 800a340:	4b21      	ldr	r3, [pc, #132]	; (800a3c8 <CCU43_1_IRQHandler+0xa8>)
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
			CAN_OBDII_LMO_02_Config.mo_ptr->can_identifier = 0x200;
 800a346:	4b21      	ldr	r3, [pc, #132]	; (800a3cc <CCU43_1_IRQHandler+0xac>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	6853      	ldr	r3, [r2, #4]
 800a34c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a350:	f361 031c 	bfi	r3, r1, #0, #29
 800a354:	6053      	str	r3, [r2, #4]
			CAN_OBDII_LMO_02_Config.mo_ptr->can_id_mask = 0x7FF;
 800a356:	4b1d      	ldr	r3, [pc, #116]	; (800a3cc <CCU43_1_IRQHandler+0xac>)
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	6893      	ldr	r3, [r2, #8]
 800a35c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a360:	f361 031c 	bfi	r3, r1, #0, #29
 800a364:	6093      	str	r3, [r2, #8]
			CAN_OBDII_LMO_02_Config.mo_ptr->can_data_length=8;
 800a366:	4b19      	ldr	r3, [pc, #100]	; (800a3cc <CCU43_1_IRQHandler+0xac>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2208      	movs	r2, #8
 800a36c:	731a      	strb	r2, [r3, #12]
			CAN_NODE_MO_Init(&CAN_OBDII_LMO_02_Config);
 800a36e:	4817      	ldr	r0, [pc, #92]	; (800a3cc <CCU43_1_IRQHandler+0xac>)
 800a370:	f7ff fcec 	bl	8009d4c <CAN_NODE_MO_Init>
			state = GET_VELOCITY;
 800a374:	4b16      	ldr	r3, [pc, #88]	; (800a3d0 <CCU43_1_IRQHandler+0xb0>)
 800a376:	2201      	movs	r2, #1
 800a378:	701a      	strb	r2, [r3, #0]
			onProcess = 1;
 800a37a:	4b12      	ldr	r3, [pc, #72]	; (800a3c4 <CCU43_1_IRQHandler+0xa4>)
 800a37c:	2201      	movs	r2, #1
 800a37e:	701a      	strb	r2, [r3, #0]
			canTimeoutTimerEnable=1;
 800a380:	4b14      	ldr	r3, [pc, #80]	; (800a3d4 <CCU43_1_IRQHandler+0xb4>)
 800a382:	2201      	movs	r2, #1
 800a384:	701a      	strb	r2, [r3, #0]
			*/

		}
	}

	if(canTimeoutTimerEnable==1)
 800a386:	4b13      	ldr	r3, [pc, #76]	; (800a3d4 <CCU43_1_IRQHandler+0xb4>)
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d119      	bne.n	800a3c2 <CCU43_1_IRQHandler+0xa2>
	{
		if(++canTimeoutCounter>=CAN_TIMEOUT)
 800a38e:	4b12      	ldr	r3, [pc, #72]	; (800a3d8 <CCU43_1_IRQHandler+0xb8>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	3301      	adds	r3, #1
 800a394:	b2da      	uxtb	r2, r3
 800a396:	4b10      	ldr	r3, [pc, #64]	; (800a3d8 <CCU43_1_IRQHandler+0xb8>)
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	4b0f      	ldr	r3, [pc, #60]	; (800a3d8 <CCU43_1_IRQHandler+0xb8>)
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	2b04      	cmp	r3, #4
 800a3a0:	d90f      	bls.n	800a3c2 <CCU43_1_IRQHandler+0xa2>
		{
			canTimeoutCounter=0;
 800a3a2:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <CCU43_1_IRQHandler+0xb8>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	701a      	strb	r2, [r3, #0]
			state=IDLE;
 800a3a8:	4b09      	ldr	r3, [pc, #36]	; (800a3d0 <CCU43_1_IRQHandler+0xb0>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	701a      	strb	r2, [r3, #0]
			samplingTimer=0;
 800a3ae:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <CCU43_1_IRQHandler+0xa8>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	701a      	strb	r2, [r3, #0]
			onProcess=0;
 800a3b4:	4b03      	ldr	r3, [pc, #12]	; (800a3c4 <CCU43_1_IRQHandler+0xa4>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	701a      	strb	r2, [r3, #0]
			XMC_GPIO_ToggleOutput(LED1);
 800a3ba:	4808      	ldr	r0, [pc, #32]	; (800a3dc <CCU43_1_IRQHandler+0xbc>)
 800a3bc:	2101      	movs	r1, #1
 800a3be:	f7ff ff89 	bl	800a2d4 <XMC_GPIO_ToggleOutput>
		}
	}

}
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	2000049c 	.word	0x2000049c
 800a3c8:	2000049d 	.word	0x2000049d
 800a3cc:	08010204 	.word	0x08010204
 800a3d0:	20000497 	.word	0x20000497
 800a3d4:	2000049e 	.word	0x2000049e
 800a3d8:	2000049f 	.word	0x2000049f
 800a3dc:	48028100 	.word	0x48028100

0800a3e0 <CAN0_1_IRQHandler>:

void CanM02RxRQHandler_2(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
	CAN_NODE_MO_Receive(CAN_OBDII.lmobj_ptr[2]);		// get the received pacakge into message object.
 800a3e4:	4b16      	ldr	r3, [pc, #88]	; (800a440 <CAN0_1_IRQHandler+0x60>)
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff fced 	bl	8009dc8 <CAN_NODE_MO_Receive>
	if(CAN_OBDII_LMO_03_Config.mo_ptr->can_identifier == 0x2D5)
 800a3ee:	4b15      	ldr	r3, [pc, #84]	; (800a444 <CAN0_1_IRQHandler+0x64>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a3f8:	f240 22d5 	movw	r2, #725	; 0x2d5
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d11e      	bne.n	800a43e <CAN0_1_IRQHandler+0x5e>
	{
		smartdata.bms = ((CAN_OBDII_LMO_03_Config.mo_ptr->can_data_byte[4] & 0x03) * 256 + CAN_OBDII_LMO_03_Config.mo_ptr->can_data_byte[5])/10.0;
 800a400:	4b10      	ldr	r3, [pc, #64]	; (800a444 <CAN0_1_IRQHandler+0x64>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	7d1b      	ldrb	r3, [r3, #20]
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	021b      	lsls	r3, r3, #8
 800a40c:	4a0d      	ldr	r2, [pc, #52]	; (800a444 <CAN0_1_IRQHandler+0x64>)
 800a40e:	6812      	ldr	r2, [r2, #0]
 800a410:	7d52      	ldrb	r2, [r2, #21]
 800a412:	4413      	add	r3, r2
 800a414:	4618      	mov	r0, r3
 800a416:	f001 fabb 	bl	800b990 <__aeabi_i2d>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4610      	mov	r0, r2
 800a420:	4619      	mov	r1, r3
 800a422:	f04f 0200 	mov.w	r2, #0
 800a426:	4b08      	ldr	r3, [pc, #32]	; (800a448 <CAN0_1_IRQHandler+0x68>)
 800a428:	f001 fc42 	bl	800bcb0 <__aeabi_ddiv>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4610      	mov	r0, r2
 800a432:	4619      	mov	r1, r3
 800a434:	f001 fd24 	bl	800be80 <__aeabi_d2f>
 800a438:	4602      	mov	r2, r0
 800a43a:	4b04      	ldr	r3, [pc, #16]	; (800a44c <CAN0_1_IRQHandler+0x6c>)
 800a43c:	615a      	str	r2, [r3, #20]
	}
}
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	0801021c 	.word	0x0801021c
 800a444:	08010210 	.word	0x08010210
 800a448:	40240000 	.word	0x40240000
 800a44c:	20000814 	.word	0x20000814

0800a450 <CAN0_0_IRQHandler>:



void CanM02RxRQHandler(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0

	CAN_NODE_MO_Receive(CAN_OBDII.lmobj_ptr[1]);		// get the received pacakge into message object.
 800a456:	4ba4      	ldr	r3, [pc, #656]	; (800a6e8 <CAN0_0_IRQHandler+0x298>)
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7ff fcb4 	bl	8009dc8 <CAN_NODE_MO_Receive>
	canTimeoutCounter=0;
 800a460:	4ba2      	ldr	r3, [pc, #648]	; (800a6ec <CAN0_0_IRQHandler+0x29c>)
 800a462:	2200      	movs	r2, #0
 800a464:	701a      	strb	r2, [r3, #0]

	switch(state)
 800a466:	4ba2      	ldr	r3, [pc, #648]	; (800a6f0 <CAN0_0_IRQHandler+0x2a0>)
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b05      	cmp	r3, #5
 800a46c:	f200 82a5 	bhi.w	800a9ba <CAN0_0_IRQHandler+0x56a>
 800a470:	a201      	add	r2, pc, #4	; (adr r2, 800a478 <CAN0_0_IRQHandler+0x28>)
 800a472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a476:	bf00      	nop
 800a478:	0800a9bb 	.word	0x0800a9bb
 800a47c:	0800a491 	.word	0x0800a491
 800a480:	0800a515 	.word	0x0800a515
 800a484:	0800a585 	.word	0x0800a585
 800a488:	0800a635 	.word	0x0800a635
 800a48c:	0800a865 	.word	0x0800a865
	{
		case IDLE:
		break;

		case GET_VELOCITY:
			if(CAN_OBDII_LMO_02_Config.mo_ptr->can_identifier == 0x200)
 800a490:	4b98      	ldr	r3, [pc, #608]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a49a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a49e:	d132      	bne.n	800a506 <CAN0_0_IRQHandler+0xb6>
			{
				smartdata.velocitiy = (CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[2] * 256 + CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[3])/18;
 800a4a0:	4b94      	ldr	r3, [pc, #592]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	7c9b      	ldrb	r3, [r3, #18]
 800a4a6:	021b      	lsls	r3, r3, #8
 800a4a8:	4a92      	ldr	r2, [pc, #584]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	7cd2      	ldrb	r2, [r2, #19]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	4a91      	ldr	r2, [pc, #580]	; (800a6f8 <CAN0_0_IRQHandler+0x2a8>)
 800a4b2:	fb82 1203 	smull	r1, r2, r2, r3
 800a4b6:	1092      	asrs	r2, r2, #2
 800a4b8:	17db      	asrs	r3, r3, #31
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	4b8f      	ldr	r3, [pc, #572]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a4c0:	801a      	strh	r2, [r3, #0]
				CAN_OBDII_LMO_02_Config.mo_ptr->can_identifier = 0x7EF;
 800a4c2:	4b8c      	ldr	r3, [pc, #560]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	6853      	ldr	r3, [r2, #4]
 800a4c8:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800a4cc:	f361 031c 	bfi	r3, r1, #0, #29
 800a4d0:	6053      	str	r3, [r2, #4]
				CAN_OBDII_LMO_02_Config.mo_ptr->can_id_mask = 0x7FF;
 800a4d2:	4b88      	ldr	r3, [pc, #544]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	6893      	ldr	r3, [r2, #8]
 800a4d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a4dc:	f361 031c 	bfi	r3, r1, #0, #29
 800a4e0:	6093      	str	r3, [r2, #8]
				CAN_OBDII_LMO_02_Config.mo_ptr->can_data_length=8;
 800a4e2:	4b84      	ldr	r3, [pc, #528]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2208      	movs	r2, #8
 800a4e8:	731a      	strb	r2, [r3, #12]
				CAN_NODE_MO_Init(&CAN_OBDII_LMO_02_Config);
 800a4ea:	4882      	ldr	r0, [pc, #520]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a4ec:	f7ff fc2e 	bl	8009d4c <CAN_NODE_MO_Init>
				CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqBattAmp);
 800a4f0:	4883      	ldr	r0, [pc, #524]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a4f2:	4984      	ldr	r1, [pc, #528]	; (800a704 <CAN0_0_IRQHandler+0x2b4>)
 800a4f4:	f7ff fc7a 	bl	8009dec <CAN_NODE_MO_UpdateData>
				CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a4f8:	4881      	ldr	r0, [pc, #516]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a4fa:	f7ff fc53 	bl	8009da4 <CAN_NODE_MO_Transmit>
				state = GET_BATT_AMP;
 800a4fe:	4b7c      	ldr	r3, [pc, #496]	; (800a6f0 <CAN0_0_IRQHandler+0x2a0>)
 800a500:	2202      	movs	r2, #2
 800a502:	701a      	strb	r2, [r3, #0]
			else
			{
				state = IDLE;
				onProcess = 0;
			}
		break;
 800a504:	e259      	b.n	800a9ba <CAN0_0_IRQHandler+0x56a>
				CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
				state = GET_BATT_AMP;
			}
			else
			{
				state = IDLE;
 800a506:	4b7a      	ldr	r3, [pc, #488]	; (800a6f0 <CAN0_0_IRQHandler+0x2a0>)
 800a508:	2200      	movs	r2, #0
 800a50a:	701a      	strb	r2, [r3, #0]
				onProcess = 0;
 800a50c:	4b7e      	ldr	r3, [pc, #504]	; (800a708 <CAN0_0_IRQHandler+0x2b8>)
 800a50e:	2200      	movs	r2, #0
 800a510:	701a      	strb	r2, [r3, #0]
			}
		break;
 800a512:	e252      	b.n	800a9ba <CAN0_0_IRQHandler+0x56a>

		case GET_BATT_AMP:
			if(CAN_OBDII_LMO_02_Config.mo_ptr->can_identifier == 0x7EF)
 800a514:	4b77      	ldr	r3, [pc, #476]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a51e:	f240 72ef 	movw	r2, #2031	; 0x7ef
 800a522:	4293      	cmp	r3, r2
 800a524:	d126      	bne.n	800a574 <CAN0_0_IRQHandler+0x124>
			{
				smartdata.battAmp = (float)((int16_t)(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[4] * 256 + CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[5])/32.0F);
 800a526:	4b73      	ldr	r3, [pc, #460]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	7d1b      	ldrb	r3, [r3, #20]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	b29a      	uxth	r2, r3
 800a532:	4b70      	ldr	r3, [pc, #448]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	7d5b      	ldrb	r3, [r3, #21]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	4413      	add	r3, r2
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	b29b      	uxth	r3, r3
 800a540:	b21b      	sxth	r3, r3
 800a542:	ee07 3a90 	vmov	s15, r3
 800a546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a54a:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800a70c <CAN0_0_IRQHandler+0x2bc>
 800a54e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a552:	4b6a      	ldr	r3, [pc, #424]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a554:	edc3 7a01 	vstr	s15, [r3, #4]
				CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqBattVolt);
 800a558:	4869      	ldr	r0, [pc, #420]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a55a:	496d      	ldr	r1, [pc, #436]	; (800a710 <CAN0_0_IRQHandler+0x2c0>)
 800a55c:	f7ff fc46 	bl	8009dec <CAN_NODE_MO_UpdateData>
				CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a560:	4867      	ldr	r0, [pc, #412]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a562:	f7ff fc1f 	bl	8009da4 <CAN_NODE_MO_Transmit>
				state = GET_BATT_VOLTAGE;
 800a566:	4b62      	ldr	r3, [pc, #392]	; (800a6f0 <CAN0_0_IRQHandler+0x2a0>)
 800a568:	2203      	movs	r2, #3
 800a56a:	701a      	strb	r2, [r3, #0]
				stateBattVolt = BATT_VOLT_REQ_RESPONSE;
 800a56c:	4b69      	ldr	r3, [pc, #420]	; (800a714 <CAN0_0_IRQHandler+0x2c4>)
 800a56e:	2201      	movs	r2, #1
 800a570:	701a      	strb	r2, [r3, #0]
			else
			{
				CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqBattAmp);
				CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
			}
		break;
 800a572:	e222      	b.n	800a9ba <CAN0_0_IRQHandler+0x56a>
				state = GET_BATT_VOLTAGE;
				stateBattVolt = BATT_VOLT_REQ_RESPONSE;
			}
			else
			{
				CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqBattAmp);
 800a574:	4862      	ldr	r0, [pc, #392]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a576:	4963      	ldr	r1, [pc, #396]	; (800a704 <CAN0_0_IRQHandler+0x2b4>)
 800a578:	f7ff fc38 	bl	8009dec <CAN_NODE_MO_UpdateData>
				CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a57c:	4860      	ldr	r0, [pc, #384]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a57e:	f7ff fc11 	bl	8009da4 <CAN_NODE_MO_Transmit>
			}
		break;
 800a582:	e21a      	b.n	800a9ba <CAN0_0_IRQHandler+0x56a>

		case GET_BATT_VOLTAGE:
			switch(stateBattVolt)
 800a584:	4b63      	ldr	r3, [pc, #396]	; (800a714 <CAN0_0_IRQHandler+0x2c4>)
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d002      	beq.n	800a592 <CAN0_0_IRQHandler+0x142>
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d018      	beq.n	800a5c2 <CAN0_0_IRQHandler+0x172>
 800a590:	e048      	b.n	800a624 <CAN0_0_IRQHandler+0x1d4>
			{
				case BATT_VOLT_REQ_RESPONSE:
					if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[2] == 0x62)
 800a592:	4b58      	ldr	r3, [pc, #352]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	7c9b      	ldrb	r3, [r3, #18]
 800a598:	2b62      	cmp	r3, #98	; 0x62
 800a59a:	d10a      	bne.n	800a5b2 <CAN0_0_IRQHandler+0x162>
					{
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,flowControl);
 800a59c:	4858      	ldr	r0, [pc, #352]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a59e:	495e      	ldr	r1, [pc, #376]	; (800a718 <CAN0_0_IRQHandler+0x2c8>)
 800a5a0:	f7ff fc24 	bl	8009dec <CAN_NODE_MO_UpdateData>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a5a4:	4856      	ldr	r0, [pc, #344]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a5a6:	f7ff fbfd 	bl	8009da4 <CAN_NODE_MO_Transmit>
						stateBattVolt = BATT_VOLT_FLOW_RESPONSE;
 800a5aa:	4b5a      	ldr	r3, [pc, #360]	; (800a714 <CAN0_0_IRQHandler+0x2c4>)
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	701a      	strb	r2, [r3, #0]
					else
					{
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqBattVolt);
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
					}
				break;
 800a5b0:	e03f      	b.n	800a632 <CAN0_0_IRQHandler+0x1e2>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
						stateBattVolt = BATT_VOLT_FLOW_RESPONSE;
					}
					else
					{
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqBattVolt);
 800a5b2:	4853      	ldr	r0, [pc, #332]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a5b4:	4956      	ldr	r1, [pc, #344]	; (800a710 <CAN0_0_IRQHandler+0x2c0>)
 800a5b6:	f7ff fc19 	bl	8009dec <CAN_NODE_MO_UpdateData>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a5ba:	4851      	ldr	r0, [pc, #324]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a5bc:	f7ff fbf2 	bl	8009da4 <CAN_NODE_MO_Transmit>
					}
				break;
 800a5c0:	e037      	b.n	800a632 <CAN0_0_IRQHandler+0x1e2>

				case BATT_VOLT_FLOW_RESPONSE:
					if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] == 0x21)
 800a5c2:	4b4c      	ldr	r3, [pc, #304]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	7c1b      	ldrb	r3, [r3, #16]
 800a5c8:	2b21      	cmp	r3, #33	; 0x21
 800a5ca:	d120      	bne.n	800a60e <CAN0_0_IRQHandler+0x1be>
					{
						smartdata.battVolt = (float)((CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[6] * 256 + CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[7])/64.0F);
 800a5cc:	4b49      	ldr	r3, [pc, #292]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	7d9b      	ldrb	r3, [r3, #22]
 800a5d2:	021b      	lsls	r3, r3, #8
 800a5d4:	4a47      	ldr	r2, [pc, #284]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a5d6:	6812      	ldr	r2, [r2, #0]
 800a5d8:	7dd2      	ldrb	r2, [r2, #23]
 800a5da:	4413      	add	r3, r2
 800a5dc:	ee07 3a90 	vmov	s15, r3
 800a5e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5e4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a71c <CAN0_0_IRQHandler+0x2cc>
 800a5e8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a5ec:	4b43      	ldr	r3, [pc, #268]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a5ee:	edc3 7a02 	vstr	s15, [r3, #8]
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqModuleTemps);
 800a5f2:	4843      	ldr	r0, [pc, #268]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a5f4:	494a      	ldr	r1, [pc, #296]	; (800a720 <CAN0_0_IRQHandler+0x2d0>)
 800a5f6:	f7ff fbf9 	bl	8009dec <CAN_NODE_MO_UpdateData>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a5fa:	4841      	ldr	r0, [pc, #260]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a5fc:	f7ff fbd2 	bl	8009da4 <CAN_NODE_MO_Transmit>
						state = GET_MODULE_TEMPS;
 800a600:	4b3b      	ldr	r3, [pc, #236]	; (800a6f0 <CAN0_0_IRQHandler+0x2a0>)
 800a602:	2204      	movs	r2, #4
 800a604:	701a      	strb	r2, [r3, #0]
						stateModuleTemps = MODULE_TEMPS_REQ_RESPONSE;
 800a606:	4b47      	ldr	r3, [pc, #284]	; (800a724 <CAN0_0_IRQHandler+0x2d4>)
 800a608:	2201      	movs	r2, #1
 800a60a:	701a      	strb	r2, [r3, #0]
					{
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqBattVolt);
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
						stateBattVolt = BATT_VOLT_REQ_RESPONSE;
					}
				break;
 800a60c:	e011      	b.n	800a632 <CAN0_0_IRQHandler+0x1e2>
						state = GET_MODULE_TEMPS;
						stateModuleTemps = MODULE_TEMPS_REQ_RESPONSE;
					}
					else
					{
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqBattVolt);
 800a60e:	483c      	ldr	r0, [pc, #240]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a610:	493f      	ldr	r1, [pc, #252]	; (800a710 <CAN0_0_IRQHandler+0x2c0>)
 800a612:	f7ff fbeb 	bl	8009dec <CAN_NODE_MO_UpdateData>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a616:	483a      	ldr	r0, [pc, #232]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a618:	f7ff fbc4 	bl	8009da4 <CAN_NODE_MO_Transmit>
						stateBattVolt = BATT_VOLT_REQ_RESPONSE;
 800a61c:	4b3d      	ldr	r3, [pc, #244]	; (800a714 <CAN0_0_IRQHandler+0x2c4>)
 800a61e:	2201      	movs	r2, #1
 800a620:	701a      	strb	r2, [r3, #0]
					}
				break;
 800a622:	e006      	b.n	800a632 <CAN0_0_IRQHandler+0x1e2>

				default:
				case BATT_VOLT_IDLE:
					onProcess=0;
 800a624:	4b38      	ldr	r3, [pc, #224]	; (800a708 <CAN0_0_IRQHandler+0x2b8>)
 800a626:	2200      	movs	r2, #0
 800a628:	701a      	strb	r2, [r3, #0]
					state=IDLE;
 800a62a:	4b31      	ldr	r3, [pc, #196]	; (800a6f0 <CAN0_0_IRQHandler+0x2a0>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
				break;
 800a630:	bf00      	nop
			}
		break;
 800a632:	e1c2      	b.n	800a9ba <CAN0_0_IRQHandler+0x56a>

		case GET_MODULE_TEMPS:

			switch(stateModuleTemps)
 800a634:	4b3b      	ldr	r3, [pc, #236]	; (800a724 <CAN0_0_IRQHandler+0x2d4>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d002      	beq.n	800a642 <CAN0_0_IRQHandler+0x1f2>
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d027      	beq.n	800a690 <CAN0_0_IRQHandler+0x240>
 800a640:	e108      	b.n	800a854 <CAN0_0_IRQHandler+0x404>
			{
				case MODULE_TEMPS_REQ_RESPONSE:
					if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[2] == 0x62)
 800a642:	4b2c      	ldr	r3, [pc, #176]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	7c9b      	ldrb	r3, [r3, #18]
 800a648:	2b62      	cmp	r3, #98	; 0x62
 800a64a:	d119      	bne.n	800a680 <CAN0_0_IRQHandler+0x230>
					{
						smartdata.tempRawBytes[0]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[6];
 800a64c:	4b29      	ldr	r3, [pc, #164]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	7d9a      	ldrb	r2, [r3, #22]
 800a652:	4b2a      	ldr	r3, [pc, #168]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a654:	761a      	strb	r2, [r3, #24]
						smartdata.tempRawBytes[1]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[5];
 800a656:	4b27      	ldr	r3, [pc, #156]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	7d5a      	ldrb	r2, [r3, #21]
 800a65c:	4b27      	ldr	r3, [pc, #156]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a65e:	765a      	strb	r2, [r3, #25]
						smartdata.tempRawBytes[3]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[7];
 800a660:	4b24      	ldr	r3, [pc, #144]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	7dda      	ldrb	r2, [r3, #23]
 800a666:	4b25      	ldr	r3, [pc, #148]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a668:	76da      	strb	r2, [r3, #27]
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,flowControl);
 800a66a:	4825      	ldr	r0, [pc, #148]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a66c:	492a      	ldr	r1, [pc, #168]	; (800a718 <CAN0_0_IRQHandler+0x2c8>)
 800a66e:	f7ff fbbd 	bl	8009dec <CAN_NODE_MO_UpdateData>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a672:	4823      	ldr	r0, [pc, #140]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a674:	f7ff fb96 	bl	8009da4 <CAN_NODE_MO_Transmit>
						stateModuleTemps = MODULE_TEMPS_FLOW_RESPONSE;
 800a678:	4b2a      	ldr	r3, [pc, #168]	; (800a724 <CAN0_0_IRQHandler+0x2d4>)
 800a67a:	2202      	movs	r2, #2
 800a67c:	701a      	strb	r2, [r3, #0]
					else
					{
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqModuleTemps);
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
					}
				break;
 800a67e:	e0f0      	b.n	800a862 <CAN0_0_IRQHandler+0x412>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
						stateModuleTemps = MODULE_TEMPS_FLOW_RESPONSE;
					}
					else
					{
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqModuleTemps);
 800a680:	481f      	ldr	r0, [pc, #124]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a682:	4927      	ldr	r1, [pc, #156]	; (800a720 <CAN0_0_IRQHandler+0x2d0>)
 800a684:	f7ff fbb2 	bl	8009dec <CAN_NODE_MO_UpdateData>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a688:	481d      	ldr	r0, [pc, #116]	; (800a700 <CAN0_0_IRQHandler+0x2b0>)
 800a68a:	f7ff fb8b 	bl	8009da4 <CAN_NODE_MO_Transmit>
					}
				break;
 800a68e:	e0e8      	b.n	800a862 <CAN0_0_IRQHandler+0x412>

				case MODULE_TEMPS_FLOW_RESPONSE:

					if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] == 0x21)
 800a690:	4b18      	ldr	r3, [pc, #96]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	7c1b      	ldrb	r3, [r3, #16]
 800a696:	2b21      	cmp	r3, #33	; 0x21
 800a698:	d146      	bne.n	800a728 <CAN0_0_IRQHandler+0x2d8>
					{
						smartdata.tempRawBytes[2]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[1];
 800a69a:	4b16      	ldr	r3, [pc, #88]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	7c5a      	ldrb	r2, [r3, #17]
 800a6a0:	4b16      	ldr	r3, [pc, #88]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a6a2:	769a      	strb	r2, [r3, #26]
						smartdata.tempRawBytes[4]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[3];
 800a6a4:	4b13      	ldr	r3, [pc, #76]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	7cda      	ldrb	r2, [r3, #19]
 800a6aa:	4b14      	ldr	r3, [pc, #80]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a6ac:	771a      	strb	r2, [r3, #28]
						smartdata.tempRawBytes[5]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[2];
 800a6ae:	4b11      	ldr	r3, [pc, #68]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	7c9a      	ldrb	r2, [r3, #18]
 800a6b4:	4b11      	ldr	r3, [pc, #68]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a6b6:	775a      	strb	r2, [r3, #29]
						smartdata.tempRawBytes[6]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[5];
 800a6b8:	4b0e      	ldr	r3, [pc, #56]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	7d5a      	ldrb	r2, [r3, #21]
 800a6be:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a6c0:	779a      	strb	r2, [r3, #30]
						smartdata.tempRawBytes[7]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[4];
 800a6c2:	4b0c      	ldr	r3, [pc, #48]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	7d1a      	ldrb	r2, [r3, #20]
 800a6c8:	4b0c      	ldr	r3, [pc, #48]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a6ca:	77da      	strb	r2, [r3, #31]
						smartdata.tempRawBytes[8]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[7];
 800a6cc:	4b09      	ldr	r3, [pc, #36]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	7dda      	ldrb	r2, [r3, #23]
 800a6d2:	4b0a      	ldr	r3, [pc, #40]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a6d4:	f883 2020 	strb.w	r2, [r3, #32]
						smartdata.tempRawBytes[9]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[6];
 800a6d8:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <CAN0_0_IRQHandler+0x2a4>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	7d9a      	ldrb	r2, [r3, #22]
 800a6de:	4b07      	ldr	r3, [pc, #28]	; (800a6fc <CAN0_0_IRQHandler+0x2ac>)
 800a6e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800a6e4:	e0b5      	b.n	800a852 <CAN0_0_IRQHandler+0x402>
 800a6e6:	bf00      	nop
 800a6e8:	0801021c 	.word	0x0801021c
 800a6ec:	2000049f 	.word	0x2000049f
 800a6f0:	20000497 	.word	0x20000497
 800a6f4:	08010204 	.word	0x08010204
 800a6f8:	38e38e39 	.word	0x38e38e39
 800a6fc:	20000814 	.word	0x20000814
 800a700:	080101f8 	.word	0x080101f8
 800a704:	20000170 	.word	0x20000170
 800a708:	2000049c 	.word	0x2000049c
 800a70c:	42000000 	.word	0x42000000
 800a710:	20000178 	.word	0x20000178
 800a714:	20000498 	.word	0x20000498
 800a718:	20000168 	.word	0x20000168
 800a71c:	42800000 	.word	0x42800000
 800a720:	20000180 	.word	0x20000180
 800a724:	20000499 	.word	0x20000499
					}
					else if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] == 0x22)
 800a728:	4ba5      	ldr	r3, [pc, #660]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	7c1b      	ldrb	r3, [r3, #16]
 800a72e:	2b22      	cmp	r3, #34	; 0x22
 800a730:	d12a      	bne.n	800a788 <CAN0_0_IRQHandler+0x338>
					{
						smartdata.tempRawBytes[10]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[2];
 800a732:	4ba3      	ldr	r3, [pc, #652]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	7c9a      	ldrb	r2, [r3, #18]
 800a738:	4ba2      	ldr	r3, [pc, #648]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a73a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
						smartdata.tempRawBytes[11]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[1];
 800a73e:	4ba0      	ldr	r3, [pc, #640]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	7c5a      	ldrb	r2, [r3, #17]
 800a744:	4b9f      	ldr	r3, [pc, #636]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a746:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
						smartdata.tempRawBytes[12]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[4];
 800a74a:	4b9d      	ldr	r3, [pc, #628]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	7d1a      	ldrb	r2, [r3, #20]
 800a750:	4b9c      	ldr	r3, [pc, #624]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						smartdata.tempRawBytes[13]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[3];
 800a756:	4b9a      	ldr	r3, [pc, #616]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	7cda      	ldrb	r2, [r3, #19]
 800a75c:	4b99      	ldr	r3, [pc, #612]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a75e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						smartdata.tempRawBytes[14]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[6];
 800a762:	4b97      	ldr	r3, [pc, #604]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	7d9a      	ldrb	r2, [r3, #22]
 800a768:	4b96      	ldr	r3, [pc, #600]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a76a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
						smartdata.tempRawBytes[15]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[5];
 800a76e:	4b94      	ldr	r3, [pc, #592]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	7d5a      	ldrb	r2, [r3, #21]
 800a774:	4b93      	ldr	r3, [pc, #588]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a776:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
						smartdata.tempRawBytes[17]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[7];
 800a77a:	4b91      	ldr	r3, [pc, #580]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	7dda      	ldrb	r2, [r3, #23]
 800a780:	4b90      	ldr	r3, [pc, #576]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a782:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800a786:	e064      	b.n	800a852 <CAN0_0_IRQHandler+0x402>
					}
					else if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] == 0x23)
 800a788:	4b8d      	ldr	r3, [pc, #564]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	7c1b      	ldrb	r3, [r3, #16]
 800a78e:	2b23      	cmp	r3, #35	; 0x23
 800a790:	d106      	bne.n	800a7a0 <CAN0_0_IRQHandler+0x350>
					{
						smartdata.tempRawBytes[16]=CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[1];
 800a792:	4b8b      	ldr	r3, [pc, #556]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	7c5a      	ldrb	r2, [r3, #17]
 800a798:	4b8a      	ldr	r3, [pc, #552]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a79a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a79e:	e058      	b.n	800a852 <CAN0_0_IRQHandler+0x402>
					}
					else if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] > 0x23 && CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] < 0x28)
 800a7a0:	4b87      	ldr	r3, [pc, #540]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	7c1b      	ldrb	r3, [r3, #16]
 800a7a6:	2b23      	cmp	r3, #35	; 0x23
 800a7a8:	d905      	bls.n	800a7b6 <CAN0_0_IRQHandler+0x366>
 800a7aa:	4b85      	ldr	r3, [pc, #532]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	7c1b      	ldrb	r3, [r3, #16]
 800a7b0:	2b27      	cmp	r3, #39	; 0x27
 800a7b2:	d800      	bhi.n	800a7b6 <CAN0_0_IRQHandler+0x366>
 800a7b4:	e04d      	b.n	800a852 <CAN0_0_IRQHandler+0x402>
					{
						// ignore these packages.
					}
					else if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] == 0x28)
 800a7b6:	4b82      	ldr	r3, [pc, #520]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	7c1b      	ldrb	r3, [r3, #16]
 800a7bc:	2b28      	cmp	r3, #40	; 0x28
 800a7be:	d107      	bne.n	800a7d0 <CAN0_0_IRQHandler+0x380>
					{
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,flowControl);
 800a7c0:	4881      	ldr	r0, [pc, #516]	; (800a9c8 <CAN0_0_IRQHandler+0x578>)
 800a7c2:	4982      	ldr	r1, [pc, #520]	; (800a9cc <CAN0_0_IRQHandler+0x57c>)
 800a7c4:	f7ff fb12 	bl	8009dec <CAN_NODE_MO_UpdateData>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a7c8:	487f      	ldr	r0, [pc, #508]	; (800a9c8 <CAN0_0_IRQHandler+0x578>)
 800a7ca:	f7ff faeb 	bl	8009da4 <CAN_NODE_MO_Transmit>
 800a7ce:	e040      	b.n	800a852 <CAN0_0_IRQHandler+0x402>
					}
					else if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] == 0x29)
 800a7d0:	4b7b      	ldr	r3, [pc, #492]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	7c1b      	ldrb	r3, [r3, #16]
 800a7d6:	2b29      	cmp	r3, #41	; 0x29
 800a7d8:	d13b      	bne.n	800a852 <CAN0_0_IRQHandler+0x402>
					{
						uint8_t erhan = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	71fb      	strb	r3, [r7, #7]
						for(erhan = 0; erhan < 9; erhan++)
 800a7de:	2300      	movs	r3, #0
 800a7e0:	71fb      	strb	r3, [r7, #7]
 800a7e2:	e01e      	b.n	800a822 <CAN0_0_IRQHandler+0x3d2>
						{
							smartdata.temps[erhan]=(float)(smartdata.tempRawBytes[2*erhan+1]*256 +smartdata.tempRawBytes[2*erhan])/64.0;
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	79fa      	ldrb	r2, [r7, #7]
 800a7e8:	0052      	lsls	r2, r2, #1
 800a7ea:	3201      	adds	r2, #1
 800a7ec:	4975      	ldr	r1, [pc, #468]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a7ee:	440a      	add	r2, r1
 800a7f0:	7e12      	ldrb	r2, [r2, #24]
 800a7f2:	0212      	lsls	r2, r2, #8
 800a7f4:	79f9      	ldrb	r1, [r7, #7]
 800a7f6:	0049      	lsls	r1, r1, #1
 800a7f8:	4872      	ldr	r0, [pc, #456]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a7fa:	4401      	add	r1, r0
 800a7fc:	7e09      	ldrb	r1, [r1, #24]
 800a7fe:	440a      	add	r2, r1
 800a800:	ee07 2a90 	vmov	s15, r2
 800a804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a808:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800a9d0 <CAN0_0_IRQHandler+0x580>
 800a80c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a810:	4a6c      	ldr	r2, [pc, #432]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a812:	330a      	adds	r3, #10
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	edc3 7a01 	vstr	s15, [r3, #4]
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
					}
					else if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] == 0x29)
					{
						uint8_t erhan = 0;
						for(erhan = 0; erhan < 9; erhan++)
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	3301      	adds	r3, #1
 800a820:	71fb      	strb	r3, [r7, #7]
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	2b08      	cmp	r3, #8
 800a826:	d9dd      	bls.n	800a7e4 <CAN0_0_IRQHandler+0x394>
						{
							smartdata.temps[erhan]=(float)(smartdata.tempRawBytes[2*erhan+1]*256 +smartdata.tempRawBytes[2*erhan])/64.0;
						}


						sampleCounter++;
 800a828:	4b6a      	ldr	r3, [pc, #424]	; (800a9d4 <CAN0_0_IRQHandler+0x584>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3301      	adds	r3, #1
 800a82e:	4a69      	ldr	r2, [pc, #420]	; (800a9d4 <CAN0_0_IRQHandler+0x584>)
 800a830:	6013      	str	r3, [r2, #0]
							stateCellVoltages = CELL_VOLTAGES_REQ_RESPONSE;
						}
						else
						{
						*/
							XMC_GPIO_ToggleOutput(LED2);
 800a832:	4869      	ldr	r0, [pc, #420]	; (800a9d8 <CAN0_0_IRQHandler+0x588>)
 800a834:	2100      	movs	r1, #0
 800a836:	f7ff fd4d 	bl	800a2d4 <XMC_GPIO_ToggleOutput>
							dataUpdated = 1;
 800a83a:	4b68      	ldr	r3, [pc, #416]	; (800a9dc <CAN0_0_IRQHandler+0x58c>)
 800a83c:	2201      	movs	r2, #1
 800a83e:	701a      	strb	r2, [r3, #0]
							onProcess = 0;
 800a840:	4b67      	ldr	r3, [pc, #412]	; (800a9e0 <CAN0_0_IRQHandler+0x590>)
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]
							canTimeoutTimerEnable=0;
 800a846:	4b67      	ldr	r3, [pc, #412]	; (800a9e4 <CAN0_0_IRQHandler+0x594>)
 800a848:	2200      	movs	r2, #0
 800a84a:	701a      	strb	r2, [r3, #0]
							state = IDLE;
 800a84c:	4b66      	ldr	r3, [pc, #408]	; (800a9e8 <CAN0_0_IRQHandler+0x598>)
 800a84e:	2200      	movs	r2, #0
 800a850:	701a      	strb	r2, [r3, #0]
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqModuleTemps);
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
						stateModuleTemps = MODULE_TEMPS_REQ_RESPONSE;
						*/
					}
				break;
 800a852:	e006      	b.n	800a862 <CAN0_0_IRQHandler+0x412>

				default:
				case MODULE_TEMPS_IDLE:
					onProcess=0;
 800a854:	4b62      	ldr	r3, [pc, #392]	; (800a9e0 <CAN0_0_IRQHandler+0x590>)
 800a856:	2200      	movs	r2, #0
 800a858:	701a      	strb	r2, [r3, #0]
					state=IDLE;
 800a85a:	4b63      	ldr	r3, [pc, #396]	; (800a9e8 <CAN0_0_IRQHandler+0x598>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	701a      	strb	r2, [r3, #0]
				break;
 800a860:	bf00      	nop
			}
		break;
 800a862:	e0aa      	b.n	800a9ba <CAN0_0_IRQHandler+0x56a>

		case GET_CELL_VOLTAGES:
			switch(stateCellVoltages)
 800a864:	4b61      	ldr	r3, [pc, #388]	; (800a9ec <CAN0_0_IRQHandler+0x59c>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d032      	beq.n	800a8d2 <CAN0_0_IRQHandler+0x482>
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	f000 80a2 	beq.w	800a9b6 <CAN0_0_IRQHandler+0x566>
 800a872:	2b01      	cmp	r3, #1
 800a874:	f040 8098 	bne.w	800a9a8 <CAN0_0_IRQHandler+0x558>
			{
				uint8_t erhan;
				case CELL_VOLTAGES_REQ_RESPONSE:
					if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[2] == 0x62)
 800a878:	4b51      	ldr	r3, [pc, #324]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	7c9b      	ldrb	r3, [r3, #18]
 800a87e:	2b62      	cmp	r3, #98	; 0x62
 800a880:	d11f      	bne.n	800a8c2 <CAN0_0_IRQHandler+0x472>
					{
						smartdata.cellVotlagesBytes[0] = CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[5];
 800a882:	4b4f      	ldr	r3, [pc, #316]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	7d5a      	ldrb	r2, [r3, #21]
 800a888:	4b4e      	ldr	r3, [pc, #312]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a88a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
						smartdata.cellVotlagesBytes[1] = CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[6];
 800a88e:	4b4c      	ldr	r3, [pc, #304]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	7d9a      	ldrb	r2, [r3, #22]
 800a894:	4b4b      	ldr	r3, [pc, #300]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
						smartdata.cellVotlagesBytes[2] = CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[7];
 800a89a:	4b49      	ldr	r3, [pc, #292]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	7dda      	ldrb	r2, [r3, #23]
 800a8a0:	4b48      	ldr	r3, [pc, #288]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a8a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,flowControl);
 800a8a6:	4848      	ldr	r0, [pc, #288]	; (800a9c8 <CAN0_0_IRQHandler+0x578>)
 800a8a8:	4948      	ldr	r1, [pc, #288]	; (800a9cc <CAN0_0_IRQHandler+0x57c>)
 800a8aa:	f7ff fa9f 	bl	8009dec <CAN_NODE_MO_UpdateData>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a8ae:	4846      	ldr	r0, [pc, #280]	; (800a9c8 <CAN0_0_IRQHandler+0x578>)
 800a8b0:	f7ff fa78 	bl	8009da4 <CAN_NODE_MO_Transmit>
						stateCellVoltages = CELL_VOLTAGES_FLOW_CONTROL;
 800a8b4:	4b4d      	ldr	r3, [pc, #308]	; (800a9ec <CAN0_0_IRQHandler+0x59c>)
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	701a      	strb	r2, [r3, #0]
						cellVoltagesFlowCounter = 1;								// Set flow control count to 1.
 800a8ba:	4b4d      	ldr	r3, [pc, #308]	; (800a9f0 <CAN0_0_IRQHandler+0x5a0>)
 800a8bc:	2201      	movs	r2, #1
 800a8be:	701a      	strb	r2, [r3, #0]
					{
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqCellVoltages);
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
					}

				break;
 800a8c0:	e07a      	b.n	800a9b8 <CAN0_0_IRQHandler+0x568>
						stateCellVoltages = CELL_VOLTAGES_FLOW_CONTROL;
						cellVoltagesFlowCounter = 1;								// Set flow control count to 1.
					}
					else
					{
						CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,reqCellVoltages);
 800a8c2:	4841      	ldr	r0, [pc, #260]	; (800a9c8 <CAN0_0_IRQHandler+0x578>)
 800a8c4:	494b      	ldr	r1, [pc, #300]	; (800a9f4 <CAN0_0_IRQHandler+0x5a4>)
 800a8c6:	f7ff fa91 	bl	8009dec <CAN_NODE_MO_UpdateData>
						CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a8ca:	483f      	ldr	r0, [pc, #252]	; (800a9c8 <CAN0_0_IRQHandler+0x578>)
 800a8cc:	f7ff fa6a 	bl	8009da4 <CAN_NODE_MO_Transmit>
					}

				break;
 800a8d0:	e072      	b.n	800a9b8 <CAN0_0_IRQHandler+0x568>

				case CELL_VOLTAGES_FLOW_CONTROL:
					// Read flow control responses and save data bytes according to package indexes.

					erhan = (CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0]-1) & 0x7;
 800a8d2:	4b3b      	ldr	r3, [pc, #236]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	7c1b      	ldrb	r3, [r3, #16]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f003 0307 	and.w	r3, r3, #7
 800a8e0:	717b      	strb	r3, [r7, #5]

					if(cellVoltagesFlowCounter <= CELL_VOLTAGES_DATA_FLOW_COUNT)
 800a8e2:	4b43      	ldr	r3, [pc, #268]	; (800a9f0 <CAN0_0_IRQHandler+0x5a0>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	2b04      	cmp	r3, #4
 800a8e8:	d823      	bhi.n	800a932 <CAN0_0_IRQHandler+0x4e2>
					{
						for(uint8_t erhan2=0; erhan2<7;erhan2++)
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	71bb      	strb	r3, [r7, #6]
 800a8ee:	e01d      	b.n	800a92c <CAN0_0_IRQHandler+0x4dc>
						{
							smartdata.cellVotlagesBytes[(cellVoltagesFlowCounter-1)*56 + 7*erhan + 3 + erhan2] = CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[erhan2+1];
 800a8f0:	4b3f      	ldr	r3, [pc, #252]	; (800a9f0 <CAN0_0_IRQHandler+0x5a0>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	1e5a      	subs	r2, r3, #1
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	1a9b      	subs	r3, r3, r2
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	4619      	mov	r1, r3
 800a900:	797a      	ldrb	r2, [r7, #5]
 800a902:	4613      	mov	r3, r2
 800a904:	00db      	lsls	r3, r3, #3
 800a906:	1a9b      	subs	r3, r3, r2
 800a908:	440b      	add	r3, r1
 800a90a:	1cda      	adds	r2, r3, #3
 800a90c:	79bb      	ldrb	r3, [r7, #6]
 800a90e:	4413      	add	r3, r2
 800a910:	4a2b      	ldr	r2, [pc, #172]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a912:	6811      	ldr	r1, [r2, #0]
 800a914:	79ba      	ldrb	r2, [r7, #6]
 800a916:	3201      	adds	r2, #1
 800a918:	440a      	add	r2, r1
 800a91a:	7c11      	ldrb	r1, [r2, #16]
 800a91c:	4a29      	ldr	r2, [pc, #164]	; (800a9c4 <CAN0_0_IRQHandler+0x574>)
 800a91e:	4413      	add	r3, r2
 800a920:	460a      	mov	r2, r1
 800a922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

					erhan = (CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0]-1) & 0x7;

					if(cellVoltagesFlowCounter <= CELL_VOLTAGES_DATA_FLOW_COUNT)
					{
						for(uint8_t erhan2=0; erhan2<7;erhan2++)
 800a926:	79bb      	ldrb	r3, [r7, #6]
 800a928:	3301      	adds	r3, #1
 800a92a:	71bb      	strb	r3, [r7, #6]
 800a92c:	79bb      	ldrb	r3, [r7, #6]
 800a92e:	2b06      	cmp	r3, #6
 800a930:	d9de      	bls.n	800a8f0 <CAN0_0_IRQHandler+0x4a0>
							smartdata.cellVotlagesBytes[(cellVoltagesFlowCounter-1)*56 + 7*erhan + 3 + erhan2] = CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[erhan2+1];
						}
					}
					//////////////////////////////////////////////////////////////////////////////

					if(cellVoltagesFlowCounter >= CELL_VOLTAGES_FLOW_COUNT)
 800a932:	4b2f      	ldr	r3, [pc, #188]	; (800a9f0 <CAN0_0_IRQHandler+0x5a0>)
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b07      	cmp	r3, #7
 800a938:	d917      	bls.n	800a96a <CAN0_0_IRQHandler+0x51a>
					{
						if(CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] == 0x29)
 800a93a:	4b21      	ldr	r3, [pc, #132]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	7c1b      	ldrb	r3, [r3, #16]
 800a940:	2b29      	cmp	r3, #41	; 0x29
 800a942:	d112      	bne.n	800a96a <CAN0_0_IRQHandler+0x51a>
						{
							XMC_GPIO_ToggleOutput(LED2);
 800a944:	4824      	ldr	r0, [pc, #144]	; (800a9d8 <CAN0_0_IRQHandler+0x588>)
 800a946:	2100      	movs	r1, #0
 800a948:	f7ff fcc4 	bl	800a2d4 <XMC_GPIO_ToggleOutput>
							dataUpdated = 1;
 800a94c:	4b23      	ldr	r3, [pc, #140]	; (800a9dc <CAN0_0_IRQHandler+0x58c>)
 800a94e:	2201      	movs	r2, #1
 800a950:	701a      	strb	r2, [r3, #0]
							onProcess = 0;
 800a952:	4b23      	ldr	r3, [pc, #140]	; (800a9e0 <CAN0_0_IRQHandler+0x590>)
 800a954:	2200      	movs	r2, #0
 800a956:	701a      	strb	r2, [r3, #0]
							canTimeoutTimerEnable=0;
 800a958:	4b22      	ldr	r3, [pc, #136]	; (800a9e4 <CAN0_0_IRQHandler+0x594>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	701a      	strb	r2, [r3, #0]
							cellVoltagesUpdated = 1;
 800a95e:	4b26      	ldr	r3, [pc, #152]	; (800a9f8 <CAN0_0_IRQHandler+0x5a8>)
 800a960:	2201      	movs	r2, #1
 800a962:	701a      	strb	r2, [r3, #0]
							state = IDLE;
 800a964:	4b20      	ldr	r3, [pc, #128]	; (800a9e8 <CAN0_0_IRQHandler+0x598>)
 800a966:	2200      	movs	r2, #0
 800a968:	701a      	strb	r2, [r3, #0]
						}
					}
					// Check if it is the time to sent next flow control package.
					if((CAN_OBDII_LMO_02_Config.mo_ptr->can_data_byte[0] % 0x8) == 0)
 800a96a:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <CAN0_0_IRQHandler+0x570>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	7c1b      	ldrb	r3, [r3, #16]
 800a970:	f003 0307 	and.w	r3, r3, #7
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d115      	bne.n	800a9a6 <CAN0_0_IRQHandler+0x556>
					{
						cellVoltagesFlowCounter++;	// Increase the flow counter variable.
 800a97a:	4b1d      	ldr	r3, [pc, #116]	; (800a9f0 <CAN0_0_IRQHandler+0x5a0>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	3301      	adds	r3, #1
 800a980:	b2da      	uxtb	r2, r3
 800a982:	4b1b      	ldr	r3, [pc, #108]	; (800a9f0 <CAN0_0_IRQHandler+0x5a0>)
 800a984:	701a      	strb	r2, [r3, #0]
						if(cellVoltagesFlowCounter <= CELL_VOLTAGES_FLOW_COUNT)	// Check if all flow control packages didn't send.
 800a986:	4b1a      	ldr	r3, [pc, #104]	; (800a9f0 <CAN0_0_IRQHandler+0x5a0>)
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	d807      	bhi.n	800a99e <CAN0_0_IRQHandler+0x54e>
						{
							// Send next flow control package.
							CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,flowControl);
 800a98e:	480e      	ldr	r0, [pc, #56]	; (800a9c8 <CAN0_0_IRQHandler+0x578>)
 800a990:	490e      	ldr	r1, [pc, #56]	; (800a9cc <CAN0_0_IRQHandler+0x57c>)
 800a992:	f7ff fa2b 	bl	8009dec <CAN_NODE_MO_UpdateData>
							CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800a996:	480c      	ldr	r0, [pc, #48]	; (800a9c8 <CAN0_0_IRQHandler+0x578>)
 800a998:	f7ff fa04 	bl	8009da4 <CAN_NODE_MO_Transmit>
 800a99c:	e003      	b.n	800a9a6 <CAN0_0_IRQHandler+0x556>
						}
						else	// If all flow control packages sent.
						{
							///< Think about what to do here!!!
							state = IDLE;
 800a99e:	4b12      	ldr	r3, [pc, #72]	; (800a9e8 <CAN0_0_IRQHandler+0x598>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]
						}
					}
				break;
 800a9a4:	e008      	b.n	800a9b8 <CAN0_0_IRQHandler+0x568>
 800a9a6:	e007      	b.n	800a9b8 <CAN0_0_IRQHandler+0x568>

				break;

				default:
				case CELL_VOLTAGES_IDLE:
					onProcess=0;
 800a9a8:	4b0d      	ldr	r3, [pc, #52]	; (800a9e0 <CAN0_0_IRQHandler+0x590>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	701a      	strb	r2, [r3, #0]
					state=IDLE;
 800a9ae:	4b0e      	ldr	r3, [pc, #56]	; (800a9e8 <CAN0_0_IRQHandler+0x598>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	701a      	strb	r2, [r3, #0]
				break;
 800a9b4:	e000      	b.n	800a9b8 <CAN0_0_IRQHandler+0x568>
					}
				break;

				case CELL_VOLTAGES_LAST_FLOW_PACKAGE:

				break;
 800a9b6:	bf00      	nop
				case CELL_VOLTAGES_IDLE:
					onProcess=0;
					state=IDLE;
				break;
			}
		break;
 800a9b8:	bf00      	nop
	}
}
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	08010204 	.word	0x08010204
 800a9c4:	20000814 	.word	0x20000814
 800a9c8:	080101f8 	.word	0x080101f8
 800a9cc:	20000168 	.word	0x20000168
 800a9d0:	42800000 	.word	0x42800000
 800a9d4:	20000490 	.word	0x20000490
 800a9d8:	48028100 	.word	0x48028100
 800a9dc:	2000048c 	.word	0x2000048c
 800a9e0:	2000049c 	.word	0x2000049c
 800a9e4:	2000049e 	.word	0x2000049e
 800a9e8:	20000497 	.word	0x20000497
 800a9ec:	2000049a 	.word	0x2000049a
 800a9f0:	2000049b 	.word	0x2000049b
 800a9f4:	20000188 	.word	0x20000188
 800a9f8:	2000048d 	.word	0x2000048d

0800a9fc <writeToEndOfFile>:

BYTE writeToEndOfFile(FATFS* fs, FIL* fp, const TCHAR* path, const void *buff, UINT btw)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
 800aa08:	603b      	str	r3, [r7, #0]
	UINT bw;
	if(f_mount(fs,"",0) == FR_OK)
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	4918      	ldr	r1, [pc, #96]	; (800aa70 <writeToEndOfFile+0x74>)
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f7fe f820 	bl	8008a54 <f_mount>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d122      	bne.n	800aa60 <writeToEndOfFile+0x64>
	{
		if (f_open(fp, path, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK)
 800aa1a:	68b8      	ldr	r0, [r7, #8]
 800aa1c:	6879      	ldr	r1, [r7, #4]
 800aa1e:	2212      	movs	r2, #18
 800aa20:	f7fe f85c 	bl	8008adc <f_open>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d11a      	bne.n	800aa60 <writeToEndOfFile+0x64>
		{
			if(f_lseek(fp, f_size(fp)) == FR_OK)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	68b8      	ldr	r0, [r7, #8]
 800aa30:	4619      	mov	r1, r3
 800aa32:	f7fe fc2d 	bl	8009290 <f_lseek>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d111      	bne.n	800aa60 <writeToEndOfFile+0x64>
			{
				if(f_write(fp, buff, btw, &bw) == FR_OK)
 800aa3c:	f107 0314 	add.w	r3, r7, #20
 800aa40:	68b8      	ldr	r0, [r7, #8]
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6a3a      	ldr	r2, [r7, #32]
 800aa46:	f7fe fa07 	bl	8008e58 <f_write>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d107      	bne.n	800aa60 <writeToEndOfFile+0x64>
				{
					if(f_close(fp) == FR_OK)
 800aa50:	68b8      	ldr	r0, [r7, #8]
 800aa52:	f7fe fbf3 	bl	800923c <f_close>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <writeToEndOfFile+0x64>
					{
						return 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	e003      	b.n	800aa68 <writeToEndOfFile+0x6c>
					}
				}
			}
		}
	}
	f_close(fp);
 800aa60:	68b8      	ldr	r0, [r7, #8]
 800aa62:	f7fe fbeb 	bl	800923c <f_close>
	return 1;
 800aa66:	2301      	movs	r3, #1
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3718      	adds	r7, #24
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	080102c4 	.word	0x080102c4

0800aa74 <UpdateLCD>:


void UpdateLCD(void)
{
 800aa74:	b590      	push	{r4, r7, lr}
 800aa76:	ed2d 8b02 	vpush	{d8}
 800aa7a:	b08d      	sub	sp, #52	; 0x34
 800aa7c:	af04      	add	r7, sp, #16
	char temp[30];
	RTC_GetTime(&current_time);
 800aa7e:	4866      	ldr	r0, [pc, #408]	; (800ac18 <UpdateLCD+0x1a4>)
 800aa80:	f7fb fad8 	bl	8006034 <RTC_GetTime>

	LCDWriteCommand(0x0E); // clear the screen
 800aa84:	200e      	movs	r0, #14
 800aa86:	f7ff fb39 	bl	800a0fc <LCDWriteCommand>
	sprintf(temp, "%03dV %03dA %03dkm/h", (int)smartdata.battVolt,(int)smartdata.battAmp,smartdata.velocitiy);
 800aa8a:	4b64      	ldr	r3, [pc, #400]	; (800ac1c <UpdateLCD+0x1a8>)
 800aa8c:	edd3 7a02 	vldr	s15, [r3, #8]
 800aa90:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800aa94:	4b61      	ldr	r3, [pc, #388]	; (800ac1c <UpdateLCD+0x1a8>)
 800aa96:	edd3 7a01 	vldr	s15, [r3, #4]
 800aa9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa9e:	4b5f      	ldr	r3, [pc, #380]	; (800ac1c <UpdateLCD+0x1a8>)
 800aaa0:	881b      	ldrh	r3, [r3, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	463b      	mov	r3, r7
 800aaa6:	9200      	str	r2, [sp, #0]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	495d      	ldr	r1, [pc, #372]	; (800ac20 <UpdateLCD+0x1ac>)
 800aaac:	ee17 2a10 	vmov	r2, s14
 800aab0:	ee17 3a90 	vmov	r3, s15
 800aab4:	f002 f8ec 	bl	800cc90 <siprintf>
	LCDCursorXY(0, 0);
 800aab8:	2000      	movs	r0, #0
 800aaba:	2100      	movs	r1, #0
 800aabc:	f7ff fb90 	bl	800a1e0 <LCDCursorXY>
	LCDWriteString(temp);
 800aac0:	463b      	mov	r3, r7
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff fbc8 	bl	800a258 <LCDWriteString>

	sprintf(temp,"%04d %04d %04d %02.1f",(int)(smartdata.temps[0]*10),(int)(smartdata.temps[1]*10),(int)(smartdata.temps[2]*10),smartdata.battPower);
 800aac8:	4b54      	ldr	r3, [pc, #336]	; (800ac1c <UpdateLCD+0x1a8>)
 800aaca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800aace:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800aad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aad6:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 800aada:	4b50      	ldr	r3, [pc, #320]	; (800ac1c <UpdateLCD+0x1a8>)
 800aadc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800aae0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800aae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aae8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 800aaec:	4b4b      	ldr	r3, [pc, #300]	; (800ac1c <UpdateLCD+0x1a8>)
 800aaee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800aaf2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800aaf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aafa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aafe:	ee17 4a90 	vmov	r4, s15
 800ab02:	4b46      	ldr	r3, [pc, #280]	; (800ac1c <UpdateLCD+0x1a8>)
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 ff54 	bl	800b9b4 <__aeabi_f2d>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4639      	mov	r1, r7
 800ab12:	9400      	str	r4, [sp, #0]
 800ab14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab18:	4608      	mov	r0, r1
 800ab1a:	4942      	ldr	r1, [pc, #264]	; (800ac24 <UpdateLCD+0x1b0>)
 800ab1c:	ee18 2a90 	vmov	r2, s17
 800ab20:	ee18 3a10 	vmov	r3, s16
 800ab24:	f002 f8b4 	bl	800cc90 <siprintf>
	LCDCursorXY(1, 0);
 800ab28:	2001      	movs	r0, #1
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	f7ff fb58 	bl	800a1e0 <LCDCursorXY>
	LCDWriteString(temp);
 800ab30:	463b      	mov	r3, r7
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff fb90 	bl	800a258 <LCDWriteString>

	sprintf(temp,"%04d %04d %04d %02.1f",(int)(smartdata.temps[3]*10),(int)(smartdata.temps[4]*10),(int)(smartdata.temps[5]*10),smartdata.battEnergy);
 800ab38:	4b38      	ldr	r3, [pc, #224]	; (800ac1c <UpdateLCD+0x1a8>)
 800ab3a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ab3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800ab42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab46:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 800ab4a:	4b34      	ldr	r3, [pc, #208]	; (800ac1c <UpdateLCD+0x1a8>)
 800ab4c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ab50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800ab54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab58:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 800ab5c:	4b2f      	ldr	r3, [pc, #188]	; (800ac1c <UpdateLCD+0x1a8>)
 800ab5e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800ab62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800ab66:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab6e:	ee17 4a90 	vmov	r4, s15
 800ab72:	4b2a      	ldr	r3, [pc, #168]	; (800ac1c <UpdateLCD+0x1a8>)
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 ff1c 	bl	800b9b4 <__aeabi_f2d>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4639      	mov	r1, r7
 800ab82:	9400      	str	r4, [sp, #0]
 800ab84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab88:	4608      	mov	r0, r1
 800ab8a:	4926      	ldr	r1, [pc, #152]	; (800ac24 <UpdateLCD+0x1b0>)
 800ab8c:	ee18 2a90 	vmov	r2, s17
 800ab90:	ee18 3a10 	vmov	r3, s16
 800ab94:	f002 f87c 	bl	800cc90 <siprintf>
	LCDCursorXY(2, 0);
 800ab98:	2002      	movs	r0, #2
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	f7ff fb20 	bl	800a1e0 <LCDCursorXY>
	LCDWriteString(temp);
 800aba0:	463b      	mov	r3, r7
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff fb58 	bl	800a258 <LCDWriteString>

	sprintf(temp,"%04d %04d %04d %05d",(int)(smartdata.temps[6]*10),(int)(smartdata.temps[7]*10),(int)(smartdata.temps[8]*10),(int)sampleCounter);
 800aba8:	4b1c      	ldr	r3, [pc, #112]	; (800ac1c <UpdateLCD+0x1a8>)
 800abaa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800abae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800abb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abb6:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800abba:	4b18      	ldr	r3, [pc, #96]	; (800ac1c <UpdateLCD+0x1a8>)
 800abbc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800abc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800abc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abc8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800abcc:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <UpdateLCD+0x1a8>)
 800abce:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800abd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x24
 800abd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abde:	ee17 1a90 	vmov	r1, s15
 800abe2:	4b11      	ldr	r3, [pc, #68]	; (800ac28 <UpdateLCD+0x1b4>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	463b      	mov	r3, r7
 800abea:	9100      	str	r1, [sp, #0]
 800abec:	9201      	str	r2, [sp, #4]
 800abee:	4618      	mov	r0, r3
 800abf0:	490e      	ldr	r1, [pc, #56]	; (800ac2c <UpdateLCD+0x1b8>)
 800abf2:	ee16 2a10 	vmov	r2, s12
 800abf6:	ee16 3a90 	vmov	r3, s13
 800abfa:	f002 f849 	bl	800cc90 <siprintf>
	LCDCursorXY(3, 0);
 800abfe:	2003      	movs	r0, #3
 800ac00:	2100      	movs	r1, #0
 800ac02:	f7ff faed 	bl	800a1e0 <LCDCursorXY>
	LCDWriteString(temp);
 800ac06:	463b      	mov	r3, r7
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7ff fb25 	bl	800a258 <LCDWriteString>
	LCDWriteString(temp);
	LCDCursorXY(3, 0);
	sprintf(temp, "%03dV %03dA %03dkM", (int)smartdata.battVolt,(int)smartdata.battAmp,smartdata.velocitiy);
	LCDWriteString(temp);
	*/
}
 800ac0e:	3724      	adds	r7, #36	; 0x24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	ecbd 8b02 	vpop	{d8}
 800ac16:	bd90      	pop	{r4, r7, pc}
 800ac18:	20000804 	.word	0x20000804
 800ac1c:	20000814 	.word	0x20000814
 800ac20:	080102c8 	.word	0x080102c8
 800ac24:	080102e0 	.word	0x080102e0
 800ac28:	20000490 	.word	0x20000490
 800ac2c:	080102f8 	.word	0x080102f8

0800ac30 <UpdateSDCard>:

void UpdateSDCard(void)
{
 800ac30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac34:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800ac38:	af06      	add	r7, sp, #24
	char battFileNmaeString[64];
	//char cellVotlageFileNameString[64];
	char temp[16];
	char dataTimeString[128];
	uint8_t erhan;
	RTC_GetTime(&current_time);
 800ac3a:	487b      	ldr	r0, [pc, #492]	; (800ae28 <UpdateSDCard+0x1f8>)
 800ac3c:	f7fb f9fa 	bl	8006034 <RTC_GetTime>
	sprintf(dateString,"%04d %02d %02d",current_time.year,current_time.month,current_time.days);
 800ac40:	4b79      	ldr	r3, [pc, #484]	; (800ae28 <UpdateSDCard+0x1f8>)
 800ac42:	88db      	ldrh	r3, [r3, #6]
 800ac44:	461d      	mov	r5, r3
 800ac46:	4b78      	ldr	r3, [pc, #480]	; (800ae28 <UpdateSDCard+0x1f8>)
 800ac48:	795b      	ldrb	r3, [r3, #5]
 800ac4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	461c      	mov	r4, r3
 800ac52:	4b75      	ldr	r3, [pc, #468]	; (800ae28 <UpdateSDCard+0x1f8>)
 800ac54:	78db      	ldrb	r3, [r3, #3]
 800ac56:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800ac62:	9200      	str	r2, [sp, #0]
 800ac64:	4618      	mov	r0, r3
 800ac66:	4971      	ldr	r1, [pc, #452]	; (800ae2c <UpdateSDCard+0x1fc>)
 800ac68:	462a      	mov	r2, r5
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	f002 f810 	bl	800cc90 <siprintf>
	sprintf(timeString,"%02d %02d %02d:%05d:",current_time.hours,current_time.minutes,current_time.seconds,sampleCounter);
 800ac70:	4b6d      	ldr	r3, [pc, #436]	; (800ae28 <UpdateSDCard+0x1f8>)
 800ac72:	789b      	ldrb	r3, [r3, #2]
 800ac74:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	461d      	mov	r5, r3
 800ac7c:	4b6a      	ldr	r3, [pc, #424]	; (800ae28 <UpdateSDCard+0x1f8>)
 800ac7e:	785b      	ldrb	r3, [r3, #1]
 800ac80:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	461c      	mov	r4, r3
 800ac88:	4b67      	ldr	r3, [pc, #412]	; (800ae28 <UpdateSDCard+0x1f8>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	4619      	mov	r1, r3
 800ac94:	4b66      	ldr	r3, [pc, #408]	; (800ae30 <UpdateSDCard+0x200>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 800ac9c:	9100      	str	r1, [sp, #0]
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	4610      	mov	r0, r2
 800aca2:	4964      	ldr	r1, [pc, #400]	; (800ae34 <UpdateSDCard+0x204>)
 800aca4:	462a      	mov	r2, r5
 800aca6:	4623      	mov	r3, r4
 800aca8:	f001 fff2 	bl	800cc90 <siprintf>

	sprintf(battFileNmaeString,"%s_data_erhan.txt",dateString);
 800acac:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800acb0:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800acb4:	4610      	mov	r0, r2
 800acb6:	4960      	ldr	r1, [pc, #384]	; (800ae38 <UpdateSDCard+0x208>)
 800acb8:	461a      	mov	r2, r3
 800acba:	f001 ffe9 	bl	800cc90 <siprintf>
	sprintf(dataString,"%03.2f:%03.2f:%03d:%03.2f\n",smartdata.battVolt,smartdata.battAmp,smartdata.velocitiy,smartdata.bms);
 800acbe:	4b5f      	ldr	r3, [pc, #380]	; (800ae3c <UpdateSDCard+0x20c>)
 800acc0:	689b      	ldr	r3, [r3, #8]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 fe76 	bl	800b9b4 <__aeabi_f2d>
 800acc8:	4680      	mov	r8, r0
 800acca:	4689      	mov	r9, r1
 800accc:	4b5b      	ldr	r3, [pc, #364]	; (800ae3c <UpdateSDCard+0x20c>)
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 fe6f 	bl	800b9b4 <__aeabi_f2d>
 800acd6:	4604      	mov	r4, r0
 800acd8:	460d      	mov	r5, r1
 800acda:	4b58      	ldr	r3, [pc, #352]	; (800ae3c <UpdateSDCard+0x20c>)
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	461e      	mov	r6, r3
 800ace0:	4b56      	ldr	r3, [pc, #344]	; (800ae3c <UpdateSDCard+0x20c>)
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 fe65 	bl	800b9b4 <__aeabi_f2d>
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800acf2:	e9cd 4500 	strd	r4, r5, [sp]
 800acf6:	9602      	str	r6, [sp, #8]
 800acf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acfc:	4608      	mov	r0, r1
 800acfe:	4950      	ldr	r1, [pc, #320]	; (800ae40 <UpdateSDCard+0x210>)
 800ad00:	4642      	mov	r2, r8
 800ad02:	464b      	mov	r3, r9
 800ad04:	f001 ffc4 	bl	800cc90 <siprintf>
	strcpy(dataTimeString,timeString);
 800ad08:	1d3a      	adds	r2, r7, #4
 800ad0a:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800ad0e:	4610      	mov	r0, r2
 800ad10:	4619      	mov	r1, r3
 800ad12:	f001 fff0 	bl	800ccf6 <strcpy>
	strcat(dataTimeString,dataString);
 800ad16:	1d3a      	adds	r2, r7, #4
 800ad18:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4619      	mov	r1, r3
 800ad20:	f001 ffda 	bl	800ccd8 <strcat>
	writeToEndOfFile(&FatFs, &Fil,battFileNmaeString, dataTimeString,strlen(dataTimeString));
 800ad24:	1d3b      	adds	r3, r7, #4
 800ad26:	4618      	mov	r0, r3
 800ad28:	f001 ffed 	bl	800cd06 <strlen>
 800ad2c:	4601      	mov	r1, r0
 800ad2e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800ad32:	1d3b      	adds	r3, r7, #4
 800ad34:	9100      	str	r1, [sp, #0]
 800ad36:	4843      	ldr	r0, [pc, #268]	; (800ae44 <UpdateSDCard+0x214>)
 800ad38:	4943      	ldr	r1, [pc, #268]	; (800ae48 <UpdateSDCard+0x218>)
 800ad3a:	f7ff fe5f 	bl	800a9fc <writeToEndOfFile>
		strcat(cellVoltagesString,"\n");
		writeToEndOfFile(&FatFs, &Fil,cellVotlageFileNameString, cellVoltagesString,strlen(cellVoltagesString));
		cellVoltagesUpdated = 0;
	}
*/
	sprintf(tempFileNmaeString,"%s_temp_erhan.txt",dateString);
 800ad3e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800ad42:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800ad46:	4610      	mov	r0, r2
 800ad48:	4940      	ldr	r1, [pc, #256]	; (800ae4c <UpdateSDCard+0x21c>)
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f001 ffa0 	bl	800cc90 <siprintf>
	strcpy(tempString,timeString);
 800ad50:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800ad54:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800ad58:	4610      	mov	r0, r2
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	f001 ffcb 	bl	800ccf6 <strcpy>
	for (erhan = 0; erhan < 8; erhan++)
 800ad60:	2300      	movs	r3, #0
 800ad62:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800ad66:	e020      	b.n	800adaa <UpdateSDCard+0x17a>
	{
		sprintf(temp,"%03.2f:",smartdata.temps[erhan]);
 800ad68:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800ad6c:	4a33      	ldr	r2, [pc, #204]	; (800ae3c <UpdateSDCard+0x20c>)
 800ad6e:	330a      	adds	r3, #10
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 fe1c 	bl	800b9b4 <__aeabi_f2d>
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	460d      	mov	r5, r1
 800ad80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ad84:	4618      	mov	r0, r3
 800ad86:	4932      	ldr	r1, [pc, #200]	; (800ae50 <UpdateSDCard+0x220>)
 800ad88:	4622      	mov	r2, r4
 800ad8a:	462b      	mov	r3, r5
 800ad8c:	f001 ff80 	bl	800cc90 <siprintf>
		strcat(tempString,temp);
 800ad90:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800ad94:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ad98:	4610      	mov	r0, r2
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	f001 ff9c 	bl	800ccd8 <strcat>
		cellVoltagesUpdated = 0;
	}
*/
	sprintf(tempFileNmaeString,"%s_temp_erhan.txt",dateString);
	strcpy(tempString,timeString);
	for (erhan = 0; erhan < 8; erhan++)
 800ada0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800ada4:	3301      	adds	r3, #1
 800ada6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800adaa:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800adae:	2b07      	cmp	r3, #7
 800adb0:	d9da      	bls.n	800ad68 <UpdateSDCard+0x138>
	{
		sprintf(temp,"%03.2f:",smartdata.temps[erhan]);
		strcat(tempString,temp);
	}
	sprintf(temp,"%03.2f",smartdata.temps[8]);
 800adb2:	4b22      	ldr	r3, [pc, #136]	; (800ae3c <UpdateSDCard+0x20c>)
 800adb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fdfc 	bl	800b9b4 <__aeabi_f2d>
 800adbc:	4604      	mov	r4, r0
 800adbe:	460d      	mov	r5, r1
 800adc0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800adc4:	4618      	mov	r0, r3
 800adc6:	4923      	ldr	r1, [pc, #140]	; (800ae54 <UpdateSDCard+0x224>)
 800adc8:	4622      	mov	r2, r4
 800adca:	462b      	mov	r3, r5
 800adcc:	f001 ff60 	bl	800cc90 <siprintf>
	strcat(tempString,temp);
 800add0:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800add4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800add8:	4610      	mov	r0, r2
 800adda:	4619      	mov	r1, r3
 800addc:	f001 ff7c 	bl	800ccd8 <strcat>
	strcat(tempString,"\n");
 800ade0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800ade4:	4618      	mov	r0, r3
 800ade6:	f001 ff8e 	bl	800cd06 <strlen>
 800adea:	4603      	mov	r3, r0
 800adec:	461a      	mov	r2, r3
 800adee:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800adf2:	4413      	add	r3, r2
 800adf4:	4918      	ldr	r1, [pc, #96]	; (800ae58 <UpdateSDCard+0x228>)
 800adf6:	461a      	mov	r2, r3
 800adf8:	460b      	mov	r3, r1
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	8013      	strh	r3, [r2, #0]
	writeToEndOfFile(&FatFs, &Fil,tempFileNmaeString, tempString,strlen(tempString));
 800adfe:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800ae02:	4618      	mov	r0, r3
 800ae04:	f001 ff7f 	bl	800cd06 <strlen>
 800ae08:	4601      	mov	r1, r0
 800ae0a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800ae0e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800ae12:	9100      	str	r1, [sp, #0]
 800ae14:	480b      	ldr	r0, [pc, #44]	; (800ae44 <UpdateSDCard+0x214>)
 800ae16:	490c      	ldr	r1, [pc, #48]	; (800ae48 <UpdateSDCard+0x218>)
 800ae18:	f7ff fdf0 	bl	800a9fc <writeToEndOfFile>

 }
 800ae1c:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800ae20:	46bd      	mov	sp, r7
 800ae22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae26:	bf00      	nop
 800ae28:	20000804 	.word	0x20000804
 800ae2c:	0801030c 	.word	0x0801030c
 800ae30:	20000490 	.word	0x20000490
 800ae34:	0801031c 	.word	0x0801031c
 800ae38:	08010334 	.word	0x08010334
 800ae3c:	20000814 	.word	0x20000814
 800ae40:	08010348 	.word	0x08010348
 800ae44:	200005cc 	.word	0x200005cc
 800ae48:	20000948 	.word	0x20000948
 800ae4c:	08010364 	.word	0x08010364
 800ae50:	08010378 	.word	0x08010378
 800ae54:	08010380 	.word	0x08010380
 800ae58:	08010388 	.word	0x08010388

0800ae5c <isLeapYear>:

uint8_t isLeapYear(uint32_t year)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
	if (year%400 == 0) // Exactly divisible by 400 e.g. 1600, 2000
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	4b14      	ldr	r3, [pc, #80]	; (800aeb8 <isLeapYear+0x5c>)
 800ae68:	fba3 1302 	umull	r1, r3, r3, r2
 800ae6c:	09db      	lsrs	r3, r3, #7
 800ae6e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ae72:	fb01 f303 	mul.w	r3, r1, r3
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <isLeapYear+0x24>
	  return 1;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e014      	b.n	800aeaa <isLeapYear+0x4e>
	else if (year%100 == 0) // Exactly divisible by 100 and not by 400 e.g. 1900, 2100
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	4b0d      	ldr	r3, [pc, #52]	; (800aeb8 <isLeapYear+0x5c>)
 800ae84:	fba3 1302 	umull	r1, r3, r3, r2
 800ae88:	095b      	lsrs	r3, r3, #5
 800ae8a:	2164      	movs	r1, #100	; 0x64
 800ae8c:	fb01 f303 	mul.w	r3, r1, r3
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <isLeapYear+0x3e>
	  return 0;
 800ae96:	2300      	movs	r3, #0
 800ae98:	e007      	b.n	800aeaa <isLeapYear+0x4e>
	else if (year%4 == 0) // Exactly divisible by 4 and neither by 100 nor 400 e.g. 2016, 2020
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f003 0303 	and.w	r3, r3, #3
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d101      	bne.n	800aea8 <isLeapYear+0x4c>
	  return 1;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e000      	b.n	800aeaa <isLeapYear+0x4e>
	else // Not divisible by 4 or 100 or 400 e.g. 2017, 2018, 2019
	  return 0;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	51eb851f 	.word	0x51eb851f

0800aebc <setTimer>:

void setTimer(void)
{
 800aebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aebe:	b091      	sub	sp, #68	; 0x44
 800aec0:	af04      	add	r7, sp, #16
	uint8_t monthsSize[12]={31,28,31,30,31,30,31,31,30,31,30,31};
 800aec2:	4aa8      	ldr	r2, [pc, #672]	; (800b164 <setTimer+0x2a8>)
 800aec4:	f107 0320 	add.w	r3, r7, #32
 800aec8:	6810      	ldr	r0, [r2, #0]
 800aeca:	6851      	ldr	r1, [r2, #4]
 800aecc:	6892      	ldr	r2, [r2, #8]
 800aece:	c307      	stmia	r3!, {r0, r1, r2}
	uint16_t erhan;
	char temp[26];
	switch(setTimeMenu)
 800aed0:	4ba5      	ldr	r3, [pc, #660]	; (800b168 <setTimer+0x2ac>)
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b07      	cmp	r3, #7
 800aed6:	f200 82cb 	bhi.w	800b470 <setTimer+0x5b4>
 800aeda:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <setTimer+0x24>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800b471 	.word	0x0800b471
 800aee4:	0800af01 	.word	0x0800af01
 800aee8:	0800afe7 	.word	0x0800afe7
 800aeec:	0800b0bf 	.word	0x0800b0bf
 800aef0:	0800b18d 	.word	0x0800b18d
 800aef4:	0800b2a3 	.word	0x0800b2a3
 800aef8:	0800b361 	.word	0x0800b361
 800aefc:	0800b421 	.word	0x0800b421
	{
		case SET_TIME_IDLE:
		break;

		case SET_TIME_INIT:
			set_time.year = current_time.year;
 800af00:	4b9a      	ldr	r3, [pc, #616]	; (800b16c <setTimer+0x2b0>)
 800af02:	88da      	ldrh	r2, [r3, #6]
 800af04:	4b9a      	ldr	r3, [pc, #616]	; (800b170 <setTimer+0x2b4>)
 800af06:	80da      	strh	r2, [r3, #6]
			set_time.month = current_time.month;
 800af08:	4b98      	ldr	r3, [pc, #608]	; (800b16c <setTimer+0x2b0>)
 800af0a:	795b      	ldrb	r3, [r3, #5]
 800af0c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800af10:	b2d9      	uxtb	r1, r3
 800af12:	4a97      	ldr	r2, [pc, #604]	; (800b170 <setTimer+0x2b4>)
 800af14:	7953      	ldrb	r3, [r2, #5]
 800af16:	f361 0303 	bfi	r3, r1, #0, #4
 800af1a:	7153      	strb	r3, [r2, #5]
			set_time.days = current_time.days;
 800af1c:	4b93      	ldr	r3, [pc, #588]	; (800b16c <setTimer+0x2b0>)
 800af1e:	78db      	ldrb	r3, [r3, #3]
 800af20:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800af24:	b2d9      	uxtb	r1, r3
 800af26:	4a92      	ldr	r2, [pc, #584]	; (800b170 <setTimer+0x2b4>)
 800af28:	78d3      	ldrb	r3, [r2, #3]
 800af2a:	f361 0304 	bfi	r3, r1, #0, #5
 800af2e:	70d3      	strb	r3, [r2, #3]
			set_time.hours = current_time.hours;
 800af30:	4b8e      	ldr	r3, [pc, #568]	; (800b16c <setTimer+0x2b0>)
 800af32:	789b      	ldrb	r3, [r3, #2]
 800af34:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800af38:	b2d9      	uxtb	r1, r3
 800af3a:	4a8d      	ldr	r2, [pc, #564]	; (800b170 <setTimer+0x2b4>)
 800af3c:	7893      	ldrb	r3, [r2, #2]
 800af3e:	f361 0304 	bfi	r3, r1, #0, #5
 800af42:	7093      	strb	r3, [r2, #2]
			set_time.minutes = current_time.minutes;
 800af44:	4b89      	ldr	r3, [pc, #548]	; (800b16c <setTimer+0x2b0>)
 800af46:	785b      	ldrb	r3, [r3, #1]
 800af48:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800af4c:	b2d9      	uxtb	r1, r3
 800af4e:	4a88      	ldr	r2, [pc, #544]	; (800b170 <setTimer+0x2b4>)
 800af50:	7853      	ldrb	r3, [r2, #1]
 800af52:	f361 0305 	bfi	r3, r1, #0, #6
 800af56:	7053      	strb	r3, [r2, #1]
			set_time.seconds = 0;
 800af58:	4a85      	ldr	r2, [pc, #532]	; (800b170 <setTimer+0x2b4>)
 800af5a:	7813      	ldrb	r3, [r2, #0]
 800af5c:	f36f 0305 	bfc	r3, #0, #6
 800af60:	7013      	strb	r3, [r2, #0]

			LCDWriteCommand(0x01); // clear the screen
 800af62:	2001      	movs	r0, #1
 800af64:	f7ff f8ca 	bl	800a0fc <LCDWriteCommand>
			LCDCursorXY(0, 0);
 800af68:	2000      	movs	r0, #0
 800af6a:	2100      	movs	r1, #0
 800af6c:	f7ff f938 	bl	800a1e0 <LCDCursorXY>
			sprintf(temp, "%04d/%02d/%02d %02d:%02d:%02d",set_time.year,set_time.days,set_time.month,set_time.hours,set_time.minutes,set_time.seconds);
 800af70:	4b7f      	ldr	r3, [pc, #508]	; (800b170 <setTimer+0x2b4>)
 800af72:	88db      	ldrh	r3, [r3, #6]
 800af74:	461e      	mov	r6, r3
 800af76:	4b7e      	ldr	r3, [pc, #504]	; (800b170 <setTimer+0x2b4>)
 800af78:	78db      	ldrb	r3, [r3, #3]
 800af7a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	461d      	mov	r5, r3
 800af82:	4b7b      	ldr	r3, [pc, #492]	; (800b170 <setTimer+0x2b4>)
 800af84:	795b      	ldrb	r3, [r3, #5]
 800af86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	461c      	mov	r4, r3
 800af8e:	4b78      	ldr	r3, [pc, #480]	; (800b170 <setTimer+0x2b4>)
 800af90:	789b      	ldrb	r3, [r3, #2]
 800af92:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800af96:	b2db      	uxtb	r3, r3
 800af98:	4618      	mov	r0, r3
 800af9a:	4b75      	ldr	r3, [pc, #468]	; (800b170 <setTimer+0x2b4>)
 800af9c:	785b      	ldrb	r3, [r3, #1]
 800af9e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	4619      	mov	r1, r3
 800afa6:	4b72      	ldr	r3, [pc, #456]	; (800b170 <setTimer+0x2b4>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	461a      	mov	r2, r3
 800afb2:	1d3b      	adds	r3, r7, #4
 800afb4:	9400      	str	r4, [sp, #0]
 800afb6:	9001      	str	r0, [sp, #4]
 800afb8:	9102      	str	r1, [sp, #8]
 800afba:	9203      	str	r2, [sp, #12]
 800afbc:	4618      	mov	r0, r3
 800afbe:	496d      	ldr	r1, [pc, #436]	; (800b174 <setTimer+0x2b8>)
 800afc0:	4632      	mov	r2, r6
 800afc2:	462b      	mov	r3, r5
 800afc4:	f001 fe64 	bl	800cc90 <siprintf>
			LCDWriteString(temp);
 800afc8:	1d3b      	adds	r3, r7, #4
 800afca:	4618      	mov	r0, r3
 800afcc:	f7ff f944 	bl	800a258 <LCDWriteString>
			LCDCursorXY(0, 4);
 800afd0:	2000      	movs	r0, #0
 800afd2:	2104      	movs	r1, #4
 800afd4:	f7ff f904 	bl	800a1e0 <LCDCursorXY>
			LCDWriteCommand(0x10);
 800afd8:	2010      	movs	r0, #16
 800afda:	f7ff f88f 	bl	800a0fc <LCDWriteCommand>
			setTimeMenu = YEAR;
 800afde:	4b62      	ldr	r3, [pc, #392]	; (800b168 <setTimer+0x2ac>)
 800afe0:	2202      	movs	r2, #2
 800afe2:	701a      	strb	r2, [r3, #0]
		break;
 800afe4:	e244      	b.n	800b470 <setTimer+0x5b4>

		case YEAR:
			if(button2Pressed)
 800afe6:	4b64      	ldr	r3, [pc, #400]	; (800b178 <setTimer+0x2bc>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d012      	beq.n	800b014 <setTimer+0x158>
			{
				set_time.year++;
 800afee:	4b60      	ldr	r3, [pc, #384]	; (800b170 <setTimer+0x2b4>)
 800aff0:	88db      	ldrh	r3, [r3, #6]
 800aff2:	3301      	adds	r3, #1
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	4b5e      	ldr	r3, [pc, #376]	; (800b170 <setTimer+0x2b4>)
 800aff8:	80da      	strh	r2, [r3, #6]
				if(set_time.year == 2100) set_time.year = 2000;
 800affa:	4b5d      	ldr	r3, [pc, #372]	; (800b170 <setTimer+0x2b4>)
 800affc:	88db      	ldrh	r3, [r3, #6]
 800affe:	f640 0234 	movw	r2, #2100	; 0x834
 800b002:	4293      	cmp	r3, r2
 800b004:	d103      	bne.n	800b00e <setTimer+0x152>
 800b006:	4b5a      	ldr	r3, [pc, #360]	; (800b170 <setTimer+0x2b4>)
 800b008:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b00c:	80da      	strh	r2, [r3, #6]
				button2Pressed = 0;
 800b00e:	4b5a      	ldr	r3, [pc, #360]	; (800b178 <setTimer+0x2bc>)
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]
			}
			LCDCursorXY(0, 0);
 800b014:	2000      	movs	r0, #0
 800b016:	2100      	movs	r1, #0
 800b018:	f7ff f8e2 	bl	800a1e0 <LCDCursorXY>
			LCDWriteData((set_time.year/1000)+0x30);
 800b01c:	4b54      	ldr	r3, [pc, #336]	; (800b170 <setTimer+0x2b4>)
 800b01e:	88db      	ldrh	r3, [r3, #6]
 800b020:	4a56      	ldr	r2, [pc, #344]	; (800b17c <setTimer+0x2c0>)
 800b022:	fba2 2303 	umull	r2, r3, r2, r3
 800b026:	099b      	lsrs	r3, r3, #6
 800b028:	b29b      	uxth	r3, r3
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	3330      	adds	r3, #48	; 0x30
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	4618      	mov	r0, r3
 800b032:	f7fe fff1 	bl	800a018 <LCDWriteData>
			erhan = set_time.year % 1000;
 800b036:	4b4e      	ldr	r3, [pc, #312]	; (800b170 <setTimer+0x2b4>)
 800b038:	88db      	ldrh	r3, [r3, #6]
 800b03a:	4a50      	ldr	r2, [pc, #320]	; (800b17c <setTimer+0x2c0>)
 800b03c:	fba2 1203 	umull	r1, r2, r2, r3
 800b040:	0992      	lsrs	r2, r2, #6
 800b042:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b046:	fb01 f202 	mul.w	r2, r1, r2
 800b04a:	1a9b      	subs	r3, r3, r2
 800b04c:	85fb      	strh	r3, [r7, #46]	; 0x2e
			LCDWriteData((erhan/100) + 0x30);
 800b04e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b050:	4a4b      	ldr	r2, [pc, #300]	; (800b180 <setTimer+0x2c4>)
 800b052:	fba2 2303 	umull	r2, r3, r2, r3
 800b056:	095b      	lsrs	r3, r3, #5
 800b058:	b29b      	uxth	r3, r3
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	3330      	adds	r3, #48	; 0x30
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	4618      	mov	r0, r3
 800b062:	f7fe ffd9 	bl	800a018 <LCDWriteData>
			erhan = set_time.year % 100;
 800b066:	4b42      	ldr	r3, [pc, #264]	; (800b170 <setTimer+0x2b4>)
 800b068:	88db      	ldrh	r3, [r3, #6]
 800b06a:	4a45      	ldr	r2, [pc, #276]	; (800b180 <setTimer+0x2c4>)
 800b06c:	fba2 1203 	umull	r1, r2, r2, r3
 800b070:	0952      	lsrs	r2, r2, #5
 800b072:	2164      	movs	r1, #100	; 0x64
 800b074:	fb01 f202 	mul.w	r2, r1, r2
 800b078:	1a9b      	subs	r3, r3, r2
 800b07a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			LCDWriteData((erhan/10)+0x30);
 800b07c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b07e:	4a41      	ldr	r2, [pc, #260]	; (800b184 <setTimer+0x2c8>)
 800b080:	fba2 2303 	umull	r2, r3, r2, r3
 800b084:	08db      	lsrs	r3, r3, #3
 800b086:	b29b      	uxth	r3, r3
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	3330      	adds	r3, #48	; 0x30
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fe ffc2 	bl	800a018 <LCDWriteData>
			LCDWriteData((erhan%10)+0x30);
 800b094:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b096:	4b3b      	ldr	r3, [pc, #236]	; (800b184 <setTimer+0x2c8>)
 800b098:	fba3 1302 	umull	r1, r3, r3, r2
 800b09c:	08d9      	lsrs	r1, r3, #3
 800b09e:	460b      	mov	r3, r1
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	440b      	add	r3, r1
 800b0a4:	005b      	lsls	r3, r3, #1
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	3330      	adds	r3, #48	; 0x30
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fe ffb1 	bl	800a018 <LCDWriteData>
			LCDWriteCommand(0x10);
 800b0b6:	2010      	movs	r0, #16
 800b0b8:	f7ff f820 	bl	800a0fc <LCDWriteCommand>
		break;
 800b0bc:	e1d8      	b.n	800b470 <setTimer+0x5b4>

		case MONTH:
			if(button2Pressed)
 800b0be:	4b2e      	ldr	r3, [pc, #184]	; (800b178 <setTimer+0x2bc>)
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d01d      	beq.n	800b102 <setTimer+0x246>
			{
				if(++set_time.month>=13)
 800b0c6:	4b2a      	ldr	r3, [pc, #168]	; (800b170 <setTimer+0x2b4>)
 800b0c8:	795b      	ldrb	r3, [r3, #5]
 800b0ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	f003 030f 	and.w	r3, r3, #15
 800b0d6:	b2d9      	uxtb	r1, r3
 800b0d8:	4a25      	ldr	r2, [pc, #148]	; (800b170 <setTimer+0x2b4>)
 800b0da:	7953      	ldrb	r3, [r2, #5]
 800b0dc:	f361 0303 	bfi	r3, r1, #0, #4
 800b0e0:	7153      	strb	r3, [r2, #5]
 800b0e2:	4b23      	ldr	r3, [pc, #140]	; (800b170 <setTimer+0x2b4>)
 800b0e4:	795b      	ldrb	r3, [r3, #5]
 800b0e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b0c      	cmp	r3, #12
 800b0ee:	dd05      	ble.n	800b0fc <setTimer+0x240>
					set_time.month = 1;
 800b0f0:	4a1f      	ldr	r2, [pc, #124]	; (800b170 <setTimer+0x2b4>)
 800b0f2:	7953      	ldrb	r3, [r2, #5]
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	f361 0303 	bfi	r3, r1, #0, #4
 800b0fa:	7153      	strb	r3, [r2, #5]
				button2Pressed = 0;
 800b0fc:	4b1e      	ldr	r3, [pc, #120]	; (800b178 <setTimer+0x2bc>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	701a      	strb	r2, [r3, #0]
			}
			LCDCursorXY(0, 5);
 800b102:	2000      	movs	r0, #0
 800b104:	2105      	movs	r1, #5
 800b106:	f7ff f86b 	bl	800a1e0 <LCDCursorXY>
			LCDWriteData((set_time.month/10) + 0x30);
 800b10a:	4b19      	ldr	r3, [pc, #100]	; (800b170 <setTimer+0x2b4>)
 800b10c:	795b      	ldrb	r3, [r3, #5]
 800b10e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b112:	b2db      	uxtb	r3, r3
 800b114:	4a1c      	ldr	r2, [pc, #112]	; (800b188 <setTimer+0x2cc>)
 800b116:	fb82 1203 	smull	r1, r2, r2, r3
 800b11a:	1092      	asrs	r2, r2, #2
 800b11c:	17db      	asrs	r3, r3, #31
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	b2db      	uxtb	r3, r3
 800b122:	3330      	adds	r3, #48	; 0x30
 800b124:	b2db      	uxtb	r3, r3
 800b126:	4618      	mov	r0, r3
 800b128:	f7fe ff76 	bl	800a018 <LCDWriteData>
			LCDWriteData((set_time.month%10) + 0x30);
 800b12c:	4b10      	ldr	r3, [pc, #64]	; (800b170 <setTimer+0x2b4>)
 800b12e:	795b      	ldrb	r3, [r3, #5]
 800b130:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b134:	b2db      	uxtb	r3, r3
 800b136:	4619      	mov	r1, r3
 800b138:	4b13      	ldr	r3, [pc, #76]	; (800b188 <setTimer+0x2cc>)
 800b13a:	fb83 2301 	smull	r2, r3, r3, r1
 800b13e:	109a      	asrs	r2, r3, #2
 800b140:	17cb      	asrs	r3, r1, #31
 800b142:	1ad2      	subs	r2, r2, r3
 800b144:	4613      	mov	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	1aca      	subs	r2, r1, r3
 800b14e:	b2d3      	uxtb	r3, r2
 800b150:	3330      	adds	r3, #48	; 0x30
 800b152:	b2db      	uxtb	r3, r3
 800b154:	4618      	mov	r0, r3
 800b156:	f7fe ff5f 	bl	800a018 <LCDWriteData>
			LCDWriteCommand(0x10);
 800b15a:	2010      	movs	r0, #16
 800b15c:	f7fe ffce 	bl	800a0fc <LCDWriteCommand>
		break;
 800b160:	e186      	b.n	800b470 <setTimer+0x5b4>
 800b162:	bf00      	nop
 800b164:	080103ac 	.word	0x080103ac
 800b168:	20000495 	.word	0x20000495
 800b16c:	20000804 	.word	0x20000804
 800b170:	2000080c 	.word	0x2000080c
 800b174:	0801038c 	.word	0x0801038c
 800b178:	20000496 	.word	0x20000496
 800b17c:	10624dd3 	.word	0x10624dd3
 800b180:	51eb851f 	.word	0x51eb851f
 800b184:	cccccccd 	.word	0xcccccccd
 800b188:	66666667 	.word	0x66666667

		case DAY:
			if(button2Pressed)
 800b18c:	4bba      	ldr	r3, [pc, #744]	; (800b478 <setTimer+0x5bc>)
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d056      	beq.n	800b242 <setTimer+0x386>
			{
				if(isLeapYear(set_time.year) && set_time.month==2)
 800b194:	4bb9      	ldr	r3, [pc, #740]	; (800b47c <setTimer+0x5c0>)
 800b196:	88db      	ldrh	r3, [r3, #6]
 800b198:	4618      	mov	r0, r3
 800b19a:	f7ff fe5f 	bl	800ae5c <isLeapYear>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d023      	beq.n	800b1ec <setTimer+0x330>
 800b1a4:	4bb5      	ldr	r3, [pc, #724]	; (800b47c <setTimer+0x5c0>)
 800b1a6:	795b      	ldrb	r3, [r3, #5]
 800b1a8:	f003 030f 	and.w	r3, r3, #15
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d11c      	bne.n	800b1ec <setTimer+0x330>
				{
					if(++set_time.days >= 30)	//Feb is max 29 days
 800b1b2:	4bb2      	ldr	r3, [pc, #712]	; (800b47c <setTimer+0x5c0>)
 800b1b4:	78db      	ldrb	r3, [r3, #3]
 800b1b6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	3301      	adds	r3, #1
 800b1be:	f003 031f 	and.w	r3, r3, #31
 800b1c2:	b2d9      	uxtb	r1, r3
 800b1c4:	4aad      	ldr	r2, [pc, #692]	; (800b47c <setTimer+0x5c0>)
 800b1c6:	78d3      	ldrb	r3, [r2, #3]
 800b1c8:	f361 0304 	bfi	r3, r1, #0, #5
 800b1cc:	70d3      	strb	r3, [r2, #3]
 800b1ce:	4bab      	ldr	r3, [pc, #684]	; (800b47c <setTimer+0x5c0>)
 800b1d0:	78db      	ldrb	r3, [r3, #3]
 800b1d2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	2b1d      	cmp	r3, #29
 800b1da:	dd06      	ble.n	800b1ea <setTimer+0x32e>
						set_time.days = 1;
 800b1dc:	4aa7      	ldr	r2, [pc, #668]	; (800b47c <setTimer+0x5c0>)
 800b1de:	78d3      	ldrb	r3, [r2, #3]
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	f361 0304 	bfi	r3, r1, #0, #5
 800b1e6:	70d3      	strb	r3, [r2, #3]
		case DAY:
			if(button2Pressed)
			{
				if(isLeapYear(set_time.year) && set_time.month==2)
				{
					if(++set_time.days >= 30)	//Feb is max 29 days
 800b1e8:	e028      	b.n	800b23c <setTimer+0x380>
 800b1ea:	e027      	b.n	800b23c <setTimer+0x380>
						set_time.days = 1;
				}
				else
				{
					if(set_time.days >= monthsSize[set_time.month-1])
 800b1ec:	4ba3      	ldr	r3, [pc, #652]	; (800b47c <setTimer+0x5c0>)
 800b1ee:	78db      	ldrb	r3, [r3, #3]
 800b1f0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	4ba0      	ldr	r3, [pc, #640]	; (800b47c <setTimer+0x5c0>)
 800b1fa:	795b      	ldrb	r3, [r3, #5]
 800b1fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b200:	b2db      	uxtb	r3, r3
 800b202:	3b01      	subs	r3, #1
 800b204:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b208:	440b      	add	r3, r1
 800b20a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800b20e:	429a      	cmp	r2, r3
 800b210:	db06      	blt.n	800b220 <setTimer+0x364>
						set_time.days = 1;
 800b212:	4a9a      	ldr	r2, [pc, #616]	; (800b47c <setTimer+0x5c0>)
 800b214:	78d3      	ldrb	r3, [r2, #3]
 800b216:	2101      	movs	r1, #1
 800b218:	f361 0304 	bfi	r3, r1, #0, #5
 800b21c:	70d3      	strb	r3, [r2, #3]
 800b21e:	e00d      	b.n	800b23c <setTimer+0x380>
					else
						set_time.days++;
 800b220:	4b96      	ldr	r3, [pc, #600]	; (800b47c <setTimer+0x5c0>)
 800b222:	78db      	ldrb	r3, [r3, #3]
 800b224:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	3301      	adds	r3, #1
 800b22c:	f003 031f 	and.w	r3, r3, #31
 800b230:	b2d9      	uxtb	r1, r3
 800b232:	4a92      	ldr	r2, [pc, #584]	; (800b47c <setTimer+0x5c0>)
 800b234:	78d3      	ldrb	r3, [r2, #3]
 800b236:	f361 0304 	bfi	r3, r1, #0, #5
 800b23a:	70d3      	strb	r3, [r2, #3]
				}
				button2Pressed = 0;
 800b23c:	4b8e      	ldr	r3, [pc, #568]	; (800b478 <setTimer+0x5bc>)
 800b23e:	2200      	movs	r2, #0
 800b240:	701a      	strb	r2, [r3, #0]
			}
			LCDCursorXY(0, 8);
 800b242:	2000      	movs	r0, #0
 800b244:	2108      	movs	r1, #8
 800b246:	f7fe ffcb 	bl	800a1e0 <LCDCursorXY>
			LCDWriteData((set_time.days/10) + 0x30);
 800b24a:	4b8c      	ldr	r3, [pc, #560]	; (800b47c <setTimer+0x5c0>)
 800b24c:	78db      	ldrb	r3, [r3, #3]
 800b24e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b252:	b2db      	uxtb	r3, r3
 800b254:	4a8a      	ldr	r2, [pc, #552]	; (800b480 <setTimer+0x5c4>)
 800b256:	fb82 1203 	smull	r1, r2, r2, r3
 800b25a:	1092      	asrs	r2, r2, #2
 800b25c:	17db      	asrs	r3, r3, #31
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	b2db      	uxtb	r3, r3
 800b262:	3330      	adds	r3, #48	; 0x30
 800b264:	b2db      	uxtb	r3, r3
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fed6 	bl	800a018 <LCDWriteData>
			LCDWriteData((set_time.days%10) + 0x30);
 800b26c:	4b83      	ldr	r3, [pc, #524]	; (800b47c <setTimer+0x5c0>)
 800b26e:	78db      	ldrb	r3, [r3, #3]
 800b270:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b274:	b2db      	uxtb	r3, r3
 800b276:	4619      	mov	r1, r3
 800b278:	4b81      	ldr	r3, [pc, #516]	; (800b480 <setTimer+0x5c4>)
 800b27a:	fb83 2301 	smull	r2, r3, r3, r1
 800b27e:	109a      	asrs	r2, r3, #2
 800b280:	17cb      	asrs	r3, r1, #31
 800b282:	1ad2      	subs	r2, r2, r3
 800b284:	4613      	mov	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	005b      	lsls	r3, r3, #1
 800b28c:	1aca      	subs	r2, r1, r3
 800b28e:	b2d3      	uxtb	r3, r2
 800b290:	3330      	adds	r3, #48	; 0x30
 800b292:	b2db      	uxtb	r3, r3
 800b294:	4618      	mov	r0, r3
 800b296:	f7fe febf 	bl	800a018 <LCDWriteData>
			LCDWriteCommand(0x10);
 800b29a:	2010      	movs	r0, #16
 800b29c:	f7fe ff2e 	bl	800a0fc <LCDWriteCommand>
		break;
 800b2a0:	e0e6      	b.n	800b470 <setTimer+0x5b4>

		case HOUR:
			if(button2Pressed)
 800b2a2:	4b75      	ldr	r3, [pc, #468]	; (800b478 <setTimer+0x5bc>)
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d02a      	beq.n	800b300 <setTimer+0x444>
			{
				set_time.hours++;
 800b2aa:	4b74      	ldr	r3, [pc, #464]	; (800b47c <setTimer+0x5c0>)
 800b2ac:	789b      	ldrb	r3, [r3, #2]
 800b2ae:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	f003 031f 	and.w	r3, r3, #31
 800b2ba:	b2d9      	uxtb	r1, r3
 800b2bc:	4a6f      	ldr	r2, [pc, #444]	; (800b47c <setTimer+0x5c0>)
 800b2be:	7893      	ldrb	r3, [r2, #2]
 800b2c0:	f361 0304 	bfi	r3, r1, #0, #5
 800b2c4:	7093      	strb	r3, [r2, #2]
				set_time.hours = set_time.hours % 24;
 800b2c6:	4b6d      	ldr	r3, [pc, #436]	; (800b47c <setTimer+0x5c0>)
 800b2c8:	789b      	ldrb	r3, [r3, #2]
 800b2ca:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	4b6c      	ldr	r3, [pc, #432]	; (800b484 <setTimer+0x5c8>)
 800b2d4:	fb83 2301 	smull	r2, r3, r3, r1
 800b2d8:	109a      	asrs	r2, r3, #2
 800b2da:	17cb      	asrs	r3, r1, #31
 800b2dc:	1ad2      	subs	r2, r2, r3
 800b2de:	4613      	mov	r3, r2
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	4413      	add	r3, r2
 800b2e4:	00db      	lsls	r3, r3, #3
 800b2e6:	1aca      	subs	r2, r1, r3
 800b2e8:	b2d3      	uxtb	r3, r2
 800b2ea:	f003 031f 	and.w	r3, r3, #31
 800b2ee:	b2d9      	uxtb	r1, r3
 800b2f0:	4a62      	ldr	r2, [pc, #392]	; (800b47c <setTimer+0x5c0>)
 800b2f2:	7893      	ldrb	r3, [r2, #2]
 800b2f4:	f361 0304 	bfi	r3, r1, #0, #5
 800b2f8:	7093      	strb	r3, [r2, #2]
				button2Pressed = 0;
 800b2fa:	4b5f      	ldr	r3, [pc, #380]	; (800b478 <setTimer+0x5bc>)
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	701a      	strb	r2, [r3, #0]
			}
			LCDCursorXY(0, 11);
 800b300:	2000      	movs	r0, #0
 800b302:	210b      	movs	r1, #11
 800b304:	f7fe ff6c 	bl	800a1e0 <LCDCursorXY>
			LCDWriteData((set_time.hours/10) + 0x30);
 800b308:	4b5c      	ldr	r3, [pc, #368]	; (800b47c <setTimer+0x5c0>)
 800b30a:	789b      	ldrb	r3, [r3, #2]
 800b30c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b310:	b2db      	uxtb	r3, r3
 800b312:	4a5b      	ldr	r2, [pc, #364]	; (800b480 <setTimer+0x5c4>)
 800b314:	fb82 1203 	smull	r1, r2, r2, r3
 800b318:	1092      	asrs	r2, r2, #2
 800b31a:	17db      	asrs	r3, r3, #31
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	3330      	adds	r3, #48	; 0x30
 800b322:	b2db      	uxtb	r3, r3
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe fe77 	bl	800a018 <LCDWriteData>
			LCDWriteData((set_time.hours%10) + 0x30);
 800b32a:	4b54      	ldr	r3, [pc, #336]	; (800b47c <setTimer+0x5c0>)
 800b32c:	789b      	ldrb	r3, [r3, #2]
 800b32e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b332:	b2db      	uxtb	r3, r3
 800b334:	4619      	mov	r1, r3
 800b336:	4b52      	ldr	r3, [pc, #328]	; (800b480 <setTimer+0x5c4>)
 800b338:	fb83 2301 	smull	r2, r3, r3, r1
 800b33c:	109a      	asrs	r2, r3, #2
 800b33e:	17cb      	asrs	r3, r1, #31
 800b340:	1ad2      	subs	r2, r2, r3
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	1aca      	subs	r2, r1, r3
 800b34c:	b2d3      	uxtb	r3, r2
 800b34e:	3330      	adds	r3, #48	; 0x30
 800b350:	b2db      	uxtb	r3, r3
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fe60 	bl	800a018 <LCDWriteData>
			LCDWriteCommand(0x10);
 800b358:	2010      	movs	r0, #16
 800b35a:	f7fe fecf 	bl	800a0fc <LCDWriteCommand>
		break;
 800b35e:	e087      	b.n	800b470 <setTimer+0x5b4>

		case MINUTE:
			if(button2Pressed)
 800b360:	4b45      	ldr	r3, [pc, #276]	; (800b478 <setTimer+0x5bc>)
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d02b      	beq.n	800b3c0 <setTimer+0x504>
			{
				set_time.minutes++;
 800b368:	4b44      	ldr	r3, [pc, #272]	; (800b47c <setTimer+0x5c0>)
 800b36a:	785b      	ldrb	r3, [r3, #1]
 800b36c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b370:	b2db      	uxtb	r3, r3
 800b372:	3301      	adds	r3, #1
 800b374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b378:	b2d9      	uxtb	r1, r3
 800b37a:	4a40      	ldr	r2, [pc, #256]	; (800b47c <setTimer+0x5c0>)
 800b37c:	7853      	ldrb	r3, [r2, #1]
 800b37e:	f361 0305 	bfi	r3, r1, #0, #6
 800b382:	7053      	strb	r3, [r2, #1]
				set_time.minutes = set_time.minutes % 60;
 800b384:	4b3d      	ldr	r3, [pc, #244]	; (800b47c <setTimer+0x5c0>)
 800b386:	785b      	ldrb	r3, [r3, #1]
 800b388:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	461a      	mov	r2, r3
 800b390:	4b3d      	ldr	r3, [pc, #244]	; (800b488 <setTimer+0x5cc>)
 800b392:	fb82 0103 	smull	r0, r1, r2, r3
 800b396:	1853      	adds	r3, r2, r1
 800b398:	1159      	asrs	r1, r3, #5
 800b39a:	17d3      	asrs	r3, r2, #31
 800b39c:	1ac9      	subs	r1, r1, r3
 800b39e:	460b      	mov	r3, r1
 800b3a0:	011b      	lsls	r3, r3, #4
 800b3a2:	1a5b      	subs	r3, r3, r1
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	1ad1      	subs	r1, r2, r3
 800b3a8:	b2cb      	uxtb	r3, r1
 800b3aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3ae:	b2d9      	uxtb	r1, r3
 800b3b0:	4a32      	ldr	r2, [pc, #200]	; (800b47c <setTimer+0x5c0>)
 800b3b2:	7853      	ldrb	r3, [r2, #1]
 800b3b4:	f361 0305 	bfi	r3, r1, #0, #6
 800b3b8:	7053      	strb	r3, [r2, #1]
				button2Pressed = 0;
 800b3ba:	4b2f      	ldr	r3, [pc, #188]	; (800b478 <setTimer+0x5bc>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	701a      	strb	r2, [r3, #0]
			}
			LCDCursorXY(0, 14);
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	210e      	movs	r1, #14
 800b3c4:	f7fe ff0c 	bl	800a1e0 <LCDCursorXY>
			LCDWriteData((set_time.minutes/10) + 0x30);
 800b3c8:	4b2c      	ldr	r3, [pc, #176]	; (800b47c <setTimer+0x5c0>)
 800b3ca:	785b      	ldrb	r3, [r3, #1]
 800b3cc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	4a2b      	ldr	r2, [pc, #172]	; (800b480 <setTimer+0x5c4>)
 800b3d4:	fb82 1203 	smull	r1, r2, r2, r3
 800b3d8:	1092      	asrs	r2, r2, #2
 800b3da:	17db      	asrs	r3, r3, #31
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	3330      	adds	r3, #48	; 0x30
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fe fe17 	bl	800a018 <LCDWriteData>
			LCDWriteData((set_time.minutes%10) + 0x30);
 800b3ea:	4b24      	ldr	r3, [pc, #144]	; (800b47c <setTimer+0x5c0>)
 800b3ec:	785b      	ldrb	r3, [r3, #1]
 800b3ee:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4b22      	ldr	r3, [pc, #136]	; (800b480 <setTimer+0x5c4>)
 800b3f8:	fb83 2301 	smull	r2, r3, r3, r1
 800b3fc:	109a      	asrs	r2, r3, #2
 800b3fe:	17cb      	asrs	r3, r1, #31
 800b400:	1ad2      	subs	r2, r2, r3
 800b402:	4613      	mov	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	4413      	add	r3, r2
 800b408:	005b      	lsls	r3, r3, #1
 800b40a:	1aca      	subs	r2, r1, r3
 800b40c:	b2d3      	uxtb	r3, r2
 800b40e:	3330      	adds	r3, #48	; 0x30
 800b410:	b2db      	uxtb	r3, r3
 800b412:	4618      	mov	r0, r3
 800b414:	f7fe fe00 	bl	800a018 <LCDWriteData>
			LCDWriteCommand(0x10);
 800b418:	2010      	movs	r0, #16
 800b41a:	f7fe fe6f 	bl	800a0fc <LCDWriteCommand>
		break;
 800b41e:	e027      	b.n	800b470 <setTimer+0x5b4>

		case SET_OK:
		set_time.month--;
 800b420:	4b16      	ldr	r3, [pc, #88]	; (800b47c <setTimer+0x5c0>)
 800b422:	795b      	ldrb	r3, [r3, #5]
 800b424:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	330f      	adds	r3, #15
 800b42c:	f003 030f 	and.w	r3, r3, #15
 800b430:	b2d9      	uxtb	r1, r3
 800b432:	4a12      	ldr	r2, [pc, #72]	; (800b47c <setTimer+0x5c0>)
 800b434:	7953      	ldrb	r3, [r2, #5]
 800b436:	f361 0303 	bfi	r3, r1, #0, #4
 800b43a:	7153      	strb	r3, [r2, #5]
		set_time.days--;
 800b43c:	4b0f      	ldr	r3, [pc, #60]	; (800b47c <setTimer+0x5c0>)
 800b43e:	78db      	ldrb	r3, [r3, #3]
 800b440:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b444:	b2db      	uxtb	r3, r3
 800b446:	331f      	adds	r3, #31
 800b448:	f003 031f 	and.w	r3, r3, #31
 800b44c:	b2d9      	uxtb	r1, r3
 800b44e:	4a0b      	ldr	r2, [pc, #44]	; (800b47c <setTimer+0x5c0>)
 800b450:	78d3      	ldrb	r3, [r2, #3]
 800b452:	f361 0304 	bfi	r3, r1, #0, #5
 800b456:	70d3      	strb	r3, [r2, #3]
		XMC_RTC_SetTime(&set_time);
 800b458:	4808      	ldr	r0, [pc, #32]	; (800b47c <setTimer+0x5c0>)
 800b45a:	f7f6 fb63 	bl	8001b24 <XMC_RTC_SetTime>
		UpdateLCD();
 800b45e:	f7ff fb09 	bl	800aa74 <UpdateLCD>
		//XMC_RTC_GetTime(&current_time);
		//LCDCursorXY(1, 0);
		//sprintf(temp, "%04d/%02d/%02d %02d:%02d:%02d",current_time.year,current_time.month,current_time.days,current_time.hours,current_time.minutes,current_time.seconds);
		//LCDWriteString(temp);
		setTimeMenu=0;
 800b462:	4b0a      	ldr	r3, [pc, #40]	; (800b48c <setTimer+0x5d0>)
 800b464:	2200      	movs	r2, #0
 800b466:	701a      	strb	r2, [r3, #0]
		setTimeOnProcces = 0;
 800b468:	4b09      	ldr	r3, [pc, #36]	; (800b490 <setTimer+0x5d4>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	701a      	strb	r2, [r3, #0]
		break;
 800b46e:	bf00      	nop
	}
}
 800b470:	3734      	adds	r7, #52	; 0x34
 800b472:	46bd      	mov	sp, r7
 800b474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b476:	bf00      	nop
 800b478:	20000496 	.word	0x20000496
 800b47c:	2000080c 	.word	0x2000080c
 800b480:	66666667 	.word	0x66666667
 800b484:	2aaaaaab 	.word	0x2aaaaaab
 800b488:	88888889 	.word	0x88888889
 800b48c:	20000495 	.word	0x20000495
 800b490:	20000494 	.word	0x20000494

0800b494 <main>:

int main(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af02      	add	r7, sp, #8
	DAVE_STATUS_t status;
	uint8_t erhan;
	uint16_t erhan2;

	status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800b49a:	f7fe fd65 	bl	8009f68 <DAVE_Init>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	70fb      	strb	r3, [r7, #3]
	if(status != DAVE_STATUS_SUCCESS)
 800b4a2:	78fb      	ldrb	r3, [r7, #3]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d000      	beq.n	800b4aa <main+0x16>
		XMC_DEBUG("DAVE APPs initialization failed\n");

		while(1U)
		{

		}
 800b4a8:	e7fe      	b.n	800b4a8 <main+0x14>
	}


	// Set LED1, LED2 gpio pins.
	XMC_GPIO_SetMode(LED1, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 800b4aa:	487f      	ldr	r0, [pc, #508]	; (800b6a8 <main+0x214>)
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	2280      	movs	r2, #128	; 0x80
 800b4b0:	f7f6 f944 	bl	800173c <XMC_GPIO_SetMode>
	XMC_GPIO_SetOutputLow(LED1);
 800b4b4:	487c      	ldr	r0, [pc, #496]	; (800b6a8 <main+0x214>)
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	f7fe fefa 	bl	800a2b0 <XMC_GPIO_SetOutputLow>
	XMC_GPIO_SetMode(LED2, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 800b4bc:	487a      	ldr	r0, [pc, #488]	; (800b6a8 <main+0x214>)
 800b4be:	2100      	movs	r1, #0
 800b4c0:	2280      	movs	r2, #128	; 0x80
 800b4c2:	f7f6 f93b 	bl	800173c <XMC_GPIO_SetMode>
	XMC_GPIO_SetOutputLow(LED2);
 800b4c6:	4878      	ldr	r0, [pc, #480]	; (800b6a8 <main+0x214>)
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	f7fe fef1 	bl	800a2b0 <XMC_GPIO_SetOutputLow>
	//XMC_GPIO_SetMode(BUTTON1,XMC_GPIO_MODE_INPUT_PULL_UP);
	///////////////////////////////////////////////////////
	LCDInit();
 800b4ce:	f7fe fed7 	bl	800a280 <LCDInit>
	LCDCursorXY(0, 0);
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	f7fe fe83 	bl	800a1e0 <LCDCursorXY>
	LCDWriteString("Initializing...");
 800b4da:	4874      	ldr	r0, [pc, #464]	; (800b6ac <main+0x218>)
 800b4dc:	f7fe febc 	bl	800a258 <LCDWriteString>
	onProcess = 1;
 800b4e0:	4b73      	ldr	r3, [pc, #460]	; (800b6b0 <main+0x21c>)
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	701a      	strb	r2, [r3, #0]
	CAN_OBDII_LMO_01_Config.mo_ptr->can_identifier = 0x7e7;
 800b4e6:	4b73      	ldr	r3, [pc, #460]	; (800b6b4 <main+0x220>)
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	6853      	ldr	r3, [r2, #4]
 800b4ec:	f240 71e7 	movw	r1, #2023	; 0x7e7
 800b4f0:	f361 031c 	bfi	r3, r1, #0, #29
 800b4f4:	6053      	str	r3, [r2, #4]
	CAN_OBDII_LMO_01_Config.mo_ptr->can_id_mask = 0x7FF;
 800b4f6:	4b6f      	ldr	r3, [pc, #444]	; (800b6b4 <main+0x220>)
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	6893      	ldr	r3, [r2, #8]
 800b4fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b500:	f361 031c 	bfi	r3, r1, #0, #29
 800b504:	6093      	str	r3, [r2, #8]
	CAN_OBDII_LMO_01_Config.mo_ptr->can_data_length=8;
 800b506:	4b6b      	ldr	r3, [pc, #428]	; (800b6b4 <main+0x220>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2208      	movs	r2, #8
 800b50c:	731a      	strb	r2, [r3, #12]
	CAN_NODE_MO_Init(&CAN_OBDII_LMO_01_Config);
 800b50e:	4869      	ldr	r0, [pc, #420]	; (800b6b4 <main+0x220>)
 800b510:	f7fe fc1c 	bl	8009d4c <CAN_NODE_MO_Init>
	for(erhan=0; erhan<10; erhan++)
 800b514:	2300      	movs	r3, #0
 800b516:	71fb      	strb	r3, [r7, #7]
 800b518:	e014      	b.n	800b544 <main+0xb0>
	{
		CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,flowControl);
 800b51a:	4866      	ldr	r0, [pc, #408]	; (800b6b4 <main+0x220>)
 800b51c:	4966      	ldr	r1, [pc, #408]	; (800b6b8 <main+0x224>)
 800b51e:	f7fe fc65 	bl	8009dec <CAN_NODE_MO_UpdateData>
		CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
 800b522:	4864      	ldr	r0, [pc, #400]	; (800b6b4 <main+0x220>)
 800b524:	f7fe fc3e 	bl	8009da4 <CAN_NODE_MO_Transmit>
		for(erhan2=0; erhan2<65000; erhan2++);
 800b528:	2300      	movs	r3, #0
 800b52a:	80bb      	strh	r3, [r7, #4]
 800b52c:	e002      	b.n	800b534 <main+0xa0>
 800b52e:	88bb      	ldrh	r3, [r7, #4]
 800b530:	3301      	adds	r3, #1
 800b532:	80bb      	strh	r3, [r7, #4]
 800b534:	88bb      	ldrh	r3, [r7, #4]
 800b536:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d9f7      	bls.n	800b52e <main+0x9a>
	onProcess = 1;
	CAN_OBDII_LMO_01_Config.mo_ptr->can_identifier = 0x7e7;
	CAN_OBDII_LMO_01_Config.mo_ptr->can_id_mask = 0x7FF;
	CAN_OBDII_LMO_01_Config.mo_ptr->can_data_length=8;
	CAN_NODE_MO_Init(&CAN_OBDII_LMO_01_Config);
	for(erhan=0; erhan<10; erhan++)
 800b53e:	79fb      	ldrb	r3, [r7, #7]
 800b540:	3301      	adds	r3, #1
 800b542:	71fb      	strb	r3, [r7, #7]
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	2b09      	cmp	r3, #9
 800b548:	d9e7      	bls.n	800b51a <main+0x86>
	{
		CAN_NODE_MO_UpdateData(&CAN_OBDII_LMO_01_Config,flowControl);
		CAN_NODE_MO_Transmit(&CAN_OBDII_LMO_01_Config);
		for(erhan2=0; erhan2<65000; erhan2++);
	}
	onProcess = 0;
 800b54a:	4b59      	ldr	r3, [pc, #356]	; (800b6b0 <main+0x21c>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	701a      	strb	r2, [r3, #0]
	LCDCursorXY(0, 0);
 800b550:	2000      	movs	r0, #0
 800b552:	2100      	movs	r1, #0
 800b554:	f7fe fe44 	bl	800a1e0 <LCDCursorXY>
	LCDWriteString("Initialized...");
 800b558:	4858      	ldr	r0, [pc, #352]	; (800b6bc <main+0x228>)
 800b55a:	f7fe fe7d 	bl	800a258 <LCDWriteString>
	smartdata.velocitiy=0;
 800b55e:	4b58      	ldr	r3, [pc, #352]	; (800b6c0 <main+0x22c>)
 800b560:	2200      	movs	r2, #0
 800b562:	801a      	strh	r2, [r3, #0]
	smartdata.battAmp=0;
 800b564:	4b56      	ldr	r3, [pc, #344]	; (800b6c0 <main+0x22c>)
 800b566:	f04f 0200 	mov.w	r2, #0
 800b56a:	605a      	str	r2, [r3, #4]
	smartdata.battVolt = 0;
 800b56c:	4b54      	ldr	r3, [pc, #336]	; (800b6c0 <main+0x22c>)
 800b56e:	f04f 0200 	mov.w	r2, #0
 800b572:	609a      	str	r2, [r3, #8]
	smartdata.battEnergy=0;
 800b574:	4b52      	ldr	r3, [pc, #328]	; (800b6c0 <main+0x22c>)
 800b576:	f04f 0200 	mov.w	r2, #0
 800b57a:	611a      	str	r2, [r3, #16]
	smartdata.battPower=0;
 800b57c:	4b50      	ldr	r3, [pc, #320]	; (800b6c0 <main+0x22c>)
 800b57e:	f04f 0200 	mov.w	r2, #0
 800b582:	60da      	str	r2, [r3, #12]
	dataUpdated=0;
 800b584:	4b4f      	ldr	r3, [pc, #316]	; (800b6c4 <main+0x230>)
 800b586:	2200      	movs	r2, #0
 800b588:	701a      	strb	r2, [r3, #0]
	setTimeMenu = 0;
 800b58a:	4b4f      	ldr	r3, [pc, #316]	; (800b6c8 <main+0x234>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	701a      	strb	r2, [r3, #0]
	writeToEndOfFile(&FatFs, &Fil,"erhan.txt", "first of all Special thanks to Erhan YILMAZ!!!\r\n",sizeof("first of all special thanks to Erhan YILMAZ!!!\r\n"));
 800b590:	2331      	movs	r3, #49	; 0x31
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	484d      	ldr	r0, [pc, #308]	; (800b6cc <main+0x238>)
 800b596:	494e      	ldr	r1, [pc, #312]	; (800b6d0 <main+0x23c>)
 800b598:	4a4e      	ldr	r2, [pc, #312]	; (800b6d4 <main+0x240>)
 800b59a:	4b4f      	ldr	r3, [pc, #316]	; (800b6d8 <main+0x244>)
 800b59c:	f7ff fa2e 	bl	800a9fc <writeToEndOfFile>

	UpdateLCD();
 800b5a0:	f7ff fa68 	bl	800aa74 <UpdateLCD>
	while(1U)
	{
		if(dataUpdated)
 800b5a4:	4b47      	ldr	r3, [pc, #284]	; (800b6c4 <main+0x230>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d028      	beq.n	800b5fe <main+0x16a>
		{
			smartdata.battPower = (smartdata.battVolt * smartdata.battAmp)/1000.0;
 800b5ac:	4b44      	ldr	r3, [pc, #272]	; (800b6c0 <main+0x22c>)
 800b5ae:	ed93 7a02 	vldr	s14, [r3, #8]
 800b5b2:	4b43      	ldr	r3, [pc, #268]	; (800b6c0 <main+0x22c>)
 800b5b4:	edd3 7a01 	vldr	s15, [r3, #4]
 800b5b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5bc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800b6dc <main+0x248>
 800b5c0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800b5c4:	4b3e      	ldr	r3, [pc, #248]	; (800b6c0 <main+0x22c>)
 800b5c6:	edc3 7a03 	vstr	s15, [r3, #12]
			smartdata.battEnergy = smartdata.battEnergy + (smartdata.battPower/3600.0f);
 800b5ca:	4b3d      	ldr	r3, [pc, #244]	; (800b6c0 <main+0x22c>)
 800b5cc:	ed93 7a04 	vldr	s14, [r3, #16]
 800b5d0:	4b3b      	ldr	r3, [pc, #236]	; (800b6c0 <main+0x22c>)
 800b5d2:	edd3 7a03 	vldr	s15, [r3, #12]
 800b5d6:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b6e0 <main+0x24c>
 800b5da:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 800b5de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5e2:	4b37      	ldr	r3, [pc, #220]	; (800b6c0 <main+0x22c>)
 800b5e4:	edc3 7a04 	vstr	s15, [r3, #16]
			UpdateSDCard();
 800b5e8:	f7ff fb22 	bl	800ac30 <UpdateSDCard>
			if(!setTimeOnProcces)
 800b5ec:	4b3d      	ldr	r3, [pc, #244]	; (800b6e4 <main+0x250>)
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <main+0x164>
			{
				UpdateLCD();
 800b5f4:	f7ff fa3e 	bl	800aa74 <UpdateLCD>
			}
			dataUpdated = 0;
 800b5f8:	4b32      	ldr	r3, [pc, #200]	; (800b6c4 <main+0x230>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	701a      	strb	r2, [r3, #0]
		}

		if(!XMC_GPIO_GetInput(BUTTON1))
 800b5fe:	482a      	ldr	r0, [pc, #168]	; (800b6a8 <main+0x214>)
 800b600:	210e      	movs	r1, #14
 800b602:	f7fe fe79 	bl	800a2f8 <XMC_GPIO_GetInput>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d128      	bne.n	800b65e <main+0x1ca>
		{
			for(erhan2=0; erhan2<50000;erhan2++);
 800b60c:	2300      	movs	r3, #0
 800b60e:	80bb      	strh	r3, [r7, #4]
 800b610:	e002      	b.n	800b618 <main+0x184>
 800b612:	88bb      	ldrh	r3, [r7, #4]
 800b614:	3301      	adds	r3, #1
 800b616:	80bb      	strh	r3, [r7, #4]
 800b618:	88bb      	ldrh	r3, [r7, #4]
 800b61a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800b61e:	4293      	cmp	r3, r2
 800b620:	d9f7      	bls.n	800b612 <main+0x17e>
			while(!XMC_GPIO_GetInput(BUTTON1));
 800b622:	bf00      	nop
 800b624:	4820      	ldr	r0, [pc, #128]	; (800b6a8 <main+0x214>)
 800b626:	210e      	movs	r1, #14
 800b628:	f7fe fe66 	bl	800a2f8 <XMC_GPIO_GetInput>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d0f8      	beq.n	800b624 <main+0x190>
			setTimeMenu++;
 800b632:	4b25      	ldr	r3, [pc, #148]	; (800b6c8 <main+0x234>)
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	3301      	adds	r3, #1
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	4b23      	ldr	r3, [pc, #140]	; (800b6c8 <main+0x234>)
 800b63c:	701a      	strb	r2, [r3, #0]
			setTimeMenu = setTimeMenu % SET_TIME_MENU_ITEMS_COUNT;
 800b63e:	4b22      	ldr	r3, [pc, #136]	; (800b6c8 <main+0x234>)
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	b2da      	uxtb	r2, r3
 800b648:	4b1f      	ldr	r3, [pc, #124]	; (800b6c8 <main+0x234>)
 800b64a:	701a      	strb	r2, [r3, #0]
			if(setTimeMenu)
 800b64c:	4b1e      	ldr	r3, [pc, #120]	; (800b6c8 <main+0x234>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d004      	beq.n	800b65e <main+0x1ca>
			{
				setTimeOnProcces = 1;
 800b654:	4b23      	ldr	r3, [pc, #140]	; (800b6e4 <main+0x250>)
 800b656:	2201      	movs	r2, #1
 800b658:	701a      	strb	r2, [r3, #0]
				setTimer();
 800b65a:	f7ff fc2f 	bl	800aebc <setTimer>
			}
		}

		if(!XMC_GPIO_GetInput(BUTTON2))
 800b65e:	4812      	ldr	r0, [pc, #72]	; (800b6a8 <main+0x214>)
 800b660:	210f      	movs	r1, #15
 800b662:	f7fe fe49 	bl	800a2f8 <XMC_GPIO_GetInput>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d11b      	bne.n	800b6a4 <main+0x210>
		{
			for(erhan2=0; erhan2<50000;erhan2++);
 800b66c:	2300      	movs	r3, #0
 800b66e:	80bb      	strh	r3, [r7, #4]
 800b670:	e002      	b.n	800b678 <main+0x1e4>
 800b672:	88bb      	ldrh	r3, [r7, #4]
 800b674:	3301      	adds	r3, #1
 800b676:	80bb      	strh	r3, [r7, #4]
 800b678:	88bb      	ldrh	r3, [r7, #4]
 800b67a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800b67e:	4293      	cmp	r3, r2
 800b680:	d9f7      	bls.n	800b672 <main+0x1de>
			while(!XMC_GPIO_GetInput(BUTTON2));
 800b682:	bf00      	nop
 800b684:	4808      	ldr	r0, [pc, #32]	; (800b6a8 <main+0x214>)
 800b686:	210f      	movs	r1, #15
 800b688:	f7fe fe36 	bl	800a2f8 <XMC_GPIO_GetInput>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d0f8      	beq.n	800b684 <main+0x1f0>
			if(setTimeMenu)
 800b692:	4b0d      	ldr	r3, [pc, #52]	; (800b6c8 <main+0x234>)
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d004      	beq.n	800b6a4 <main+0x210>
			{
				button2Pressed = 1;
 800b69a:	4b13      	ldr	r3, [pc, #76]	; (800b6e8 <main+0x254>)
 800b69c:	2201      	movs	r2, #1
 800b69e:	701a      	strb	r2, [r3, #0]
				setTimer();
 800b6a0:	f7ff fc0c 	bl	800aebc <setTimer>
			}
		}

	}
 800b6a4:	e77e      	b.n	800b5a4 <main+0x110>
 800b6a6:	bf00      	nop
 800b6a8:	48028100 	.word	0x48028100
 800b6ac:	080103b8 	.word	0x080103b8
 800b6b0:	2000049c 	.word	0x2000049c
 800b6b4:	080101f8 	.word	0x080101f8
 800b6b8:	20000168 	.word	0x20000168
 800b6bc:	080103c8 	.word	0x080103c8
 800b6c0:	20000814 	.word	0x20000814
 800b6c4:	2000048c 	.word	0x2000048c
 800b6c8:	20000495 	.word	0x20000495
 800b6cc:	200005cc 	.word	0x200005cc
 800b6d0:	20000948 	.word	0x20000948
 800b6d4:	080103d8 	.word	0x080103d8
 800b6d8:	080103e4 	.word	0x080103e4
 800b6dc:	447a0000 	.word	0x447a0000
 800b6e0:	45610000 	.word	0x45610000
 800b6e4:	20000494 	.word	0x20000494
 800b6e8:	20000496 	.word	0x20000496

0800b6ec <__aeabi_drsub>:
 800b6ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800b6f0:	e002      	b.n	800b6f8 <__adddf3>
 800b6f2:	bf00      	nop

0800b6f4 <__aeabi_dsub>:
 800b6f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800b6f8 <__adddf3>:
 800b6f8:	b530      	push	{r4, r5, lr}
 800b6fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800b6fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800b702:	ea94 0f05 	teq	r4, r5
 800b706:	bf08      	it	eq
 800b708:	ea90 0f02 	teqeq	r0, r2
 800b70c:	bf1f      	itttt	ne
 800b70e:	ea54 0c00 	orrsne.w	ip, r4, r0
 800b712:	ea55 0c02 	orrsne.w	ip, r5, r2
 800b716:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800b71a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b71e:	f000 80e2 	beq.w	800b8e6 <__adddf3+0x1ee>
 800b722:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800b726:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800b72a:	bfb8      	it	lt
 800b72c:	426d      	neglt	r5, r5
 800b72e:	dd0c      	ble.n	800b74a <__adddf3+0x52>
 800b730:	442c      	add	r4, r5
 800b732:	ea80 0202 	eor.w	r2, r0, r2
 800b736:	ea81 0303 	eor.w	r3, r1, r3
 800b73a:	ea82 0000 	eor.w	r0, r2, r0
 800b73e:	ea83 0101 	eor.w	r1, r3, r1
 800b742:	ea80 0202 	eor.w	r2, r0, r2
 800b746:	ea81 0303 	eor.w	r3, r1, r3
 800b74a:	2d36      	cmp	r5, #54	; 0x36
 800b74c:	bf88      	it	hi
 800b74e:	bd30      	pophi	{r4, r5, pc}
 800b750:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800b754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b758:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800b75c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800b760:	d002      	beq.n	800b768 <__adddf3+0x70>
 800b762:	4240      	negs	r0, r0
 800b764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b768:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800b76c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b770:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800b774:	d002      	beq.n	800b77c <__adddf3+0x84>
 800b776:	4252      	negs	r2, r2
 800b778:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800b77c:	ea94 0f05 	teq	r4, r5
 800b780:	f000 80a7 	beq.w	800b8d2 <__adddf3+0x1da>
 800b784:	f1a4 0401 	sub.w	r4, r4, #1
 800b788:	f1d5 0e20 	rsbs	lr, r5, #32
 800b78c:	db0d      	blt.n	800b7aa <__adddf3+0xb2>
 800b78e:	fa02 fc0e 	lsl.w	ip, r2, lr
 800b792:	fa22 f205 	lsr.w	r2, r2, r5
 800b796:	1880      	adds	r0, r0, r2
 800b798:	f141 0100 	adc.w	r1, r1, #0
 800b79c:	fa03 f20e 	lsl.w	r2, r3, lr
 800b7a0:	1880      	adds	r0, r0, r2
 800b7a2:	fa43 f305 	asr.w	r3, r3, r5
 800b7a6:	4159      	adcs	r1, r3
 800b7a8:	e00e      	b.n	800b7c8 <__adddf3+0xd0>
 800b7aa:	f1a5 0520 	sub.w	r5, r5, #32
 800b7ae:	f10e 0e20 	add.w	lr, lr, #32
 800b7b2:	2a01      	cmp	r2, #1
 800b7b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 800b7b8:	bf28      	it	cs
 800b7ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 800b7be:	fa43 f305 	asr.w	r3, r3, r5
 800b7c2:	18c0      	adds	r0, r0, r3
 800b7c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800b7c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b7cc:	d507      	bpl.n	800b7de <__adddf3+0xe6>
 800b7ce:	f04f 0e00 	mov.w	lr, #0
 800b7d2:	f1dc 0c00 	rsbs	ip, ip, #0
 800b7d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 800b7da:	eb6e 0101 	sbc.w	r1, lr, r1
 800b7de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b7e2:	d31b      	bcc.n	800b81c <__adddf3+0x124>
 800b7e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b7e8:	d30c      	bcc.n	800b804 <__adddf3+0x10c>
 800b7ea:	0849      	lsrs	r1, r1, #1
 800b7ec:	ea5f 0030 	movs.w	r0, r0, rrx
 800b7f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800b7f4:	f104 0401 	add.w	r4, r4, #1
 800b7f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800b7fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800b800:	f080 809a 	bcs.w	800b938 <__adddf3+0x240>
 800b804:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800b808:	bf08      	it	eq
 800b80a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b80e:	f150 0000 	adcs.w	r0, r0, #0
 800b812:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b816:	ea41 0105 	orr.w	r1, r1, r5
 800b81a:	bd30      	pop	{r4, r5, pc}
 800b81c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800b820:	4140      	adcs	r0, r0
 800b822:	eb41 0101 	adc.w	r1, r1, r1
 800b826:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b82a:	f1a4 0401 	sub.w	r4, r4, #1
 800b82e:	d1e9      	bne.n	800b804 <__adddf3+0x10c>
 800b830:	f091 0f00 	teq	r1, #0
 800b834:	bf04      	itt	eq
 800b836:	4601      	moveq	r1, r0
 800b838:	2000      	moveq	r0, #0
 800b83a:	fab1 f381 	clz	r3, r1
 800b83e:	bf08      	it	eq
 800b840:	3320      	addeq	r3, #32
 800b842:	f1a3 030b 	sub.w	r3, r3, #11
 800b846:	f1b3 0220 	subs.w	r2, r3, #32
 800b84a:	da0c      	bge.n	800b866 <__adddf3+0x16e>
 800b84c:	320c      	adds	r2, #12
 800b84e:	dd08      	ble.n	800b862 <__adddf3+0x16a>
 800b850:	f102 0c14 	add.w	ip, r2, #20
 800b854:	f1c2 020c 	rsb	r2, r2, #12
 800b858:	fa01 f00c 	lsl.w	r0, r1, ip
 800b85c:	fa21 f102 	lsr.w	r1, r1, r2
 800b860:	e00c      	b.n	800b87c <__adddf3+0x184>
 800b862:	f102 0214 	add.w	r2, r2, #20
 800b866:	bfd8      	it	le
 800b868:	f1c2 0c20 	rsble	ip, r2, #32
 800b86c:	fa01 f102 	lsl.w	r1, r1, r2
 800b870:	fa20 fc0c 	lsr.w	ip, r0, ip
 800b874:	bfdc      	itt	le
 800b876:	ea41 010c 	orrle.w	r1, r1, ip
 800b87a:	4090      	lslle	r0, r2
 800b87c:	1ae4      	subs	r4, r4, r3
 800b87e:	bfa2      	ittt	ge
 800b880:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800b884:	4329      	orrge	r1, r5
 800b886:	bd30      	popge	{r4, r5, pc}
 800b888:	ea6f 0404 	mvn.w	r4, r4
 800b88c:	3c1f      	subs	r4, #31
 800b88e:	da1c      	bge.n	800b8ca <__adddf3+0x1d2>
 800b890:	340c      	adds	r4, #12
 800b892:	dc0e      	bgt.n	800b8b2 <__adddf3+0x1ba>
 800b894:	f104 0414 	add.w	r4, r4, #20
 800b898:	f1c4 0220 	rsb	r2, r4, #32
 800b89c:	fa20 f004 	lsr.w	r0, r0, r4
 800b8a0:	fa01 f302 	lsl.w	r3, r1, r2
 800b8a4:	ea40 0003 	orr.w	r0, r0, r3
 800b8a8:	fa21 f304 	lsr.w	r3, r1, r4
 800b8ac:	ea45 0103 	orr.w	r1, r5, r3
 800b8b0:	bd30      	pop	{r4, r5, pc}
 800b8b2:	f1c4 040c 	rsb	r4, r4, #12
 800b8b6:	f1c4 0220 	rsb	r2, r4, #32
 800b8ba:	fa20 f002 	lsr.w	r0, r0, r2
 800b8be:	fa01 f304 	lsl.w	r3, r1, r4
 800b8c2:	ea40 0003 	orr.w	r0, r0, r3
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	bd30      	pop	{r4, r5, pc}
 800b8ca:	fa21 f004 	lsr.w	r0, r1, r4
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	bd30      	pop	{r4, r5, pc}
 800b8d2:	f094 0f00 	teq	r4, #0
 800b8d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800b8da:	bf06      	itte	eq
 800b8dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800b8e0:	3401      	addeq	r4, #1
 800b8e2:	3d01      	subne	r5, #1
 800b8e4:	e74e      	b.n	800b784 <__adddf3+0x8c>
 800b8e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b8ea:	bf18      	it	ne
 800b8ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b8f0:	d029      	beq.n	800b946 <__adddf3+0x24e>
 800b8f2:	ea94 0f05 	teq	r4, r5
 800b8f6:	bf08      	it	eq
 800b8f8:	ea90 0f02 	teqeq	r0, r2
 800b8fc:	d005      	beq.n	800b90a <__adddf3+0x212>
 800b8fe:	ea54 0c00 	orrs.w	ip, r4, r0
 800b902:	bf04      	itt	eq
 800b904:	4619      	moveq	r1, r3
 800b906:	4610      	moveq	r0, r2
 800b908:	bd30      	pop	{r4, r5, pc}
 800b90a:	ea91 0f03 	teq	r1, r3
 800b90e:	bf1e      	ittt	ne
 800b910:	2100      	movne	r1, #0
 800b912:	2000      	movne	r0, #0
 800b914:	bd30      	popne	{r4, r5, pc}
 800b916:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800b91a:	d105      	bne.n	800b928 <__adddf3+0x230>
 800b91c:	0040      	lsls	r0, r0, #1
 800b91e:	4149      	adcs	r1, r1
 800b920:	bf28      	it	cs
 800b922:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800b926:	bd30      	pop	{r4, r5, pc}
 800b928:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800b92c:	bf3c      	itt	cc
 800b92e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800b932:	bd30      	popcc	{r4, r5, pc}
 800b934:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b938:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800b93c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b940:	f04f 0000 	mov.w	r0, #0
 800b944:	bd30      	pop	{r4, r5, pc}
 800b946:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b94a:	bf1a      	itte	ne
 800b94c:	4619      	movne	r1, r3
 800b94e:	4610      	movne	r0, r2
 800b950:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800b954:	bf1c      	itt	ne
 800b956:	460b      	movne	r3, r1
 800b958:	4602      	movne	r2, r0
 800b95a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800b95e:	bf06      	itte	eq
 800b960:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800b964:	ea91 0f03 	teqeq	r1, r3
 800b968:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800b96c:	bd30      	pop	{r4, r5, pc}
 800b96e:	bf00      	nop

0800b970 <__aeabi_ui2d>:
 800b970:	f090 0f00 	teq	r0, #0
 800b974:	bf04      	itt	eq
 800b976:	2100      	moveq	r1, #0
 800b978:	4770      	bxeq	lr
 800b97a:	b530      	push	{r4, r5, lr}
 800b97c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b980:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b984:	f04f 0500 	mov.w	r5, #0
 800b988:	f04f 0100 	mov.w	r1, #0
 800b98c:	e750      	b.n	800b830 <__adddf3+0x138>
 800b98e:	bf00      	nop

0800b990 <__aeabi_i2d>:
 800b990:	f090 0f00 	teq	r0, #0
 800b994:	bf04      	itt	eq
 800b996:	2100      	moveq	r1, #0
 800b998:	4770      	bxeq	lr
 800b99a:	b530      	push	{r4, r5, lr}
 800b99c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b9a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b9a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800b9a8:	bf48      	it	mi
 800b9aa:	4240      	negmi	r0, r0
 800b9ac:	f04f 0100 	mov.w	r1, #0
 800b9b0:	e73e      	b.n	800b830 <__adddf3+0x138>
 800b9b2:	bf00      	nop

0800b9b4 <__aeabi_f2d>:
 800b9b4:	0042      	lsls	r2, r0, #1
 800b9b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800b9ba:	ea4f 0131 	mov.w	r1, r1, rrx
 800b9be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800b9c2:	bf1f      	itttt	ne
 800b9c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800b9c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b9cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800b9d0:	4770      	bxne	lr
 800b9d2:	f092 0f00 	teq	r2, #0
 800b9d6:	bf14      	ite	ne
 800b9d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b9dc:	4770      	bxeq	lr
 800b9de:	b530      	push	{r4, r5, lr}
 800b9e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 800b9e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b9e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b9ec:	e720      	b.n	800b830 <__adddf3+0x138>
 800b9ee:	bf00      	nop

0800b9f0 <__aeabi_ul2d>:
 800b9f0:	ea50 0201 	orrs.w	r2, r0, r1
 800b9f4:	bf08      	it	eq
 800b9f6:	4770      	bxeq	lr
 800b9f8:	b530      	push	{r4, r5, lr}
 800b9fa:	f04f 0500 	mov.w	r5, #0
 800b9fe:	e00a      	b.n	800ba16 <__aeabi_l2d+0x16>

0800ba00 <__aeabi_l2d>:
 800ba00:	ea50 0201 	orrs.w	r2, r0, r1
 800ba04:	bf08      	it	eq
 800ba06:	4770      	bxeq	lr
 800ba08:	b530      	push	{r4, r5, lr}
 800ba0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800ba0e:	d502      	bpl.n	800ba16 <__aeabi_l2d+0x16>
 800ba10:	4240      	negs	r0, r0
 800ba12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ba16:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ba1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ba1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800ba22:	f43f aedc 	beq.w	800b7de <__adddf3+0xe6>
 800ba26:	f04f 0203 	mov.w	r2, #3
 800ba2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ba2e:	bf18      	it	ne
 800ba30:	3203      	addne	r2, #3
 800ba32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ba36:	bf18      	it	ne
 800ba38:	3203      	addne	r2, #3
 800ba3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800ba3e:	f1c2 0320 	rsb	r3, r2, #32
 800ba42:	fa00 fc03 	lsl.w	ip, r0, r3
 800ba46:	fa20 f002 	lsr.w	r0, r0, r2
 800ba4a:	fa01 fe03 	lsl.w	lr, r1, r3
 800ba4e:	ea40 000e 	orr.w	r0, r0, lr
 800ba52:	fa21 f102 	lsr.w	r1, r1, r2
 800ba56:	4414      	add	r4, r2
 800ba58:	e6c1      	b.n	800b7de <__adddf3+0xe6>
 800ba5a:	bf00      	nop

0800ba5c <__aeabi_dmul>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ba62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ba66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ba6a:	bf1d      	ittte	ne
 800ba6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ba70:	ea94 0f0c 	teqne	r4, ip
 800ba74:	ea95 0f0c 	teqne	r5, ip
 800ba78:	f000 f8de 	bleq	800bc38 <__aeabi_dmul+0x1dc>
 800ba7c:	442c      	add	r4, r5
 800ba7e:	ea81 0603 	eor.w	r6, r1, r3
 800ba82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800ba86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800ba8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800ba8e:	bf18      	it	ne
 800ba90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800ba94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ba98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba9c:	d038      	beq.n	800bb10 <__aeabi_dmul+0xb4>
 800ba9e:	fba0 ce02 	umull	ip, lr, r0, r2
 800baa2:	f04f 0500 	mov.w	r5, #0
 800baa6:	fbe1 e502 	umlal	lr, r5, r1, r2
 800baaa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800baae:	fbe0 e503 	umlal	lr, r5, r0, r3
 800bab2:	f04f 0600 	mov.w	r6, #0
 800bab6:	fbe1 5603 	umlal	r5, r6, r1, r3
 800baba:	f09c 0f00 	teq	ip, #0
 800babe:	bf18      	it	ne
 800bac0:	f04e 0e01 	orrne.w	lr, lr, #1
 800bac4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800bac8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800bacc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800bad0:	d204      	bcs.n	800badc <__aeabi_dmul+0x80>
 800bad2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800bad6:	416d      	adcs	r5, r5
 800bad8:	eb46 0606 	adc.w	r6, r6, r6
 800badc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800bae0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800bae4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800bae8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800baec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800baf0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800baf4:	bf88      	it	hi
 800baf6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800bafa:	d81e      	bhi.n	800bb3a <__aeabi_dmul+0xde>
 800bafc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800bb00:	bf08      	it	eq
 800bb02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800bb06:	f150 0000 	adcs.w	r0, r0, #0
 800bb0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800bb14:	ea46 0101 	orr.w	r1, r6, r1
 800bb18:	ea40 0002 	orr.w	r0, r0, r2
 800bb1c:	ea81 0103 	eor.w	r1, r1, r3
 800bb20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800bb24:	bfc2      	ittt	gt
 800bb26:	ebd4 050c 	rsbsgt	r5, r4, ip
 800bb2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800bb2e:	bd70      	popgt	{r4, r5, r6, pc}
 800bb30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bb34:	f04f 0e00 	mov.w	lr, #0
 800bb38:	3c01      	subs	r4, #1
 800bb3a:	f300 80ab 	bgt.w	800bc94 <__aeabi_dmul+0x238>
 800bb3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800bb42:	bfde      	ittt	le
 800bb44:	2000      	movle	r0, #0
 800bb46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800bb4a:	bd70      	pople	{r4, r5, r6, pc}
 800bb4c:	f1c4 0400 	rsb	r4, r4, #0
 800bb50:	3c20      	subs	r4, #32
 800bb52:	da35      	bge.n	800bbc0 <__aeabi_dmul+0x164>
 800bb54:	340c      	adds	r4, #12
 800bb56:	dc1b      	bgt.n	800bb90 <__aeabi_dmul+0x134>
 800bb58:	f104 0414 	add.w	r4, r4, #20
 800bb5c:	f1c4 0520 	rsb	r5, r4, #32
 800bb60:	fa00 f305 	lsl.w	r3, r0, r5
 800bb64:	fa20 f004 	lsr.w	r0, r0, r4
 800bb68:	fa01 f205 	lsl.w	r2, r1, r5
 800bb6c:	ea40 0002 	orr.w	r0, r0, r2
 800bb70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800bb74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bb78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800bb7c:	fa21 f604 	lsr.w	r6, r1, r4
 800bb80:	eb42 0106 	adc.w	r1, r2, r6
 800bb84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bb88:	bf08      	it	eq
 800bb8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}
 800bb90:	f1c4 040c 	rsb	r4, r4, #12
 800bb94:	f1c4 0520 	rsb	r5, r4, #32
 800bb98:	fa00 f304 	lsl.w	r3, r0, r4
 800bb9c:	fa20 f005 	lsr.w	r0, r0, r5
 800bba0:	fa01 f204 	lsl.w	r2, r1, r4
 800bba4:	ea40 0002 	orr.w	r0, r0, r2
 800bba8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bbac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800bbb0:	f141 0100 	adc.w	r1, r1, #0
 800bbb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bbb8:	bf08      	it	eq
 800bbba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}
 800bbc0:	f1c4 0520 	rsb	r5, r4, #32
 800bbc4:	fa00 f205 	lsl.w	r2, r0, r5
 800bbc8:	ea4e 0e02 	orr.w	lr, lr, r2
 800bbcc:	fa20 f304 	lsr.w	r3, r0, r4
 800bbd0:	fa01 f205 	lsl.w	r2, r1, r5
 800bbd4:	ea43 0302 	orr.w	r3, r3, r2
 800bbd8:	fa21 f004 	lsr.w	r0, r1, r4
 800bbdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bbe0:	fa21 f204 	lsr.w	r2, r1, r4
 800bbe4:	ea20 0002 	bic.w	r0, r0, r2
 800bbe8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800bbec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bbf0:	bf08      	it	eq
 800bbf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bbf6:	bd70      	pop	{r4, r5, r6, pc}
 800bbf8:	f094 0f00 	teq	r4, #0
 800bbfc:	d10f      	bne.n	800bc1e <__aeabi_dmul+0x1c2>
 800bbfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800bc02:	0040      	lsls	r0, r0, #1
 800bc04:	eb41 0101 	adc.w	r1, r1, r1
 800bc08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bc0c:	bf08      	it	eq
 800bc0e:	3c01      	subeq	r4, #1
 800bc10:	d0f7      	beq.n	800bc02 <__aeabi_dmul+0x1a6>
 800bc12:	ea41 0106 	orr.w	r1, r1, r6
 800bc16:	f095 0f00 	teq	r5, #0
 800bc1a:	bf18      	it	ne
 800bc1c:	4770      	bxne	lr
 800bc1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800bc22:	0052      	lsls	r2, r2, #1
 800bc24:	eb43 0303 	adc.w	r3, r3, r3
 800bc28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800bc2c:	bf08      	it	eq
 800bc2e:	3d01      	subeq	r5, #1
 800bc30:	d0f7      	beq.n	800bc22 <__aeabi_dmul+0x1c6>
 800bc32:	ea43 0306 	orr.w	r3, r3, r6
 800bc36:	4770      	bx	lr
 800bc38:	ea94 0f0c 	teq	r4, ip
 800bc3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800bc40:	bf18      	it	ne
 800bc42:	ea95 0f0c 	teqne	r5, ip
 800bc46:	d00c      	beq.n	800bc62 <__aeabi_dmul+0x206>
 800bc48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800bc4c:	bf18      	it	ne
 800bc4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800bc52:	d1d1      	bne.n	800bbf8 <__aeabi_dmul+0x19c>
 800bc54:	ea81 0103 	eor.w	r1, r1, r3
 800bc58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bc5c:	f04f 0000 	mov.w	r0, #0
 800bc60:	bd70      	pop	{r4, r5, r6, pc}
 800bc62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800bc66:	bf06      	itte	eq
 800bc68:	4610      	moveq	r0, r2
 800bc6a:	4619      	moveq	r1, r3
 800bc6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800bc70:	d019      	beq.n	800bca6 <__aeabi_dmul+0x24a>
 800bc72:	ea94 0f0c 	teq	r4, ip
 800bc76:	d102      	bne.n	800bc7e <__aeabi_dmul+0x222>
 800bc78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800bc7c:	d113      	bne.n	800bca6 <__aeabi_dmul+0x24a>
 800bc7e:	ea95 0f0c 	teq	r5, ip
 800bc82:	d105      	bne.n	800bc90 <__aeabi_dmul+0x234>
 800bc84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800bc88:	bf1c      	itt	ne
 800bc8a:	4610      	movne	r0, r2
 800bc8c:	4619      	movne	r1, r3
 800bc8e:	d10a      	bne.n	800bca6 <__aeabi_dmul+0x24a>
 800bc90:	ea81 0103 	eor.w	r1, r1, r3
 800bc94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bc98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800bc9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bca0:	f04f 0000 	mov.w	r0, #0
 800bca4:	bd70      	pop	{r4, r5, r6, pc}
 800bca6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800bcaa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800bcae:	bd70      	pop	{r4, r5, r6, pc}

0800bcb0 <__aeabi_ddiv>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800bcb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800bcba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800bcbe:	bf1d      	ittte	ne
 800bcc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800bcc4:	ea94 0f0c 	teqne	r4, ip
 800bcc8:	ea95 0f0c 	teqne	r5, ip
 800bccc:	f000 f8a7 	bleq	800be1e <__aeabi_ddiv+0x16e>
 800bcd0:	eba4 0405 	sub.w	r4, r4, r5
 800bcd4:	ea81 0e03 	eor.w	lr, r1, r3
 800bcd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800bcdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800bce0:	f000 8088 	beq.w	800bdf4 <__aeabi_ddiv+0x144>
 800bce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800bce8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800bcec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800bcf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800bcf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800bcf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800bcfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800bd00:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800bd04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800bd08:	429d      	cmp	r5, r3
 800bd0a:	bf08      	it	eq
 800bd0c:	4296      	cmpeq	r6, r2
 800bd0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800bd12:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800bd16:	d202      	bcs.n	800bd1e <__aeabi_ddiv+0x6e>
 800bd18:	085b      	lsrs	r3, r3, #1
 800bd1a:	ea4f 0232 	mov.w	r2, r2, rrx
 800bd1e:	1ab6      	subs	r6, r6, r2
 800bd20:	eb65 0503 	sbc.w	r5, r5, r3
 800bd24:	085b      	lsrs	r3, r3, #1
 800bd26:	ea4f 0232 	mov.w	r2, r2, rrx
 800bd2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bd2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800bd32:	ebb6 0e02 	subs.w	lr, r6, r2
 800bd36:	eb75 0e03 	sbcs.w	lr, r5, r3
 800bd3a:	bf22      	ittt	cs
 800bd3c:	1ab6      	subcs	r6, r6, r2
 800bd3e:	4675      	movcs	r5, lr
 800bd40:	ea40 000c 	orrcs.w	r0, r0, ip
 800bd44:	085b      	lsrs	r3, r3, #1
 800bd46:	ea4f 0232 	mov.w	r2, r2, rrx
 800bd4a:	ebb6 0e02 	subs.w	lr, r6, r2
 800bd4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800bd52:	bf22      	ittt	cs
 800bd54:	1ab6      	subcs	r6, r6, r2
 800bd56:	4675      	movcs	r5, lr
 800bd58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800bd5c:	085b      	lsrs	r3, r3, #1
 800bd5e:	ea4f 0232 	mov.w	r2, r2, rrx
 800bd62:	ebb6 0e02 	subs.w	lr, r6, r2
 800bd66:	eb75 0e03 	sbcs.w	lr, r5, r3
 800bd6a:	bf22      	ittt	cs
 800bd6c:	1ab6      	subcs	r6, r6, r2
 800bd6e:	4675      	movcs	r5, lr
 800bd70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800bd74:	085b      	lsrs	r3, r3, #1
 800bd76:	ea4f 0232 	mov.w	r2, r2, rrx
 800bd7a:	ebb6 0e02 	subs.w	lr, r6, r2
 800bd7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800bd82:	bf22      	ittt	cs
 800bd84:	1ab6      	subcs	r6, r6, r2
 800bd86:	4675      	movcs	r5, lr
 800bd88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800bd8c:	ea55 0e06 	orrs.w	lr, r5, r6
 800bd90:	d018      	beq.n	800bdc4 <__aeabi_ddiv+0x114>
 800bd92:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800bd96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800bd9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800bd9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800bda2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800bda6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800bdaa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800bdae:	d1c0      	bne.n	800bd32 <__aeabi_ddiv+0x82>
 800bdb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bdb4:	d10b      	bne.n	800bdce <__aeabi_ddiv+0x11e>
 800bdb6:	ea41 0100 	orr.w	r1, r1, r0
 800bdba:	f04f 0000 	mov.w	r0, #0
 800bdbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800bdc2:	e7b6      	b.n	800bd32 <__aeabi_ddiv+0x82>
 800bdc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bdc8:	bf04      	itt	eq
 800bdca:	4301      	orreq	r1, r0
 800bdcc:	2000      	moveq	r0, #0
 800bdce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800bdd2:	bf88      	it	hi
 800bdd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800bdd8:	f63f aeaf 	bhi.w	800bb3a <__aeabi_dmul+0xde>
 800bddc:	ebb5 0c03 	subs.w	ip, r5, r3
 800bde0:	bf04      	itt	eq
 800bde2:	ebb6 0c02 	subseq.w	ip, r6, r2
 800bde6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800bdea:	f150 0000 	adcs.w	r0, r0, #0
 800bdee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800bdf2:	bd70      	pop	{r4, r5, r6, pc}
 800bdf4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800bdf8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800bdfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800be00:	bfc2      	ittt	gt
 800be02:	ebd4 050c 	rsbsgt	r5, r4, ip
 800be06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800be0a:	bd70      	popgt	{r4, r5, r6, pc}
 800be0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800be10:	f04f 0e00 	mov.w	lr, #0
 800be14:	3c01      	subs	r4, #1
 800be16:	e690      	b.n	800bb3a <__aeabi_dmul+0xde>
 800be18:	ea45 0e06 	orr.w	lr, r5, r6
 800be1c:	e68d      	b.n	800bb3a <__aeabi_dmul+0xde>
 800be1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800be22:	ea94 0f0c 	teq	r4, ip
 800be26:	bf08      	it	eq
 800be28:	ea95 0f0c 	teqeq	r5, ip
 800be2c:	f43f af3b 	beq.w	800bca6 <__aeabi_dmul+0x24a>
 800be30:	ea94 0f0c 	teq	r4, ip
 800be34:	d10a      	bne.n	800be4c <__aeabi_ddiv+0x19c>
 800be36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800be3a:	f47f af34 	bne.w	800bca6 <__aeabi_dmul+0x24a>
 800be3e:	ea95 0f0c 	teq	r5, ip
 800be42:	f47f af25 	bne.w	800bc90 <__aeabi_dmul+0x234>
 800be46:	4610      	mov	r0, r2
 800be48:	4619      	mov	r1, r3
 800be4a:	e72c      	b.n	800bca6 <__aeabi_dmul+0x24a>
 800be4c:	ea95 0f0c 	teq	r5, ip
 800be50:	d106      	bne.n	800be60 <__aeabi_ddiv+0x1b0>
 800be52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800be56:	f43f aefd 	beq.w	800bc54 <__aeabi_dmul+0x1f8>
 800be5a:	4610      	mov	r0, r2
 800be5c:	4619      	mov	r1, r3
 800be5e:	e722      	b.n	800bca6 <__aeabi_dmul+0x24a>
 800be60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800be64:	bf18      	it	ne
 800be66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800be6a:	f47f aec5 	bne.w	800bbf8 <__aeabi_dmul+0x19c>
 800be6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800be72:	f47f af0d 	bne.w	800bc90 <__aeabi_dmul+0x234>
 800be76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800be7a:	f47f aeeb 	bne.w	800bc54 <__aeabi_dmul+0x1f8>
 800be7e:	e712      	b.n	800bca6 <__aeabi_dmul+0x24a>

0800be80 <__aeabi_d2f>:
 800be80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800be84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800be88:	bf24      	itt	cs
 800be8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800be8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800be92:	d90d      	bls.n	800beb0 <__aeabi_d2f+0x30>
 800be94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800be98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800be9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800bea0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800bea4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800bea8:	bf08      	it	eq
 800beaa:	f020 0001 	biceq.w	r0, r0, #1
 800beae:	4770      	bx	lr
 800beb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800beb4:	d121      	bne.n	800befa <__aeabi_d2f+0x7a>
 800beb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800beba:	bfbc      	itt	lt
 800bebc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800bec0:	4770      	bxlt	lr
 800bec2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bec6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800beca:	f1c2 0218 	rsb	r2, r2, #24
 800bece:	f1c2 0c20 	rsb	ip, r2, #32
 800bed2:	fa10 f30c 	lsls.w	r3, r0, ip
 800bed6:	fa20 f002 	lsr.w	r0, r0, r2
 800beda:	bf18      	it	ne
 800bedc:	f040 0001 	orrne.w	r0, r0, #1
 800bee0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800bee4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800bee8:	fa03 fc0c 	lsl.w	ip, r3, ip
 800beec:	ea40 000c 	orr.w	r0, r0, ip
 800bef0:	fa23 f302 	lsr.w	r3, r3, r2
 800bef4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bef8:	e7cc      	b.n	800be94 <__aeabi_d2f+0x14>
 800befa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800befe:	d107      	bne.n	800bf10 <__aeabi_d2f+0x90>
 800bf00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800bf04:	bf1e      	ittt	ne
 800bf06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800bf0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800bf0e:	4770      	bxne	lr
 800bf10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800bf14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800bf18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop

0800bf20 <__errno>:
 800bf20:	4b01      	ldr	r3, [pc, #4]	; (800bf28 <__errno+0x8>)
 800bf22:	6818      	ldr	r0, [r3, #0]
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	200001f0 	.word	0x200001f0

0800bf2c <__libc_init_array>:
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	4b0e      	ldr	r3, [pc, #56]	; (800bf68 <__libc_init_array+0x3c>)
 800bf30:	4c0e      	ldr	r4, [pc, #56]	; (800bf6c <__libc_init_array+0x40>)
 800bf32:	1ae4      	subs	r4, r4, r3
 800bf34:	10a4      	asrs	r4, r4, #2
 800bf36:	2500      	movs	r5, #0
 800bf38:	461e      	mov	r6, r3
 800bf3a:	42a5      	cmp	r5, r4
 800bf3c:	d004      	beq.n	800bf48 <__libc_init_array+0x1c>
 800bf3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf42:	4798      	blx	r3
 800bf44:	3501      	adds	r5, #1
 800bf46:	e7f8      	b.n	800bf3a <__libc_init_array+0xe>
 800bf48:	f7f6 f83a 	bl	8001fc0 <_init>
 800bf4c:	4c08      	ldr	r4, [pc, #32]	; (800bf70 <__libc_init_array+0x44>)
 800bf4e:	4b09      	ldr	r3, [pc, #36]	; (800bf74 <__libc_init_array+0x48>)
 800bf50:	1ae4      	subs	r4, r4, r3
 800bf52:	10a4      	asrs	r4, r4, #2
 800bf54:	2500      	movs	r5, #0
 800bf56:	461e      	mov	r6, r3
 800bf58:	42a5      	cmp	r5, r4
 800bf5a:	d004      	beq.n	800bf66 <__libc_init_array+0x3a>
 800bf5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf60:	4798      	blx	r3
 800bf62:	3501      	adds	r5, #1
 800bf64:	e7f8      	b.n	800bf58 <__libc_init_array+0x2c>
 800bf66:	bd70      	pop	{r4, r5, r6, pc}
 800bf68:	20000230 	.word	0x20000230
 800bf6c:	20000230 	.word	0x20000230
 800bf70:	20000230 	.word	0x20000230
 800bf74:	20000230 	.word	0x20000230

0800bf78 <memcpy>:
 800bf78:	b510      	push	{r4, lr}
 800bf7a:	1e43      	subs	r3, r0, #1
 800bf7c:	440a      	add	r2, r1
 800bf7e:	4291      	cmp	r1, r2
 800bf80:	d004      	beq.n	800bf8c <memcpy+0x14>
 800bf82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf8a:	e7f8      	b.n	800bf7e <memcpy+0x6>
 800bf8c:	bd10      	pop	{r4, pc}

0800bf8e <memset>:
 800bf8e:	4402      	add	r2, r0
 800bf90:	4603      	mov	r3, r0
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d002      	beq.n	800bf9c <memset+0xe>
 800bf96:	f803 1b01 	strb.w	r1, [r3], #1
 800bf9a:	e7fa      	b.n	800bf92 <memset+0x4>
 800bf9c:	4770      	bx	lr

0800bf9e <__cvt>:
 800bf9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa2:	b088      	sub	sp, #32
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bfa8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bfaa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800bfac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800bfb0:	461d      	mov	r5, r3
 800bfb2:	bfb8      	it	lt
 800bfb4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bfb8:	f027 0720 	bic.w	r7, r7, #32
 800bfbc:	bfb6      	itet	lt
 800bfbe:	461d      	movlt	r5, r3
 800bfc0:	2300      	movge	r3, #0
 800bfc2:	232d      	movlt	r3, #45	; 0x2d
 800bfc4:	4614      	mov	r4, r2
 800bfc6:	bfb8      	it	lt
 800bfc8:	4614      	movlt	r4, r2
 800bfca:	2f46      	cmp	r7, #70	; 0x46
 800bfcc:	700b      	strb	r3, [r1, #0]
 800bfce:	d003      	beq.n	800bfd8 <__cvt+0x3a>
 800bfd0:	2f45      	cmp	r7, #69	; 0x45
 800bfd2:	d103      	bne.n	800bfdc <__cvt+0x3e>
 800bfd4:	3601      	adds	r6, #1
 800bfd6:	e001      	b.n	800bfdc <__cvt+0x3e>
 800bfd8:	2303      	movs	r3, #3
 800bfda:	e000      	b.n	800bfde <__cvt+0x40>
 800bfdc:	2302      	movs	r3, #2
 800bfde:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 800bfe2:	ab06      	add	r3, sp, #24
 800bfe4:	9303      	str	r3, [sp, #12]
 800bfe6:	ab07      	add	r3, sp, #28
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	4622      	mov	r2, r4
 800bfec:	462b      	mov	r3, r5
 800bfee:	f001 fdef 	bl	800dbd0 <_dtoa_r>
 800bff2:	2f47      	cmp	r7, #71	; 0x47
 800bff4:	4680      	mov	r8, r0
 800bff6:	d102      	bne.n	800bffe <__cvt+0x60>
 800bff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bffa:	07db      	lsls	r3, r3, #31
 800bffc:	d526      	bpl.n	800c04c <__cvt+0xae>
 800bffe:	2f46      	cmp	r7, #70	; 0x46
 800c000:	eb08 0906 	add.w	r9, r8, r6
 800c004:	d111      	bne.n	800c02a <__cvt+0x8c>
 800c006:	f898 3000 	ldrb.w	r3, [r8]
 800c00a:	2b30      	cmp	r3, #48	; 0x30
 800c00c:	d10a      	bne.n	800c024 <__cvt+0x86>
 800c00e:	4620      	mov	r0, r4
 800c010:	4629      	mov	r1, r5
 800c012:	2200      	movs	r2, #0
 800c014:	2300      	movs	r3, #0
 800c016:	f003 fd7d 	bl	800fb14 <__aeabi_dcmpeq>
 800c01a:	b918      	cbnz	r0, 800c024 <__cvt+0x86>
 800c01c:	f1c6 0601 	rsb	r6, r6, #1
 800c020:	f8ca 6000 	str.w	r6, [sl]
 800c024:	f8da 3000 	ldr.w	r3, [sl]
 800c028:	4499      	add	r9, r3
 800c02a:	4620      	mov	r0, r4
 800c02c:	4629      	mov	r1, r5
 800c02e:	2200      	movs	r2, #0
 800c030:	2300      	movs	r3, #0
 800c032:	f003 fd6f 	bl	800fb14 <__aeabi_dcmpeq>
 800c036:	b108      	cbz	r0, 800c03c <__cvt+0x9e>
 800c038:	f8cd 901c 	str.w	r9, [sp, #28]
 800c03c:	9b07      	ldr	r3, [sp, #28]
 800c03e:	454b      	cmp	r3, r9
 800c040:	d204      	bcs.n	800c04c <__cvt+0xae>
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	9207      	str	r2, [sp, #28]
 800c046:	2230      	movs	r2, #48	; 0x30
 800c048:	701a      	strb	r2, [r3, #0]
 800c04a:	e7f7      	b.n	800c03c <__cvt+0x9e>
 800c04c:	9b07      	ldr	r3, [sp, #28]
 800c04e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c050:	ebc8 0303 	rsb	r3, r8, r3
 800c054:	4640      	mov	r0, r8
 800c056:	6013      	str	r3, [r2, #0]
 800c058:	b008      	add	sp, #32
 800c05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c05e <__exponent>:
 800c05e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c060:	4603      	mov	r3, r0
 800c062:	2900      	cmp	r1, #0
 800c064:	bfb8      	it	lt
 800c066:	4249      	neglt	r1, r1
 800c068:	f803 2b02 	strb.w	r2, [r3], #2
 800c06c:	bfb4      	ite	lt
 800c06e:	222d      	movlt	r2, #45	; 0x2d
 800c070:	222b      	movge	r2, #43	; 0x2b
 800c072:	2909      	cmp	r1, #9
 800c074:	7042      	strb	r2, [r0, #1]
 800c076:	dd19      	ble.n	800c0ac <__exponent+0x4e>
 800c078:	f10d 0407 	add.w	r4, sp, #7
 800c07c:	4626      	mov	r6, r4
 800c07e:	220a      	movs	r2, #10
 800c080:	fb91 f5f2 	sdiv	r5, r1, r2
 800c084:	fb02 1115 	mls	r1, r2, r5, r1
 800c088:	3130      	adds	r1, #48	; 0x30
 800c08a:	2d09      	cmp	r5, #9
 800c08c:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800c090:	4629      	mov	r1, r5
 800c092:	dcf4      	bgt.n	800c07e <__exponent+0x20>
 800c094:	3130      	adds	r1, #48	; 0x30
 800c096:	1e65      	subs	r5, r4, #1
 800c098:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c09c:	42b5      	cmp	r5, r6
 800c09e:	461a      	mov	r2, r3
 800c0a0:	d20a      	bcs.n	800c0b8 <__exponent+0x5a>
 800c0a2:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c0a6:	f803 2b01 	strb.w	r2, [r3], #1
 800c0aa:	e7f7      	b.n	800c09c <__exponent+0x3e>
 800c0ac:	2430      	movs	r4, #48	; 0x30
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	4421      	add	r1, r4
 800c0b2:	f802 4b02 	strb.w	r4, [r2], #2
 800c0b6:	7059      	strb	r1, [r3, #1]
 800c0b8:	1a10      	subs	r0, r2, r0
 800c0ba:	b002      	add	sp, #8
 800c0bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0c0 <_printf_float>:
 800c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	b091      	sub	sp, #68	; 0x44
 800c0c6:	468b      	mov	fp, r1
 800c0c8:	4615      	mov	r5, r2
 800c0ca:	461e      	mov	r6, r3
 800c0cc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	f002 fe4e 	bl	800ed70 <_localeconv_r>
 800c0d4:	f8d0 a000 	ldr.w	sl, [r0]
 800c0d8:	4650      	mov	r0, sl
 800c0da:	f000 fe14 	bl	800cd06 <strlen>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	930e      	str	r3, [sp, #56]	; 0x38
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	9009      	str	r0, [sp, #36]	; 0x24
 800c0e6:	3307      	adds	r3, #7
 800c0e8:	f023 0307 	bic.w	r3, r3, #7
 800c0ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0f0:	f103 0208 	add.w	r2, r3, #8
 800c0f4:	f89b 8018 	ldrb.w	r8, [fp, #24]
 800c0f8:	603a      	str	r2, [r7, #0]
 800c0fa:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 800c0fe:	f000 fd99 	bl	800cc34 <__fpclassifyd>
 800c102:	2801      	cmp	r0, #1
 800c104:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800c108:	d119      	bne.n	800c13e <_printf_float+0x7e>
 800c10a:	2200      	movs	r2, #0
 800c10c:	2300      	movs	r3, #0
 800c10e:	f003 fd0b 	bl	800fb28 <__aeabi_dcmplt>
 800c112:	b110      	cbz	r0, 800c11a <_printf_float+0x5a>
 800c114:	232d      	movs	r3, #45	; 0x2d
 800c116:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 800c11a:	4ba0      	ldr	r3, [pc, #640]	; (800c39c <_printf_float+0x2dc>)
 800c11c:	4fa0      	ldr	r7, [pc, #640]	; (800c3a0 <_printf_float+0x2e0>)
 800c11e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c122:	bf88      	it	hi
 800c124:	461f      	movhi	r7, r3
 800c126:	2303      	movs	r3, #3
 800c128:	f8cb 3010 	str.w	r3, [fp, #16]
 800c12c:	f8db 3000 	ldr.w	r3, [fp]
 800c130:	f023 0304 	bic.w	r3, r3, #4
 800c134:	f8cb 3000 	str.w	r3, [fp]
 800c138:	f04f 0900 	mov.w	r9, #0
 800c13c:	e0a1      	b.n	800c282 <_printf_float+0x1c2>
 800c13e:	f000 fd79 	bl	800cc34 <__fpclassifyd>
 800c142:	f8db 3000 	ldr.w	r3, [fp]
 800c146:	b948      	cbnz	r0, 800c15c <_printf_float+0x9c>
 800c148:	4a96      	ldr	r2, [pc, #600]	; (800c3a4 <_printf_float+0x2e4>)
 800c14a:	4f97      	ldr	r7, [pc, #604]	; (800c3a8 <_printf_float+0x2e8>)
 800c14c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c150:	bf88      	it	hi
 800c152:	4617      	movhi	r7, r2
 800c154:	2203      	movs	r2, #3
 800c156:	f8cb 2010 	str.w	r2, [fp, #16]
 800c15a:	e7e9      	b.n	800c130 <_printf_float+0x70>
 800c15c:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c160:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 800c164:	1c57      	adds	r7, r2, #1
 800c166:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c16a:	d101      	bne.n	800c170 <_printf_float+0xb0>
 800c16c:	2206      	movs	r2, #6
 800c16e:	e009      	b.n	800c184 <_printf_float+0xc4>
 800c170:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800c174:	d002      	beq.n	800c17c <_printf_float+0xbc>
 800c176:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c17a:	d105      	bne.n	800c188 <_printf_float+0xc8>
 800c17c:	2a00      	cmp	r2, #0
 800c17e:	f040 81c7 	bne.w	800c510 <_printf_float+0x450>
 800c182:	2201      	movs	r2, #1
 800c184:	f8cb 2004 	str.w	r2, [fp, #4]
 800c188:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c18c:	f8cd 8010 	str.w	r8, [sp, #16]
 800c190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c194:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c198:	f8cb 3000 	str.w	r3, [fp]
 800c19c:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800c1a0:	9302      	str	r3, [sp, #8]
 800c1a2:	ab0d      	add	r3, sp, #52	; 0x34
 800c1a4:	9303      	str	r3, [sp, #12]
 800c1a6:	ab0e      	add	r3, sp, #56	; 0x38
 800c1a8:	9305      	str	r3, [sp, #20]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	9306      	str	r3, [sp, #24]
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c1b4:	f7ff fef3 	bl	800bf9e <__cvt>
 800c1b8:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800c1bc:	2b47      	cmp	r3, #71	; 0x47
 800c1be:	4607      	mov	r7, r0
 800c1c0:	d10a      	bne.n	800c1d8 <_printf_float+0x118>
 800c1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1c4:	1cd8      	adds	r0, r3, #3
 800c1c6:	db03      	blt.n	800c1d0 <_printf_float+0x110>
 800c1c8:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	dd37      	ble.n	800c240 <_printf_float+0x180>
 800c1d0:	f1a8 0802 	sub.w	r8, r8, #2
 800c1d4:	fa5f f888 	uxtb.w	r8, r8
 800c1d8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800c1dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c1de:	d815      	bhi.n	800c20c <_printf_float+0x14c>
 800c1e0:	3901      	subs	r1, #1
 800c1e2:	4642      	mov	r2, r8
 800c1e4:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 800c1e8:	910d      	str	r1, [sp, #52]	; 0x34
 800c1ea:	f7ff ff38 	bl	800c05e <__exponent>
 800c1ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1f0:	1883      	adds	r3, r0, r2
 800c1f2:	2a01      	cmp	r2, #1
 800c1f4:	4681      	mov	r9, r0
 800c1f6:	f8cb 3010 	str.w	r3, [fp, #16]
 800c1fa:	dc03      	bgt.n	800c204 <_printf_float+0x144>
 800c1fc:	f8db 2000 	ldr.w	r2, [fp]
 800c200:	07d1      	lsls	r1, r2, #31
 800c202:	d538      	bpl.n	800c276 <_printf_float+0x1b6>
 800c204:	3301      	adds	r3, #1
 800c206:	f8cb 3010 	str.w	r3, [fp, #16]
 800c20a:	e034      	b.n	800c276 <_printf_float+0x1b6>
 800c20c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800c210:	d118      	bne.n	800c244 <_printf_float+0x184>
 800c212:	2900      	cmp	r1, #0
 800c214:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c218:	dd09      	ble.n	800c22e <_printf_float+0x16e>
 800c21a:	f8cb 1010 	str.w	r1, [fp, #16]
 800c21e:	b91b      	cbnz	r3, 800c228 <_printf_float+0x168>
 800c220:	f8db 2000 	ldr.w	r2, [fp]
 800c224:	07d2      	lsls	r2, r2, #31
 800c226:	d521      	bpl.n	800c26c <_printf_float+0x1ac>
 800c228:	3301      	adds	r3, #1
 800c22a:	440b      	add	r3, r1
 800c22c:	e01c      	b.n	800c268 <_printf_float+0x1a8>
 800c22e:	b91b      	cbnz	r3, 800c238 <_printf_float+0x178>
 800c230:	f8db 2000 	ldr.w	r2, [fp]
 800c234:	07d0      	lsls	r0, r2, #31
 800c236:	d501      	bpl.n	800c23c <_printf_float+0x17c>
 800c238:	3302      	adds	r3, #2
 800c23a:	e015      	b.n	800c268 <_printf_float+0x1a8>
 800c23c:	2301      	movs	r3, #1
 800c23e:	e013      	b.n	800c268 <_printf_float+0x1a8>
 800c240:	f04f 0867 	mov.w	r8, #103	; 0x67
 800c244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c248:	4293      	cmp	r3, r2
 800c24a:	db07      	blt.n	800c25c <_printf_float+0x19c>
 800c24c:	f8db 2000 	ldr.w	r2, [fp]
 800c250:	f8cb 3010 	str.w	r3, [fp, #16]
 800c254:	07d1      	lsls	r1, r2, #31
 800c256:	d509      	bpl.n	800c26c <_printf_float+0x1ac>
 800c258:	3301      	adds	r3, #1
 800c25a:	e005      	b.n	800c268 <_printf_float+0x1a8>
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bfd4      	ite	le
 800c260:	f1c3 0302 	rsble	r3, r3, #2
 800c264:	2301      	movgt	r3, #1
 800c266:	4413      	add	r3, r2
 800c268:	f8cb 3010 	str.w	r3, [fp, #16]
 800c26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c26e:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800c272:	f04f 0900 	mov.w	r9, #0
 800c276:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c27a:	b113      	cbz	r3, 800c282 <_printf_float+0x1c2>
 800c27c:	232d      	movs	r3, #45	; 0x2d
 800c27e:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 800c282:	9600      	str	r6, [sp, #0]
 800c284:	4620      	mov	r0, r4
 800c286:	4659      	mov	r1, fp
 800c288:	aa0f      	add	r2, sp, #60	; 0x3c
 800c28a:	462b      	mov	r3, r5
 800c28c:	f000 f95c 	bl	800c548 <_printf_common>
 800c290:	3001      	adds	r0, #1
 800c292:	d102      	bne.n	800c29a <_printf_float+0x1da>
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	e152      	b.n	800c540 <_printf_float+0x480>
 800c29a:	f8db 3000 	ldr.w	r3, [fp]
 800c29e:	055a      	lsls	r2, r3, #21
 800c2a0:	d405      	bmi.n	800c2ae <_printf_float+0x1ee>
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	463a      	mov	r2, r7
 800c2a8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c2ac:	e108      	b.n	800c4c0 <_printf_float+0x400>
 800c2ae:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800c2b2:	f240 80d0 	bls.w	800c456 <_printf_float+0x396>
 800c2b6:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f003 fc29 	bl	800fb14 <__aeabi_dcmpeq>
 800c2c2:	b350      	cbz	r0, 800c31a <_printf_float+0x25a>
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	4a38      	ldr	r2, [pc, #224]	; (800c3ac <_printf_float+0x2ec>)
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	47b0      	blx	r6
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	d0e0      	beq.n	800c294 <_printf_float+0x1d4>
 800c2d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	db09      	blt.n	800c2ee <_printf_float+0x22e>
 800c2da:	f8db 3000 	ldr.w	r3, [fp]
 800c2de:	07d8      	lsls	r0, r3, #31
 800c2e0:	d405      	bmi.n	800c2ee <_printf_float+0x22e>
 800c2e2:	f8db 3000 	ldr.w	r3, [fp]
 800c2e6:	079f      	lsls	r7, r3, #30
 800c2e8:	f100 8110 	bmi.w	800c50c <_printf_float+0x44c>
 800c2ec:	e107      	b.n	800c4fe <_printf_float+0x43e>
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	4652      	mov	r2, sl
 800c2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f6:	47b0      	blx	r6
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	d0cb      	beq.n	800c294 <_printf_float+0x1d4>
 800c2fc:	2700      	movs	r7, #0
 800c2fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c300:	3b01      	subs	r3, #1
 800c302:	429f      	cmp	r7, r3
 800c304:	daed      	bge.n	800c2e2 <_printf_float+0x222>
 800c306:	4620      	mov	r0, r4
 800c308:	4629      	mov	r1, r5
 800c30a:	f10b 021a 	add.w	r2, fp, #26
 800c30e:	2301      	movs	r3, #1
 800c310:	47b0      	blx	r6
 800c312:	3001      	adds	r0, #1
 800c314:	d0be      	beq.n	800c294 <_printf_float+0x1d4>
 800c316:	3701      	adds	r7, #1
 800c318:	e7f1      	b.n	800c2fe <_printf_float+0x23e>
 800c31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	dc29      	bgt.n	800c374 <_printf_float+0x2b4>
 800c320:	4620      	mov	r0, r4
 800c322:	4629      	mov	r1, r5
 800c324:	4a21      	ldr	r2, [pc, #132]	; (800c3ac <_printf_float+0x2ec>)
 800c326:	2301      	movs	r3, #1
 800c328:	47b0      	blx	r6
 800c32a:	3001      	adds	r0, #1
 800c32c:	d0b2      	beq.n	800c294 <_printf_float+0x1d4>
 800c32e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c330:	b92b      	cbnz	r3, 800c33e <_printf_float+0x27e>
 800c332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c334:	b91b      	cbnz	r3, 800c33e <_printf_float+0x27e>
 800c336:	f8db 3000 	ldr.w	r3, [fp]
 800c33a:	07d9      	lsls	r1, r3, #31
 800c33c:	d5d1      	bpl.n	800c2e2 <_printf_float+0x222>
 800c33e:	4620      	mov	r0, r4
 800c340:	4629      	mov	r1, r5
 800c342:	4652      	mov	r2, sl
 800c344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c346:	47b0      	blx	r6
 800c348:	3001      	adds	r0, #1
 800c34a:	d0a3      	beq.n	800c294 <_printf_float+0x1d4>
 800c34c:	f04f 0800 	mov.w	r8, #0
 800c350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c352:	425b      	negs	r3, r3
 800c354:	4598      	cmp	r8, r3
 800c356:	4620      	mov	r0, r4
 800c358:	4629      	mov	r1, r5
 800c35a:	da08      	bge.n	800c36e <_printf_float+0x2ae>
 800c35c:	f10b 021a 	add.w	r2, fp, #26
 800c360:	2301      	movs	r3, #1
 800c362:	47b0      	blx	r6
 800c364:	3001      	adds	r0, #1
 800c366:	d095      	beq.n	800c294 <_printf_float+0x1d4>
 800c368:	f108 0801 	add.w	r8, r8, #1
 800c36c:	e7f0      	b.n	800c350 <_printf_float+0x290>
 800c36e:	463a      	mov	r2, r7
 800c370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c372:	e0a5      	b.n	800c4c0 <_printf_float+0x400>
 800c374:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800c378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c37a:	429a      	cmp	r2, r3
 800c37c:	bfa8      	it	ge
 800c37e:	461a      	movge	r2, r3
 800c380:	2a00      	cmp	r2, #0
 800c382:	4691      	mov	r9, r2
 800c384:	dc02      	bgt.n	800c38c <_printf_float+0x2cc>
 800c386:	f04f 0800 	mov.w	r8, #0
 800c38a:	e01c      	b.n	800c3c6 <_printf_float+0x306>
 800c38c:	4620      	mov	r0, r4
 800c38e:	4629      	mov	r1, r5
 800c390:	463a      	mov	r2, r7
 800c392:	464b      	mov	r3, r9
 800c394:	47b0      	blx	r6
 800c396:	3001      	adds	r0, #1
 800c398:	d1f5      	bne.n	800c386 <_printf_float+0x2c6>
 800c39a:	e77b      	b.n	800c294 <_printf_float+0x1d4>
 800c39c:	0801041e 	.word	0x0801041e
 800c3a0:	0801041a 	.word	0x0801041a
 800c3a4:	08010426 	.word	0x08010426
 800c3a8:	08010422 	.word	0x08010422
 800c3ac:	0801042a 	.word	0x0801042a
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	f10b 021a 	add.w	r2, fp, #26
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	47b0      	blx	r6
 800c3bc:	3001      	adds	r0, #1
 800c3be:	f43f af69 	beq.w	800c294 <_printf_float+0x1d4>
 800c3c2:	f108 0801 	add.w	r8, r8, #1
 800c3c6:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800c3ca:	f1b9 0f00 	cmp.w	r9, #0
 800c3ce:	bfac      	ite	ge
 800c3d0:	ebc9 0203 	rsbge	r2, r9, r3
 800c3d4:	461a      	movlt	r2, r3
 800c3d6:	4590      	cmp	r8, r2
 800c3d8:	dbea      	blt.n	800c3b0 <_printf_float+0x2f0>
 800c3da:	eb07 0803 	add.w	r8, r7, r3
 800c3de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	db10      	blt.n	800c408 <_printf_float+0x348>
 800c3e6:	f8db 3000 	ldr.w	r3, [fp]
 800c3ea:	07da      	lsls	r2, r3, #31
 800c3ec:	d40c      	bmi.n	800c408 <_printf_float+0x348>
 800c3ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3f0:	4417      	add	r7, r2
 800c3f2:	ebc8 0307 	rsb	r3, r8, r7
 800c3f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c3f8:	1bd2      	subs	r2, r2, r7
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	bfa8      	it	ge
 800c3fe:	4613      	movge	r3, r2
 800c400:	2b00      	cmp	r3, #0
 800c402:	461f      	mov	r7, r3
 800c404:	dc08      	bgt.n	800c418 <_printf_float+0x358>
 800c406:	e00e      	b.n	800c426 <_printf_float+0x366>
 800c408:	4620      	mov	r0, r4
 800c40a:	4629      	mov	r1, r5
 800c40c:	4652      	mov	r2, sl
 800c40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c410:	47b0      	blx	r6
 800c412:	3001      	adds	r0, #1
 800c414:	d1eb      	bne.n	800c3ee <_printf_float+0x32e>
 800c416:	e73d      	b.n	800c294 <_printf_float+0x1d4>
 800c418:	4620      	mov	r0, r4
 800c41a:	4629      	mov	r1, r5
 800c41c:	4642      	mov	r2, r8
 800c41e:	47b0      	blx	r6
 800c420:	3001      	adds	r0, #1
 800c422:	f43f af37 	beq.w	800c294 <_printf_float+0x1d4>
 800c426:	f04f 0800 	mov.w	r8, #0
 800c42a:	e00a      	b.n	800c442 <_printf_float+0x382>
 800c42c:	4620      	mov	r0, r4
 800c42e:	4629      	mov	r1, r5
 800c430:	f10b 021a 	add.w	r2, fp, #26
 800c434:	2301      	movs	r3, #1
 800c436:	47b0      	blx	r6
 800c438:	3001      	adds	r0, #1
 800c43a:	f43f af2b 	beq.w	800c294 <_printf_float+0x1d4>
 800c43e:	f108 0801 	add.w	r8, r8, #1
 800c442:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c446:	2f00      	cmp	r7, #0
 800c448:	eba3 0302 	sub.w	r3, r3, r2
 800c44c:	bfa8      	it	ge
 800c44e:	1bdb      	subge	r3, r3, r7
 800c450:	4598      	cmp	r8, r3
 800c452:	dbeb      	blt.n	800c42c <_printf_float+0x36c>
 800c454:	e745      	b.n	800c2e2 <_printf_float+0x222>
 800c456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c458:	2a01      	cmp	r2, #1
 800c45a:	dc01      	bgt.n	800c460 <_printf_float+0x3a0>
 800c45c:	07db      	lsls	r3, r3, #31
 800c45e:	d536      	bpl.n	800c4ce <_printf_float+0x40e>
 800c460:	4620      	mov	r0, r4
 800c462:	4629      	mov	r1, r5
 800c464:	463a      	mov	r2, r7
 800c466:	2301      	movs	r3, #1
 800c468:	47b0      	blx	r6
 800c46a:	3001      	adds	r0, #1
 800c46c:	f43f af12 	beq.w	800c294 <_printf_float+0x1d4>
 800c470:	4620      	mov	r0, r4
 800c472:	4629      	mov	r1, r5
 800c474:	4652      	mov	r2, sl
 800c476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c478:	47b0      	blx	r6
 800c47a:	3001      	adds	r0, #1
 800c47c:	f43f af0a 	beq.w	800c294 <_printf_float+0x1d4>
 800c480:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800c484:	2200      	movs	r2, #0
 800c486:	2300      	movs	r3, #0
 800c488:	f003 fb44 	bl	800fb14 <__aeabi_dcmpeq>
 800c48c:	b9e8      	cbnz	r0, 800c4ca <_printf_float+0x40a>
 800c48e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c490:	4620      	mov	r0, r4
 800c492:	4629      	mov	r1, r5
 800c494:	1c7a      	adds	r2, r7, #1
 800c496:	3b01      	subs	r3, #1
 800c498:	e01d      	b.n	800c4d6 <_printf_float+0x416>
 800c49a:	4620      	mov	r0, r4
 800c49c:	4629      	mov	r1, r5
 800c49e:	f10b 021a 	add.w	r2, fp, #26
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	47b0      	blx	r6
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	f43f aef4 	beq.w	800c294 <_printf_float+0x1d4>
 800c4ac:	3701      	adds	r7, #1
 800c4ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	429f      	cmp	r7, r3
 800c4b4:	dbf1      	blt.n	800c49a <_printf_float+0x3da>
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 800c4be:	464b      	mov	r3, r9
 800c4c0:	47b0      	blx	r6
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	f47f af0d 	bne.w	800c2e2 <_printf_float+0x222>
 800c4c8:	e6e4      	b.n	800c294 <_printf_float+0x1d4>
 800c4ca:	2700      	movs	r7, #0
 800c4cc:	e7ef      	b.n	800c4ae <_printf_float+0x3ee>
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	463a      	mov	r2, r7
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	47b0      	blx	r6
 800c4d8:	3001      	adds	r0, #1
 800c4da:	d1ec      	bne.n	800c4b6 <_printf_float+0x3f6>
 800c4dc:	e6da      	b.n	800c294 <_printf_float+0x1d4>
 800c4de:	4620      	mov	r0, r4
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	f10b 0219 	add.w	r2, fp, #25
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	47b0      	blx	r6
 800c4ea:	3001      	adds	r0, #1
 800c4ec:	f43f aed2 	beq.w	800c294 <_printf_float+0x1d4>
 800c4f0:	3701      	adds	r7, #1
 800c4f2:	f8db 300c 	ldr.w	r3, [fp, #12]
 800c4f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4f8:	1a9b      	subs	r3, r3, r2
 800c4fa:	429f      	cmp	r7, r3
 800c4fc:	dbef      	blt.n	800c4de <_printf_float+0x41e>
 800c4fe:	f8db 000c 	ldr.w	r0, [fp, #12]
 800c502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c504:	4298      	cmp	r0, r3
 800c506:	bfb8      	it	lt
 800c508:	4618      	movlt	r0, r3
 800c50a:	e019      	b.n	800c540 <_printf_float+0x480>
 800c50c:	2700      	movs	r7, #0
 800c50e:	e7f0      	b.n	800c4f2 <_printf_float+0x432>
 800c510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c514:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c518:	f8cb 3000 	str.w	r3, [fp]
 800c51c:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800c520:	9302      	str	r3, [sp, #8]
 800c522:	ab0d      	add	r3, sp, #52	; 0x34
 800c524:	9303      	str	r3, [sp, #12]
 800c526:	ab0e      	add	r3, sp, #56	; 0x38
 800c528:	9305      	str	r3, [sp, #20]
 800c52a:	2300      	movs	r3, #0
 800c52c:	9306      	str	r3, [sp, #24]
 800c52e:	f8cd 8010 	str.w	r8, [sp, #16]
 800c532:	4620      	mov	r0, r4
 800c534:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c538:	f7ff fd31 	bl	800bf9e <__cvt>
 800c53c:	4607      	mov	r7, r0
 800c53e:	e640      	b.n	800c1c2 <_printf_float+0x102>
 800c540:	b011      	add	sp, #68	; 0x44
 800c542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c546:	bf00      	nop

0800c548 <_printf_common>:
 800c548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c54c:	4691      	mov	r9, r2
 800c54e:	461f      	mov	r7, r3
 800c550:	688a      	ldr	r2, [r1, #8]
 800c552:	690b      	ldr	r3, [r1, #16]
 800c554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c558:	4293      	cmp	r3, r2
 800c55a:	bfb8      	it	lt
 800c55c:	4613      	movlt	r3, r2
 800c55e:	f8c9 3000 	str.w	r3, [r9]
 800c562:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c566:	4606      	mov	r6, r0
 800c568:	460c      	mov	r4, r1
 800c56a:	b112      	cbz	r2, 800c572 <_printf_common+0x2a>
 800c56c:	3301      	adds	r3, #1
 800c56e:	f8c9 3000 	str.w	r3, [r9]
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	0699      	lsls	r1, r3, #26
 800c576:	bf42      	ittt	mi
 800c578:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c57c:	3302      	addmi	r3, #2
 800c57e:	f8c9 3000 	strmi.w	r3, [r9]
 800c582:	6825      	ldr	r5, [r4, #0]
 800c584:	f015 0506 	ands.w	r5, r5, #6
 800c588:	d01c      	beq.n	800c5c4 <_printf_common+0x7c>
 800c58a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c58e:	6822      	ldr	r2, [r4, #0]
 800c590:	3300      	adds	r3, #0
 800c592:	bf18      	it	ne
 800c594:	2301      	movne	r3, #1
 800c596:	0692      	lsls	r2, r2, #26
 800c598:	d51f      	bpl.n	800c5da <_printf_common+0x92>
 800c59a:	18e1      	adds	r1, r4, r3
 800c59c:	1c5a      	adds	r2, r3, #1
 800c59e:	2030      	movs	r0, #48	; 0x30
 800c5a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5a4:	4422      	add	r2, r4
 800c5a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5ae:	3302      	adds	r3, #2
 800c5b0:	e013      	b.n	800c5da <_printf_common+0x92>
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	f104 0219 	add.w	r2, r4, #25
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	47c0      	blx	r8
 800c5be:	3001      	adds	r0, #1
 800c5c0:	d007      	beq.n	800c5d2 <_printf_common+0x8a>
 800c5c2:	3501      	adds	r5, #1
 800c5c4:	68e3      	ldr	r3, [r4, #12]
 800c5c6:	f8d9 2000 	ldr.w	r2, [r9]
 800c5ca:	1a9b      	subs	r3, r3, r2
 800c5cc:	429d      	cmp	r5, r3
 800c5ce:	dbf0      	blt.n	800c5b2 <_printf_common+0x6a>
 800c5d0:	e7db      	b.n	800c58a <_printf_common+0x42>
 800c5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5da:	4630      	mov	r0, r6
 800c5dc:	4639      	mov	r1, r7
 800c5de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5e2:	47c0      	blx	r8
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	d0f4      	beq.n	800c5d2 <_printf_common+0x8a>
 800c5e8:	6822      	ldr	r2, [r4, #0]
 800c5ea:	f8d9 5000 	ldr.w	r5, [r9]
 800c5ee:	68e3      	ldr	r3, [r4, #12]
 800c5f0:	f002 0206 	and.w	r2, r2, #6
 800c5f4:	2a04      	cmp	r2, #4
 800c5f6:	bf08      	it	eq
 800c5f8:	1b5d      	subeq	r5, r3, r5
 800c5fa:	6922      	ldr	r2, [r4, #16]
 800c5fc:	68a3      	ldr	r3, [r4, #8]
 800c5fe:	bf0c      	ite	eq
 800c600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c604:	2500      	movne	r5, #0
 800c606:	4293      	cmp	r3, r2
 800c608:	bfc4      	itt	gt
 800c60a:	1a9b      	subgt	r3, r3, r2
 800c60c:	18ed      	addgt	r5, r5, r3
 800c60e:	f04f 0900 	mov.w	r9, #0
 800c612:	45a9      	cmp	r9, r5
 800c614:	da0a      	bge.n	800c62c <_printf_common+0xe4>
 800c616:	4630      	mov	r0, r6
 800c618:	4639      	mov	r1, r7
 800c61a:	f104 021a 	add.w	r2, r4, #26
 800c61e:	2301      	movs	r3, #1
 800c620:	47c0      	blx	r8
 800c622:	3001      	adds	r0, #1
 800c624:	d0d5      	beq.n	800c5d2 <_printf_common+0x8a>
 800c626:	f109 0901 	add.w	r9, r9, #1
 800c62a:	e7f2      	b.n	800c612 <_printf_common+0xca>
 800c62c:	2000      	movs	r0, #0
 800c62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800c634 <_printf_i>:
 800c634:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c638:	460c      	mov	r4, r1
 800c63a:	4617      	mov	r7, r2
 800c63c:	7e22      	ldrb	r2, [r4, #24]
 800c63e:	2a6e      	cmp	r2, #110	; 0x6e
 800c640:	4698      	mov	r8, r3
 800c642:	4606      	mov	r6, r0
 800c644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c646:	f101 0143 	add.w	r1, r1, #67	; 0x43
 800c64a:	f000 80a9 	beq.w	800c7a0 <_printf_i+0x16c>
 800c64e:	d812      	bhi.n	800c676 <_printf_i+0x42>
 800c650:	2a63      	cmp	r2, #99	; 0x63
 800c652:	d023      	beq.n	800c69c <_printf_i+0x68>
 800c654:	d80a      	bhi.n	800c66c <_printf_i+0x38>
 800c656:	2a00      	cmp	r2, #0
 800c658:	f000 80b6 	beq.w	800c7c8 <_printf_i+0x194>
 800c65c:	2a58      	cmp	r2, #88	; 0x58
 800c65e:	f040 80c5 	bne.w	800c7ec <_printf_i+0x1b8>
 800c662:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c666:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800c860 <_printf_i+0x22c>
 800c66a:	e051      	b.n	800c710 <_printf_i+0xdc>
 800c66c:	2a64      	cmp	r2, #100	; 0x64
 800c66e:	d01e      	beq.n	800c6ae <_printf_i+0x7a>
 800c670:	2a69      	cmp	r2, #105	; 0x69
 800c672:	d01c      	beq.n	800c6ae <_printf_i+0x7a>
 800c674:	e0ba      	b.n	800c7ec <_printf_i+0x1b8>
 800c676:	2a73      	cmp	r2, #115	; 0x73
 800c678:	f000 80aa 	beq.w	800c7d0 <_printf_i+0x19c>
 800c67c:	d809      	bhi.n	800c692 <_printf_i+0x5e>
 800c67e:	2a6f      	cmp	r2, #111	; 0x6f
 800c680:	d02b      	beq.n	800c6da <_printf_i+0xa6>
 800c682:	2a70      	cmp	r2, #112	; 0x70
 800c684:	f040 80b2 	bne.w	800c7ec <_printf_i+0x1b8>
 800c688:	6822      	ldr	r2, [r4, #0]
 800c68a:	f042 0220 	orr.w	r2, r2, #32
 800c68e:	6022      	str	r2, [r4, #0]
 800c690:	e039      	b.n	800c706 <_printf_i+0xd2>
 800c692:	2a75      	cmp	r2, #117	; 0x75
 800c694:	d021      	beq.n	800c6da <_printf_i+0xa6>
 800c696:	2a78      	cmp	r2, #120	; 0x78
 800c698:	d035      	beq.n	800c706 <_printf_i+0xd2>
 800c69a:	e0a7      	b.n	800c7ec <_printf_i+0x1b8>
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	1d11      	adds	r1, r2, #4
 800c6a0:	6019      	str	r1, [r3, #0]
 800c6a2:	6813      	ldr	r3, [r2, #0]
 800c6a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6ac:	e0a2      	b.n	800c7f4 <_printf_i+0x1c0>
 800c6ae:	6820      	ldr	r0, [r4, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c6b6:	d003      	beq.n	800c6c0 <_printf_i+0x8c>
 800c6b8:	1d10      	adds	r0, r2, #4
 800c6ba:	6018      	str	r0, [r3, #0]
 800c6bc:	6813      	ldr	r3, [r2, #0]
 800c6be:	e005      	b.n	800c6cc <_printf_i+0x98>
 800c6c0:	0645      	lsls	r5, r0, #25
 800c6c2:	d5f9      	bpl.n	800c6b8 <_printf_i+0x84>
 800c6c4:	1d10      	adds	r0, r2, #4
 800c6c6:	6018      	str	r0, [r3, #0]
 800c6c8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	da3b      	bge.n	800c748 <_printf_i+0x114>
 800c6d0:	222d      	movs	r2, #45	; 0x2d
 800c6d2:	425b      	negs	r3, r3
 800c6d4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c6d8:	e036      	b.n	800c748 <_printf_i+0x114>
 800c6da:	6820      	ldr	r0, [r4, #0]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c6e2:	d003      	beq.n	800c6ec <_printf_i+0xb8>
 800c6e4:	1d10      	adds	r0, r2, #4
 800c6e6:	6018      	str	r0, [r3, #0]
 800c6e8:	6813      	ldr	r3, [r2, #0]
 800c6ea:	e004      	b.n	800c6f6 <_printf_i+0xc2>
 800c6ec:	0640      	lsls	r0, r0, #25
 800c6ee:	d5f9      	bpl.n	800c6e4 <_printf_i+0xb0>
 800c6f0:	1d10      	adds	r0, r2, #4
 800c6f2:	6018      	str	r0, [r3, #0]
 800c6f4:	8813      	ldrh	r3, [r2, #0]
 800c6f6:	7e22      	ldrb	r2, [r4, #24]
 800c6f8:	f8df e164 	ldr.w	lr, [pc, #356]	; 800c860 <_printf_i+0x22c>
 800c6fc:	2a6f      	cmp	r2, #111	; 0x6f
 800c6fe:	bf0c      	ite	eq
 800c700:	2208      	moveq	r2, #8
 800c702:	220a      	movne	r2, #10
 800c704:	e01c      	b.n	800c740 <_printf_i+0x10c>
 800c706:	2278      	movs	r2, #120	; 0x78
 800c708:	f8df e158 	ldr.w	lr, [pc, #344]	; 800c864 <_printf_i+0x230>
 800c70c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c710:	6822      	ldr	r2, [r4, #0]
 800c712:	6818      	ldr	r0, [r3, #0]
 800c714:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c718:	f100 0504 	add.w	r5, r0, #4
 800c71c:	601d      	str	r5, [r3, #0]
 800c71e:	d001      	beq.n	800c724 <_printf_i+0xf0>
 800c720:	6803      	ldr	r3, [r0, #0]
 800c722:	e002      	b.n	800c72a <_printf_i+0xf6>
 800c724:	0655      	lsls	r5, r2, #25
 800c726:	d5fb      	bpl.n	800c720 <_printf_i+0xec>
 800c728:	8803      	ldrh	r3, [r0, #0]
 800c72a:	07d0      	lsls	r0, r2, #31
 800c72c:	bf44      	itt	mi
 800c72e:	f042 0220 	orrmi.w	r2, r2, #32
 800c732:	6022      	strmi	r2, [r4, #0]
 800c734:	b91b      	cbnz	r3, 800c73e <_printf_i+0x10a>
 800c736:	6822      	ldr	r2, [r4, #0]
 800c738:	f022 0220 	bic.w	r2, r2, #32
 800c73c:	6022      	str	r2, [r4, #0]
 800c73e:	2210      	movs	r2, #16
 800c740:	2000      	movs	r0, #0
 800c742:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c746:	e002      	b.n	800c74e <_printf_i+0x11a>
 800c748:	f8df e114 	ldr.w	lr, [pc, #276]	; 800c860 <_printf_i+0x22c>
 800c74c:	220a      	movs	r2, #10
 800c74e:	6865      	ldr	r5, [r4, #4]
 800c750:	60a5      	str	r5, [r4, #8]
 800c752:	2d00      	cmp	r5, #0
 800c754:	bfa2      	ittt	ge
 800c756:	6820      	ldrge	r0, [r4, #0]
 800c758:	f020 0004 	bicge.w	r0, r0, #4
 800c75c:	6020      	strge	r0, [r4, #0]
 800c75e:	b903      	cbnz	r3, 800c762 <_printf_i+0x12e>
 800c760:	b165      	cbz	r5, 800c77c <_printf_i+0x148>
 800c762:	460d      	mov	r5, r1
 800c764:	fbb3 f0f2 	udiv	r0, r3, r2
 800c768:	fb02 3310 	mls	r3, r2, r0, r3
 800c76c:	f81e 3003 	ldrb.w	r3, [lr, r3]
 800c770:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c774:	4603      	mov	r3, r0
 800c776:	2800      	cmp	r0, #0
 800c778:	d1f4      	bne.n	800c764 <_printf_i+0x130>
 800c77a:	e000      	b.n	800c77e <_printf_i+0x14a>
 800c77c:	460d      	mov	r5, r1
 800c77e:	2a08      	cmp	r2, #8
 800c780:	d10b      	bne.n	800c79a <_printf_i+0x166>
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	07da      	lsls	r2, r3, #31
 800c786:	d508      	bpl.n	800c79a <_printf_i+0x166>
 800c788:	6923      	ldr	r3, [r4, #16]
 800c78a:	6862      	ldr	r2, [r4, #4]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	bfde      	ittt	le
 800c790:	2330      	movle	r3, #48	; 0x30
 800c792:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c796:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c79a:	1b49      	subs	r1, r1, r5
 800c79c:	6121      	str	r1, [r4, #16]
 800c79e:	e02e      	b.n	800c7fe <_printf_i+0x1ca>
 800c7a0:	6825      	ldr	r5, [r4, #0]
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	6960      	ldr	r0, [r4, #20]
 800c7a6:	f015 0f80 	tst.w	r5, #128	; 0x80
 800c7aa:	d003      	beq.n	800c7b4 <_printf_i+0x180>
 800c7ac:	1d15      	adds	r5, r2, #4
 800c7ae:	601d      	str	r5, [r3, #0]
 800c7b0:	6813      	ldr	r3, [r2, #0]
 800c7b2:	e008      	b.n	800c7c6 <_printf_i+0x192>
 800c7b4:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c7b8:	f102 0504 	add.w	r5, r2, #4
 800c7bc:	601d      	str	r5, [r3, #0]
 800c7be:	6813      	ldr	r3, [r2, #0]
 800c7c0:	d001      	beq.n	800c7c6 <_printf_i+0x192>
 800c7c2:	8018      	strh	r0, [r3, #0]
 800c7c4:	e000      	b.n	800c7c8 <_printf_i+0x194>
 800c7c6:	6018      	str	r0, [r3, #0]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	6123      	str	r3, [r4, #16]
 800c7cc:	460d      	mov	r5, r1
 800c7ce:	e016      	b.n	800c7fe <_printf_i+0x1ca>
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	1d11      	adds	r1, r2, #4
 800c7d4:	6019      	str	r1, [r3, #0]
 800c7d6:	6815      	ldr	r5, [r2, #0]
 800c7d8:	6862      	ldr	r2, [r4, #4]
 800c7da:	4628      	mov	r0, r5
 800c7dc:	2100      	movs	r1, #0
 800c7de:	f002 fad3 	bl	800ed88 <memchr>
 800c7e2:	b108      	cbz	r0, 800c7e8 <_printf_i+0x1b4>
 800c7e4:	1b40      	subs	r0, r0, r5
 800c7e6:	6060      	str	r0, [r4, #4]
 800c7e8:	6863      	ldr	r3, [r4, #4]
 800c7ea:	e004      	b.n	800c7f6 <_printf_i+0x1c2>
 800c7ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	6123      	str	r3, [r4, #16]
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7fe:	f8cd 8000 	str.w	r8, [sp]
 800c802:	4630      	mov	r0, r6
 800c804:	4621      	mov	r1, r4
 800c806:	aa03      	add	r2, sp, #12
 800c808:	463b      	mov	r3, r7
 800c80a:	f7ff fe9d 	bl	800c548 <_printf_common>
 800c80e:	3001      	adds	r0, #1
 800c810:	d102      	bne.n	800c818 <_printf_i+0x1e4>
 800c812:	f04f 30ff 	mov.w	r0, #4294967295
 800c816:	e01f      	b.n	800c858 <_printf_i+0x224>
 800c818:	4630      	mov	r0, r6
 800c81a:	4639      	mov	r1, r7
 800c81c:	462a      	mov	r2, r5
 800c81e:	6923      	ldr	r3, [r4, #16]
 800c820:	47c0      	blx	r8
 800c822:	3001      	adds	r0, #1
 800c824:	d0f5      	beq.n	800c812 <_printf_i+0x1de>
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	079b      	lsls	r3, r3, #30
 800c82a:	d405      	bmi.n	800c838 <_printf_i+0x204>
 800c82c:	68e0      	ldr	r0, [r4, #12]
 800c82e:	9b03      	ldr	r3, [sp, #12]
 800c830:	4298      	cmp	r0, r3
 800c832:	bfb8      	it	lt
 800c834:	4618      	movlt	r0, r3
 800c836:	e00f      	b.n	800c858 <_printf_i+0x224>
 800c838:	2500      	movs	r5, #0
 800c83a:	68e3      	ldr	r3, [r4, #12]
 800c83c:	9a03      	ldr	r2, [sp, #12]
 800c83e:	1a9b      	subs	r3, r3, r2
 800c840:	429d      	cmp	r5, r3
 800c842:	daf3      	bge.n	800c82c <_printf_i+0x1f8>
 800c844:	4630      	mov	r0, r6
 800c846:	4639      	mov	r1, r7
 800c848:	f104 0219 	add.w	r2, r4, #25
 800c84c:	2301      	movs	r3, #1
 800c84e:	47c0      	blx	r8
 800c850:	3001      	adds	r0, #1
 800c852:	d0de      	beq.n	800c812 <_printf_i+0x1de>
 800c854:	3501      	adds	r5, #1
 800c856:	e7f0      	b.n	800c83a <_printf_i+0x206>
 800c858:	b004      	add	sp, #16
 800c85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85e:	bf00      	nop
 800c860:	0801042c 	.word	0x0801042c
 800c864:	0801043d 	.word	0x0801043d

0800c868 <_scanf_float>:
 800c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	4699      	mov	r9, r3
 800c86e:	688b      	ldr	r3, [r1, #8]
 800c870:	4615      	mov	r5, r2
 800c872:	1e5a      	subs	r2, r3, #1
 800c874:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c878:	bf81      	itttt	hi
 800c87a:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c87e:	eb03 0c02 	addhi.w	ip, r3, r2
 800c882:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c886:	608b      	strhi	r3, [r1, #8]
 800c888:	680b      	ldr	r3, [r1, #0]
 800c88a:	460f      	mov	r7, r1
 800c88c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c890:	b087      	sub	sp, #28
 800c892:	f847 3b1c 	str.w	r3, [r7], #28
 800c896:	f04f 0b00 	mov.w	fp, #0
 800c89a:	4606      	mov	r6, r0
 800c89c:	460c      	mov	r4, r1
 800c89e:	bf98      	it	ls
 800c8a0:	f04f 0c00 	movls.w	ip, #0
 800c8a4:	46b8      	mov	r8, r7
 800c8a6:	465a      	mov	r2, fp
 800c8a8:	f8cd b00c 	str.w	fp, [sp, #12]
 800c8ac:	f8cd b008 	str.w	fp, [sp, #8]
 800c8b0:	46da      	mov	sl, fp
 800c8b2:	f8cd b004 	str.w	fp, [sp, #4]
 800c8b6:	68a1      	ldr	r1, [r4, #8]
 800c8b8:	2900      	cmp	r1, #0
 800c8ba:	f000 80ec 	beq.w	800ca96 <_scanf_float+0x22e>
 800c8be:	682b      	ldr	r3, [r5, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	2b49      	cmp	r3, #73	; 0x49
 800c8c4:	d070      	beq.n	800c9a8 <_scanf_float+0x140>
 800c8c6:	d816      	bhi.n	800c8f6 <_scanf_float+0x8e>
 800c8c8:	2b39      	cmp	r3, #57	; 0x39
 800c8ca:	d80d      	bhi.n	800c8e8 <_scanf_float+0x80>
 800c8cc:	2b31      	cmp	r3, #49	; 0x31
 800c8ce:	d240      	bcs.n	800c952 <_scanf_float+0xea>
 800c8d0:	2b2d      	cmp	r3, #45	; 0x2d
 800c8d2:	d046      	beq.n	800c962 <_scanf_float+0xfa>
 800c8d4:	d802      	bhi.n	800c8dc <_scanf_float+0x74>
 800c8d6:	2b2b      	cmp	r3, #43	; 0x2b
 800c8d8:	d043      	beq.n	800c962 <_scanf_float+0xfa>
 800c8da:	e0dc      	b.n	800ca96 <_scanf_float+0x22e>
 800c8dc:	2b2e      	cmp	r3, #46	; 0x2e
 800c8de:	f000 8092 	beq.w	800ca06 <_scanf_float+0x19e>
 800c8e2:	2b30      	cmp	r3, #48	; 0x30
 800c8e4:	d023      	beq.n	800c92e <_scanf_float+0xc6>
 800c8e6:	e0d6      	b.n	800ca96 <_scanf_float+0x22e>
 800c8e8:	2b45      	cmp	r3, #69	; 0x45
 800c8ea:	f000 8095 	beq.w	800ca18 <_scanf_float+0x1b0>
 800c8ee:	2b46      	cmp	r3, #70	; 0x46
 800c8f0:	d077      	beq.n	800c9e2 <_scanf_float+0x17a>
 800c8f2:	2b41      	cmp	r3, #65	; 0x41
 800c8f4:	e00c      	b.n	800c910 <_scanf_float+0xa8>
 800c8f6:	2b65      	cmp	r3, #101	; 0x65
 800c8f8:	f000 808e 	beq.w	800ca18 <_scanf_float+0x1b0>
 800c8fc:	d80a      	bhi.n	800c914 <_scanf_float+0xac>
 800c8fe:	2b54      	cmp	r3, #84	; 0x54
 800c900:	d075      	beq.n	800c9ee <_scanf_float+0x186>
 800c902:	d802      	bhi.n	800c90a <_scanf_float+0xa2>
 800c904:	2b4e      	cmp	r3, #78	; 0x4e
 800c906:	d034      	beq.n	800c972 <_scanf_float+0x10a>
 800c908:	e0c5      	b.n	800ca96 <_scanf_float+0x22e>
 800c90a:	2b59      	cmp	r3, #89	; 0x59
 800c90c:	d075      	beq.n	800c9fa <_scanf_float+0x192>
 800c90e:	2b61      	cmp	r3, #97	; 0x61
 800c910:	d046      	beq.n	800c9a0 <_scanf_float+0x138>
 800c912:	e0c0      	b.n	800ca96 <_scanf_float+0x22e>
 800c914:	2b6e      	cmp	r3, #110	; 0x6e
 800c916:	d02c      	beq.n	800c972 <_scanf_float+0x10a>
 800c918:	d804      	bhi.n	800c924 <_scanf_float+0xbc>
 800c91a:	2b66      	cmp	r3, #102	; 0x66
 800c91c:	d061      	beq.n	800c9e2 <_scanf_float+0x17a>
 800c91e:	2b69      	cmp	r3, #105	; 0x69
 800c920:	d042      	beq.n	800c9a8 <_scanf_float+0x140>
 800c922:	e0b8      	b.n	800ca96 <_scanf_float+0x22e>
 800c924:	2b74      	cmp	r3, #116	; 0x74
 800c926:	d062      	beq.n	800c9ee <_scanf_float+0x186>
 800c928:	2b79      	cmp	r3, #121	; 0x79
 800c92a:	d066      	beq.n	800c9fa <_scanf_float+0x192>
 800c92c:	e0b3      	b.n	800ca96 <_scanf_float+0x22e>
 800c92e:	6820      	ldr	r0, [r4, #0]
 800c930:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c934:	d00d      	beq.n	800c952 <_scanf_float+0xea>
 800c936:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c93a:	6020      	str	r0, [r4, #0]
 800c93c:	f10a 0a01 	add.w	sl, sl, #1
 800c940:	f1bc 0f00 	cmp.w	ip, #0
 800c944:	f000 808a 	beq.w	800ca5c <_scanf_float+0x1f4>
 800c948:	3101      	adds	r1, #1
 800c94a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c94e:	60a1      	str	r1, [r4, #8]
 800c950:	e084      	b.n	800ca5c <_scanf_float+0x1f4>
 800c952:	eb12 0f0b 	cmn.w	r2, fp
 800c956:	f040 809e 	bne.w	800ca96 <_scanf_float+0x22e>
 800c95a:	6821      	ldr	r1, [r4, #0]
 800c95c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800c960:	e005      	b.n	800c96e <_scanf_float+0x106>
 800c962:	6821      	ldr	r1, [r4, #0]
 800c964:	0608      	lsls	r0, r1, #24
 800c966:	f140 8096 	bpl.w	800ca96 <_scanf_float+0x22e>
 800c96a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c96e:	6021      	str	r1, [r4, #0]
 800c970:	e070      	b.n	800ca54 <_scanf_float+0x1ec>
 800c972:	b96a      	cbnz	r2, 800c990 <_scanf_float+0x128>
 800c974:	f1ba 0f00 	cmp.w	sl, #0
 800c978:	d10c      	bne.n	800c994 <_scanf_float+0x12c>
 800c97a:	6821      	ldr	r1, [r4, #0]
 800c97c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c980:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c984:	d106      	bne.n	800c994 <_scanf_float+0x12c>
 800c986:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c98a:	6021      	str	r1, [r4, #0]
 800c98c:	2201      	movs	r2, #1
 800c98e:	e061      	b.n	800ca54 <_scanf_float+0x1ec>
 800c990:	2a02      	cmp	r2, #2
 800c992:	d05e      	beq.n	800ca52 <_scanf_float+0x1ea>
 800c994:	f1bb 0f01 	cmp.w	fp, #1
 800c998:	d01e      	beq.n	800c9d8 <_scanf_float+0x170>
 800c99a:	f1bb 0f04 	cmp.w	fp, #4
 800c99e:	e01a      	b.n	800c9d6 <_scanf_float+0x16e>
 800c9a0:	2a01      	cmp	r2, #1
 800c9a2:	d178      	bne.n	800ca96 <_scanf_float+0x22e>
 800c9a4:	2202      	movs	r2, #2
 800c9a6:	e055      	b.n	800ca54 <_scanf_float+0x1ec>
 800c9a8:	f1bb 0f00 	cmp.w	fp, #0
 800c9ac:	d10e      	bne.n	800c9cc <_scanf_float+0x164>
 800c9ae:	f1ba 0f00 	cmp.w	sl, #0
 800c9b2:	d173      	bne.n	800ca9c <_scanf_float+0x234>
 800c9b4:	6821      	ldr	r1, [r4, #0]
 800c9b6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c9ba:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c9be:	d171      	bne.n	800caa4 <_scanf_float+0x23c>
 800c9c0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c9c4:	6021      	str	r1, [r4, #0]
 800c9c6:	f04f 0b01 	mov.w	fp, #1
 800c9ca:	e043      	b.n	800ca54 <_scanf_float+0x1ec>
 800c9cc:	f1bb 0f03 	cmp.w	fp, #3
 800c9d0:	d002      	beq.n	800c9d8 <_scanf_float+0x170>
 800c9d2:	f1bb 0f05 	cmp.w	fp, #5
 800c9d6:	d15e      	bne.n	800ca96 <_scanf_float+0x22e>
 800c9d8:	f10b 0b01 	add.w	fp, fp, #1
 800c9dc:	fa5f fb8b 	uxtb.w	fp, fp
 800c9e0:	e038      	b.n	800ca54 <_scanf_float+0x1ec>
 800c9e2:	f1bb 0f02 	cmp.w	fp, #2
 800c9e6:	d156      	bne.n	800ca96 <_scanf_float+0x22e>
 800c9e8:	f04f 0b03 	mov.w	fp, #3
 800c9ec:	e032      	b.n	800ca54 <_scanf_float+0x1ec>
 800c9ee:	f1bb 0f06 	cmp.w	fp, #6
 800c9f2:	d150      	bne.n	800ca96 <_scanf_float+0x22e>
 800c9f4:	f04f 0b07 	mov.w	fp, #7
 800c9f8:	e02c      	b.n	800ca54 <_scanf_float+0x1ec>
 800c9fa:	f1bb 0f07 	cmp.w	fp, #7
 800c9fe:	d14a      	bne.n	800ca96 <_scanf_float+0x22e>
 800ca00:	f04f 0b08 	mov.w	fp, #8
 800ca04:	e026      	b.n	800ca54 <_scanf_float+0x1ec>
 800ca06:	6821      	ldr	r1, [r4, #0]
 800ca08:	0588      	lsls	r0, r1, #22
 800ca0a:	d544      	bpl.n	800ca96 <_scanf_float+0x22e>
 800ca0c:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ca10:	6021      	str	r1, [r4, #0]
 800ca12:	f8cd a004 	str.w	sl, [sp, #4]
 800ca16:	e01d      	b.n	800ca54 <_scanf_float+0x1ec>
 800ca18:	6821      	ldr	r1, [r4, #0]
 800ca1a:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ca1e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ca22:	d004      	beq.n	800ca2e <_scanf_float+0x1c6>
 800ca24:	0548      	lsls	r0, r1, #21
 800ca26:	d536      	bpl.n	800ca96 <_scanf_float+0x22e>
 800ca28:	f1ba 0f00 	cmp.w	sl, #0
 800ca2c:	d03a      	beq.n	800caa4 <_scanf_float+0x23c>
 800ca2e:	0588      	lsls	r0, r1, #22
 800ca30:	bf5c      	itt	pl
 800ca32:	9801      	ldrpl	r0, [sp, #4]
 800ca34:	f8cd 800c 	strpl.w	r8, [sp, #12]
 800ca38:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ca3c:	bf58      	it	pl
 800ca3e:	ebc0 000a 	rsbpl	r0, r0, sl
 800ca42:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ca46:	bf58      	it	pl
 800ca48:	9002      	strpl	r0, [sp, #8]
 800ca4a:	6021      	str	r1, [r4, #0]
 800ca4c:	f04f 0a00 	mov.w	sl, #0
 800ca50:	e000      	b.n	800ca54 <_scanf_float+0x1ec>
 800ca52:	2203      	movs	r2, #3
 800ca54:	f888 3000 	strb.w	r3, [r8]
 800ca58:	f108 0801 	add.w	r8, r8, #1
 800ca5c:	68a3      	ldr	r3, [r4, #8]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	60a3      	str	r3, [r4, #8]
 800ca62:	6923      	ldr	r3, [r4, #16]
 800ca64:	3301      	adds	r3, #1
 800ca66:	6123      	str	r3, [r4, #16]
 800ca68:	686b      	ldr	r3, [r5, #4]
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	606b      	str	r3, [r5, #4]
 800ca70:	dd03      	ble.n	800ca7a <_scanf_float+0x212>
 800ca72:	682b      	ldr	r3, [r5, #0]
 800ca74:	3301      	adds	r3, #1
 800ca76:	602b      	str	r3, [r5, #0]
 800ca78:	e71d      	b.n	800c8b6 <_scanf_float+0x4e>
 800ca7a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca7e:	9205      	str	r2, [sp, #20]
 800ca80:	4630      	mov	r0, r6
 800ca82:	4629      	mov	r1, r5
 800ca84:	f8cd c010 	str.w	ip, [sp, #16]
 800ca88:	4798      	blx	r3
 800ca8a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800ca8e:	9a05      	ldr	r2, [sp, #20]
 800ca90:	2800      	cmp	r0, #0
 800ca92:	f43f af10 	beq.w	800c8b6 <_scanf_float+0x4e>
 800ca96:	f1ba 0f00 	cmp.w	sl, #0
 800ca9a:	d003      	beq.n	800caa4 <_scanf_float+0x23c>
 800ca9c:	6823      	ldr	r3, [r4, #0]
 800ca9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800caa2:	6023      	str	r3, [r4, #0]
 800caa4:	3a01      	subs	r2, #1
 800caa6:	2a01      	cmp	r2, #1
 800caa8:	d80e      	bhi.n	800cac8 <_scanf_float+0x260>
 800caaa:	45b8      	cmp	r8, r7
 800caac:	d90a      	bls.n	800cac4 <_scanf_float+0x25c>
 800caae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cab2:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 800cab6:	4630      	mov	r0, r6
 800cab8:	462a      	mov	r2, r5
 800caba:	4798      	blx	r3
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	3b01      	subs	r3, #1
 800cac0:	6123      	str	r3, [r4, #16]
 800cac2:	e7f2      	b.n	800caaa <_scanf_float+0x242>
 800cac4:	2501      	movs	r5, #1
 800cac6:	e0ae      	b.n	800cc26 <_scanf_float+0x3be>
 800cac8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cacc:	2b06      	cmp	r3, #6
 800cace:	d822      	bhi.n	800cb16 <_scanf_float+0x2ae>
 800cad0:	f1bb 0f02 	cmp.w	fp, #2
 800cad4:	d912      	bls.n	800cafc <_scanf_float+0x294>
 800cad6:	f1ab 0b03 	sub.w	fp, fp, #3
 800cada:	fa5f fb8b 	uxtb.w	fp, fp
 800cade:	ebcb 0b08 	rsb	fp, fp, r8
 800cae2:	45d8      	cmp	r8, fp
 800cae4:	d017      	beq.n	800cb16 <_scanf_float+0x2ae>
 800cae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800caea:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 800caee:	4630      	mov	r0, r6
 800caf0:	462a      	mov	r2, r5
 800caf2:	4798      	blx	r3
 800caf4:	6923      	ldr	r3, [r4, #16]
 800caf6:	3b01      	subs	r3, #1
 800caf8:	6123      	str	r3, [r4, #16]
 800cafa:	e7f2      	b.n	800cae2 <_scanf_float+0x27a>
 800cafc:	45b8      	cmp	r8, r7
 800cafe:	d9e1      	bls.n	800cac4 <_scanf_float+0x25c>
 800cb00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb04:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 800cb08:	4630      	mov	r0, r6
 800cb0a:	462a      	mov	r2, r5
 800cb0c:	4798      	blx	r3
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	3b01      	subs	r3, #1
 800cb12:	6123      	str	r3, [r4, #16]
 800cb14:	e7f2      	b.n	800cafc <_scanf_float+0x294>
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	05da      	lsls	r2, r3, #23
 800cb1a:	d52c      	bpl.n	800cb76 <_scanf_float+0x30e>
 800cb1c:	055b      	lsls	r3, r3, #21
 800cb1e:	d50c      	bpl.n	800cb3a <_scanf_float+0x2d2>
 800cb20:	45b8      	cmp	r8, r7
 800cb22:	d9cf      	bls.n	800cac4 <_scanf_float+0x25c>
 800cb24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb28:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	462a      	mov	r2, r5
 800cb30:	4798      	blx	r3
 800cb32:	6923      	ldr	r3, [r4, #16]
 800cb34:	3b01      	subs	r3, #1
 800cb36:	6123      	str	r3, [r4, #16]
 800cb38:	e7f2      	b.n	800cb20 <_scanf_float+0x2b8>
 800cb3a:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800cb3e:	6923      	ldr	r3, [r4, #16]
 800cb40:	2965      	cmp	r1, #101	; 0x65
 800cb42:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb46:	f108 3bff 	add.w	fp, r8, #4294967295
 800cb4a:	6123      	str	r3, [r4, #16]
 800cb4c:	d00d      	beq.n	800cb6a <_scanf_float+0x302>
 800cb4e:	2945      	cmp	r1, #69	; 0x45
 800cb50:	d00b      	beq.n	800cb6a <_scanf_float+0x302>
 800cb52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb56:	4630      	mov	r0, r6
 800cb58:	462a      	mov	r2, r5
 800cb5a:	4798      	blx	r3
 800cb5c:	6923      	ldr	r3, [r4, #16]
 800cb5e:	f818 1c02 	ldrb.w	r1, [r8, #-2]
 800cb62:	3b01      	subs	r3, #1
 800cb64:	f1a8 0b02 	sub.w	fp, r8, #2
 800cb68:	6123      	str	r3, [r4, #16]
 800cb6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb6e:	4630      	mov	r0, r6
 800cb70:	462a      	mov	r2, r5
 800cb72:	4798      	blx	r3
 800cb74:	46d8      	mov	r8, fp
 800cb76:	6825      	ldr	r5, [r4, #0]
 800cb78:	f015 0510 	ands.w	r5, r5, #16
 800cb7c:	d152      	bne.n	800cc24 <_scanf_float+0x3bc>
 800cb7e:	f888 5000 	strb.w	r5, [r8]
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb8c:	d105      	bne.n	800cb9a <_scanf_float+0x332>
 800cb8e:	9b01      	ldr	r3, [sp, #4]
 800cb90:	ebc3 030a 	rsb	r3, r3, sl
 800cb94:	425a      	negs	r2, r3
 800cb96:	b96b      	cbnz	r3, 800cbb4 <_scanf_float+0x34c>
 800cb98:	e016      	b.n	800cbc8 <_scanf_float+0x360>
 800cb9a:	9b02      	ldr	r3, [sp, #8]
 800cb9c:	b1a3      	cbz	r3, 800cbc8 <_scanf_float+0x360>
 800cb9e:	9b03      	ldr	r3, [sp, #12]
 800cba0:	462a      	mov	r2, r5
 800cba2:	1c59      	adds	r1, r3, #1
 800cba4:	4630      	mov	r0, r6
 800cba6:	230a      	movs	r3, #10
 800cba8:	f000 fefe 	bl	800d9a8 <_strtol_r>
 800cbac:	9b02      	ldr	r3, [sp, #8]
 800cbae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cbb2:	1ac2      	subs	r2, r0, r3
 800cbb4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cbb8:	4598      	cmp	r8, r3
 800cbba:	bf28      	it	cs
 800cbbc:	f504 78b7 	addcs.w	r8, r4, #366	; 0x16e
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	491b      	ldr	r1, [pc, #108]	; (800cc30 <_scanf_float+0x3c8>)
 800cbc4:	f000 f864 	bl	800cc90 <siprintf>
 800cbc8:	4630      	mov	r0, r6
 800cbca:	4639      	mov	r1, r7
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f000 f8d7 	bl	800cd80 <_strtod_r>
 800cbd2:	6822      	ldr	r2, [r4, #0]
 800cbd4:	f8d9 3000 	ldr.w	r3, [r9]
 800cbd8:	f012 0f02 	tst.w	r2, #2
 800cbdc:	4606      	mov	r6, r0
 800cbde:	460f      	mov	r7, r1
 800cbe0:	d003      	beq.n	800cbea <_scanf_float+0x382>
 800cbe2:	1d1a      	adds	r2, r3, #4
 800cbe4:	f8c9 2000 	str.w	r2, [r9]
 800cbe8:	e006      	b.n	800cbf8 <_scanf_float+0x390>
 800cbea:	f012 0f04 	tst.w	r2, #4
 800cbee:	f103 0204 	add.w	r2, r3, #4
 800cbf2:	f8c9 2000 	str.w	r2, [r9]
 800cbf6:	d003      	beq.n	800cc00 <_scanf_float+0x398>
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	e9c3 6700 	strd	r6, r7, [r3]
 800cbfe:	e00d      	b.n	800cc1c <_scanf_float+0x3b4>
 800cc00:	f8d3 8000 	ldr.w	r8, [r3]
 800cc04:	f000 f816 	bl	800cc34 <__fpclassifyd>
 800cc08:	b910      	cbnz	r0, 800cc10 <_scanf_float+0x3a8>
 800cc0a:	f000 f83d 	bl	800cc88 <nanf>
 800cc0e:	e003      	b.n	800cc18 <_scanf_float+0x3b0>
 800cc10:	4630      	mov	r0, r6
 800cc12:	4639      	mov	r1, r7
 800cc14:	f7ff f934 	bl	800be80 <__aeabi_d2f>
 800cc18:	f8c8 0000 	str.w	r0, [r8]
 800cc1c:	68e3      	ldr	r3, [r4, #12]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	60e3      	str	r3, [r4, #12]
 800cc22:	e000      	b.n	800cc26 <_scanf_float+0x3be>
 800cc24:	2500      	movs	r5, #0
 800cc26:	4628      	mov	r0, r5
 800cc28:	b007      	add	sp, #28
 800cc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2e:	bf00      	nop
 800cc30:	0801044e 	.word	0x0801044e

0800cc34 <__fpclassifyd>:
 800cc34:	460a      	mov	r2, r1
 800cc36:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 800cc3a:	b510      	push	{r4, lr}
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	d01b      	beq.n	800cc78 <__fpclassifyd+0x44>
 800cc40:	480f      	ldr	r0, [pc, #60]	; (800cc80 <__fpclassifyd+0x4c>)
 800cc42:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 800cc46:	4284      	cmp	r4, r0
 800cc48:	d910      	bls.n	800cc6c <__fpclassifyd+0x38>
 800cc4a:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 800cc4e:	480c      	ldr	r0, [pc, #48]	; (800cc80 <__fpclassifyd+0x4c>)
 800cc50:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800cc54:	4282      	cmp	r2, r0
 800cc56:	d909      	bls.n	800cc6c <__fpclassifyd+0x38>
 800cc58:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cc5c:	d308      	bcc.n	800cc70 <__fpclassifyd+0x3c>
 800cc5e:	4a09      	ldr	r2, [pc, #36]	; (800cc84 <__fpclassifyd+0x50>)
 800cc60:	4291      	cmp	r1, r2
 800cc62:	d107      	bne.n	800cc74 <__fpclassifyd+0x40>
 800cc64:	fab3 f083 	clz	r0, r3
 800cc68:	0940      	lsrs	r0, r0, #5
 800cc6a:	bd10      	pop	{r4, pc}
 800cc6c:	2004      	movs	r0, #4
 800cc6e:	bd10      	pop	{r4, pc}
 800cc70:	2003      	movs	r0, #3
 800cc72:	bd10      	pop	{r4, pc}
 800cc74:	2000      	movs	r0, #0
 800cc76:	bd10      	pop	{r4, pc}
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d1e6      	bne.n	800cc4a <__fpclassifyd+0x16>
 800cc7c:	2002      	movs	r0, #2
 800cc7e:	bd10      	pop	{r4, pc}
 800cc80:	7fdfffff 	.word	0x7fdfffff
 800cc84:	7ff00000 	.word	0x7ff00000

0800cc88 <nanf>:
 800cc88:	4800      	ldr	r0, [pc, #0]	; (800cc8c <nanf+0x4>)
 800cc8a:	4770      	bx	lr
 800cc8c:	7fc00000 	.word	0x7fc00000

0800cc90 <siprintf>:
 800cc90:	b40e      	push	{r1, r2, r3}
 800cc92:	b500      	push	{lr}
 800cc94:	b09c      	sub	sp, #112	; 0x70
 800cc96:	f44f 7102 	mov.w	r1, #520	; 0x208
 800cc9a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800cc9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cca2:	9104      	str	r1, [sp, #16]
 800cca4:	9107      	str	r1, [sp, #28]
 800cca6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ccaa:	ab1d      	add	r3, sp, #116	; 0x74
 800ccac:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ccb0:	4908      	ldr	r1, [pc, #32]	; (800ccd4 <siprintf+0x44>)
 800ccb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccb6:	9002      	str	r0, [sp, #8]
 800ccb8:	9006      	str	r0, [sp, #24]
 800ccba:	6808      	ldr	r0, [r1, #0]
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	a902      	add	r1, sp, #8
 800ccc0:	f002 fd6a 	bl	800f798 <_svfiprintf_r>
 800ccc4:	9b02      	ldr	r3, [sp, #8]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	701a      	strb	r2, [r3, #0]
 800ccca:	b01c      	add	sp, #112	; 0x70
 800cccc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccd0:	b003      	add	sp, #12
 800ccd2:	4770      	bx	lr
 800ccd4:	200001f0 	.word	0x200001f0

0800ccd8 <strcat>:
 800ccd8:	b510      	push	{r4, lr}
 800ccda:	4602      	mov	r2, r0
 800ccdc:	4613      	mov	r3, r2
 800ccde:	3201      	adds	r2, #1
 800cce0:	781c      	ldrb	r4, [r3, #0]
 800cce2:	2c00      	cmp	r4, #0
 800cce4:	d1fa      	bne.n	800ccdc <strcat+0x4>
 800cce6:	3b01      	subs	r3, #1
 800cce8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccf0:	2a00      	cmp	r2, #0
 800ccf2:	d1f9      	bne.n	800cce8 <strcat+0x10>
 800ccf4:	bd10      	pop	{r4, pc}

0800ccf6 <strcpy>:
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccfc:	f803 2b01 	strb.w	r2, [r3], #1
 800cd00:	2a00      	cmp	r2, #0
 800cd02:	d1f9      	bne.n	800ccf8 <strcpy+0x2>
 800cd04:	4770      	bx	lr

0800cd06 <strlen>:
 800cd06:	4603      	mov	r3, r0
 800cd08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	d1fb      	bne.n	800cd08 <strlen+0x2>
 800cd10:	1a18      	subs	r0, r3, r0
 800cd12:	3801      	subs	r0, #1
 800cd14:	4770      	bx	lr

0800cd16 <match>:
 800cd16:	b530      	push	{r4, r5, lr}
 800cd18:	6803      	ldr	r3, [r0, #0]
 800cd1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd1e:	3301      	adds	r3, #1
 800cd20:	b14c      	cbz	r4, 800cd36 <match+0x20>
 800cd22:	781a      	ldrb	r2, [r3, #0]
 800cd24:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd28:	2d19      	cmp	r5, #25
 800cd2a:	bf98      	it	ls
 800cd2c:	3220      	addls	r2, #32
 800cd2e:	42a2      	cmp	r2, r4
 800cd30:	d0f3      	beq.n	800cd1a <match+0x4>
 800cd32:	2000      	movs	r0, #0
 800cd34:	bd30      	pop	{r4, r5, pc}
 800cd36:	6003      	str	r3, [r0, #0]
 800cd38:	2001      	movs	r0, #1
 800cd3a:	bd30      	pop	{r4, r5, pc}

0800cd3c <sulp>:
 800cd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd40:	460f      	mov	r7, r1
 800cd42:	4690      	mov	r8, r2
 800cd44:	f002 fafc 	bl	800f340 <__ulp>
 800cd48:	4604      	mov	r4, r0
 800cd4a:	460d      	mov	r5, r1
 800cd4c:	f1b8 0f00 	cmp.w	r8, #0
 800cd50:	d011      	beq.n	800cd76 <sulp+0x3a>
 800cd52:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800cd56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	dd0b      	ble.n	800cd76 <sulp+0x3a>
 800cd5e:	051b      	lsls	r3, r3, #20
 800cd60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cd64:	2400      	movs	r4, #0
 800cd66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	462b      	mov	r3, r5
 800cd6e:	f7fe fe75 	bl	800ba5c <__aeabi_dmul>
 800cd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd76:	4620      	mov	r0, r4
 800cd78:	4629      	mov	r1, r5
 800cd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800cd80 <_strtod_r>:
 800cd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd84:	b09f      	sub	sp, #124	; 0x7c
 800cd86:	2300      	movs	r3, #0
 800cd88:	4683      	mov	fp, r0
 800cd8a:	468a      	mov	sl, r1
 800cd8c:	9216      	str	r2, [sp, #88]	; 0x58
 800cd8e:	931a      	str	r3, [sp, #104]	; 0x68
 800cd90:	f04f 0800 	mov.w	r8, #0
 800cd94:	f04f 0900 	mov.w	r9, #0
 800cd98:	9119      	str	r1, [sp, #100]	; 0x64
 800cd9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd9c:	781a      	ldrb	r2, [r3, #0]
 800cd9e:	2a0d      	cmp	r2, #13
 800cda0:	d805      	bhi.n	800cdae <_strtod_r+0x2e>
 800cda2:	2a09      	cmp	r2, #9
 800cda4:	d213      	bcs.n	800cdce <_strtod_r+0x4e>
 800cda6:	2a00      	cmp	r2, #0
 800cda8:	f000 81be 	beq.w	800d128 <_strtod_r+0x3a8>
 800cdac:	e012      	b.n	800cdd4 <_strtod_r+0x54>
 800cdae:	2a2b      	cmp	r2, #43	; 0x2b
 800cdb0:	d006      	beq.n	800cdc0 <_strtod_r+0x40>
 800cdb2:	2a2d      	cmp	r2, #45	; 0x2d
 800cdb4:	d002      	beq.n	800cdbc <_strtod_r+0x3c>
 800cdb6:	2a20      	cmp	r2, #32
 800cdb8:	d10c      	bne.n	800cdd4 <_strtod_r+0x54>
 800cdba:	e008      	b.n	800cdce <_strtod_r+0x4e>
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	e000      	b.n	800cdc2 <_strtod_r+0x42>
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	9209      	str	r2, [sp, #36]	; 0x24
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	9219      	str	r2, [sp, #100]	; 0x64
 800cdc8:	785b      	ldrb	r3, [r3, #1]
 800cdca:	b92b      	cbnz	r3, 800cdd8 <_strtod_r+0x58>
 800cdcc:	e1ac      	b.n	800d128 <_strtod_r+0x3a8>
 800cdce:	3301      	adds	r3, #1
 800cdd0:	9319      	str	r3, [sp, #100]	; 0x64
 800cdd2:	e7e2      	b.n	800cd9a <_strtod_r+0x1a>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd8:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800cdda:	7823      	ldrb	r3, [r4, #0]
 800cddc:	2b30      	cmp	r3, #48	; 0x30
 800cdde:	d15c      	bne.n	800ce9a <_strtod_r+0x11a>
 800cde0:	7863      	ldrb	r3, [r4, #1]
 800cde2:	2b58      	cmp	r3, #88	; 0x58
 800cde4:	d001      	beq.n	800cdea <_strtod_r+0x6a>
 800cde6:	2b78      	cmp	r3, #120	; 0x78
 800cde8:	d14c      	bne.n	800ce84 <_strtod_r+0x104>
 800cdea:	ab1a      	add	r3, sp, #104	; 0x68
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf0:	9301      	str	r3, [sp, #4]
 800cdf2:	4658      	mov	r0, fp
 800cdf4:	a919      	add	r1, sp, #100	; 0x64
 800cdf6:	4ab1      	ldr	r2, [pc, #708]	; (800d0bc <_strtod_r+0x33c>)
 800cdf8:	ab1b      	add	r3, sp, #108	; 0x6c
 800cdfa:	f001 fcf8 	bl	800e7ee <__gethex>
 800cdfe:	f010 0607 	ands.w	r6, r0, #7
 800ce02:	4605      	mov	r5, r0
 800ce04:	f000 859b 	beq.w	800d93e <_strtod_r+0xbbe>
 800ce08:	2e06      	cmp	r6, #6
 800ce0a:	d105      	bne.n	800ce18 <_strtod_r+0x98>
 800ce0c:	3401      	adds	r4, #1
 800ce0e:	2300      	movs	r3, #0
 800ce10:	9419      	str	r4, [sp, #100]	; 0x64
 800ce12:	9309      	str	r3, [sp, #36]	; 0x24
 800ce14:	f000 bd93 	b.w	800d93e <_strtod_r+0xbbe>
 800ce18:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ce1a:	b13a      	cbz	r2, 800ce2c <_strtod_r+0xac>
 800ce1c:	a81c      	add	r0, sp, #112	; 0x70
 800ce1e:	2135      	movs	r1, #53	; 0x35
 800ce20:	f002 fb7c 	bl	800f51c <__copybits>
 800ce24:	4658      	mov	r0, fp
 800ce26:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ce28:	f001 fff2 	bl	800ee10 <_Bfree>
 800ce2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ce2e:	2e06      	cmp	r6, #6
 800ce30:	d821      	bhi.n	800ce76 <_strtod_r+0xf6>
 800ce32:	e8df f006 	tbb	[pc, r6]
 800ce36:	0d04      	.short	0x0d04
 800ce38:	0d1c1708 	.word	0x0d1c1708
 800ce3c:	04          	.byte	0x04
 800ce3d:	00          	.byte	0x00
 800ce3e:	f04f 0900 	mov.w	r9, #0
 800ce42:	46c8      	mov	r8, r9
 800ce44:	e017      	b.n	800ce76 <_strtod_r+0xf6>
 800ce46:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ce4a:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 800ce4e:	e012      	b.n	800ce76 <_strtod_r+0xf6>
 800ce50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce52:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ce56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ce5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ce5e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ce62:	e008      	b.n	800ce76 <_strtod_r+0xf6>
 800ce64:	f8df 9258 	ldr.w	r9, [pc, #600]	; 800d0c0 <_strtod_r+0x340>
 800ce68:	f04f 0800 	mov.w	r8, #0
 800ce6c:	e003      	b.n	800ce76 <_strtod_r+0xf6>
 800ce6e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ce72:	f04f 38ff 	mov.w	r8, #4294967295
 800ce76:	0729      	lsls	r1, r5, #28
 800ce78:	f140 8561 	bpl.w	800d93e <_strtod_r+0xbbe>
 800ce7c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ce80:	f000 bd5d 	b.w	800d93e <_strtod_r+0xbbe>
 800ce84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce86:	1c5a      	adds	r2, r3, #1
 800ce88:	9219      	str	r2, [sp, #100]	; 0x64
 800ce8a:	785b      	ldrb	r3, [r3, #1]
 800ce8c:	2b30      	cmp	r3, #48	; 0x30
 800ce8e:	d0f9      	beq.n	800ce84 <_strtod_r+0x104>
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f000 8554 	beq.w	800d93e <_strtod_r+0xbbe>
 800ce96:	2301      	movs	r3, #1
 800ce98:	e000      	b.n	800ce9c <_strtod_r+0x11c>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	2600      	movs	r6, #0
 800ce9e:	9304      	str	r3, [sp, #16]
 800cea0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cea2:	9305      	str	r3, [sp, #20]
 800cea4:	9603      	str	r6, [sp, #12]
 800cea6:	4635      	mov	r5, r6
 800cea8:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800ceaa:	7827      	ldrb	r7, [r4, #0]
 800ceac:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ceb0:	b2da      	uxtb	r2, r3
 800ceb2:	2a09      	cmp	r2, #9
 800ceb4:	d810      	bhi.n	800ced8 <_strtod_r+0x158>
 800ceb6:	2d08      	cmp	r5, #8
 800ceb8:	bfd8      	it	le
 800ceba:	9903      	ldrle	r1, [sp, #12]
 800cebc:	f04f 020a 	mov.w	r2, #10
 800cec0:	bfd8      	it	le
 800cec2:	fb02 3301 	mlale	r3, r2, r1, r3
 800cec6:	f104 0401 	add.w	r4, r4, #1
 800ceca:	bfd4      	ite	le
 800cecc:	9303      	strle	r3, [sp, #12]
 800cece:	fb02 3606 	mlagt	r6, r2, r6, r3
 800ced2:	3501      	adds	r5, #1
 800ced4:	9419      	str	r4, [sp, #100]	; 0x64
 800ced6:	e7e7      	b.n	800cea8 <_strtod_r+0x128>
 800ced8:	4658      	mov	r0, fp
 800ceda:	f001 ff49 	bl	800ed70 <_localeconv_r>
 800cede:	6801      	ldr	r1, [r0, #0]
 800cee0:	9102      	str	r1, [sp, #8]
 800cee2:	4658      	mov	r0, fp
 800cee4:	f001 ff44 	bl	800ed70 <_localeconv_r>
 800cee8:	6800      	ldr	r0, [r0, #0]
 800ceea:	f7ff ff0c 	bl	800cd06 <strlen>
 800ceee:	9902      	ldr	r1, [sp, #8]
 800cef0:	4602      	mov	r2, r0
 800cef2:	4620      	mov	r0, r4
 800cef4:	f002 fd52 	bl	800f99c <strncmp>
 800cef8:	b128      	cbz	r0, 800cf06 <_strtod_r+0x186>
 800cefa:	2000      	movs	r0, #0
 800cefc:	463b      	mov	r3, r7
 800cefe:	462c      	mov	r4, r5
 800cf00:	9002      	str	r0, [sp, #8]
 800cf02:	4607      	mov	r7, r0
 800cf04:	e05d      	b.n	800cfc2 <_strtod_r+0x242>
 800cf06:	9002      	str	r0, [sp, #8]
 800cf08:	4658      	mov	r0, fp
 800cf0a:	f001 ff31 	bl	800ed70 <_localeconv_r>
 800cf0e:	6800      	ldr	r0, [r0, #0]
 800cf10:	f7ff fef9 	bl	800cd06 <strlen>
 800cf14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf16:	9902      	ldr	r1, [sp, #8]
 800cf18:	181a      	adds	r2, r3, r0
 800cf1a:	9219      	str	r2, [sp, #100]	; 0x64
 800cf1c:	5c1b      	ldrb	r3, [r3, r0]
 800cf1e:	2d00      	cmp	r5, #0
 800cf20:	d147      	bne.n	800cfb2 <_strtod_r+0x232>
 800cf22:	4628      	mov	r0, r5
 800cf24:	2b30      	cmp	r3, #48	; 0x30
 800cf26:	d105      	bne.n	800cf34 <_strtod_r+0x1b4>
 800cf28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	9219      	str	r2, [sp, #100]	; 0x64
 800cf2e:	3001      	adds	r0, #1
 800cf30:	785b      	ldrb	r3, [r3, #1]
 800cf32:	e7f7      	b.n	800cf24 <_strtod_r+0x1a4>
 800cf34:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cf38:	2a08      	cmp	r2, #8
 800cf3a:	d848      	bhi.n	800cfce <_strtod_r+0x24e>
 800cf3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cf3e:	9002      	str	r0, [sp, #8]
 800cf40:	2000      	movs	r0, #0
 800cf42:	9205      	str	r2, [sp, #20]
 800cf44:	4604      	mov	r4, r0
 800cf46:	3b30      	subs	r3, #48	; 0x30
 800cf48:	f100 0101 	add.w	r1, r0, #1
 800cf4c:	d02b      	beq.n	800cfa6 <_strtod_r+0x226>
 800cf4e:	9a02      	ldr	r2, [sp, #8]
 800cf50:	440a      	add	r2, r1
 800cf52:	9202      	str	r2, [sp, #8]
 800cf54:	1907      	adds	r7, r0, r4
 800cf56:	4621      	mov	r1, r4
 800cf58:	42b9      	cmp	r1, r7
 800cf5a:	d013      	beq.n	800cf84 <_strtod_r+0x204>
 800cf5c:	3101      	adds	r1, #1
 800cf5e:	f101 3eff 	add.w	lr, r1, #4294967295
 800cf62:	f1be 0f08 	cmp.w	lr, #8
 800cf66:	dc06      	bgt.n	800cf76 <_strtod_r+0x1f6>
 800cf68:	9a03      	ldr	r2, [sp, #12]
 800cf6a:	f04f 0e0a 	mov.w	lr, #10
 800cf6e:	fb0e f202 	mul.w	r2, lr, r2
 800cf72:	9203      	str	r2, [sp, #12]
 800cf74:	e7f0      	b.n	800cf58 <_strtod_r+0x1d8>
 800cf76:	2910      	cmp	r1, #16
 800cf78:	bfdc      	itt	le
 800cf7a:	f04f 0e0a 	movle.w	lr, #10
 800cf7e:	fb0e f606 	mulle.w	r6, lr, r6
 800cf82:	e7e9      	b.n	800cf58 <_strtod_r+0x1d8>
 800cf84:	4420      	add	r0, r4
 800cf86:	2808      	cmp	r0, #8
 800cf88:	f100 0401 	add.w	r4, r0, #1
 800cf8c:	dc05      	bgt.n	800cf9a <_strtod_r+0x21a>
 800cf8e:	9a03      	ldr	r2, [sp, #12]
 800cf90:	210a      	movs	r1, #10
 800cf92:	fb01 3302 	mla	r3, r1, r2, r3
 800cf96:	9303      	str	r3, [sp, #12]
 800cf98:	e004      	b.n	800cfa4 <_strtod_r+0x224>
 800cf9a:	2c10      	cmp	r4, #16
 800cf9c:	bfdc      	itt	le
 800cf9e:	210a      	movle	r1, #10
 800cfa0:	fb01 3606 	mlale	r6, r1, r6, r3
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cfa8:	1c58      	adds	r0, r3, #1
 800cfaa:	9019      	str	r0, [sp, #100]	; 0x64
 800cfac:	785b      	ldrb	r3, [r3, #1]
 800cfae:	4608      	mov	r0, r1
 800cfb0:	e002      	b.n	800cfb8 <_strtod_r+0x238>
 800cfb2:	462c      	mov	r4, r5
 800cfb4:	4608      	mov	r0, r1
 800cfb6:	9102      	str	r1, [sp, #8]
 800cfb8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cfbc:	2909      	cmp	r1, #9
 800cfbe:	d9c2      	bls.n	800cf46 <_strtod_r+0x1c6>
 800cfc0:	2701      	movs	r7, #1
 800cfc2:	2b65      	cmp	r3, #101	; 0x65
 800cfc4:	d001      	beq.n	800cfca <_strtod_r+0x24a>
 800cfc6:	2b45      	cmp	r3, #69	; 0x45
 800cfc8:	d160      	bne.n	800d08c <_strtod_r+0x30c>
 800cfca:	b974      	cbnz	r4, 800cfea <_strtod_r+0x26a>
 800cfcc:	e005      	b.n	800cfda <_strtod_r+0x25a>
 800cfce:	2b65      	cmp	r3, #101	; 0x65
 800cfd0:	f040 84c3 	bne.w	800d95a <_strtod_r+0xbda>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	9302      	str	r3, [sp, #8]
 800cfd8:	2701      	movs	r7, #1
 800cfda:	b928      	cbnz	r0, 800cfe8 <_strtod_r+0x268>
 800cfdc:	9b04      	ldr	r3, [sp, #16]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 80a2 	beq.w	800d128 <_strtod_r+0x3a8>
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	e000      	b.n	800cfea <_strtod_r+0x26a>
 800cfe8:	2400      	movs	r4, #0
 800cfea:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800cfee:	f10a 0301 	add.w	r3, sl, #1
 800cff2:	9319      	str	r3, [sp, #100]	; 0x64
 800cff4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800cff8:	2b2b      	cmp	r3, #43	; 0x2b
 800cffa:	d007      	beq.n	800d00c <_strtod_r+0x28c>
 800cffc:	2b2d      	cmp	r3, #45	; 0x2d
 800cffe:	d002      	beq.n	800d006 <_strtod_r+0x286>
 800d000:	f04f 0c00 	mov.w	ip, #0
 800d004:	e009      	b.n	800d01a <_strtod_r+0x29a>
 800d006:	f04f 0c01 	mov.w	ip, #1
 800d00a:	e001      	b.n	800d010 <_strtod_r+0x290>
 800d00c:	f04f 0c00 	mov.w	ip, #0
 800d010:	f10a 0302 	add.w	r3, sl, #2
 800d014:	9319      	str	r3, [sp, #100]	; 0x64
 800d016:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800d01a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d01e:	2909      	cmp	r1, #9
 800d020:	d832      	bhi.n	800d088 <_strtod_r+0x308>
 800d022:	4619      	mov	r1, r3
 800d024:	2930      	cmp	r1, #48	; 0x30
 800d026:	d104      	bne.n	800d032 <_strtod_r+0x2b2>
 800d028:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d02a:	1c59      	adds	r1, r3, #1
 800d02c:	9119      	str	r1, [sp, #100]	; 0x64
 800d02e:	7859      	ldrb	r1, [r3, #1]
 800d030:	e7f8      	b.n	800d024 <_strtod_r+0x2a4>
 800d032:	f1a1 0e31 	sub.w	lr, r1, #49	; 0x31
 800d036:	f1be 0f08 	cmp.w	lr, #8
 800d03a:	460b      	mov	r3, r1
 800d03c:	d826      	bhi.n	800d08c <_strtod_r+0x30c>
 800d03e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d040:	9306      	str	r3, [sp, #24]
 800d042:	3930      	subs	r1, #48	; 0x30
 800d044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d046:	f103 0e01 	add.w	lr, r3, #1
 800d04a:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 800d04e:	785b      	ldrb	r3, [r3, #1]
 800d050:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d054:	2a09      	cmp	r2, #9
 800d056:	d805      	bhi.n	800d064 <_strtod_r+0x2e4>
 800d058:	f04f 0e0a 	mov.w	lr, #10
 800d05c:	fb0e 3101 	mla	r1, lr, r1, r3
 800d060:	3930      	subs	r1, #48	; 0x30
 800d062:	e7ef      	b.n	800d044 <_strtod_r+0x2c4>
 800d064:	9a06      	ldr	r2, [sp, #24]
 800d066:	ebc2 0e0e 	rsb	lr, r2, lr
 800d06a:	f1be 0f08 	cmp.w	lr, #8
 800d06e:	f644 6e1f 	movw	lr, #19999	; 0x4e1f
 800d072:	dc03      	bgt.n	800d07c <_strtod_r+0x2fc>
 800d074:	4571      	cmp	r1, lr
 800d076:	bfa8      	it	ge
 800d078:	4671      	movge	r1, lr
 800d07a:	e000      	b.n	800d07e <_strtod_r+0x2fe>
 800d07c:	4671      	mov	r1, lr
 800d07e:	f1bc 0f00 	cmp.w	ip, #0
 800d082:	d004      	beq.n	800d08e <_strtod_r+0x30e>
 800d084:	4249      	negs	r1, r1
 800d086:	e002      	b.n	800d08e <_strtod_r+0x30e>
 800d088:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 800d08c:	2100      	movs	r1, #0
 800d08e:	2c00      	cmp	r4, #0
 800d090:	d154      	bne.n	800d13c <_strtod_r+0x3bc>
 800d092:	2800      	cmp	r0, #0
 800d094:	f040 8453 	bne.w	800d93e <_strtod_r+0xbbe>
 800d098:	9a04      	ldr	r2, [sp, #16]
 800d09a:	2a00      	cmp	r2, #0
 800d09c:	f040 844f 	bne.w	800d93e <_strtod_r+0xbbe>
 800d0a0:	2f00      	cmp	r7, #0
 800d0a2:	d141      	bne.n	800d128 <_strtod_r+0x3a8>
 800d0a4:	2b4e      	cmp	r3, #78	; 0x4e
 800d0a6:	d020      	beq.n	800d0ea <_strtod_r+0x36a>
 800d0a8:	dc02      	bgt.n	800d0b0 <_strtod_r+0x330>
 800d0aa:	2b49      	cmp	r3, #73	; 0x49
 800d0ac:	d00a      	beq.n	800d0c4 <_strtod_r+0x344>
 800d0ae:	e03b      	b.n	800d128 <_strtod_r+0x3a8>
 800d0b0:	2b69      	cmp	r3, #105	; 0x69
 800d0b2:	d007      	beq.n	800d0c4 <_strtod_r+0x344>
 800d0b4:	2b6e      	cmp	r3, #110	; 0x6e
 800d0b6:	d018      	beq.n	800d0ea <_strtod_r+0x36a>
 800d0b8:	e036      	b.n	800d128 <_strtod_r+0x3a8>
 800d0ba:	bf00      	nop
 800d0bc:	08010454 	.word	0x08010454
 800d0c0:	7ff00000 	.word	0x7ff00000
 800d0c4:	a819      	add	r0, sp, #100	; 0x64
 800d0c6:	49a6      	ldr	r1, [pc, #664]	; (800d360 <_strtod_r+0x5e0>)
 800d0c8:	f7ff fe25 	bl	800cd16 <match>
 800d0cc:	b360      	cbz	r0, 800d128 <_strtod_r+0x3a8>
 800d0ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0d0:	49a4      	ldr	r1, [pc, #656]	; (800d364 <_strtod_r+0x5e4>)
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	a819      	add	r0, sp, #100	; 0x64
 800d0d6:	9319      	str	r3, [sp, #100]	; 0x64
 800d0d8:	f7ff fe1d 	bl	800cd16 <match>
 800d0dc:	b910      	cbnz	r0, 800d0e4 <_strtod_r+0x364>
 800d0de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	9319      	str	r3, [sp, #100]	; 0x64
 800d0e4:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800d37c <_strtod_r+0x5fc>
 800d0e8:	e01a      	b.n	800d120 <_strtod_r+0x3a0>
 800d0ea:	a819      	add	r0, sp, #100	; 0x64
 800d0ec:	499e      	ldr	r1, [pc, #632]	; (800d368 <_strtod_r+0x5e8>)
 800d0ee:	f7ff fe12 	bl	800cd16 <match>
 800d0f2:	b1c8      	cbz	r0, 800d128 <_strtod_r+0x3a8>
 800d0f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b28      	cmp	r3, #40	; 0x28
 800d0fa:	d10f      	bne.n	800d11c <_strtod_r+0x39c>
 800d0fc:	a819      	add	r0, sp, #100	; 0x64
 800d0fe:	499b      	ldr	r1, [pc, #620]	; (800d36c <_strtod_r+0x5ec>)
 800d100:	aa1c      	add	r2, sp, #112	; 0x70
 800d102:	f001 fdab 	bl	800ec5c <__hexnan>
 800d106:	2805      	cmp	r0, #5
 800d108:	d108      	bne.n	800d11c <_strtod_r+0x39c>
 800d10a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d10c:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800d110:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d114:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d118:	f000 bc11 	b.w	800d93e <_strtod_r+0xbbe>
 800d11c:	f8df 9260 	ldr.w	r9, [pc, #608]	; 800d380 <_strtod_r+0x600>
 800d120:	f04f 0800 	mov.w	r8, #0
 800d124:	f000 bc0b 	b.w	800d93e <_strtod_r+0xbbe>
 800d128:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d12a:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f000 8410 	beq.w	800d954 <_strtod_r+0xbd4>
 800d134:	2300      	movs	r3, #0
 800d136:	9309      	str	r3, [sp, #36]	; 0x24
 800d138:	f000 bc03 	b.w	800d942 <_strtod_r+0xbc2>
 800d13c:	9b02      	ldr	r3, [sp, #8]
 800d13e:	9803      	ldr	r0, [sp, #12]
 800d140:	1acb      	subs	r3, r1, r3
 800d142:	2d00      	cmp	r5, #0
 800d144:	bf14      	ite	ne
 800d146:	46aa      	movne	sl, r5
 800d148:	46a2      	moveq	sl, r4
 800d14a:	2c10      	cmp	r4, #16
 800d14c:	4625      	mov	r5, r4
 800d14e:	9304      	str	r3, [sp, #16]
 800d150:	bfa8      	it	ge
 800d152:	2510      	movge	r5, #16
 800d154:	f7fe fc0c 	bl	800b970 <__aeabi_ui2d>
 800d158:	2d09      	cmp	r5, #9
 800d15a:	4680      	mov	r8, r0
 800d15c:	4689      	mov	r9, r1
 800d15e:	dd13      	ble.n	800d188 <_strtod_r+0x408>
 800d160:	4b83      	ldr	r3, [pc, #524]	; (800d370 <_strtod_r+0x5f0>)
 800d162:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d166:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d16a:	f7fe fc77 	bl	800ba5c <__aeabi_dmul>
 800d16e:	4680      	mov	r8, r0
 800d170:	4630      	mov	r0, r6
 800d172:	4689      	mov	r9, r1
 800d174:	f7fe fbfc 	bl	800b970 <__aeabi_ui2d>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4640      	mov	r0, r8
 800d17e:	4649      	mov	r1, r9
 800d180:	f7fe faba 	bl	800b6f8 <__adddf3>
 800d184:	4680      	mov	r8, r0
 800d186:	4689      	mov	r9, r1
 800d188:	2c0f      	cmp	r4, #15
 800d18a:	dc37      	bgt.n	800d1fc <_strtod_r+0x47c>
 800d18c:	9b04      	ldr	r3, [sp, #16]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f000 83d5 	beq.w	800d93e <_strtod_r+0xbbe>
 800d194:	dd24      	ble.n	800d1e0 <_strtod_r+0x460>
 800d196:	2b16      	cmp	r3, #22
 800d198:	dc07      	bgt.n	800d1aa <_strtod_r+0x42a>
 800d19a:	4a75      	ldr	r2, [pc, #468]	; (800d370 <_strtod_r+0x5f0>)
 800d19c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d1a0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800d1a4:	464b      	mov	r3, r9
 800d1a6:	4642      	mov	r2, r8
 800d1a8:	e015      	b.n	800d1d6 <_strtod_r+0x456>
 800d1aa:	9a04      	ldr	r2, [sp, #16]
 800d1ac:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	dc23      	bgt.n	800d1fc <_strtod_r+0x47c>
 800d1b4:	4d6e      	ldr	r5, [pc, #440]	; (800d370 <_strtod_r+0x5f0>)
 800d1b6:	f1c4 040f 	rsb	r4, r4, #15
 800d1ba:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d1be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1c2:	4642      	mov	r2, r8
 800d1c4:	464b      	mov	r3, r9
 800d1c6:	f7fe fc49 	bl	800ba5c <__aeabi_dmul>
 800d1ca:	9b04      	ldr	r3, [sp, #16]
 800d1cc:	1b1c      	subs	r4, r3, r4
 800d1ce:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d1d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d1d6:	f7fe fc41 	bl	800ba5c <__aeabi_dmul>
 800d1da:	4680      	mov	r8, r0
 800d1dc:	4689      	mov	r9, r1
 800d1de:	e3ae      	b.n	800d93e <_strtod_r+0xbbe>
 800d1e0:	9b04      	ldr	r3, [sp, #16]
 800d1e2:	f113 0f16 	cmn.w	r3, #22
 800d1e6:	db09      	blt.n	800d1fc <_strtod_r+0x47c>
 800d1e8:	4a61      	ldr	r2, [pc, #388]	; (800d370 <_strtod_r+0x5f0>)
 800d1ea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d1ee:	4640      	mov	r0, r8
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d1f6:	f7fe fd5b 	bl	800bcb0 <__aeabi_ddiv>
 800d1fa:	e7ee      	b.n	800d1da <_strtod_r+0x45a>
 800d1fc:	9b04      	ldr	r3, [sp, #16]
 800d1fe:	1b65      	subs	r5, r4, r5
 800d200:	441d      	add	r5, r3
 800d202:	2d00      	cmp	r5, #0
 800d204:	dd54      	ble.n	800d2b0 <_strtod_r+0x530>
 800d206:	f015 020f 	ands.w	r2, r5, #15
 800d20a:	d00a      	beq.n	800d222 <_strtod_r+0x4a2>
 800d20c:	4b58      	ldr	r3, [pc, #352]	; (800d370 <_strtod_r+0x5f0>)
 800d20e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d212:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d216:	4642      	mov	r2, r8
 800d218:	464b      	mov	r3, r9
 800d21a:	f7fe fc1f 	bl	800ba5c <__aeabi_dmul>
 800d21e:	4680      	mov	r8, r0
 800d220:	4689      	mov	r9, r1
 800d222:	f035 050f 	bics.w	r5, r5, #15
 800d226:	f000 80b1 	beq.w	800d38c <_strtod_r+0x60c>
 800d22a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d22e:	dd0b      	ble.n	800d248 <_strtod_r+0x4c8>
 800d230:	2400      	movs	r4, #0
 800d232:	46a2      	mov	sl, r4
 800d234:	9405      	str	r4, [sp, #20]
 800d236:	9403      	str	r4, [sp, #12]
 800d238:	2322      	movs	r3, #34	; 0x22
 800d23a:	f8cb 3000 	str.w	r3, [fp]
 800d23e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800d37c <_strtod_r+0x5fc>
 800d242:	f04f 0800 	mov.w	r8, #0
 800d246:	e180      	b.n	800d54a <_strtod_r+0x7ca>
 800d248:	4649      	mov	r1, r9
 800d24a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800d384 <_strtod_r+0x604>
 800d24e:	112d      	asrs	r5, r5, #4
 800d250:	4640      	mov	r0, r8
 800d252:	2700      	movs	r7, #0
 800d254:	464e      	mov	r6, r9
 800d256:	2d01      	cmp	r5, #1
 800d258:	dd0a      	ble.n	800d270 <_strtod_r+0x4f0>
 800d25a:	07ea      	lsls	r2, r5, #31
 800d25c:	d503      	bpl.n	800d266 <_strtod_r+0x4e6>
 800d25e:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d262:	f7fe fbfb 	bl	800ba5c <__aeabi_dmul>
 800d266:	3701      	adds	r7, #1
 800d268:	106d      	asrs	r5, r5, #1
 800d26a:	f109 0908 	add.w	r9, r9, #8
 800d26e:	e7f2      	b.n	800d256 <_strtod_r+0x4d6>
 800d270:	4680      	mov	r8, r0
 800d272:	f1a1 7954 	sub.w	r9, r1, #55574528	; 0x3500000
 800d276:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800d27a:	4642      	mov	r2, r8
 800d27c:	464b      	mov	r3, r9
 800d27e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d282:	f7fe fbeb 	bl	800ba5c <__aeabi_dmul>
 800d286:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d28a:	4689      	mov	r9, r1
 800d28c:	460a      	mov	r2, r1
 800d28e:	0d1b      	lsrs	r3, r3, #20
 800d290:	4938      	ldr	r1, [pc, #224]	; (800d374 <_strtod_r+0x5f4>)
 800d292:	051b      	lsls	r3, r3, #20
 800d294:	428b      	cmp	r3, r1
 800d296:	4680      	mov	r8, r0
 800d298:	d8ca      	bhi.n	800d230 <_strtod_r+0x4b0>
 800d29a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d29e:	428b      	cmp	r3, r1
 800d2a0:	bf86      	itte	hi
 800d2a2:	f8df 90e4 	ldrhi.w	r9, [pc, #228]	; 800d388 <_strtod_r+0x608>
 800d2a6:	f04f 38ff 	movhi.w	r8, #4294967295
 800d2aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d2ae:	e06d      	b.n	800d38c <_strtod_r+0x60c>
 800d2b0:	d06c      	beq.n	800d38c <_strtod_r+0x60c>
 800d2b2:	426d      	negs	r5, r5
 800d2b4:	f015 020f 	ands.w	r2, r5, #15
 800d2b8:	d00a      	beq.n	800d2d0 <_strtod_r+0x550>
 800d2ba:	4b2d      	ldr	r3, [pc, #180]	; (800d370 <_strtod_r+0x5f0>)
 800d2bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2c0:	4640      	mov	r0, r8
 800d2c2:	4649      	mov	r1, r9
 800d2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c8:	f7fe fcf2 	bl	800bcb0 <__aeabi_ddiv>
 800d2cc:	4680      	mov	r8, r0
 800d2ce:	4689      	mov	r9, r1
 800d2d0:	112d      	asrs	r5, r5, #4
 800d2d2:	d05b      	beq.n	800d38c <_strtod_r+0x60c>
 800d2d4:	2d1f      	cmp	r5, #31
 800d2d6:	dd04      	ble.n	800d2e2 <_strtod_r+0x562>
 800d2d8:	2400      	movs	r4, #0
 800d2da:	46a2      	mov	sl, r4
 800d2dc:	9405      	str	r4, [sp, #20]
 800d2de:	9403      	str	r4, [sp, #12]
 800d2e0:	e12c      	b.n	800d53c <_strtod_r+0x7bc>
 800d2e2:	f015 0f10 	tst.w	r5, #16
 800d2e6:	bf0c      	ite	eq
 800d2e8:	2300      	moveq	r3, #0
 800d2ea:	236a      	movne	r3, #106	; 0x6a
 800d2ec:	4e22      	ldr	r6, [pc, #136]	; (800d378 <_strtod_r+0x5f8>)
 800d2ee:	9302      	str	r3, [sp, #8]
 800d2f0:	4640      	mov	r0, r8
 800d2f2:	4649      	mov	r1, r9
 800d2f4:	2d00      	cmp	r5, #0
 800d2f6:	dd08      	ble.n	800d30a <_strtod_r+0x58a>
 800d2f8:	07eb      	lsls	r3, r5, #31
 800d2fa:	d503      	bpl.n	800d304 <_strtod_r+0x584>
 800d2fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d300:	f7fe fbac 	bl	800ba5c <__aeabi_dmul>
 800d304:	106d      	asrs	r5, r5, #1
 800d306:	3608      	adds	r6, #8
 800d308:	e7f4      	b.n	800d2f4 <_strtod_r+0x574>
 800d30a:	9b02      	ldr	r3, [sp, #8]
 800d30c:	4680      	mov	r8, r0
 800d30e:	4689      	mov	r9, r1
 800d310:	b1eb      	cbz	r3, 800d34e <_strtod_r+0x5ce>
 800d312:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d316:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	460a      	mov	r2, r1
 800d31e:	dd16      	ble.n	800d34e <_strtod_r+0x5ce>
 800d320:	2b1f      	cmp	r3, #31
 800d322:	dd0e      	ble.n	800d342 <_strtod_r+0x5c2>
 800d324:	2b34      	cmp	r3, #52	; 0x34
 800d326:	bfde      	ittt	le
 800d328:	3b20      	suble	r3, #32
 800d32a:	f04f 31ff 	movle.w	r1, #4294967295
 800d32e:	fa01 f303 	lslle.w	r3, r1, r3
 800d332:	f04f 0800 	mov.w	r8, #0
 800d336:	bfcc      	ite	gt
 800d338:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d33c:	ea03 0902 	andle.w	r9, r3, r2
 800d340:	e005      	b.n	800d34e <_strtod_r+0x5ce>
 800d342:	f04f 32ff 	mov.w	r2, #4294967295
 800d346:	fa02 f303 	lsl.w	r3, r2, r3
 800d34a:	ea03 0800 	and.w	r8, r3, r0
 800d34e:	4640      	mov	r0, r8
 800d350:	4649      	mov	r1, r9
 800d352:	2200      	movs	r2, #0
 800d354:	2300      	movs	r3, #0
 800d356:	f002 fbdd 	bl	800fb14 <__aeabi_dcmpeq>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d1bc      	bne.n	800d2d8 <_strtod_r+0x558>
 800d35e:	e017      	b.n	800d390 <_strtod_r+0x610>
 800d360:	0801041f 	.word	0x0801041f
 800d364:	080105a8 	.word	0x080105a8
 800d368:	08010427 	.word	0x08010427
 800d36c:	08010490 	.word	0x08010490
 800d370:	080105c0 	.word	0x080105c0
 800d374:	7ca00000 	.word	0x7ca00000
 800d378:	08010468 	.word	0x08010468
 800d37c:	7ff00000 	.word	0x7ff00000
 800d380:	fff80000 	.word	0xfff80000
 800d384:	08010688 	.word	0x08010688
 800d388:	7fefffff 	.word	0x7fefffff
 800d38c:	2300      	movs	r3, #0
 800d38e:	9302      	str	r3, [sp, #8]
 800d390:	9b03      	ldr	r3, [sp, #12]
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	4658      	mov	r0, fp
 800d396:	9905      	ldr	r1, [sp, #20]
 800d398:	4652      	mov	r2, sl
 800d39a:	4623      	mov	r3, r4
 800d39c:	f001 fd8d 	bl	800eeba <__s2b>
 800d3a0:	9005      	str	r0, [sp, #20]
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	f43f af44 	beq.w	800d230 <_strtod_r+0x4b0>
 800d3a8:	9a04      	ldr	r2, [sp, #16]
 800d3aa:	9b04      	ldr	r3, [sp, #16]
 800d3ac:	2a00      	cmp	r2, #0
 800d3ae:	f1c3 0300 	rsb	r3, r3, #0
 800d3b2:	f04f 0400 	mov.w	r4, #0
 800d3b6:	bfa8      	it	ge
 800d3b8:	2300      	movge	r3, #0
 800d3ba:	9312      	str	r3, [sp, #72]	; 0x48
 800d3bc:	46a2      	mov	sl, r4
 800d3be:	9b05      	ldr	r3, [sp, #20]
 800d3c0:	4658      	mov	r0, fp
 800d3c2:	6859      	ldr	r1, [r3, #4]
 800d3c4:	f001 fcef 	bl	800eda6 <_Balloc>
 800d3c8:	9003      	str	r0, [sp, #12]
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	f43f af34 	beq.w	800d238 <_strtod_r+0x4b8>
 800d3d0:	9b05      	ldr	r3, [sp, #20]
 800d3d2:	691a      	ldr	r2, [r3, #16]
 800d3d4:	9b05      	ldr	r3, [sp, #20]
 800d3d6:	3202      	adds	r2, #2
 800d3d8:	f103 010c 	add.w	r1, r3, #12
 800d3dc:	0092      	lsls	r2, r2, #2
 800d3de:	300c      	adds	r0, #12
 800d3e0:	f7fe fdca 	bl	800bf78 <memcpy>
 800d3e4:	ab1b      	add	r3, sp, #108	; 0x6c
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	ab1c      	add	r3, sp, #112	; 0x70
 800d3ea:	9301      	str	r3, [sp, #4]
 800d3ec:	4658      	mov	r0, fp
 800d3ee:	4642      	mov	r2, r8
 800d3f0:	464b      	mov	r3, r9
 800d3f2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800d3f6:	f002 f816 	bl	800f426 <__d2b>
 800d3fa:	901a      	str	r0, [sp, #104]	; 0x68
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	f43f af1b 	beq.w	800d238 <_strtod_r+0x4b8>
 800d402:	4658      	mov	r0, fp
 800d404:	2101      	movs	r1, #1
 800d406:	f001 fde5 	bl	800efd4 <__i2b>
 800d40a:	4682      	mov	sl, r0
 800d40c:	2800      	cmp	r0, #0
 800d40e:	f43f af13 	beq.w	800d238 <_strtod_r+0x4b8>
 800d412:	9b04      	ldr	r3, [sp, #16]
 800d414:	9902      	ldr	r1, [sp, #8]
 800d416:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800d418:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d41c:	9308      	str	r3, [sp, #32]
 800d41e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d420:	2b00      	cmp	r3, #0
 800d422:	bfad      	iteet	ge
 800d424:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 800d426:	9a08      	ldrlt	r2, [sp, #32]
 800d428:	9e12      	ldrlt	r6, [sp, #72]	; 0x48
 800d42a:	18d6      	addge	r6, r2, r3
 800d42c:	bfb8      	it	lt
 800d42e:	1ad2      	sublt	r2, r2, r3
 800d430:	eba3 0301 	sub.w	r3, r3, r1
 800d434:	442b      	add	r3, r5
 800d436:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 800d43a:	bfa8      	it	ge
 800d43c:	9a08      	ldrge	r2, [sp, #32]
 800d43e:	428b      	cmp	r3, r1
 800d440:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
 800d444:	f280 8086 	bge.w	800d554 <_strtod_r+0x7d4>
 800d448:	1ac9      	subs	r1, r1, r3
 800d44a:	291f      	cmp	r1, #31
 800d44c:	eba5 0501 	sub.w	r5, r5, r1
 800d450:	bfc8      	it	gt
 800d452:	49b3      	ldrgt	r1, [pc, #716]	; (800d720 <_strtod_r+0x9a0>)
 800d454:	f04f 0001 	mov.w	r0, #1
 800d458:	bfd5      	itete	le
 800d45a:	fa00 f301 	lslle.w	r3, r0, r1
 800d45e:	1ac9      	subgt	r1, r1, r3
 800d460:	9313      	strle	r3, [sp, #76]	; 0x4c
 800d462:	fa00 f301 	lslgt.w	r3, r0, r1
 800d466:	bfd9      	ittee	le
 800d468:	2300      	movle	r3, #0
 800d46a:	9306      	strle	r3, [sp, #24]
 800d46c:	9306      	strgt	r3, [sp, #24]
 800d46e:	9013      	strgt	r0, [sp, #76]	; 0x4c
 800d470:	1977      	adds	r7, r6, r5
 800d472:	9b02      	ldr	r3, [sp, #8]
 800d474:	42b7      	cmp	r7, r6
 800d476:	4415      	add	r5, r2
 800d478:	441d      	add	r5, r3
 800d47a:	463b      	mov	r3, r7
 800d47c:	bfa8      	it	ge
 800d47e:	4633      	movge	r3, r6
 800d480:	42ab      	cmp	r3, r5
 800d482:	bfa8      	it	ge
 800d484:	462b      	movge	r3, r5
 800d486:	2b00      	cmp	r3, #0
 800d488:	bfc2      	ittt	gt
 800d48a:	1aff      	subgt	r7, r7, r3
 800d48c:	1aed      	subgt	r5, r5, r3
 800d48e:	1af6      	subgt	r6, r6, r3
 800d490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d492:	2b00      	cmp	r3, #0
 800d494:	d163      	bne.n	800d55e <_strtod_r+0x7de>
 800d496:	2f00      	cmp	r7, #0
 800d498:	dc7a      	bgt.n	800d590 <_strtod_r+0x810>
 800d49a:	9b08      	ldr	r3, [sp, #32]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f040 8081 	bne.w	800d5a4 <_strtod_r+0x824>
 800d4a2:	2d00      	cmp	r5, #0
 800d4a4:	f300 8088 	bgt.w	800d5b8 <_strtod_r+0x838>
 800d4a8:	2e00      	cmp	r6, #0
 800d4aa:	f300 808f 	bgt.w	800d5cc <_strtod_r+0x84c>
 800d4ae:	4658      	mov	r0, fp
 800d4b0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d4b2:	9a03      	ldr	r2, [sp, #12]
 800d4b4:	f001 fee5 	bl	800f282 <__mdiff>
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	2800      	cmp	r0, #0
 800d4bc:	f43f aebc 	beq.w	800d238 <_strtod_r+0x4b8>
 800d4c0:	68c3      	ldr	r3, [r0, #12]
 800d4c2:	9308      	str	r3, [sp, #32]
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	60c3      	str	r3, [r0, #12]
 800d4c8:	4651      	mov	r1, sl
 800d4ca:	f001 febe 	bl	800f24a <__mcmp>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	f280 808a 	bge.w	800d5e8 <_strtod_r+0x868>
 800d4d4:	9b08      	ldr	r3, [sp, #32]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f040 820a 	bne.w	800d8f0 <_strtod_r+0xb70>
 800d4dc:	f1b8 0f00 	cmp.w	r8, #0
 800d4e0:	f040 8206 	bne.w	800d8f0 <_strtod_r+0xb70>
 800d4e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f040 8201 	bne.w	800d8f0 <_strtod_r+0xb70>
 800d4ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d4f2:	0d1b      	lsrs	r3, r3, #20
 800d4f4:	051b      	lsls	r3, r3, #20
 800d4f6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d4fa:	f240 81f9 	bls.w	800d8f0 <_strtod_r+0xb70>
 800d4fe:	6963      	ldr	r3, [r4, #20]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d06d      	beq.n	800d5e0 <_strtod_r+0x860>
 800d504:	4621      	mov	r1, r4
 800d506:	2201      	movs	r2, #1
 800d508:	4658      	mov	r0, fp
 800d50a:	f001 fe4b 	bl	800f1a4 <__lshift>
 800d50e:	4651      	mov	r1, sl
 800d510:	4604      	mov	r4, r0
 800d512:	f001 fe9a 	bl	800f24a <__mcmp>
 800d516:	2800      	cmp	r0, #0
 800d518:	f340 81ea 	ble.w	800d8f0 <_strtod_r+0xb70>
 800d51c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d520:	9a02      	ldr	r2, [sp, #8]
 800d522:	0d1b      	lsrs	r3, r3, #20
 800d524:	051b      	lsls	r3, r3, #20
 800d526:	2a00      	cmp	r2, #0
 800d528:	f000 808d 	beq.w	800d646 <_strtod_r+0x8c6>
 800d52c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d530:	f300 8089 	bgt.w	800d646 <_strtod_r+0x8c6>
 800d534:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800d538:	f300 81dc 	bgt.w	800d8f4 <_strtod_r+0xb74>
 800d53c:	2322      	movs	r3, #34	; 0x22
 800d53e:	f04f 0800 	mov.w	r8, #0
 800d542:	f04f 0900 	mov.w	r9, #0
 800d546:	f8cb 3000 	str.w	r3, [fp]
 800d54a:	9b05      	ldr	r3, [sp, #20]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f040 81e2 	bne.w	800d916 <_strtod_r+0xb96>
 800d552:	e1f4      	b.n	800d93e <_strtod_r+0xbbe>
 800d554:	2300      	movs	r3, #0
 800d556:	9306      	str	r3, [sp, #24]
 800d558:	2301      	movs	r3, #1
 800d55a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d55c:	e788      	b.n	800d470 <_strtod_r+0x6f0>
 800d55e:	4651      	mov	r1, sl
 800d560:	4658      	mov	r0, fp
 800d562:	461a      	mov	r2, r3
 800d564:	f001 fdd0 	bl	800f108 <__pow5mult>
 800d568:	4682      	mov	sl, r0
 800d56a:	2800      	cmp	r0, #0
 800d56c:	f43f ae64 	beq.w	800d238 <_strtod_r+0x4b8>
 800d570:	4658      	mov	r0, fp
 800d572:	4651      	mov	r1, sl
 800d574:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d576:	f001 fd36 	bl	800efe6 <__multiply>
 800d57a:	9017      	str	r0, [sp, #92]	; 0x5c
 800d57c:	2800      	cmp	r0, #0
 800d57e:	f43f ae5b 	beq.w	800d238 <_strtod_r+0x4b8>
 800d582:	4658      	mov	r0, fp
 800d584:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d586:	f001 fc43 	bl	800ee10 <_Bfree>
 800d58a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d58c:	931a      	str	r3, [sp, #104]	; 0x68
 800d58e:	e782      	b.n	800d496 <_strtod_r+0x716>
 800d590:	4658      	mov	r0, fp
 800d592:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d594:	463a      	mov	r2, r7
 800d596:	f001 fe05 	bl	800f1a4 <__lshift>
 800d59a:	901a      	str	r0, [sp, #104]	; 0x68
 800d59c:	2800      	cmp	r0, #0
 800d59e:	f47f af7c 	bne.w	800d49a <_strtod_r+0x71a>
 800d5a2:	e649      	b.n	800d238 <_strtod_r+0x4b8>
 800d5a4:	4658      	mov	r0, fp
 800d5a6:	9903      	ldr	r1, [sp, #12]
 800d5a8:	9a08      	ldr	r2, [sp, #32]
 800d5aa:	f001 fdad 	bl	800f108 <__pow5mult>
 800d5ae:	9003      	str	r0, [sp, #12]
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	f47f af76 	bne.w	800d4a2 <_strtod_r+0x722>
 800d5b6:	e63f      	b.n	800d238 <_strtod_r+0x4b8>
 800d5b8:	4658      	mov	r0, fp
 800d5ba:	9903      	ldr	r1, [sp, #12]
 800d5bc:	462a      	mov	r2, r5
 800d5be:	f001 fdf1 	bl	800f1a4 <__lshift>
 800d5c2:	9003      	str	r0, [sp, #12]
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	f47f af6f 	bne.w	800d4a8 <_strtod_r+0x728>
 800d5ca:	e635      	b.n	800d238 <_strtod_r+0x4b8>
 800d5cc:	4651      	mov	r1, sl
 800d5ce:	4658      	mov	r0, fp
 800d5d0:	4632      	mov	r2, r6
 800d5d2:	f001 fde7 	bl	800f1a4 <__lshift>
 800d5d6:	4682      	mov	sl, r0
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	f47f af68 	bne.w	800d4ae <_strtod_r+0x72e>
 800d5de:	e62b      	b.n	800d238 <_strtod_r+0x4b8>
 800d5e0:	6923      	ldr	r3, [r4, #16]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	dc8e      	bgt.n	800d504 <_strtod_r+0x784>
 800d5e6:	e183      	b.n	800d8f0 <_strtod_r+0xb70>
 800d5e8:	d162      	bne.n	800d6b0 <_strtod_r+0x930>
 800d5ea:	9a08      	ldr	r2, [sp, #32]
 800d5ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5f0:	b322      	cbz	r2, 800d63c <_strtod_r+0x8bc>
 800d5f2:	494c      	ldr	r1, [pc, #304]	; (800d724 <_strtod_r+0x9a4>)
 800d5f4:	428b      	cmp	r3, r1
 800d5f6:	464a      	mov	r2, r9
 800d5f8:	d12e      	bne.n	800d658 <_strtod_r+0x8d8>
 800d5fa:	9b02      	ldr	r3, [sp, #8]
 800d5fc:	4641      	mov	r1, r8
 800d5fe:	b163      	cbz	r3, 800d61a <_strtod_r+0x89a>
 800d600:	4b49      	ldr	r3, [pc, #292]	; (800d728 <_strtod_r+0x9a8>)
 800d602:	4013      	ands	r3, r2
 800d604:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d608:	d807      	bhi.n	800d61a <_strtod_r+0x89a>
 800d60a:	0d1b      	lsrs	r3, r3, #20
 800d60c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d610:	f04f 30ff 	mov.w	r0, #4294967295
 800d614:	fa00 f303 	lsl.w	r3, r0, r3
 800d618:	e001      	b.n	800d61e <_strtod_r+0x89e>
 800d61a:	f04f 33ff 	mov.w	r3, #4294967295
 800d61e:	4299      	cmp	r1, r3
 800d620:	d11a      	bne.n	800d658 <_strtod_r+0x8d8>
 800d622:	4b42      	ldr	r3, [pc, #264]	; (800d72c <_strtod_r+0x9ac>)
 800d624:	429a      	cmp	r2, r3
 800d626:	d102      	bne.n	800d62e <_strtod_r+0x8ae>
 800d628:	3101      	adds	r1, #1
 800d62a:	f43f ae05 	beq.w	800d238 <_strtod_r+0x4b8>
 800d62e:	4b3e      	ldr	r3, [pc, #248]	; (800d728 <_strtod_r+0x9a8>)
 800d630:	4013      	ands	r3, r2
 800d632:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d636:	f04f 0800 	mov.w	r8, #0
 800d63a:	e159      	b.n	800d8f0 <_strtod_r+0xb70>
 800d63c:	b963      	cbnz	r3, 800d658 <_strtod_r+0x8d8>
 800d63e:	f1b8 0f00 	cmp.w	r8, #0
 800d642:	d109      	bne.n	800d658 <_strtod_r+0x8d8>
 800d644:	e76a      	b.n	800d51c <_strtod_r+0x79c>
 800d646:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d64a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d64e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d652:	f04f 38ff 	mov.w	r8, #4294967295
 800d656:	e14b      	b.n	800d8f0 <_strtod_r+0xb70>
 800d658:	9b06      	ldr	r3, [sp, #24]
 800d65a:	b113      	cbz	r3, 800d662 <_strtod_r+0x8e2>
 800d65c:	ea13 0f09 	tst.w	r3, r9
 800d660:	e002      	b.n	800d668 <_strtod_r+0x8e8>
 800d662:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d664:	ea13 0f08 	tst.w	r3, r8
 800d668:	f000 8142 	beq.w	800d8f0 <_strtod_r+0xb70>
 800d66c:	9b08      	ldr	r3, [sp, #32]
 800d66e:	9a02      	ldr	r2, [sp, #8]
 800d670:	4640      	mov	r0, r8
 800d672:	4649      	mov	r1, r9
 800d674:	b153      	cbz	r3, 800d68c <_strtod_r+0x90c>
 800d676:	f7ff fb61 	bl	800cd3c <sulp>
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d682:	f7fe f839 	bl	800b6f8 <__adddf3>
 800d686:	4680      	mov	r8, r0
 800d688:	4689      	mov	r9, r1
 800d68a:	e131      	b.n	800d8f0 <_strtod_r+0xb70>
 800d68c:	f7ff fb56 	bl	800cd3c <sulp>
 800d690:	4602      	mov	r2, r0
 800d692:	460b      	mov	r3, r1
 800d694:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d698:	f7fe f82c 	bl	800b6f4 <__aeabi_dsub>
 800d69c:	2200      	movs	r2, #0
 800d69e:	2300      	movs	r3, #0
 800d6a0:	4680      	mov	r8, r0
 800d6a2:	4689      	mov	r9, r1
 800d6a4:	f002 fa36 	bl	800fb14 <__aeabi_dcmpeq>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	f47f af47 	bne.w	800d53c <_strtod_r+0x7bc>
 800d6ae:	e11f      	b.n	800d8f0 <_strtod_r+0xb70>
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	4651      	mov	r1, sl
 800d6b4:	f001 ff09 	bl	800f4ca <__ratio>
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d6be:	4606      	mov	r6, r0
 800d6c0:	460f      	mov	r7, r1
 800d6c2:	f002 fa3b 	bl	800fb3c <__aeabi_dcmple>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d041      	beq.n	800d74e <_strtod_r+0x9ce>
 800d6ca:	9b08      	ldr	r3, [sp, #32]
 800d6cc:	b113      	cbz	r3, 800d6d4 <_strtod_r+0x954>
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	4b17      	ldr	r3, [pc, #92]	; (800d730 <_strtod_r+0x9b0>)
 800d6d2:	e00f      	b.n	800d6f4 <_strtod_r+0x974>
 800d6d4:	f1b8 0f00 	cmp.w	r8, #0
 800d6d8:	d103      	bne.n	800d6e2 <_strtod_r+0x962>
 800d6da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6de:	b93b      	cbnz	r3, 800d6f0 <_strtod_r+0x970>
 800d6e0:	e00d      	b.n	800d6fe <_strtod_r+0x97e>
 800d6e2:	f1b8 0f01 	cmp.w	r8, #1
 800d6e6:	d103      	bne.n	800d6f0 <_strtod_r+0x970>
 800d6e8:	f1b9 0f00 	cmp.w	r9, #0
 800d6ec:	f43f af26 	beq.w	800d53c <_strtod_r+0x7bc>
 800d6f0:	4b10      	ldr	r3, [pc, #64]	; (800d734 <_strtod_r+0x9b4>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d6f8:	2600      	movs	r6, #0
 800d6fa:	4f0d      	ldr	r7, [pc, #52]	; (800d730 <_strtod_r+0x9b0>)
 800d6fc:	e03c      	b.n	800d778 <_strtod_r+0x9f8>
 800d6fe:	4630      	mov	r0, r6
 800d700:	4639      	mov	r1, r7
 800d702:	2200      	movs	r2, #0
 800d704:	4b0a      	ldr	r3, [pc, #40]	; (800d730 <_strtod_r+0x9b0>)
 800d706:	f002 fa0f 	bl	800fb28 <__aeabi_dcmplt>
 800d70a:	b9b8      	cbnz	r0, 800d73c <_strtod_r+0x9bc>
 800d70c:	4630      	mov	r0, r6
 800d70e:	4639      	mov	r1, r7
 800d710:	2200      	movs	r2, #0
 800d712:	4b09      	ldr	r3, [pc, #36]	; (800d738 <_strtod_r+0x9b8>)
 800d714:	f7fe f9a2 	bl	800ba5c <__aeabi_dmul>
 800d718:	4606      	mov	r6, r0
 800d71a:	460f      	mov	r7, r1
 800d71c:	e010      	b.n	800d740 <_strtod_r+0x9c0>
 800d71e:	bf00      	nop
 800d720:	fffffbe3 	.word	0xfffffbe3
 800d724:	000fffff 	.word	0x000fffff
 800d728:	7ff00000 	.word	0x7ff00000
 800d72c:	7fefffff 	.word	0x7fefffff
 800d730:	3ff00000 	.word	0x3ff00000
 800d734:	bff00000 	.word	0xbff00000
 800d738:	3fe00000 	.word	0x3fe00000
 800d73c:	4f94      	ldr	r7, [pc, #592]	; (800d990 <_strtod_r+0xc10>)
 800d73e:	2600      	movs	r6, #0
 800d740:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d744:	9614      	str	r6, [sp, #80]	; 0x50
 800d746:	9315      	str	r3, [sp, #84]	; 0x54
 800d748:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d74c:	e012      	b.n	800d774 <_strtod_r+0x9f4>
 800d74e:	4630      	mov	r0, r6
 800d750:	4639      	mov	r1, r7
 800d752:	4b8f      	ldr	r3, [pc, #572]	; (800d990 <_strtod_r+0xc10>)
 800d754:	2200      	movs	r2, #0
 800d756:	f7fe f981 	bl	800ba5c <__aeabi_dmul>
 800d75a:	9b08      	ldr	r3, [sp, #32]
 800d75c:	4606      	mov	r6, r0
 800d75e:	460f      	mov	r7, r1
 800d760:	b923      	cbnz	r3, 800d76c <_strtod_r+0x9ec>
 800d762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d766:	900e      	str	r0, [sp, #56]	; 0x38
 800d768:	930f      	str	r3, [sp, #60]	; 0x3c
 800d76a:	e001      	b.n	800d770 <_strtod_r+0x9f0>
 800d76c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 800d770:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d774:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d778:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 800d77c:	0d2d      	lsrs	r5, r5, #20
 800d77e:	4b85      	ldr	r3, [pc, #532]	; (800d994 <_strtod_r+0xc14>)
 800d780:	052d      	lsls	r5, r5, #20
 800d782:	429d      	cmp	r5, r3
 800d784:	d12d      	bne.n	800d7e2 <_strtod_r+0xa62>
 800d786:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d78a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d78e:	4640      	mov	r0, r8
 800d790:	4649      	mov	r1, r9
 800d792:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d796:	f001 fdd3 	bl	800f340 <__ulp>
 800d79a:	4602      	mov	r2, r0
 800d79c:	460b      	mov	r3, r1
 800d79e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7a2:	f7fe f95b 	bl	800ba5c <__aeabi_dmul>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	4649      	mov	r1, r9
 800d7ae:	f7fd ffa3 	bl	800b6f8 <__adddf3>
 800d7b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d7b6:	0d1b      	lsrs	r3, r3, #20
 800d7b8:	4a77      	ldr	r2, [pc, #476]	; (800d998 <_strtod_r+0xc18>)
 800d7ba:	051b      	lsls	r3, r3, #20
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	4680      	mov	r8, r0
 800d7c0:	d90c      	bls.n	800d7dc <_strtod_r+0xa5c>
 800d7c2:	4b76      	ldr	r3, [pc, #472]	; (800d99c <_strtod_r+0xc1c>)
 800d7c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d103      	bne.n	800d7d2 <_strtod_r+0xa52>
 800d7ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	f43f ad33 	beq.w	800d238 <_strtod_r+0x4b8>
 800d7d2:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 800d99c <_strtod_r+0xc1c>
 800d7d6:	f04f 38ff 	mov.w	r8, #4294967295
 800d7da:	e078      	b.n	800d8ce <_strtod_r+0xb4e>
 800d7dc:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800d7e0:	e03d      	b.n	800d85e <_strtod_r+0xade>
 800d7e2:	9b02      	ldr	r3, [sp, #8]
 800d7e4:	b33b      	cbz	r3, 800d836 <_strtod_r+0xab6>
 800d7e6:	f1b5 6fd4 	cmp.w	r5, #111149056	; 0x6a00000
 800d7ea:	d824      	bhi.n	800d836 <_strtod_r+0xab6>
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	4639      	mov	r1, r7
 800d7f0:	a35f      	add	r3, pc, #380	; (adr r3, 800d970 <_strtod_r+0xbf0>)
 800d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f6:	f002 f9a1 	bl	800fb3c <__aeabi_dcmple>
 800d7fa:	b1b8      	cbz	r0, 800d82c <_strtod_r+0xaac>
 800d7fc:	4639      	mov	r1, r7
 800d7fe:	4630      	mov	r0, r6
 800d800:	f002 f9e2 	bl	800fbc8 <__aeabi_d2uiz>
 800d804:	2800      	cmp	r0, #0
 800d806:	bf08      	it	eq
 800d808:	2001      	moveq	r0, #1
 800d80a:	f7fe f8b1 	bl	800b970 <__aeabi_ui2d>
 800d80e:	9b08      	ldr	r3, [sp, #32]
 800d810:	4606      	mov	r6, r0
 800d812:	460f      	mov	r7, r1
 800d814:	b923      	cbnz	r3, 800d820 <_strtod_r+0xaa0>
 800d816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d81a:	9010      	str	r0, [sp, #64]	; 0x40
 800d81c:	9311      	str	r3, [sp, #68]	; 0x44
 800d81e:	e001      	b.n	800d824 <_strtod_r+0xaa4>
 800d820:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d824:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d828:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d82c:	9b07      	ldr	r3, [sp, #28]
 800d82e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d832:	1b5b      	subs	r3, r3, r5
 800d834:	9307      	str	r3, [sp, #28]
 800d836:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d83a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800d83e:	f001 fd7f 	bl	800f340 <__ulp>
 800d842:	4602      	mov	r2, r0
 800d844:	460b      	mov	r3, r1
 800d846:	4640      	mov	r0, r8
 800d848:	4649      	mov	r1, r9
 800d84a:	f7fe f907 	bl	800ba5c <__aeabi_dmul>
 800d84e:	4602      	mov	r2, r0
 800d850:	460b      	mov	r3, r1
 800d852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d856:	f7fd ff4f 	bl	800b6f8 <__adddf3>
 800d85a:	4680      	mov	r8, r0
 800d85c:	4689      	mov	r9, r1
 800d85e:	9b02      	ldr	r3, [sp, #8]
 800d860:	bbab      	cbnz	r3, 800d8ce <_strtod_r+0xb4e>
 800d862:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d866:	0d1b      	lsrs	r3, r3, #20
 800d868:	051b      	lsls	r3, r3, #20
 800d86a:	429d      	cmp	r5, r3
 800d86c:	d12f      	bne.n	800d8ce <_strtod_r+0xb4e>
 800d86e:	4639      	mov	r1, r7
 800d870:	4630      	mov	r0, r6
 800d872:	f8cd 9018 	str.w	r9, [sp, #24]
 800d876:	f002 f97f 	bl	800fb78 <__aeabi_d2iz>
 800d87a:	f7fe f889 	bl	800b990 <__aeabi_i2d>
 800d87e:	460b      	mov	r3, r1
 800d880:	4602      	mov	r2, r0
 800d882:	4639      	mov	r1, r7
 800d884:	4630      	mov	r0, r6
 800d886:	f7fd ff35 	bl	800b6f4 <__aeabi_dsub>
 800d88a:	9b08      	ldr	r3, [sp, #32]
 800d88c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800d890:	4606      	mov	r6, r0
 800d892:	460f      	mov	r7, r1
 800d894:	b92b      	cbnz	r3, 800d8a2 <_strtod_r+0xb22>
 800d896:	f1b8 0f00 	cmp.w	r8, #0
 800d89a:	d102      	bne.n	800d8a2 <_strtod_r+0xb22>
 800d89c:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800d8a0:	b17b      	cbz	r3, 800d8c2 <_strtod_r+0xb42>
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	a334      	add	r3, pc, #208	; (adr r3, 800d978 <_strtod_r+0xbf8>)
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	f002 f93c 	bl	800fb28 <__aeabi_dcmplt>
 800d8b0:	bb88      	cbnz	r0, 800d916 <_strtod_r+0xb96>
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	a332      	add	r3, pc, #200	; (adr r3, 800d980 <_strtod_r+0xc00>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	f002 f952 	bl	800fb64 <__aeabi_dcmpgt>
 800d8c0:	e004      	b.n	800d8cc <_strtod_r+0xb4c>
 800d8c2:	a331      	add	r3, pc, #196	; (adr r3, 800d988 <_strtod_r+0xc08>)
 800d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c8:	f002 f92e 	bl	800fb28 <__aeabi_dcmplt>
 800d8cc:	bb18      	cbnz	r0, 800d916 <_strtod_r+0xb96>
 800d8ce:	4658      	mov	r0, fp
 800d8d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d8d2:	f001 fa9d 	bl	800ee10 <_Bfree>
 800d8d6:	4658      	mov	r0, fp
 800d8d8:	9903      	ldr	r1, [sp, #12]
 800d8da:	f001 fa99 	bl	800ee10 <_Bfree>
 800d8de:	4658      	mov	r0, fp
 800d8e0:	4651      	mov	r1, sl
 800d8e2:	f001 fa95 	bl	800ee10 <_Bfree>
 800d8e6:	4658      	mov	r0, fp
 800d8e8:	4621      	mov	r1, r4
 800d8ea:	f001 fa91 	bl	800ee10 <_Bfree>
 800d8ee:	e566      	b.n	800d3be <_strtod_r+0x63e>
 800d8f0:	9b02      	ldr	r3, [sp, #8]
 800d8f2:	b183      	cbz	r3, 800d916 <_strtod_r+0xb96>
 800d8f4:	4b2a      	ldr	r3, [pc, #168]	; (800d9a0 <_strtod_r+0xc20>)
 800d8f6:	930d      	str	r3, [sp, #52]	; 0x34
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	930c      	str	r3, [sp, #48]	; 0x30
 800d8fc:	4640      	mov	r0, r8
 800d8fe:	4649      	mov	r1, r9
 800d900:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d904:	f7fe f8aa 	bl	800ba5c <__aeabi_dmul>
 800d908:	4680      	mov	r8, r0
 800d90a:	4689      	mov	r9, r1
 800d90c:	b919      	cbnz	r1, 800d916 <_strtod_r+0xb96>
 800d90e:	b910      	cbnz	r0, 800d916 <_strtod_r+0xb96>
 800d910:	2322      	movs	r3, #34	; 0x22
 800d912:	f8cb 3000 	str.w	r3, [fp]
 800d916:	4658      	mov	r0, fp
 800d918:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d91a:	f001 fa79 	bl	800ee10 <_Bfree>
 800d91e:	4658      	mov	r0, fp
 800d920:	9903      	ldr	r1, [sp, #12]
 800d922:	f001 fa75 	bl	800ee10 <_Bfree>
 800d926:	4658      	mov	r0, fp
 800d928:	4651      	mov	r1, sl
 800d92a:	f001 fa71 	bl	800ee10 <_Bfree>
 800d92e:	4658      	mov	r0, fp
 800d930:	9905      	ldr	r1, [sp, #20]
 800d932:	f001 fa6d 	bl	800ee10 <_Bfree>
 800d936:	4658      	mov	r0, fp
 800d938:	4621      	mov	r1, r4
 800d93a:	f001 fa69 	bl	800ee10 <_Bfree>
 800d93e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d940:	b113      	cbz	r3, 800d948 <_strtod_r+0xbc8>
 800d942:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d944:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d94a:	b11b      	cbz	r3, 800d954 <_strtod_r+0xbd4>
 800d94c:	4640      	mov	r0, r8
 800d94e:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800d952:	e007      	b.n	800d964 <_strtod_r+0xbe4>
 800d954:	4640      	mov	r0, r8
 800d956:	4649      	mov	r1, r9
 800d958:	e004      	b.n	800d964 <_strtod_r+0xbe4>
 800d95a:	2400      	movs	r4, #0
 800d95c:	9402      	str	r4, [sp, #8]
 800d95e:	2701      	movs	r7, #1
 800d960:	f7ff bb31 	b.w	800cfc6 <_strtod_r+0x246>
 800d964:	b01f      	add	sp, #124	; 0x7c
 800d966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96a:	bf00      	nop
 800d96c:	f3af 8000 	nop.w
 800d970:	ffc00000 	.word	0xffc00000
 800d974:	41dfffff 	.word	0x41dfffff
 800d978:	94a03595 	.word	0x94a03595
 800d97c:	3fdfffff 	.word	0x3fdfffff
 800d980:	35afe535 	.word	0x35afe535
 800d984:	3fe00000 	.word	0x3fe00000
 800d988:	94a03595 	.word	0x94a03595
 800d98c:	3fcfffff 	.word	0x3fcfffff
 800d990:	3fe00000 	.word	0x3fe00000
 800d994:	7fe00000 	.word	0x7fe00000
 800d998:	7c9fffff 	.word	0x7c9fffff
 800d99c:	7fefffff 	.word	0x7fefffff
 800d9a0:	39500000 	.word	0x39500000
 800d9a4:	f3af 8000 	nop.w

0800d9a8 <_strtol_r>:
 800d9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9ac:	4c40      	ldr	r4, [pc, #256]	; (800dab0 <_strtol_r+0x108>)
 800d9ae:	f8d4 9000 	ldr.w	r9, [r4]
 800d9b2:	460f      	mov	r7, r1
 800d9b4:	463d      	mov	r5, r7
 800d9b6:	f815 eb01 	ldrb.w	lr, [r5], #1
 800d9ba:	eb09 040e 	add.w	r4, r9, lr
 800d9be:	7866      	ldrb	r6, [r4, #1]
 800d9c0:	f006 0408 	and.w	r4, r6, #8
 800d9c4:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 800d9c8:	b10c      	cbz	r4, 800d9ce <_strtol_r+0x26>
 800d9ca:	462f      	mov	r7, r5
 800d9cc:	e7f2      	b.n	800d9b4 <_strtol_r+0xc>
 800d9ce:	4674      	mov	r4, lr
 800d9d0:	2c2d      	cmp	r4, #45	; 0x2d
 800d9d2:	d103      	bne.n	800d9dc <_strtol_r+0x34>
 800d9d4:	1cbd      	adds	r5, r7, #2
 800d9d6:	787c      	ldrb	r4, [r7, #1]
 800d9d8:	2601      	movs	r6, #1
 800d9da:	e003      	b.n	800d9e4 <_strtol_r+0x3c>
 800d9dc:	2c2b      	cmp	r4, #43	; 0x2b
 800d9de:	bf04      	itt	eq
 800d9e0:	787c      	ldrbeq	r4, [r7, #1]
 800d9e2:	1cbd      	addeq	r5, r7, #2
 800d9e4:	b113      	cbz	r3, 800d9ec <_strtol_r+0x44>
 800d9e6:	2b10      	cmp	r3, #16
 800d9e8:	d10a      	bne.n	800da00 <_strtol_r+0x58>
 800d9ea:	e05a      	b.n	800daa2 <_strtol_r+0xfa>
 800d9ec:	2c30      	cmp	r4, #48	; 0x30
 800d9ee:	d156      	bne.n	800da9e <_strtol_r+0xf6>
 800d9f0:	782c      	ldrb	r4, [r5, #0]
 800d9f2:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d9f6:	2c58      	cmp	r4, #88	; 0x58
 800d9f8:	d14c      	bne.n	800da94 <_strtol_r+0xec>
 800d9fa:	786c      	ldrb	r4, [r5, #1]
 800d9fc:	2310      	movs	r3, #16
 800d9fe:	3502      	adds	r5, #2
 800da00:	2e00      	cmp	r6, #0
 800da02:	bf14      	ite	ne
 800da04:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 800da08:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 800da0c:	2700      	movs	r7, #0
 800da0e:	fbb8 faf3 	udiv	sl, r8, r3
 800da12:	46be      	mov	lr, r7
 800da14:	fb03 881a 	mls	r8, r3, sl, r8
 800da18:	eb09 0c04 	add.w	ip, r9, r4
 800da1c:	f89c c001 	ldrb.w	ip, [ip, #1]
 800da20:	f01c 0f04 	tst.w	ip, #4
 800da24:	d001      	beq.n	800da2a <_strtol_r+0x82>
 800da26:	3c30      	subs	r4, #48	; 0x30
 800da28:	e00b      	b.n	800da42 <_strtol_r+0x9a>
 800da2a:	f01c 0c03 	ands.w	ip, ip, #3
 800da2e:	d01b      	beq.n	800da68 <_strtol_r+0xc0>
 800da30:	f1bc 0f01 	cmp.w	ip, #1
 800da34:	bf0c      	ite	eq
 800da36:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 800da3a:	f04f 0c57 	movne.w	ip, #87	; 0x57
 800da3e:	ebcc 0404 	rsb	r4, ip, r4
 800da42:	429c      	cmp	r4, r3
 800da44:	da10      	bge.n	800da68 <_strtol_r+0xc0>
 800da46:	f1b7 3fff 	cmp.w	r7, #4294967295
 800da4a:	d00a      	beq.n	800da62 <_strtol_r+0xba>
 800da4c:	45d6      	cmp	lr, sl
 800da4e:	d806      	bhi.n	800da5e <_strtol_r+0xb6>
 800da50:	d101      	bne.n	800da56 <_strtol_r+0xae>
 800da52:	4544      	cmp	r4, r8
 800da54:	dc03      	bgt.n	800da5e <_strtol_r+0xb6>
 800da56:	fb03 4e0e 	mla	lr, r3, lr, r4
 800da5a:	2701      	movs	r7, #1
 800da5c:	e001      	b.n	800da62 <_strtol_r+0xba>
 800da5e:	f04f 37ff 	mov.w	r7, #4294967295
 800da62:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da66:	e7d7      	b.n	800da18 <_strtol_r+0x70>
 800da68:	1c7c      	adds	r4, r7, #1
 800da6a:	4673      	mov	r3, lr
 800da6c:	d10a      	bne.n	800da84 <_strtol_r+0xdc>
 800da6e:	2e00      	cmp	r6, #0
 800da70:	f04f 0122 	mov.w	r1, #34	; 0x22
 800da74:	bf14      	ite	ne
 800da76:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 800da7a:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 800da7e:	6001      	str	r1, [r0, #0]
 800da80:	b92a      	cbnz	r2, 800da8e <_strtol_r+0xe6>
 800da82:	e011      	b.n	800daa8 <_strtol_r+0x100>
 800da84:	b10e      	cbz	r6, 800da8a <_strtol_r+0xe2>
 800da86:	f1ce 0300 	rsb	r3, lr, #0
 800da8a:	b16a      	cbz	r2, 800daa8 <_strtol_r+0x100>
 800da8c:	b107      	cbz	r7, 800da90 <_strtol_r+0xe8>
 800da8e:	1e69      	subs	r1, r5, #1
 800da90:	6011      	str	r1, [r2, #0]
 800da92:	e009      	b.n	800daa8 <_strtol_r+0x100>
 800da94:	2430      	movs	r4, #48	; 0x30
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1b2      	bne.n	800da00 <_strtol_r+0x58>
 800da9a:	2308      	movs	r3, #8
 800da9c:	e7b0      	b.n	800da00 <_strtol_r+0x58>
 800da9e:	230a      	movs	r3, #10
 800daa0:	e7ae      	b.n	800da00 <_strtol_r+0x58>
 800daa2:	2c30      	cmp	r4, #48	; 0x30
 800daa4:	d1ac      	bne.n	800da00 <_strtol_r+0x58>
 800daa6:	e7a3      	b.n	800d9f0 <_strtol_r+0x48>
 800daa8:	4618      	mov	r0, r3
 800daaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daae:	bf00      	nop
 800dab0:	200001f4 	.word	0x200001f4

0800dab4 <quorem>:
 800dab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab8:	6903      	ldr	r3, [r0, #16]
 800daba:	690c      	ldr	r4, [r1, #16]
 800dabc:	42a3      	cmp	r3, r4
 800dabe:	4680      	mov	r8, r0
 800dac0:	f2c0 8081 	blt.w	800dbc6 <quorem+0x112>
 800dac4:	3c01      	subs	r4, #1
 800dac6:	f101 0714 	add.w	r7, r1, #20
 800daca:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800dace:	f100 0614 	add.w	r6, r0, #20
 800dad2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dad6:	eb06 030e 	add.w	r3, r6, lr
 800dada:	9301      	str	r3, [sp, #4]
 800dadc:	3501      	adds	r5, #1
 800dade:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800dae2:	fbb3 f5f5 	udiv	r5, r3, r5
 800dae6:	eb07 090e 	add.w	r9, r7, lr
 800daea:	b3c5      	cbz	r5, 800db5e <quorem+0xaa>
 800daec:	f04f 0a00 	mov.w	sl, #0
 800daf0:	4638      	mov	r0, r7
 800daf2:	46b4      	mov	ip, r6
 800daf4:	46d3      	mov	fp, sl
 800daf6:	f850 3b04 	ldr.w	r3, [r0], #4
 800dafa:	b29a      	uxth	r2, r3
 800dafc:	0c1b      	lsrs	r3, r3, #16
 800dafe:	fb02 a205 	mla	r2, r2, r5, sl
 800db02:	436b      	muls	r3, r5
 800db04:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800db08:	b292      	uxth	r2, r2
 800db0a:	ebc2 020b 	rsb	r2, r2, fp
 800db0e:	f8bc b000 	ldrh.w	fp, [ip]
 800db12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db16:	fa12 f28b 	uxtah	r2, r2, fp
 800db1a:	fa1f fb83 	uxth.w	fp, r3
 800db1e:	f8dc 3000 	ldr.w	r3, [ip]
 800db22:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 800db26:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800db2a:	b292      	uxth	r2, r2
 800db2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800db30:	4548      	cmp	r0, r9
 800db32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800db36:	f84c 2b04 	str.w	r2, [ip], #4
 800db3a:	d9dc      	bls.n	800daf6 <quorem+0x42>
 800db3c:	f856 300e 	ldr.w	r3, [r6, lr]
 800db40:	b96b      	cbnz	r3, 800db5e <quorem+0xaa>
 800db42:	9b01      	ldr	r3, [sp, #4]
 800db44:	3b04      	subs	r3, #4
 800db46:	42b3      	cmp	r3, r6
 800db48:	461a      	mov	r2, r3
 800db4a:	d802      	bhi.n	800db52 <quorem+0x9e>
 800db4c:	f8c8 4010 	str.w	r4, [r8, #16]
 800db50:	e005      	b.n	800db5e <quorem+0xaa>
 800db52:	6812      	ldr	r2, [r2, #0]
 800db54:	3b04      	subs	r3, #4
 800db56:	2a00      	cmp	r2, #0
 800db58:	d1f8      	bne.n	800db4c <quorem+0x98>
 800db5a:	3c01      	subs	r4, #1
 800db5c:	e7f3      	b.n	800db46 <quorem+0x92>
 800db5e:	4640      	mov	r0, r8
 800db60:	f001 fb73 	bl	800f24a <__mcmp>
 800db64:	2800      	cmp	r0, #0
 800db66:	db2c      	blt.n	800dbc2 <quorem+0x10e>
 800db68:	3501      	adds	r5, #1
 800db6a:	4630      	mov	r0, r6
 800db6c:	f04f 0e00 	mov.w	lr, #0
 800db70:	f857 1b04 	ldr.w	r1, [r7], #4
 800db74:	f8d0 c000 	ldr.w	ip, [r0]
 800db78:	b28a      	uxth	r2, r1
 800db7a:	ebc2 030e 	rsb	r3, r2, lr
 800db7e:	0c09      	lsrs	r1, r1, #16
 800db80:	fa13 f38c 	uxtah	r3, r3, ip
 800db84:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800db88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db92:	454f      	cmp	r7, r9
 800db94:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800db98:	f840 3b04 	str.w	r3, [r0], #4
 800db9c:	d9e8      	bls.n	800db70 <quorem+0xbc>
 800db9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dba2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dba6:	b962      	cbnz	r2, 800dbc2 <quorem+0x10e>
 800dba8:	3b04      	subs	r3, #4
 800dbaa:	42b3      	cmp	r3, r6
 800dbac:	461a      	mov	r2, r3
 800dbae:	d802      	bhi.n	800dbb6 <quorem+0x102>
 800dbb0:	f8c8 4010 	str.w	r4, [r8, #16]
 800dbb4:	e005      	b.n	800dbc2 <quorem+0x10e>
 800dbb6:	6812      	ldr	r2, [r2, #0]
 800dbb8:	3b04      	subs	r3, #4
 800dbba:	2a00      	cmp	r2, #0
 800dbbc:	d1f8      	bne.n	800dbb0 <quorem+0xfc>
 800dbbe:	3c01      	subs	r4, #1
 800dbc0:	e7f3      	b.n	800dbaa <quorem+0xf6>
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	e000      	b.n	800dbc8 <quorem+0x114>
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	b003      	add	sp, #12
 800dbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800dbd0 <_dtoa_r>:
 800dbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dbd6:	b097      	sub	sp, #92	; 0x5c
 800dbd8:	4682      	mov	sl, r0
 800dbda:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800dbdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dbe0:	b945      	cbnz	r5, 800dbf4 <_dtoa_r+0x24>
 800dbe2:	2010      	movs	r0, #16
 800dbe4:	f001 f8c8 	bl	800ed78 <malloc>
 800dbe8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800dbec:	6045      	str	r5, [r0, #4]
 800dbee:	6085      	str	r5, [r0, #8]
 800dbf0:	6005      	str	r5, [r0, #0]
 800dbf2:	60c5      	str	r5, [r0, #12]
 800dbf4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800dbf8:	6819      	ldr	r1, [r3, #0]
 800dbfa:	b159      	cbz	r1, 800dc14 <_dtoa_r+0x44>
 800dbfc:	685a      	ldr	r2, [r3, #4]
 800dbfe:	604a      	str	r2, [r1, #4]
 800dc00:	2301      	movs	r3, #1
 800dc02:	4093      	lsls	r3, r2
 800dc04:	608b      	str	r3, [r1, #8]
 800dc06:	4650      	mov	r0, sl
 800dc08:	f001 f902 	bl	800ee10 <_Bfree>
 800dc0c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800dc10:	2200      	movs	r2, #0
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	9b03      	ldr	r3, [sp, #12]
 800dc16:	4aa2      	ldr	r2, [pc, #648]	; (800dea0 <_dtoa_r+0x2d0>)
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	bfbf      	itttt	lt
 800dc1c:	2301      	movlt	r3, #1
 800dc1e:	6023      	strlt	r3, [r4, #0]
 800dc20:	9b03      	ldrlt	r3, [sp, #12]
 800dc22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dc26:	bfb8      	it	lt
 800dc28:	9303      	strlt	r3, [sp, #12]
 800dc2a:	9f03      	ldr	r7, [sp, #12]
 800dc2c:	bfa4      	itt	ge
 800dc2e:	2300      	movge	r3, #0
 800dc30:	6023      	strge	r3, [r4, #0]
 800dc32:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800dc36:	0d1b      	lsrs	r3, r3, #20
 800dc38:	051b      	lsls	r3, r3, #20
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d11d      	bne.n	800dc7a <_dtoa_r+0xaa>
 800dc3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dc40:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc44:	6013      	str	r3, [r2, #0]
 800dc46:	9b02      	ldr	r3, [sp, #8]
 800dc48:	b943      	cbnz	r3, 800dc5c <_dtoa_r+0x8c>
 800dc4a:	4a96      	ldr	r2, [pc, #600]	; (800dea4 <_dtoa_r+0x2d4>)
 800dc4c:	4b96      	ldr	r3, [pc, #600]	; (800dea8 <_dtoa_r+0x2d8>)
 800dc4e:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800dc52:	2800      	cmp	r0, #0
 800dc54:	bf14      	ite	ne
 800dc56:	4618      	movne	r0, r3
 800dc58:	4610      	moveq	r0, r2
 800dc5a:	e000      	b.n	800dc5e <_dtoa_r+0x8e>
 800dc5c:	4892      	ldr	r0, [pc, #584]	; (800dea8 <_dtoa_r+0x2d8>)
 800dc5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f000 8573 	beq.w	800e74c <_dtoa_r+0xb7c>
 800dc66:	78c3      	ldrb	r3, [r0, #3]
 800dc68:	b113      	cbz	r3, 800dc70 <_dtoa_r+0xa0>
 800dc6a:	f100 0308 	add.w	r3, r0, #8
 800dc6e:	e000      	b.n	800dc72 <_dtoa_r+0xa2>
 800dc70:	1cc3      	adds	r3, r0, #3
 800dc72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800dc74:	6013      	str	r3, [r2, #0]
 800dc76:	f000 bd69 	b.w	800e74c <_dtoa_r+0xb7c>
 800dc7a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	4620      	mov	r0, r4
 800dc82:	4629      	mov	r1, r5
 800dc84:	2300      	movs	r3, #0
 800dc86:	f001 ff45 	bl	800fb14 <__aeabi_dcmpeq>
 800dc8a:	4680      	mov	r8, r0
 800dc8c:	b158      	cbz	r0, 800dca6 <_dtoa_r+0xd6>
 800dc8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dc90:	2301      	movs	r3, #1
 800dc92:	6013      	str	r3, [r2, #0]
 800dc94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f000 8546 	beq.w	800e728 <_dtoa_r+0xb58>
 800dc9c:	4883      	ldr	r0, [pc, #524]	; (800deac <_dtoa_r+0x2dc>)
 800dc9e:	6018      	str	r0, [r3, #0]
 800dca0:	3801      	subs	r0, #1
 800dca2:	f000 bd53 	b.w	800e74c <_dtoa_r+0xb7c>
 800dca6:	ab15      	add	r3, sp, #84	; 0x54
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	ab14      	add	r3, sp, #80	; 0x50
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	4650      	mov	r0, sl
 800dcb0:	4622      	mov	r2, r4
 800dcb2:	462b      	mov	r3, r5
 800dcb4:	f001 fbb7 	bl	800f426 <__d2b>
 800dcb8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dcbc:	9007      	str	r0, [sp, #28]
 800dcbe:	b15e      	cbz	r6, 800dcd8 <_dtoa_r+0x108>
 800dcc0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800dcc4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800dcce:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800dcd2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800dcd6:	e01d      	b.n	800dd14 <_dtoa_r+0x144>
 800dcd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcda:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800dcdc:	441e      	add	r6, r3
 800dcde:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800dce2:	429e      	cmp	r6, r3
 800dce4:	bfad      	iteet	ge
 800dce6:	9a02      	ldrge	r2, [sp, #8]
 800dce8:	4b71      	ldrlt	r3, [pc, #452]	; (800deb0 <_dtoa_r+0x2e0>)
 800dcea:	9a02      	ldrlt	r2, [sp, #8]
 800dcec:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 800dcf0:	bfa3      	ittte	ge
 800dcf2:	fa22 f003 	lsrge.w	r0, r2, r3
 800dcf6:	4b6f      	ldrge	r3, [pc, #444]	; (800deb4 <_dtoa_r+0x2e4>)
 800dcf8:	1b9b      	subge	r3, r3, r6
 800dcfa:	1b9b      	sublt	r3, r3, r6
 800dcfc:	bfaa      	itet	ge
 800dcfe:	409f      	lslge	r7, r3
 800dd00:	fa02 f003 	lsllt.w	r0, r2, r3
 800dd04:	4338      	orrge	r0, r7
 800dd06:	f7fd fe33 	bl	800b970 <__aeabi_ui2d>
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800dd10:	3e01      	subs	r6, #1
 800dd12:	9313      	str	r3, [sp, #76]	; 0x4c
 800dd14:	2200      	movs	r2, #0
 800dd16:	4b68      	ldr	r3, [pc, #416]	; (800deb8 <_dtoa_r+0x2e8>)
 800dd18:	f7fd fcec 	bl	800b6f4 <__aeabi_dsub>
 800dd1c:	a35a      	add	r3, pc, #360	; (adr r3, 800de88 <_dtoa_r+0x2b8>)
 800dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd22:	f7fd fe9b 	bl	800ba5c <__aeabi_dmul>
 800dd26:	a35a      	add	r3, pc, #360	; (adr r3, 800de90 <_dtoa_r+0x2c0>)
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	f7fd fce4 	bl	800b6f8 <__adddf3>
 800dd30:	4604      	mov	r4, r0
 800dd32:	4630      	mov	r0, r6
 800dd34:	460d      	mov	r5, r1
 800dd36:	f7fd fe2b 	bl	800b990 <__aeabi_i2d>
 800dd3a:	a357      	add	r3, pc, #348	; (adr r3, 800de98 <_dtoa_r+0x2c8>)
 800dd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd40:	f7fd fe8c 	bl	800ba5c <__aeabi_dmul>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	4620      	mov	r0, r4
 800dd4a:	4629      	mov	r1, r5
 800dd4c:	f7fd fcd4 	bl	800b6f8 <__adddf3>
 800dd50:	4604      	mov	r4, r0
 800dd52:	460d      	mov	r5, r1
 800dd54:	f001 ff10 	bl	800fb78 <__aeabi_d2iz>
 800dd58:	4629      	mov	r1, r5
 800dd5a:	4683      	mov	fp, r0
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	4620      	mov	r0, r4
 800dd60:	2300      	movs	r3, #0
 800dd62:	f001 fee1 	bl	800fb28 <__aeabi_dcmplt>
 800dd66:	b158      	cbz	r0, 800dd80 <_dtoa_r+0x1b0>
 800dd68:	4658      	mov	r0, fp
 800dd6a:	f7fd fe11 	bl	800b990 <__aeabi_i2d>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	460b      	mov	r3, r1
 800dd72:	4620      	mov	r0, r4
 800dd74:	4629      	mov	r1, r5
 800dd76:	f001 fecd 	bl	800fb14 <__aeabi_dcmpeq>
 800dd7a:	b908      	cbnz	r0, 800dd80 <_dtoa_r+0x1b0>
 800dd7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd80:	f1bb 0f16 	cmp.w	fp, #22
 800dd84:	d80d      	bhi.n	800dda2 <_dtoa_r+0x1d2>
 800dd86:	4b4d      	ldr	r3, [pc, #308]	; (800debc <_dtoa_r+0x2ec>)
 800dd88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd94:	f001 fee6 	bl	800fb64 <__aeabi_dcmpgt>
 800dd98:	b130      	cbz	r0, 800dda8 <_dtoa_r+0x1d8>
 800dd9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd9e:	2300      	movs	r3, #0
 800dda0:	e000      	b.n	800dda4 <_dtoa_r+0x1d4>
 800dda2:	2301      	movs	r3, #1
 800dda4:	9312      	str	r3, [sp, #72]	; 0x48
 800dda6:	e000      	b.n	800ddaa <_dtoa_r+0x1da>
 800dda8:	9012      	str	r0, [sp, #72]	; 0x48
 800ddaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddac:	1b9e      	subs	r6, r3, r6
 800ddae:	1e73      	subs	r3, r6, #1
 800ddb0:	930a      	str	r3, [sp, #40]	; 0x28
 800ddb2:	bf45      	ittet	mi
 800ddb4:	425b      	negmi	r3, r3
 800ddb6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ddb8:	2300      	movpl	r3, #0
 800ddba:	2300      	movmi	r3, #0
 800ddbc:	bf4c      	ite	mi
 800ddbe:	930a      	strmi	r3, [sp, #40]	; 0x28
 800ddc0:	9309      	strpl	r3, [sp, #36]	; 0x24
 800ddc2:	f1bb 0f00 	cmp.w	fp, #0
 800ddc6:	db07      	blt.n	800ddd8 <_dtoa_r+0x208>
 800ddc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddca:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800ddce:	445b      	add	r3, fp
 800ddd0:	930a      	str	r3, [sp, #40]	; 0x28
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddd6:	e008      	b.n	800ddea <_dtoa_r+0x21a>
 800ddd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddda:	ebcb 0303 	rsb	r3, fp, r3
 800ddde:	9309      	str	r3, [sp, #36]	; 0x24
 800dde0:	f1cb 0300 	rsb	r3, fp, #0
 800dde4:	930b      	str	r3, [sp, #44]	; 0x2c
 800dde6:	2300      	movs	r3, #0
 800dde8:	930d      	str	r3, [sp, #52]	; 0x34
 800ddea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ddec:	2b09      	cmp	r3, #9
 800ddee:	d828      	bhi.n	800de42 <_dtoa_r+0x272>
 800ddf0:	2b05      	cmp	r3, #5
 800ddf2:	bfc4      	itt	gt
 800ddf4:	3b04      	subgt	r3, #4
 800ddf6:	9320      	strgt	r3, [sp, #128]	; 0x80
 800ddf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ddfa:	f1a3 0302 	sub.w	r3, r3, #2
 800ddfe:	bfcc      	ite	gt
 800de00:	2500      	movgt	r5, #0
 800de02:	2501      	movle	r5, #1
 800de04:	2b03      	cmp	r3, #3
 800de06:	d821      	bhi.n	800de4c <_dtoa_r+0x27c>
 800de08:	e8df f003 	tbb	[pc, r3]
 800de0c:	10040e02 	.word	0x10040e02
 800de10:	2300      	movs	r3, #0
 800de12:	e000      	b.n	800de16 <_dtoa_r+0x246>
 800de14:	2301      	movs	r3, #1
 800de16:	930c      	str	r3, [sp, #48]	; 0x30
 800de18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	dc20      	bgt.n	800de60 <_dtoa_r+0x290>
 800de1e:	2301      	movs	r3, #1
 800de20:	9306      	str	r3, [sp, #24]
 800de22:	9305      	str	r3, [sp, #20]
 800de24:	461a      	mov	r2, r3
 800de26:	e019      	b.n	800de5c <_dtoa_r+0x28c>
 800de28:	2300      	movs	r3, #0
 800de2a:	e000      	b.n	800de2e <_dtoa_r+0x25e>
 800de2c:	2301      	movs	r3, #1
 800de2e:	930c      	str	r3, [sp, #48]	; 0x30
 800de30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de32:	445b      	add	r3, fp
 800de34:	9306      	str	r3, [sp, #24]
 800de36:	3301      	adds	r3, #1
 800de38:	2b01      	cmp	r3, #1
 800de3a:	9305      	str	r3, [sp, #20]
 800de3c:	bfb8      	it	lt
 800de3e:	2301      	movlt	r3, #1
 800de40:	e011      	b.n	800de66 <_dtoa_r+0x296>
 800de42:	2501      	movs	r5, #1
 800de44:	2300      	movs	r3, #0
 800de46:	9320      	str	r3, [sp, #128]	; 0x80
 800de48:	950c      	str	r5, [sp, #48]	; 0x30
 800de4a:	e001      	b.n	800de50 <_dtoa_r+0x280>
 800de4c:	2301      	movs	r3, #1
 800de4e:	930c      	str	r3, [sp, #48]	; 0x30
 800de50:	f04f 33ff 	mov.w	r3, #4294967295
 800de54:	9306      	str	r3, [sp, #24]
 800de56:	9305      	str	r3, [sp, #20]
 800de58:	2200      	movs	r2, #0
 800de5a:	2312      	movs	r3, #18
 800de5c:	9221      	str	r2, [sp, #132]	; 0x84
 800de5e:	e002      	b.n	800de66 <_dtoa_r+0x296>
 800de60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de62:	9306      	str	r3, [sp, #24]
 800de64:	9305      	str	r3, [sp, #20]
 800de66:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800de6a:	2200      	movs	r2, #0
 800de6c:	6062      	str	r2, [r4, #4]
 800de6e:	2104      	movs	r1, #4
 800de70:	f101 0214 	add.w	r2, r1, #20
 800de74:	429a      	cmp	r2, r3
 800de76:	d823      	bhi.n	800dec0 <_dtoa_r+0x2f0>
 800de78:	6862      	ldr	r2, [r4, #4]
 800de7a:	3201      	adds	r2, #1
 800de7c:	6062      	str	r2, [r4, #4]
 800de7e:	0049      	lsls	r1, r1, #1
 800de80:	e7f6      	b.n	800de70 <_dtoa_r+0x2a0>
 800de82:	bf00      	nop
 800de84:	f3af 8000 	nop.w
 800de88:	636f4361 	.word	0x636f4361
 800de8c:	3fd287a7 	.word	0x3fd287a7
 800de90:	8b60c8b3 	.word	0x8b60c8b3
 800de94:	3fc68a28 	.word	0x3fc68a28
 800de98:	509f79fb 	.word	0x509f79fb
 800de9c:	3fd34413 	.word	0x3fd34413
 800dea0:	7ff00000 	.word	0x7ff00000
 800dea4:	080105a5 	.word	0x080105a5
 800dea8:	080105ae 	.word	0x080105ae
 800deac:	0801042b 	.word	0x0801042b
 800deb0:	fffffbee 	.word	0xfffffbee
 800deb4:	fffffc0e 	.word	0xfffffc0e
 800deb8:	3ff80000 	.word	0x3ff80000
 800debc:	080105c0 	.word	0x080105c0
 800dec0:	4650      	mov	r0, sl
 800dec2:	6861      	ldr	r1, [r4, #4]
 800dec4:	f000 ff6f 	bl	800eda6 <_Balloc>
 800dec8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800decc:	6020      	str	r0, [r4, #0]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	9308      	str	r3, [sp, #32]
 800ded2:	9b05      	ldr	r3, [sp, #20]
 800ded4:	2b0e      	cmp	r3, #14
 800ded6:	f200 814b 	bhi.w	800e170 <_dtoa_r+0x5a0>
 800deda:	2d00      	cmp	r5, #0
 800dedc:	f000 8148 	beq.w	800e170 <_dtoa_r+0x5a0>
 800dee0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dee4:	f1bb 0f00 	cmp.w	fp, #0
 800dee8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800deec:	dd31      	ble.n	800df52 <_dtoa_r+0x382>
 800deee:	4ab3      	ldr	r2, [pc, #716]	; (800e1bc <_dtoa_r+0x5ec>)
 800def0:	f00b 030f 	and.w	r3, fp, #15
 800def4:	ea4f 172b 	mov.w	r7, fp, asr #4
 800def8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800defc:	06f8      	lsls	r0, r7, #27
 800defe:	e9d3 4500 	ldrd	r4, r5, [r3]
 800df02:	d50c      	bpl.n	800df1e <_dtoa_r+0x34e>
 800df04:	4bae      	ldr	r3, [pc, #696]	; (800e1c0 <_dtoa_r+0x5f0>)
 800df06:	ec51 0b17 	vmov	r0, r1, d7
 800df0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df0e:	f7fd fecf 	bl	800bcb0 <__aeabi_ddiv>
 800df12:	f007 070f 	and.w	r7, r7, #15
 800df16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df1a:	2603      	movs	r6, #3
 800df1c:	e000      	b.n	800df20 <_dtoa_r+0x350>
 800df1e:	2602      	movs	r6, #2
 800df20:	f8df 829c 	ldr.w	r8, [pc, #668]	; 800e1c0 <_dtoa_r+0x5f0>
 800df24:	b177      	cbz	r7, 800df44 <_dtoa_r+0x374>
 800df26:	07f9      	lsls	r1, r7, #31
 800df28:	d508      	bpl.n	800df3c <_dtoa_r+0x36c>
 800df2a:	4620      	mov	r0, r4
 800df2c:	4629      	mov	r1, r5
 800df2e:	e9d8 2300 	ldrd	r2, r3, [r8]
 800df32:	f7fd fd93 	bl	800ba5c <__aeabi_dmul>
 800df36:	3601      	adds	r6, #1
 800df38:	4604      	mov	r4, r0
 800df3a:	460d      	mov	r5, r1
 800df3c:	107f      	asrs	r7, r7, #1
 800df3e:	f108 0808 	add.w	r8, r8, #8
 800df42:	e7ef      	b.n	800df24 <_dtoa_r+0x354>
 800df44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df48:	4622      	mov	r2, r4
 800df4a:	462b      	mov	r3, r5
 800df4c:	f7fd feb0 	bl	800bcb0 <__aeabi_ddiv>
 800df50:	e01b      	b.n	800df8a <_dtoa_r+0x3ba>
 800df52:	f1cb 0400 	rsb	r4, fp, #0
 800df56:	b1dc      	cbz	r4, 800df90 <_dtoa_r+0x3c0>
 800df58:	4b98      	ldr	r3, [pc, #608]	; (800e1bc <_dtoa_r+0x5ec>)
 800df5a:	4d99      	ldr	r5, [pc, #612]	; (800e1c0 <_dtoa_r+0x5f0>)
 800df5c:	f004 020f 	and.w	r2, r4, #15
 800df60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6c:	f7fd fd76 	bl	800ba5c <__aeabi_dmul>
 800df70:	1124      	asrs	r4, r4, #4
 800df72:	2602      	movs	r6, #2
 800df74:	b14c      	cbz	r4, 800df8a <_dtoa_r+0x3ba>
 800df76:	07e2      	lsls	r2, r4, #31
 800df78:	d504      	bpl.n	800df84 <_dtoa_r+0x3b4>
 800df7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df7e:	3601      	adds	r6, #1
 800df80:	f7fd fd6c 	bl	800ba5c <__aeabi_dmul>
 800df84:	1064      	asrs	r4, r4, #1
 800df86:	3508      	adds	r5, #8
 800df88:	e7f4      	b.n	800df74 <_dtoa_r+0x3a4>
 800df8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df8e:	e000      	b.n	800df92 <_dtoa_r+0x3c2>
 800df90:	2602      	movs	r6, #2
 800df92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df94:	b1db      	cbz	r3, 800dfce <_dtoa_r+0x3fe>
 800df96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800df9a:	2200      	movs	r2, #0
 800df9c:	4620      	mov	r0, r4
 800df9e:	4629      	mov	r1, r5
 800dfa0:	4b88      	ldr	r3, [pc, #544]	; (800e1c4 <_dtoa_r+0x5f4>)
 800dfa2:	f001 fdc1 	bl	800fb28 <__aeabi_dcmplt>
 800dfa6:	b190      	cbz	r0, 800dfce <_dtoa_r+0x3fe>
 800dfa8:	9b05      	ldr	r3, [sp, #20]
 800dfaa:	b183      	cbz	r3, 800dfce <_dtoa_r+0x3fe>
 800dfac:	9b06      	ldr	r3, [sp, #24]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f340 80da 	ble.w	800e168 <_dtoa_r+0x598>
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	2200      	movs	r2, #0
 800dfba:	4b83      	ldr	r3, [pc, #524]	; (800e1c8 <_dtoa_r+0x5f8>)
 800dfbc:	f7fd fd4e 	bl	800ba5c <__aeabi_dmul>
 800dfc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dfc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfc8:	3601      	adds	r6, #1
 800dfca:	9d06      	ldr	r5, [sp, #24]
 800dfcc:	e001      	b.n	800dfd2 <_dtoa_r+0x402>
 800dfce:	9d05      	ldr	r5, [sp, #20]
 800dfd0:	465f      	mov	r7, fp
 800dfd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800dfdc:	f7fd fcd8 	bl	800b990 <__aeabi_i2d>
 800dfe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dfe4:	f7fd fd3a 	bl	800ba5c <__aeabi_dmul>
 800dfe8:	2200      	movs	r2, #0
 800dfea:	4b78      	ldr	r3, [pc, #480]	; (800e1cc <_dtoa_r+0x5fc>)
 800dfec:	f7fd fb84 	bl	800b6f8 <__adddf3>
 800dff0:	4680      	mov	r8, r0
 800dff2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800dff6:	b9cd      	cbnz	r5, 800e02c <_dtoa_r+0x45c>
 800dff8:	2200      	movs	r2, #0
 800dffa:	4b75      	ldr	r3, [pc, #468]	; (800e1d0 <_dtoa_r+0x600>)
 800dffc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e000:	f7fd fb78 	bl	800b6f4 <__aeabi_dsub>
 800e004:	4642      	mov	r2, r8
 800e006:	464b      	mov	r3, r9
 800e008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e00c:	f001 fdaa 	bl	800fb64 <__aeabi_dcmpgt>
 800e010:	2800      	cmp	r0, #0
 800e012:	f040 8246 	bne.w	800e4a2 <_dtoa_r+0x8d2>
 800e016:	4642      	mov	r2, r8
 800e018:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e01c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e020:	f001 fd82 	bl	800fb28 <__aeabi_dcmplt>
 800e024:	2800      	cmp	r0, #0
 800e026:	f040 8236 	bne.w	800e496 <_dtoa_r+0x8c6>
 800e02a:	e09d      	b.n	800e168 <_dtoa_r+0x598>
 800e02c:	4b63      	ldr	r3, [pc, #396]	; (800e1bc <_dtoa_r+0x5ec>)
 800e02e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e030:	1e6a      	subs	r2, r5, #1
 800e032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e036:	2900      	cmp	r1, #0
 800e038:	d049      	beq.n	800e0ce <_dtoa_r+0x4fe>
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	2000      	movs	r0, #0
 800e040:	4964      	ldr	r1, [pc, #400]	; (800e1d4 <_dtoa_r+0x604>)
 800e042:	f7fd fe35 	bl	800bcb0 <__aeabi_ddiv>
 800e046:	4642      	mov	r2, r8
 800e048:	464b      	mov	r3, r9
 800e04a:	f7fd fb53 	bl	800b6f4 <__aeabi_dsub>
 800e04e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800e052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e056:	9c08      	ldr	r4, [sp, #32]
 800e058:	4649      	mov	r1, r9
 800e05a:	4640      	mov	r0, r8
 800e05c:	f001 fd8c 	bl	800fb78 <__aeabi_d2iz>
 800e060:	4606      	mov	r6, r0
 800e062:	f7fd fc95 	bl	800b990 <__aeabi_i2d>
 800e066:	4602      	mov	r2, r0
 800e068:	460b      	mov	r3, r1
 800e06a:	4640      	mov	r0, r8
 800e06c:	4649      	mov	r1, r9
 800e06e:	f7fd fb41 	bl	800b6f4 <__aeabi_dsub>
 800e072:	3630      	adds	r6, #48	; 0x30
 800e074:	f804 6b01 	strb.w	r6, [r4], #1
 800e078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e07c:	4680      	mov	r8, r0
 800e07e:	4689      	mov	r9, r1
 800e080:	f001 fd52 	bl	800fb28 <__aeabi_dcmplt>
 800e084:	2800      	cmp	r0, #0
 800e086:	f040 8340 	bne.w	800e70a <_dtoa_r+0xb3a>
 800e08a:	4642      	mov	r2, r8
 800e08c:	464b      	mov	r3, r9
 800e08e:	2000      	movs	r0, #0
 800e090:	494c      	ldr	r1, [pc, #304]	; (800e1c4 <_dtoa_r+0x5f4>)
 800e092:	f7fd fb2f 	bl	800b6f4 <__aeabi_dsub>
 800e096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e09a:	f001 fd45 	bl	800fb28 <__aeabi_dcmplt>
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	f040 80d3 	bne.w	800e24a <_dtoa_r+0x67a>
 800e0a4:	9b08      	ldr	r3, [sp, #32]
 800e0a6:	1ae3      	subs	r3, r4, r3
 800e0a8:	42ab      	cmp	r3, r5
 800e0aa:	da5d      	bge.n	800e168 <_dtoa_r+0x598>
 800e0ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	4b45      	ldr	r3, [pc, #276]	; (800e1c8 <_dtoa_r+0x5f8>)
 800e0b4:	f7fd fcd2 	bl	800ba5c <__aeabi_dmul>
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0be:	4b42      	ldr	r3, [pc, #264]	; (800e1c8 <_dtoa_r+0x5f8>)
 800e0c0:	4640      	mov	r0, r8
 800e0c2:	4649      	mov	r1, r9
 800e0c4:	f7fd fcca 	bl	800ba5c <__aeabi_dmul>
 800e0c8:	4680      	mov	r8, r0
 800e0ca:	4689      	mov	r9, r1
 800e0cc:	e7c4      	b.n	800e058 <_dtoa_r+0x488>
 800e0ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0d2:	4642      	mov	r2, r8
 800e0d4:	464b      	mov	r3, r9
 800e0d6:	f7fd fcc1 	bl	800ba5c <__aeabi_dmul>
 800e0da:	9b08      	ldr	r3, [sp, #32]
 800e0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0e0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800e0e4:	195c      	adds	r4, r3, r5
 800e0e6:	461d      	mov	r5, r3
 800e0e8:	4649      	mov	r1, r9
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	f001 fd44 	bl	800fb78 <__aeabi_d2iz>
 800e0f0:	4606      	mov	r6, r0
 800e0f2:	f7fd fc4d 	bl	800b990 <__aeabi_i2d>
 800e0f6:	3630      	adds	r6, #48	; 0x30
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	4640      	mov	r0, r8
 800e0fe:	4649      	mov	r1, r9
 800e100:	f7fd faf8 	bl	800b6f4 <__aeabi_dsub>
 800e104:	f805 6b01 	strb.w	r6, [r5], #1
 800e108:	42a5      	cmp	r5, r4
 800e10a:	4680      	mov	r8, r0
 800e10c:	4689      	mov	r9, r1
 800e10e:	d124      	bne.n	800e15a <_dtoa_r+0x58a>
 800e110:	2200      	movs	r2, #0
 800e112:	4b30      	ldr	r3, [pc, #192]	; (800e1d4 <_dtoa_r+0x604>)
 800e114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e118:	f7fd faee 	bl	800b6f8 <__adddf3>
 800e11c:	4602      	mov	r2, r0
 800e11e:	460b      	mov	r3, r1
 800e120:	4640      	mov	r0, r8
 800e122:	4649      	mov	r1, r9
 800e124:	f001 fd1e 	bl	800fb64 <__aeabi_dcmpgt>
 800e128:	2800      	cmp	r0, #0
 800e12a:	f040 808e 	bne.w	800e24a <_dtoa_r+0x67a>
 800e12e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e132:	2000      	movs	r0, #0
 800e134:	4927      	ldr	r1, [pc, #156]	; (800e1d4 <_dtoa_r+0x604>)
 800e136:	f7fd fadd 	bl	800b6f4 <__aeabi_dsub>
 800e13a:	4602      	mov	r2, r0
 800e13c:	460b      	mov	r3, r1
 800e13e:	4640      	mov	r0, r8
 800e140:	4649      	mov	r1, r9
 800e142:	f001 fcf1 	bl	800fb28 <__aeabi_dcmplt>
 800e146:	b178      	cbz	r0, 800e168 <_dtoa_r+0x598>
 800e148:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800e14c:	2b30      	cmp	r3, #48	; 0x30
 800e14e:	f104 32ff 	add.w	r2, r4, #4294967295
 800e152:	f040 82da 	bne.w	800e70a <_dtoa_r+0xb3a>
 800e156:	4614      	mov	r4, r2
 800e158:	e7f6      	b.n	800e148 <_dtoa_r+0x578>
 800e15a:	2200      	movs	r2, #0
 800e15c:	4b1a      	ldr	r3, [pc, #104]	; (800e1c8 <_dtoa_r+0x5f8>)
 800e15e:	f7fd fc7d 	bl	800ba5c <__aeabi_dmul>
 800e162:	4680      	mov	r8, r0
 800e164:	4689      	mov	r9, r1
 800e166:	e7bf      	b.n	800e0e8 <_dtoa_r+0x518>
 800e168:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e16c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e172:	2b00      	cmp	r3, #0
 800e174:	f2c0 808b 	blt.w	800e28e <_dtoa_r+0x6be>
 800e178:	f1bb 0f0e 	cmp.w	fp, #14
 800e17c:	f300 8087 	bgt.w	800e28e <_dtoa_r+0x6be>
 800e180:	4b0e      	ldr	r3, [pc, #56]	; (800e1bc <_dtoa_r+0x5ec>)
 800e182:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e186:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e18a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	da23      	bge.n	800e1d8 <_dtoa_r+0x608>
 800e190:	9b05      	ldr	r3, [sp, #20]
 800e192:	2b00      	cmp	r3, #0
 800e194:	dc20      	bgt.n	800e1d8 <_dtoa_r+0x608>
 800e196:	f040 817d 	bne.w	800e494 <_dtoa_r+0x8c4>
 800e19a:	4630      	mov	r0, r6
 800e19c:	2200      	movs	r2, #0
 800e19e:	4b0c      	ldr	r3, [pc, #48]	; (800e1d0 <_dtoa_r+0x600>)
 800e1a0:	4639      	mov	r1, r7
 800e1a2:	f7fd fc5b 	bl	800ba5c <__aeabi_dmul>
 800e1a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1aa:	f001 fcd1 	bl	800fb50 <__aeabi_dcmpge>
 800e1ae:	9d05      	ldr	r5, [sp, #20]
 800e1b0:	462e      	mov	r6, r5
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	f040 8170 	bne.w	800e498 <_dtoa_r+0x8c8>
 800e1b8:	e175      	b.n	800e4a6 <_dtoa_r+0x8d6>
 800e1ba:	bf00      	nop
 800e1bc:	080105c0 	.word	0x080105c0
 800e1c0:	08010688 	.word	0x08010688
 800e1c4:	3ff00000 	.word	0x3ff00000
 800e1c8:	40240000 	.word	0x40240000
 800e1cc:	401c0000 	.word	0x401c0000
 800e1d0:	40140000 	.word	0x40140000
 800e1d4:	3fe00000 	.word	0x3fe00000
 800e1d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e1dc:	9c08      	ldr	r4, [sp, #32]
 800e1de:	4632      	mov	r2, r6
 800e1e0:	463b      	mov	r3, r7
 800e1e2:	4640      	mov	r0, r8
 800e1e4:	4649      	mov	r1, r9
 800e1e6:	f7fd fd63 	bl	800bcb0 <__aeabi_ddiv>
 800e1ea:	f001 fcc5 	bl	800fb78 <__aeabi_d2iz>
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	f7fd fbce 	bl	800b990 <__aeabi_i2d>
 800e1f4:	4632      	mov	r2, r6
 800e1f6:	463b      	mov	r3, r7
 800e1f8:	f7fd fc30 	bl	800ba5c <__aeabi_dmul>
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	4602      	mov	r2, r0
 800e200:	4649      	mov	r1, r9
 800e202:	4640      	mov	r0, r8
 800e204:	f7fd fa76 	bl	800b6f4 <__aeabi_dsub>
 800e208:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800e20c:	9b08      	ldr	r3, [sp, #32]
 800e20e:	f804 eb01 	strb.w	lr, [r4], #1
 800e212:	ebc3 0e04 	rsb	lr, r3, r4
 800e216:	9b05      	ldr	r3, [sp, #20]
 800e218:	459e      	cmp	lr, r3
 800e21a:	d12b      	bne.n	800e274 <_dtoa_r+0x6a4>
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	f7fd fa6a 	bl	800b6f8 <__adddf3>
 800e224:	4632      	mov	r2, r6
 800e226:	463b      	mov	r3, r7
 800e228:	4680      	mov	r8, r0
 800e22a:	4689      	mov	r9, r1
 800e22c:	f001 fc9a 	bl	800fb64 <__aeabi_dcmpgt>
 800e230:	b970      	cbnz	r0, 800e250 <_dtoa_r+0x680>
 800e232:	4640      	mov	r0, r8
 800e234:	4649      	mov	r1, r9
 800e236:	4632      	mov	r2, r6
 800e238:	463b      	mov	r3, r7
 800e23a:	f001 fc6b 	bl	800fb14 <__aeabi_dcmpeq>
 800e23e:	2800      	cmp	r0, #0
 800e240:	f000 8264 	beq.w	800e70c <_dtoa_r+0xb3c>
 800e244:	07eb      	lsls	r3, r5, #31
 800e246:	d403      	bmi.n	800e250 <_dtoa_r+0x680>
 800e248:	e260      	b.n	800e70c <_dtoa_r+0xb3c>
 800e24a:	46bb      	mov	fp, r7
 800e24c:	e000      	b.n	800e250 <_dtoa_r+0x680>
 800e24e:	461c      	mov	r4, r3
 800e250:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800e254:	2a39      	cmp	r2, #57	; 0x39
 800e256:	f104 33ff 	add.w	r3, r4, #4294967295
 800e25a:	d107      	bne.n	800e26c <_dtoa_r+0x69c>
 800e25c:	9a08      	ldr	r2, [sp, #32]
 800e25e:	4293      	cmp	r3, r2
 800e260:	d1f5      	bne.n	800e24e <_dtoa_r+0x67e>
 800e262:	2330      	movs	r3, #48	; 0x30
 800e264:	7013      	strb	r3, [r2, #0]
 800e266:	f10b 0b01 	add.w	fp, fp, #1
 800e26a:	4613      	mov	r3, r2
 800e26c:	781a      	ldrb	r2, [r3, #0]
 800e26e:	3201      	adds	r2, #1
 800e270:	701a      	strb	r2, [r3, #0]
 800e272:	e24b      	b.n	800e70c <_dtoa_r+0xb3c>
 800e274:	2200      	movs	r2, #0
 800e276:	4ba4      	ldr	r3, [pc, #656]	; (800e508 <_dtoa_r+0x938>)
 800e278:	f7fd fbf0 	bl	800ba5c <__aeabi_dmul>
 800e27c:	2200      	movs	r2, #0
 800e27e:	2300      	movs	r3, #0
 800e280:	4680      	mov	r8, r0
 800e282:	4689      	mov	r9, r1
 800e284:	f001 fc46 	bl	800fb14 <__aeabi_dcmpeq>
 800e288:	2800      	cmp	r0, #0
 800e28a:	d0a8      	beq.n	800e1de <_dtoa_r+0x60e>
 800e28c:	e23e      	b.n	800e70c <_dtoa_r+0xb3c>
 800e28e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e290:	2a00      	cmp	r2, #0
 800e292:	d032      	beq.n	800e2fa <_dtoa_r+0x72a>
 800e294:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e296:	2a01      	cmp	r2, #1
 800e298:	dc0a      	bgt.n	800e2b0 <_dtoa_r+0x6e0>
 800e29a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e29c:	b112      	cbz	r2, 800e2a4 <_dtoa_r+0x6d4>
 800e29e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e2a2:	e002      	b.n	800e2aa <_dtoa_r+0x6da>
 800e2a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e2a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e2ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e2ae:	e018      	b.n	800e2e2 <_dtoa_r+0x712>
 800e2b0:	9b05      	ldr	r3, [sp, #20]
 800e2b2:	1e5d      	subs	r5, r3, #1
 800e2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2b6:	42ab      	cmp	r3, r5
 800e2b8:	bfbf      	itttt	lt
 800e2ba:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800e2bc:	950b      	strlt	r5, [sp, #44]	; 0x2c
 800e2be:	1aea      	sublt	r2, r5, r3
 800e2c0:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e2c2:	bfb6      	itet	lt
 800e2c4:	189b      	addlt	r3, r3, r2
 800e2c6:	1b5d      	subge	r5, r3, r5
 800e2c8:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e2ca:	9b05      	ldr	r3, [sp, #20]
 800e2cc:	bfb8      	it	lt
 800e2ce:	2500      	movlt	r5, #0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	bfb9      	ittee	lt
 800e2d4:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 800e2d6:	9a05      	ldrlt	r2, [sp, #20]
 800e2d8:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 800e2da:	9b05      	ldrge	r3, [sp, #20]
 800e2dc:	bfbc      	itt	lt
 800e2de:	1a9c      	sublt	r4, r3, r2
 800e2e0:	2300      	movlt	r3, #0
 800e2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2e4:	441a      	add	r2, r3
 800e2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e2e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2ea:	4650      	mov	r0, sl
 800e2ec:	441a      	add	r2, r3
 800e2ee:	2101      	movs	r1, #1
 800e2f0:	920a      	str	r2, [sp, #40]	; 0x28
 800e2f2:	f000 fe6f 	bl	800efd4 <__i2b>
 800e2f6:	4606      	mov	r6, r0
 800e2f8:	e002      	b.n	800e300 <_dtoa_r+0x730>
 800e2fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e2fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e2fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e300:	b164      	cbz	r4, 800e31c <_dtoa_r+0x74c>
 800e302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e304:	2b00      	cmp	r3, #0
 800e306:	dd09      	ble.n	800e31c <_dtoa_r+0x74c>
 800e308:	42a3      	cmp	r3, r4
 800e30a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e30c:	bfa8      	it	ge
 800e30e:	4623      	movge	r3, r4
 800e310:	1ad2      	subs	r2, r2, r3
 800e312:	9209      	str	r2, [sp, #36]	; 0x24
 800e314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e316:	1ae4      	subs	r4, r4, r3
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	930a      	str	r3, [sp, #40]	; 0x28
 800e31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e31e:	2b00      	cmp	r3, #0
 800e320:	dd20      	ble.n	800e364 <_dtoa_r+0x794>
 800e322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e324:	b1c3      	cbz	r3, 800e358 <_dtoa_r+0x788>
 800e326:	2d00      	cmp	r5, #0
 800e328:	dd10      	ble.n	800e34c <_dtoa_r+0x77c>
 800e32a:	4631      	mov	r1, r6
 800e32c:	462a      	mov	r2, r5
 800e32e:	4650      	mov	r0, sl
 800e330:	f000 feea 	bl	800f108 <__pow5mult>
 800e334:	4606      	mov	r6, r0
 800e336:	4631      	mov	r1, r6
 800e338:	9a07      	ldr	r2, [sp, #28]
 800e33a:	4650      	mov	r0, sl
 800e33c:	f000 fe53 	bl	800efe6 <__multiply>
 800e340:	9907      	ldr	r1, [sp, #28]
 800e342:	4607      	mov	r7, r0
 800e344:	4650      	mov	r0, sl
 800e346:	f000 fd63 	bl	800ee10 <_Bfree>
 800e34a:	9707      	str	r7, [sp, #28]
 800e34c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e34e:	1b5a      	subs	r2, r3, r5
 800e350:	d008      	beq.n	800e364 <_dtoa_r+0x794>
 800e352:	4650      	mov	r0, sl
 800e354:	9907      	ldr	r1, [sp, #28]
 800e356:	e002      	b.n	800e35e <_dtoa_r+0x78e>
 800e358:	9907      	ldr	r1, [sp, #28]
 800e35a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e35c:	4650      	mov	r0, sl
 800e35e:	f000 fed3 	bl	800f108 <__pow5mult>
 800e362:	9007      	str	r0, [sp, #28]
 800e364:	4650      	mov	r0, sl
 800e366:	2101      	movs	r1, #1
 800e368:	f000 fe34 	bl	800efd4 <__i2b>
 800e36c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e36e:	2b00      	cmp	r3, #0
 800e370:	4605      	mov	r5, r0
 800e372:	dd0a      	ble.n	800e38a <_dtoa_r+0x7ba>
 800e374:	4629      	mov	r1, r5
 800e376:	461a      	mov	r2, r3
 800e378:	4650      	mov	r0, sl
 800e37a:	f000 fec5 	bl	800f108 <__pow5mult>
 800e37e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e380:	2b01      	cmp	r3, #1
 800e382:	4605      	mov	r5, r0
 800e384:	dd04      	ble.n	800e390 <_dtoa_r+0x7c0>
 800e386:	2700      	movs	r7, #0
 800e388:	e01b      	b.n	800e3c2 <_dtoa_r+0x7f2>
 800e38a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	dc13      	bgt.n	800e3b8 <_dtoa_r+0x7e8>
 800e390:	9b02      	ldr	r3, [sp, #8]
 800e392:	b98b      	cbnz	r3, 800e3b8 <_dtoa_r+0x7e8>
 800e394:	9b03      	ldr	r3, [sp, #12]
 800e396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e39a:	b97b      	cbnz	r3, 800e3bc <_dtoa_r+0x7ec>
 800e39c:	9b03      	ldr	r3, [sp, #12]
 800e39e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800e3a2:	0d3f      	lsrs	r7, r7, #20
 800e3a4:	053f      	lsls	r7, r7, #20
 800e3a6:	b157      	cbz	r7, 800e3be <_dtoa_r+0x7ee>
 800e3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e3b4:	2701      	movs	r7, #1
 800e3b6:	e002      	b.n	800e3be <_dtoa_r+0x7ee>
 800e3b8:	2700      	movs	r7, #0
 800e3ba:	e000      	b.n	800e3be <_dtoa_r+0x7ee>
 800e3bc:	9f02      	ldr	r7, [sp, #8]
 800e3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3c0:	b143      	cbz	r3, 800e3d4 <_dtoa_r+0x804>
 800e3c2:	692b      	ldr	r3, [r5, #16]
 800e3c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e3c8:	6918      	ldr	r0, [r3, #16]
 800e3ca:	f000 fdb6 	bl	800ef3a <__hi0bits>
 800e3ce:	f1c0 0020 	rsb	r0, r0, #32
 800e3d2:	e000      	b.n	800e3d6 <_dtoa_r+0x806>
 800e3d4:	2001      	movs	r0, #1
 800e3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3d8:	4418      	add	r0, r3
 800e3da:	f010 001f 	ands.w	r0, r0, #31
 800e3de:	d008      	beq.n	800e3f2 <_dtoa_r+0x822>
 800e3e0:	f1c0 0320 	rsb	r3, r0, #32
 800e3e4:	2b04      	cmp	r3, #4
 800e3e6:	dd02      	ble.n	800e3ee <_dtoa_r+0x81e>
 800e3e8:	f1c0 001c 	rsb	r0, r0, #28
 800e3ec:	e002      	b.n	800e3f4 <_dtoa_r+0x824>
 800e3ee:	d008      	beq.n	800e402 <_dtoa_r+0x832>
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	301c      	adds	r0, #28
 800e3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f6:	4403      	add	r3, r0
 800e3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3fc:	4403      	add	r3, r0
 800e3fe:	4404      	add	r4, r0
 800e400:	930a      	str	r3, [sp, #40]	; 0x28
 800e402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e404:	2b00      	cmp	r3, #0
 800e406:	dd05      	ble.n	800e414 <_dtoa_r+0x844>
 800e408:	4650      	mov	r0, sl
 800e40a:	9907      	ldr	r1, [sp, #28]
 800e40c:	461a      	mov	r2, r3
 800e40e:	f000 fec9 	bl	800f1a4 <__lshift>
 800e412:	9007      	str	r0, [sp, #28]
 800e414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e416:	2b00      	cmp	r3, #0
 800e418:	dd05      	ble.n	800e426 <_dtoa_r+0x856>
 800e41a:	4629      	mov	r1, r5
 800e41c:	4650      	mov	r0, sl
 800e41e:	461a      	mov	r2, r3
 800e420:	f000 fec0 	bl	800f1a4 <__lshift>
 800e424:	4605      	mov	r5, r0
 800e426:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e428:	b1eb      	cbz	r3, 800e466 <_dtoa_r+0x896>
 800e42a:	9807      	ldr	r0, [sp, #28]
 800e42c:	4629      	mov	r1, r5
 800e42e:	f000 ff0c 	bl	800f24a <__mcmp>
 800e432:	2800      	cmp	r0, #0
 800e434:	da17      	bge.n	800e466 <_dtoa_r+0x896>
 800e436:	2300      	movs	r3, #0
 800e438:	4650      	mov	r0, sl
 800e43a:	9907      	ldr	r1, [sp, #28]
 800e43c:	220a      	movs	r2, #10
 800e43e:	f000 fcfe 	bl	800ee3e <__multadd>
 800e442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e444:	9007      	str	r0, [sp, #28]
 800e446:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f000 8170 	beq.w	800e730 <_dtoa_r+0xb60>
 800e450:	4631      	mov	r1, r6
 800e452:	2300      	movs	r3, #0
 800e454:	4650      	mov	r0, sl
 800e456:	220a      	movs	r2, #10
 800e458:	f000 fcf1 	bl	800ee3e <__multadd>
 800e45c:	9b06      	ldr	r3, [sp, #24]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	4606      	mov	r6, r0
 800e462:	dc33      	bgt.n	800e4cc <_dtoa_r+0x8fc>
 800e464:	e16d      	b.n	800e742 <_dtoa_r+0xb72>
 800e466:	9b05      	ldr	r3, [sp, #20]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	dc26      	bgt.n	800e4ba <_dtoa_r+0x8ea>
 800e46c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e46e:	2b02      	cmp	r3, #2
 800e470:	dd23      	ble.n	800e4ba <_dtoa_r+0x8ea>
 800e472:	9b05      	ldr	r3, [sp, #20]
 800e474:	9306      	str	r3, [sp, #24]
 800e476:	9b06      	ldr	r3, [sp, #24]
 800e478:	b973      	cbnz	r3, 800e498 <_dtoa_r+0x8c8>
 800e47a:	4629      	mov	r1, r5
 800e47c:	2205      	movs	r2, #5
 800e47e:	4650      	mov	r0, sl
 800e480:	f000 fcdd 	bl	800ee3e <__multadd>
 800e484:	4605      	mov	r5, r0
 800e486:	4629      	mov	r1, r5
 800e488:	9807      	ldr	r0, [sp, #28]
 800e48a:	f000 fede 	bl	800f24a <__mcmp>
 800e48e:	2800      	cmp	r0, #0
 800e490:	dc09      	bgt.n	800e4a6 <_dtoa_r+0x8d6>
 800e492:	e001      	b.n	800e498 <_dtoa_r+0x8c8>
 800e494:	2500      	movs	r5, #0
 800e496:	462e      	mov	r6, r5
 800e498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e49a:	9c08      	ldr	r4, [sp, #32]
 800e49c:	ea6f 0b03 	mvn.w	fp, r3
 800e4a0:	e008      	b.n	800e4b4 <_dtoa_r+0x8e4>
 800e4a2:	46bb      	mov	fp, r7
 800e4a4:	462e      	mov	r6, r5
 800e4a6:	9b08      	ldr	r3, [sp, #32]
 800e4a8:	9a08      	ldr	r2, [sp, #32]
 800e4aa:	1c5c      	adds	r4, r3, #1
 800e4ac:	2331      	movs	r3, #49	; 0x31
 800e4ae:	7013      	strb	r3, [r2, #0]
 800e4b0:	f10b 0b01 	add.w	fp, fp, #1
 800e4b4:	46b1      	mov	r9, r6
 800e4b6:	2600      	movs	r6, #0
 800e4b8:	e114      	b.n	800e6e4 <_dtoa_r+0xb14>
 800e4ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4bc:	b923      	cbnz	r3, 800e4c8 <_dtoa_r+0x8f8>
 800e4be:	9b05      	ldr	r3, [sp, #20]
 800e4c0:	9306      	str	r3, [sp, #24]
 800e4c2:	9f08      	ldr	r7, [sp, #32]
 800e4c4:	9c07      	ldr	r4, [sp, #28]
 800e4c6:	e0cc      	b.n	800e662 <_dtoa_r+0xa92>
 800e4c8:	9b05      	ldr	r3, [sp, #20]
 800e4ca:	9306      	str	r3, [sp, #24]
 800e4cc:	2c00      	cmp	r4, #0
 800e4ce:	dd05      	ble.n	800e4dc <_dtoa_r+0x90c>
 800e4d0:	4631      	mov	r1, r6
 800e4d2:	4650      	mov	r0, sl
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	f000 fe65 	bl	800f1a4 <__lshift>
 800e4da:	4606      	mov	r6, r0
 800e4dc:	b1b7      	cbz	r7, 800e50c <_dtoa_r+0x93c>
 800e4de:	6871      	ldr	r1, [r6, #4]
 800e4e0:	4650      	mov	r0, sl
 800e4e2:	f000 fc60 	bl	800eda6 <_Balloc>
 800e4e6:	6932      	ldr	r2, [r6, #16]
 800e4e8:	3202      	adds	r2, #2
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	f106 010c 	add.w	r1, r6, #12
 800e4f0:	0092      	lsls	r2, r2, #2
 800e4f2:	300c      	adds	r0, #12
 800e4f4:	f7fd fd40 	bl	800bf78 <memcpy>
 800e4f8:	4650      	mov	r0, sl
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f000 fe51 	bl	800f1a4 <__lshift>
 800e502:	4681      	mov	r9, r0
 800e504:	e003      	b.n	800e50e <_dtoa_r+0x93e>
 800e506:	bf00      	nop
 800e508:	40240000 	.word	0x40240000
 800e50c:	46b1      	mov	r9, r6
 800e50e:	9f08      	ldr	r7, [sp, #32]
 800e510:	9c07      	ldr	r4, [sp, #28]
 800e512:	4629      	mov	r1, r5
 800e514:	4620      	mov	r0, r4
 800e516:	f7ff facd 	bl	800dab4 <quorem>
 800e51a:	4631      	mov	r1, r6
 800e51c:	9009      	str	r0, [sp, #36]	; 0x24
 800e51e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e522:	4620      	mov	r0, r4
 800e524:	f000 fe91 	bl	800f24a <__mcmp>
 800e528:	464a      	mov	r2, r9
 800e52a:	9005      	str	r0, [sp, #20]
 800e52c:	4629      	mov	r1, r5
 800e52e:	4650      	mov	r0, sl
 800e530:	f000 fea7 	bl	800f282 <__mdiff>
 800e534:	68c2      	ldr	r2, [r0, #12]
 800e536:	4603      	mov	r3, r0
 800e538:	b93a      	cbnz	r2, 800e54a <_dtoa_r+0x97a>
 800e53a:	4619      	mov	r1, r3
 800e53c:	4620      	mov	r0, r4
 800e53e:	9307      	str	r3, [sp, #28]
 800e540:	f000 fe83 	bl	800f24a <__mcmp>
 800e544:	9b07      	ldr	r3, [sp, #28]
 800e546:	4602      	mov	r2, r0
 800e548:	e000      	b.n	800e54c <_dtoa_r+0x97c>
 800e54a:	2201      	movs	r2, #1
 800e54c:	4650      	mov	r0, sl
 800e54e:	4619      	mov	r1, r3
 800e550:	9207      	str	r2, [sp, #28]
 800e552:	f000 fc5d 	bl	800ee10 <_Bfree>
 800e556:	9a07      	ldr	r2, [sp, #28]
 800e558:	b9a2      	cbnz	r2, 800e584 <_dtoa_r+0x9b4>
 800e55a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e55c:	b993      	cbnz	r3, 800e584 <_dtoa_r+0x9b4>
 800e55e:	9b02      	ldr	r3, [sp, #8]
 800e560:	f003 0301 	and.w	r3, r3, #1
 800e564:	b973      	cbnz	r3, 800e584 <_dtoa_r+0x9b4>
 800e566:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e56a:	463b      	mov	r3, r7
 800e56c:	9407      	str	r4, [sp, #28]
 800e56e:	d040      	beq.n	800e5f2 <_dtoa_r+0xa22>
 800e570:	9b05      	ldr	r3, [sp, #20]
 800e572:	2b00      	cmp	r3, #0
 800e574:	bfc8      	it	gt
 800e576:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 800e578:	f107 0401 	add.w	r4, r7, #1
 800e57c:	bfc8      	it	gt
 800e57e:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 800e582:	e03d      	b.n	800e600 <_dtoa_r+0xa30>
 800e584:	9b05      	ldr	r3, [sp, #20]
 800e586:	2b00      	cmp	r3, #0
 800e588:	da04      	bge.n	800e594 <_dtoa_r+0x9c4>
 800e58a:	2a00      	cmp	r2, #0
 800e58c:	46c4      	mov	ip, r8
 800e58e:	9407      	str	r4, [sp, #28]
 800e590:	dc08      	bgt.n	800e5a4 <_dtoa_r+0x9d4>
 800e592:	e021      	b.n	800e5d8 <_dtoa_r+0xa08>
 800e594:	d124      	bne.n	800e5e0 <_dtoa_r+0xa10>
 800e596:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e598:	bb13      	cbnz	r3, 800e5e0 <_dtoa_r+0xa10>
 800e59a:	9b02      	ldr	r3, [sp, #8]
 800e59c:	f003 0301 	and.w	r3, r3, #1
 800e5a0:	b9f3      	cbnz	r3, 800e5e0 <_dtoa_r+0xa10>
 800e5a2:	e7f2      	b.n	800e58a <_dtoa_r+0x9ba>
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	4650      	mov	r0, sl
 800e5aa:	9705      	str	r7, [sp, #20]
 800e5ac:	f8cd 8008 	str.w	r8, [sp, #8]
 800e5b0:	f000 fdf8 	bl	800f1a4 <__lshift>
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	9007      	str	r0, [sp, #28]
 800e5b8:	f000 fe47 	bl	800f24a <__mcmp>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	f8dd c008 	ldr.w	ip, [sp, #8]
 800e5c2:	9b05      	ldr	r3, [sp, #20]
 800e5c4:	dc03      	bgt.n	800e5ce <_dtoa_r+0x9fe>
 800e5c6:	d107      	bne.n	800e5d8 <_dtoa_r+0xa08>
 800e5c8:	f018 0f01 	tst.w	r8, #1
 800e5cc:	d004      	beq.n	800e5d8 <_dtoa_r+0xa08>
 800e5ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e5d2:	d00e      	beq.n	800e5f2 <_dtoa_r+0xa22>
 800e5d4:	f108 0c01 	add.w	ip, r8, #1
 800e5d8:	1c7c      	adds	r4, r7, #1
 800e5da:	f887 c000 	strb.w	ip, [r7]
 800e5de:	e081      	b.n	800e6e4 <_dtoa_r+0xb14>
 800e5e0:	2a00      	cmp	r2, #0
 800e5e2:	f107 0201 	add.w	r2, r7, #1
 800e5e6:	dd0e      	ble.n	800e606 <_dtoa_r+0xa36>
 800e5e8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e5ec:	463b      	mov	r3, r7
 800e5ee:	9407      	str	r4, [sp, #28]
 800e5f0:	d103      	bne.n	800e5fa <_dtoa_r+0xa2a>
 800e5f2:	2239      	movs	r2, #57	; 0x39
 800e5f4:	3701      	adds	r7, #1
 800e5f6:	701a      	strb	r2, [r3, #0]
 800e5f8:	e057      	b.n	800e6aa <_dtoa_r+0xada>
 800e5fa:	4614      	mov	r4, r2
 800e5fc:	f108 0801 	add.w	r8, r8, #1
 800e600:	f887 8000 	strb.w	r8, [r7]
 800e604:	e06e      	b.n	800e6e4 <_dtoa_r+0xb14>
 800e606:	9b08      	ldr	r3, [sp, #32]
 800e608:	f802 8c01 	strb.w	r8, [r2, #-1]
 800e60c:	1ad3      	subs	r3, r2, r3
 800e60e:	4617      	mov	r7, r2
 800e610:	9a06      	ldr	r2, [sp, #24]
 800e612:	4293      	cmp	r3, r2
 800e614:	d03a      	beq.n	800e68c <_dtoa_r+0xabc>
 800e616:	4621      	mov	r1, r4
 800e618:	220a      	movs	r2, #10
 800e61a:	2300      	movs	r3, #0
 800e61c:	4650      	mov	r0, sl
 800e61e:	f000 fc0e 	bl	800ee3e <__multadd>
 800e622:	454e      	cmp	r6, r9
 800e624:	4604      	mov	r4, r0
 800e626:	4631      	mov	r1, r6
 800e628:	4650      	mov	r0, sl
 800e62a:	f04f 020a 	mov.w	r2, #10
 800e62e:	f04f 0300 	mov.w	r3, #0
 800e632:	d104      	bne.n	800e63e <_dtoa_r+0xa6e>
 800e634:	f000 fc03 	bl	800ee3e <__multadd>
 800e638:	4606      	mov	r6, r0
 800e63a:	4681      	mov	r9, r0
 800e63c:	e769      	b.n	800e512 <_dtoa_r+0x942>
 800e63e:	f000 fbfe 	bl	800ee3e <__multadd>
 800e642:	4649      	mov	r1, r9
 800e644:	4606      	mov	r6, r0
 800e646:	220a      	movs	r2, #10
 800e648:	4650      	mov	r0, sl
 800e64a:	2300      	movs	r3, #0
 800e64c:	f000 fbf7 	bl	800ee3e <__multadd>
 800e650:	4681      	mov	r9, r0
 800e652:	e75e      	b.n	800e512 <_dtoa_r+0x942>
 800e654:	4621      	mov	r1, r4
 800e656:	4650      	mov	r0, sl
 800e658:	220a      	movs	r2, #10
 800e65a:	2300      	movs	r3, #0
 800e65c:	f000 fbef 	bl	800ee3e <__multadd>
 800e660:	4604      	mov	r4, r0
 800e662:	4620      	mov	r0, r4
 800e664:	4629      	mov	r1, r5
 800e666:	f7ff fa25 	bl	800dab4 <quorem>
 800e66a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e66e:	f807 8b01 	strb.w	r8, [r7], #1
 800e672:	9b08      	ldr	r3, [sp, #32]
 800e674:	9a06      	ldr	r2, [sp, #24]
 800e676:	1afb      	subs	r3, r7, r3
 800e678:	4293      	cmp	r3, r2
 800e67a:	dbeb      	blt.n	800e654 <_dtoa_r+0xa84>
 800e67c:	9b08      	ldr	r3, [sp, #32]
 800e67e:	2a01      	cmp	r2, #1
 800e680:	bfac      	ite	ge
 800e682:	189b      	addge	r3, r3, r2
 800e684:	3301      	addlt	r3, #1
 800e686:	46b1      	mov	r9, r6
 800e688:	461f      	mov	r7, r3
 800e68a:	2600      	movs	r6, #0
 800e68c:	4621      	mov	r1, r4
 800e68e:	2201      	movs	r2, #1
 800e690:	4650      	mov	r0, sl
 800e692:	f000 fd87 	bl	800f1a4 <__lshift>
 800e696:	4629      	mov	r1, r5
 800e698:	9007      	str	r0, [sp, #28]
 800e69a:	f000 fdd6 	bl	800f24a <__mcmp>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	dc03      	bgt.n	800e6aa <_dtoa_r+0xada>
 800e6a2:	d116      	bne.n	800e6d2 <_dtoa_r+0xb02>
 800e6a4:	f018 0f01 	tst.w	r8, #1
 800e6a8:	d013      	beq.n	800e6d2 <_dtoa_r+0xb02>
 800e6aa:	463c      	mov	r4, r7
 800e6ac:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800e6b0:	2b39      	cmp	r3, #57	; 0x39
 800e6b2:	f104 32ff 	add.w	r2, r4, #4294967295
 800e6b6:	d109      	bne.n	800e6cc <_dtoa_r+0xafc>
 800e6b8:	9b08      	ldr	r3, [sp, #32]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d104      	bne.n	800e6c8 <_dtoa_r+0xaf8>
 800e6be:	f10b 0b01 	add.w	fp, fp, #1
 800e6c2:	2331      	movs	r3, #49	; 0x31
 800e6c4:	9a08      	ldr	r2, [sp, #32]
 800e6c6:	e002      	b.n	800e6ce <_dtoa_r+0xafe>
 800e6c8:	4614      	mov	r4, r2
 800e6ca:	e7ef      	b.n	800e6ac <_dtoa_r+0xadc>
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	7013      	strb	r3, [r2, #0]
 800e6d0:	e008      	b.n	800e6e4 <_dtoa_r+0xb14>
 800e6d2:	463c      	mov	r4, r7
 800e6d4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800e6d8:	2b30      	cmp	r3, #48	; 0x30
 800e6da:	f104 32ff 	add.w	r2, r4, #4294967295
 800e6de:	d101      	bne.n	800e6e4 <_dtoa_r+0xb14>
 800e6e0:	4614      	mov	r4, r2
 800e6e2:	e7f7      	b.n	800e6d4 <_dtoa_r+0xb04>
 800e6e4:	4650      	mov	r0, sl
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f000 fb92 	bl	800ee10 <_Bfree>
 800e6ec:	f1b9 0f00 	cmp.w	r9, #0
 800e6f0:	d00c      	beq.n	800e70c <_dtoa_r+0xb3c>
 800e6f2:	b12e      	cbz	r6, 800e700 <_dtoa_r+0xb30>
 800e6f4:	454e      	cmp	r6, r9
 800e6f6:	d003      	beq.n	800e700 <_dtoa_r+0xb30>
 800e6f8:	4650      	mov	r0, sl
 800e6fa:	4631      	mov	r1, r6
 800e6fc:	f000 fb88 	bl	800ee10 <_Bfree>
 800e700:	4650      	mov	r0, sl
 800e702:	4649      	mov	r1, r9
 800e704:	f000 fb84 	bl	800ee10 <_Bfree>
 800e708:	e000      	b.n	800e70c <_dtoa_r+0xb3c>
 800e70a:	46bb      	mov	fp, r7
 800e70c:	4650      	mov	r0, sl
 800e70e:	9907      	ldr	r1, [sp, #28]
 800e710:	f000 fb7e 	bl	800ee10 <_Bfree>
 800e714:	2300      	movs	r3, #0
 800e716:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e718:	7023      	strb	r3, [r4, #0]
 800e71a:	f10b 0301 	add.w	r3, fp, #1
 800e71e:	6013      	str	r3, [r2, #0]
 800e720:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e722:	b11b      	cbz	r3, 800e72c <_dtoa_r+0xb5c>
 800e724:	601c      	str	r4, [r3, #0]
 800e726:	e001      	b.n	800e72c <_dtoa_r+0xb5c>
 800e728:	480a      	ldr	r0, [pc, #40]	; (800e754 <_dtoa_r+0xb84>)
 800e72a:	e00f      	b.n	800e74c <_dtoa_r+0xb7c>
 800e72c:	9808      	ldr	r0, [sp, #32]
 800e72e:	e00d      	b.n	800e74c <_dtoa_r+0xb7c>
 800e730:	9b06      	ldr	r3, [sp, #24]
 800e732:	2b00      	cmp	r3, #0
 800e734:	f73f aec5 	bgt.w	800e4c2 <_dtoa_r+0x8f2>
 800e738:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e73a:	2b02      	cmp	r3, #2
 800e73c:	f73f ae9b 	bgt.w	800e476 <_dtoa_r+0x8a6>
 800e740:	e6bf      	b.n	800e4c2 <_dtoa_r+0x8f2>
 800e742:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e744:	2b02      	cmp	r3, #2
 800e746:	f73f ae96 	bgt.w	800e476 <_dtoa_r+0x8a6>
 800e74a:	e6bf      	b.n	800e4cc <_dtoa_r+0x8fc>
 800e74c:	b017      	add	sp, #92	; 0x5c
 800e74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e752:	bf00      	nop
 800e754:	0801042a 	.word	0x0801042a

0800e758 <rshift>:
 800e758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e75a:	6906      	ldr	r6, [r0, #16]
 800e75c:	114b      	asrs	r3, r1, #5
 800e75e:	42b3      	cmp	r3, r6
 800e760:	f100 0514 	add.w	r5, r0, #20
 800e764:	da27      	bge.n	800e7b6 <rshift+0x5e>
 800e766:	f011 011f 	ands.w	r1, r1, #31
 800e76a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800e76e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800e772:	d101      	bne.n	800e778 <rshift+0x20>
 800e774:	4629      	mov	r1, r5
 800e776:	e016      	b.n	800e7a6 <rshift+0x4e>
 800e778:	1d14      	adds	r4, r2, #4
 800e77a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800e77e:	f1c1 0e20 	rsb	lr, r1, #32
 800e782:	40ca      	lsrs	r2, r1
 800e784:	462b      	mov	r3, r5
 800e786:	42b4      	cmp	r4, r6
 800e788:	d209      	bcs.n	800e79e <rshift+0x46>
 800e78a:	6827      	ldr	r7, [r4, #0]
 800e78c:	fa07 f70e 	lsl.w	r7, r7, lr
 800e790:	433a      	orrs	r2, r7
 800e792:	f843 2b04 	str.w	r2, [r3], #4
 800e796:	f854 2b04 	ldr.w	r2, [r4], #4
 800e79a:	40ca      	lsrs	r2, r1
 800e79c:	e7f3      	b.n	800e786 <rshift+0x2e>
 800e79e:	601a      	str	r2, [r3, #0]
 800e7a0:	b152      	cbz	r2, 800e7b8 <rshift+0x60>
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	e008      	b.n	800e7b8 <rshift+0x60>
 800e7a6:	42b2      	cmp	r2, r6
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	d205      	bcs.n	800e7b8 <rshift+0x60>
 800e7ac:	f852 3b04 	ldr.w	r3, [r2], #4
 800e7b0:	f841 3b04 	str.w	r3, [r1], #4
 800e7b4:	e7f7      	b.n	800e7a6 <rshift+0x4e>
 800e7b6:	462b      	mov	r3, r5
 800e7b8:	1b5b      	subs	r3, r3, r5
 800e7ba:	109b      	asrs	r3, r3, #2
 800e7bc:	6103      	str	r3, [r0, #16]
 800e7be:	b903      	cbnz	r3, 800e7c2 <rshift+0x6a>
 800e7c0:	6143      	str	r3, [r0, #20]
 800e7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e7c4 <__hexdig_fun>:
 800e7c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e7c8:	2b09      	cmp	r3, #9
 800e7ca:	d801      	bhi.n	800e7d0 <__hexdig_fun+0xc>
 800e7cc:	3820      	subs	r0, #32
 800e7ce:	e00a      	b.n	800e7e6 <__hexdig_fun+0x22>
 800e7d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e7d4:	2b05      	cmp	r3, #5
 800e7d6:	d801      	bhi.n	800e7dc <__hexdig_fun+0x18>
 800e7d8:	3847      	subs	r0, #71	; 0x47
 800e7da:	e004      	b.n	800e7e6 <__hexdig_fun+0x22>
 800e7dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e7e0:	2b05      	cmp	r3, #5
 800e7e2:	d802      	bhi.n	800e7ea <__hexdig_fun+0x26>
 800e7e4:	3827      	subs	r0, #39	; 0x27
 800e7e6:	b2c0      	uxtb	r0, r0
 800e7e8:	4770      	bx	lr
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	4770      	bx	lr

0800e7ee <__gethex>:
 800e7ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f2:	b089      	sub	sp, #36	; 0x24
 800e7f4:	468a      	mov	sl, r1
 800e7f6:	4691      	mov	r9, r2
 800e7f8:	9304      	str	r3, [sp, #16]
 800e7fa:	9001      	str	r0, [sp, #4]
 800e7fc:	f000 fab8 	bl	800ed70 <_localeconv_r>
 800e800:	6803      	ldr	r3, [r0, #0]
 800e802:	9302      	str	r3, [sp, #8]
 800e804:	4618      	mov	r0, r3
 800e806:	f7fe fa7e 	bl	800cd06 <strlen>
 800e80a:	9b02      	ldr	r3, [sp, #8]
 800e80c:	9000      	str	r0, [sp, #0]
 800e80e:	4403      	add	r3, r0
 800e810:	2600      	movs	r6, #0
 800e812:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e816:	9305      	str	r3, [sp, #20]
 800e818:	f8da 3000 	ldr.w	r3, [sl]
 800e81c:	3302      	adds	r3, #2
 800e81e:	4698      	mov	r8, r3
 800e820:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e824:	2830      	cmp	r0, #48	; 0x30
 800e826:	d101      	bne.n	800e82c <__gethex+0x3e>
 800e828:	3601      	adds	r6, #1
 800e82a:	e7f8      	b.n	800e81e <__gethex+0x30>
 800e82c:	f7ff ffca 	bl	800e7c4 <__hexdig_fun>
 800e830:	4604      	mov	r4, r0
 800e832:	b9e8      	cbnz	r0, 800e870 <__gethex+0x82>
 800e834:	4640      	mov	r0, r8
 800e836:	9902      	ldr	r1, [sp, #8]
 800e838:	9a00      	ldr	r2, [sp, #0]
 800e83a:	f001 f8af 	bl	800f99c <strncmp>
 800e83e:	2800      	cmp	r0, #0
 800e840:	d137      	bne.n	800e8b2 <__gethex+0xc4>
 800e842:	9b00      	ldr	r3, [sp, #0]
 800e844:	f818 0003 	ldrb.w	r0, [r8, r3]
 800e848:	eb08 0703 	add.w	r7, r8, r3
 800e84c:	f7ff ffba 	bl	800e7c4 <__hexdig_fun>
 800e850:	b388      	cbz	r0, 800e8b6 <__gethex+0xc8>
 800e852:	463b      	mov	r3, r7
 800e854:	7818      	ldrb	r0, [r3, #0]
 800e856:	2830      	cmp	r0, #48	; 0x30
 800e858:	4698      	mov	r8, r3
 800e85a:	f103 0301 	add.w	r3, r3, #1
 800e85e:	d0f9      	beq.n	800e854 <__gethex+0x66>
 800e860:	f7ff ffb0 	bl	800e7c4 <__hexdig_fun>
 800e864:	463c      	mov	r4, r7
 800e866:	fab0 f580 	clz	r5, r0
 800e86a:	2601      	movs	r6, #1
 800e86c:	096d      	lsrs	r5, r5, #5
 800e86e:	e001      	b.n	800e874 <__gethex+0x86>
 800e870:	2500      	movs	r5, #0
 800e872:	462c      	mov	r4, r5
 800e874:	46c3      	mov	fp, r8
 800e876:	465f      	mov	r7, fp
 800e878:	f10b 0b01 	add.w	fp, fp, #1
 800e87c:	7838      	ldrb	r0, [r7, #0]
 800e87e:	f7ff ffa1 	bl	800e7c4 <__hexdig_fun>
 800e882:	2800      	cmp	r0, #0
 800e884:	d1f7      	bne.n	800e876 <__gethex+0x88>
 800e886:	4638      	mov	r0, r7
 800e888:	9902      	ldr	r1, [sp, #8]
 800e88a:	9a00      	ldr	r2, [sp, #0]
 800e88c:	f001 f886 	bl	800f99c <strncmp>
 800e890:	b958      	cbnz	r0, 800e8aa <__gethex+0xbc>
 800e892:	b95c      	cbnz	r4, 800e8ac <__gethex+0xbe>
 800e894:	9b00      	ldr	r3, [sp, #0]
 800e896:	18fc      	adds	r4, r7, r3
 800e898:	46a3      	mov	fp, r4
 800e89a:	465f      	mov	r7, fp
 800e89c:	f10b 0b01 	add.w	fp, fp, #1
 800e8a0:	7838      	ldrb	r0, [r7, #0]
 800e8a2:	f7ff ff8f 	bl	800e7c4 <__hexdig_fun>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d1f7      	bne.n	800e89a <__gethex+0xac>
 800e8aa:	b134      	cbz	r4, 800e8ba <__gethex+0xcc>
 800e8ac:	1be4      	subs	r4, r4, r7
 800e8ae:	00a4      	lsls	r4, r4, #2
 800e8b0:	e003      	b.n	800e8ba <__gethex+0xcc>
 800e8b2:	4647      	mov	r7, r8
 800e8b4:	e000      	b.n	800e8b8 <__gethex+0xca>
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	2501      	movs	r5, #1
 800e8ba:	783b      	ldrb	r3, [r7, #0]
 800e8bc:	2b50      	cmp	r3, #80	; 0x50
 800e8be:	d001      	beq.n	800e8c4 <__gethex+0xd6>
 800e8c0:	2b70      	cmp	r3, #112	; 0x70
 800e8c2:	d130      	bne.n	800e926 <__gethex+0x138>
 800e8c4:	787b      	ldrb	r3, [r7, #1]
 800e8c6:	2b2b      	cmp	r3, #43	; 0x2b
 800e8c8:	d006      	beq.n	800e8d8 <__gethex+0xea>
 800e8ca:	2b2d      	cmp	r3, #45	; 0x2d
 800e8cc:	d002      	beq.n	800e8d4 <__gethex+0xe6>
 800e8ce:	1c7a      	adds	r2, r7, #1
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	e003      	b.n	800e8dc <__gethex+0xee>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e000      	b.n	800e8da <__gethex+0xec>
 800e8d8:	2300      	movs	r3, #0
 800e8da:	1cba      	adds	r2, r7, #2
 800e8dc:	7810      	ldrb	r0, [r2, #0]
 800e8de:	9306      	str	r3, [sp, #24]
 800e8e0:	9203      	str	r2, [sp, #12]
 800e8e2:	f7ff ff6f 	bl	800e7c4 <__hexdig_fun>
 800e8e6:	1e41      	subs	r1, r0, #1
 800e8e8:	b2c9      	uxtb	r1, r1
 800e8ea:	2918      	cmp	r1, #24
 800e8ec:	9a03      	ldr	r2, [sp, #12]
 800e8ee:	9b06      	ldr	r3, [sp, #24]
 800e8f0:	d819      	bhi.n	800e926 <__gethex+0x138>
 800e8f2:	f1a0 0b10 	sub.w	fp, r0, #16
 800e8f6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e8fa:	9306      	str	r3, [sp, #24]
 800e8fc:	9203      	str	r2, [sp, #12]
 800e8fe:	9207      	str	r2, [sp, #28]
 800e900:	f7ff ff60 	bl	800e7c4 <__hexdig_fun>
 800e904:	1e41      	subs	r1, r0, #1
 800e906:	b2c9      	uxtb	r1, r1
 800e908:	2918      	cmp	r1, #24
 800e90a:	9a03      	ldr	r2, [sp, #12]
 800e90c:	9b06      	ldr	r3, [sp, #24]
 800e90e:	d805      	bhi.n	800e91c <__gethex+0x12e>
 800e910:	210a      	movs	r1, #10
 800e912:	fb01 0b0b 	mla	fp, r1, fp, r0
 800e916:	f1ab 0b10 	sub.w	fp, fp, #16
 800e91a:	e7ec      	b.n	800e8f6 <__gethex+0x108>
 800e91c:	b10b      	cbz	r3, 800e922 <__gethex+0x134>
 800e91e:	f1cb 0b00 	rsb	fp, fp, #0
 800e922:	445c      	add	r4, fp
 800e924:	e000      	b.n	800e928 <__gethex+0x13a>
 800e926:	463a      	mov	r2, r7
 800e928:	f8ca 2000 	str.w	r2, [sl]
 800e92c:	b125      	cbz	r5, 800e938 <__gethex+0x14a>
 800e92e:	2e00      	cmp	r6, #0
 800e930:	bf14      	ite	ne
 800e932:	2000      	movne	r0, #0
 800e934:	2006      	moveq	r0, #6
 800e936:	e17c      	b.n	800ec32 <__gethex+0x444>
 800e938:	ebc8 0307 	rsb	r3, r8, r7
 800e93c:	3b01      	subs	r3, #1
 800e93e:	4629      	mov	r1, r5
 800e940:	2b07      	cmp	r3, #7
 800e942:	dd02      	ble.n	800e94a <__gethex+0x15c>
 800e944:	3101      	adds	r1, #1
 800e946:	105b      	asrs	r3, r3, #1
 800e948:	e7fa      	b.n	800e940 <__gethex+0x152>
 800e94a:	9801      	ldr	r0, [sp, #4]
 800e94c:	f000 fa2b 	bl	800eda6 <_Balloc>
 800e950:	f04f 0a00 	mov.w	sl, #0
 800e954:	f100 0b14 	add.w	fp, r0, #20
 800e958:	4605      	mov	r5, r0
 800e95a:	465e      	mov	r6, fp
 800e95c:	46d4      	mov	ip, sl
 800e95e:	4547      	cmp	r7, r8
 800e960:	d937      	bls.n	800e9d2 <__gethex+0x1e4>
 800e962:	1e7b      	subs	r3, r7, #1
 800e964:	9303      	str	r3, [sp, #12]
 800e966:	9a05      	ldr	r2, [sp, #20]
 800e968:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d009      	beq.n	800e984 <__gethex+0x196>
 800e970:	f1bc 0f20 	cmp.w	ip, #32
 800e974:	d11a      	bne.n	800e9ac <__gethex+0x1be>
 800e976:	f8c6 a000 	str.w	sl, [r6]
 800e97a:	f04f 0a00 	mov.w	sl, #0
 800e97e:	3604      	adds	r6, #4
 800e980:	46d4      	mov	ip, sl
 800e982:	e013      	b.n	800e9ac <__gethex+0x1be>
 800e984:	9b00      	ldr	r3, [sp, #0]
 800e986:	9a03      	ldr	r2, [sp, #12]
 800e988:	f1c3 0301 	rsb	r3, r3, #1
 800e98c:	4413      	add	r3, r2
 800e98e:	4543      	cmp	r3, r8
 800e990:	d3ee      	bcc.n	800e970 <__gethex+0x182>
 800e992:	4618      	mov	r0, r3
 800e994:	9902      	ldr	r1, [sp, #8]
 800e996:	9a00      	ldr	r2, [sp, #0]
 800e998:	f8cd c01c 	str.w	ip, [sp, #28]
 800e99c:	9306      	str	r3, [sp, #24]
 800e99e:	f000 fffd 	bl	800f99c <strncmp>
 800e9a2:	9b06      	ldr	r3, [sp, #24]
 800e9a4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e9a8:	b188      	cbz	r0, 800e9ce <__gethex+0x1e0>
 800e9aa:	e7e1      	b.n	800e970 <__gethex+0x182>
 800e9ac:	f817 0c01 	ldrb.w	r0, [r7, #-1]
 800e9b0:	f8cd c018 	str.w	ip, [sp, #24]
 800e9b4:	f7ff ff06 	bl	800e7c4 <__hexdig_fun>
 800e9b8:	f8dd c018 	ldr.w	ip, [sp, #24]
 800e9bc:	9b03      	ldr	r3, [sp, #12]
 800e9be:	f000 000f 	and.w	r0, r0, #15
 800e9c2:	fa00 f00c 	lsl.w	r0, r0, ip
 800e9c6:	ea4a 0a00 	orr.w	sl, sl, r0
 800e9ca:	f10c 0c04 	add.w	ip, ip, #4
 800e9ce:	461f      	mov	r7, r3
 800e9d0:	e7c5      	b.n	800e95e <__gethex+0x170>
 800e9d2:	f846 ab04 	str.w	sl, [r6], #4
 800e9d6:	ebcb 0606 	rsb	r6, fp, r6
 800e9da:	10b0      	asrs	r0, r6, #2
 800e9dc:	6128      	str	r0, [r5, #16]
 800e9de:	0147      	lsls	r7, r0, #5
 800e9e0:	4650      	mov	r0, sl
 800e9e2:	f000 faaa 	bl	800ef3a <__hi0bits>
 800e9e6:	f8d9 6000 	ldr.w	r6, [r9]
 800e9ea:	1a38      	subs	r0, r7, r0
 800e9ec:	42b0      	cmp	r0, r6
 800e9ee:	dd26      	ble.n	800ea3e <__gethex+0x250>
 800e9f0:	1b87      	subs	r7, r0, r6
 800e9f2:	4639      	mov	r1, r7
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	f000 fdab 	bl	800f550 <__any_on>
 800e9fa:	b1c8      	cbz	r0, 800ea30 <__gethex+0x242>
 800e9fc:	1e7b      	subs	r3, r7, #1
 800e9fe:	115a      	asrs	r2, r3, #5
 800ea00:	f003 011f 	and.w	r1, r3, #31
 800ea04:	f04f 0801 	mov.w	r8, #1
 800ea08:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 800ea0c:	fa08 f101 	lsl.w	r1, r8, r1
 800ea10:	4211      	tst	r1, r2
 800ea12:	d00e      	beq.n	800ea32 <__gethex+0x244>
 800ea14:	4543      	cmp	r3, r8
 800ea16:	dc02      	bgt.n	800ea1e <__gethex+0x230>
 800ea18:	f04f 0802 	mov.w	r8, #2
 800ea1c:	e009      	b.n	800ea32 <__gethex+0x244>
 800ea1e:	4628      	mov	r0, r5
 800ea20:	1eb9      	subs	r1, r7, #2
 800ea22:	f000 fd95 	bl	800f550 <__any_on>
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d0f6      	beq.n	800ea18 <__gethex+0x22a>
 800ea2a:	f04f 0803 	mov.w	r8, #3
 800ea2e:	e000      	b.n	800ea32 <__gethex+0x244>
 800ea30:	4680      	mov	r8, r0
 800ea32:	4628      	mov	r0, r5
 800ea34:	4639      	mov	r1, r7
 800ea36:	f7ff fe8f 	bl	800e758 <rshift>
 800ea3a:	443c      	add	r4, r7
 800ea3c:	e00c      	b.n	800ea58 <__gethex+0x26a>
 800ea3e:	da09      	bge.n	800ea54 <__gethex+0x266>
 800ea40:	1a37      	subs	r7, r6, r0
 800ea42:	4629      	mov	r1, r5
 800ea44:	9801      	ldr	r0, [sp, #4]
 800ea46:	463a      	mov	r2, r7
 800ea48:	f000 fbac 	bl	800f1a4 <__lshift>
 800ea4c:	1be4      	subs	r4, r4, r7
 800ea4e:	4605      	mov	r5, r0
 800ea50:	f100 0b14 	add.w	fp, r0, #20
 800ea54:	f04f 0800 	mov.w	r8, #0
 800ea58:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ea5c:	429c      	cmp	r4, r3
 800ea5e:	dd08      	ble.n	800ea72 <__gethex+0x284>
 800ea60:	9801      	ldr	r0, [sp, #4]
 800ea62:	4629      	mov	r1, r5
 800ea64:	f000 f9d4 	bl	800ee10 <_Bfree>
 800ea68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6013      	str	r3, [r2, #0]
 800ea6e:	20a3      	movs	r0, #163	; 0xa3
 800ea70:	e0df      	b.n	800ec32 <__gethex+0x444>
 800ea72:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ea76:	4284      	cmp	r4, r0
 800ea78:	da53      	bge.n	800eb22 <__gethex+0x334>
 800ea7a:	1b04      	subs	r4, r0, r4
 800ea7c:	42b4      	cmp	r4, r6
 800ea7e:	db2e      	blt.n	800eade <__gethex+0x2f0>
 800ea80:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d01a      	beq.n	800eabe <__gethex+0x2d0>
 800ea88:	2b03      	cmp	r3, #3
 800ea8a:	d01c      	beq.n	800eac6 <__gethex+0x2d8>
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d11d      	bne.n	800eacc <__gethex+0x2de>
 800ea90:	42b4      	cmp	r4, r6
 800ea92:	d11b      	bne.n	800eacc <__gethex+0x2de>
 800ea94:	2e01      	cmp	r6, #1
 800ea96:	dc0b      	bgt.n	800eab0 <__gethex+0x2c2>
 800ea98:	9a04      	ldr	r2, [sp, #16]
 800ea9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ea9e:	6013      	str	r3, [r2, #0]
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	612b      	str	r3, [r5, #16]
 800eaa4:	f8cb 3000 	str.w	r3, [fp]
 800eaa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eaaa:	2062      	movs	r0, #98	; 0x62
 800eaac:	601d      	str	r5, [r3, #0]
 800eaae:	e0c0      	b.n	800ec32 <__gethex+0x444>
 800eab0:	4628      	mov	r0, r5
 800eab2:	1e71      	subs	r1, r6, #1
 800eab4:	f000 fd4c 	bl	800f550 <__any_on>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d1ed      	bne.n	800ea98 <__gethex+0x2aa>
 800eabc:	e006      	b.n	800eacc <__gethex+0x2de>
 800eabe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d0e9      	beq.n	800ea98 <__gethex+0x2aa>
 800eac4:	e002      	b.n	800eacc <__gethex+0x2de>
 800eac6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d1e5      	bne.n	800ea98 <__gethex+0x2aa>
 800eacc:	9801      	ldr	r0, [sp, #4]
 800eace:	4629      	mov	r1, r5
 800ead0:	f000 f99e 	bl	800ee10 <_Bfree>
 800ead4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ead6:	2300      	movs	r3, #0
 800ead8:	6013      	str	r3, [r2, #0]
 800eada:	2050      	movs	r0, #80	; 0x50
 800eadc:	e0a9      	b.n	800ec32 <__gethex+0x444>
 800eade:	1e67      	subs	r7, r4, #1
 800eae0:	f1b8 0f00 	cmp.w	r8, #0
 800eae4:	d107      	bne.n	800eaf6 <__gethex+0x308>
 800eae6:	2f00      	cmp	r7, #0
 800eae8:	dd07      	ble.n	800eafa <__gethex+0x30c>
 800eaea:	4628      	mov	r0, r5
 800eaec:	4639      	mov	r1, r7
 800eaee:	f000 fd2f 	bl	800f550 <__any_on>
 800eaf2:	4680      	mov	r8, r0
 800eaf4:	e001      	b.n	800eafa <__gethex+0x30c>
 800eaf6:	f04f 0801 	mov.w	r8, #1
 800eafa:	117a      	asrs	r2, r7, #5
 800eafc:	2301      	movs	r3, #1
 800eafe:	f007 071f 	and.w	r7, r7, #31
 800eb02:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 800eb06:	40bb      	lsls	r3, r7
 800eb08:	4213      	tst	r3, r2
 800eb0a:	4621      	mov	r1, r4
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	bf18      	it	ne
 800eb10:	f048 0802 	orrne.w	r8, r8, #2
 800eb14:	1b36      	subs	r6, r6, r4
 800eb16:	f7ff fe1f 	bl	800e758 <rshift>
 800eb1a:	2702      	movs	r7, #2
 800eb1c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800eb20:	e000      	b.n	800eb24 <__gethex+0x336>
 800eb22:	2701      	movs	r7, #1
 800eb24:	f1b8 0f00 	cmp.w	r8, #0
 800eb28:	d07e      	beq.n	800ec28 <__gethex+0x43a>
 800eb2a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800eb2e:	2b02      	cmp	r3, #2
 800eb30:	d00e      	beq.n	800eb50 <__gethex+0x362>
 800eb32:	2b03      	cmp	r3, #3
 800eb34:	d010      	beq.n	800eb58 <__gethex+0x36a>
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d174      	bne.n	800ec24 <__gethex+0x436>
 800eb3a:	f018 0f02 	tst.w	r8, #2
 800eb3e:	d071      	beq.n	800ec24 <__gethex+0x436>
 800eb40:	f8db 0000 	ldr.w	r0, [fp]
 800eb44:	ea48 0800 	orr.w	r8, r8, r0
 800eb48:	f018 0f01 	tst.w	r8, #1
 800eb4c:	d107      	bne.n	800eb5e <__gethex+0x370>
 800eb4e:	e069      	b.n	800ec24 <__gethex+0x436>
 800eb50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb52:	f1c3 0301 	rsb	r3, r3, #1
 800eb56:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d062      	beq.n	800ec24 <__gethex+0x436>
 800eb5e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800eb62:	f105 0314 	add.w	r3, r5, #20
 800eb66:	ea4f 088a 	mov.w	r8, sl, lsl #2
 800eb6a:	eb03 0108 	add.w	r1, r3, r8
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	1c50      	adds	r0, r2, #1
 800eb72:	d002      	beq.n	800eb7a <__gethex+0x38c>
 800eb74:	3201      	adds	r2, #1
 800eb76:	601a      	str	r2, [r3, #0]
 800eb78:	e021      	b.n	800ebbe <__gethex+0x3d0>
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f843 2b04 	str.w	r2, [r3], #4
 800eb80:	428b      	cmp	r3, r1
 800eb82:	d3f4      	bcc.n	800eb6e <__gethex+0x380>
 800eb84:	68ab      	ldr	r3, [r5, #8]
 800eb86:	459a      	cmp	sl, r3
 800eb88:	db12      	blt.n	800ebb0 <__gethex+0x3c2>
 800eb8a:	6869      	ldr	r1, [r5, #4]
 800eb8c:	9801      	ldr	r0, [sp, #4]
 800eb8e:	3101      	adds	r1, #1
 800eb90:	f000 f909 	bl	800eda6 <_Balloc>
 800eb94:	692a      	ldr	r2, [r5, #16]
 800eb96:	3202      	adds	r2, #2
 800eb98:	f105 010c 	add.w	r1, r5, #12
 800eb9c:	4683      	mov	fp, r0
 800eb9e:	0092      	lsls	r2, r2, #2
 800eba0:	300c      	adds	r0, #12
 800eba2:	f7fd f9e9 	bl	800bf78 <memcpy>
 800eba6:	4629      	mov	r1, r5
 800eba8:	9801      	ldr	r0, [sp, #4]
 800ebaa:	f000 f931 	bl	800ee10 <_Bfree>
 800ebae:	465d      	mov	r5, fp
 800ebb0:	692b      	ldr	r3, [r5, #16]
 800ebb2:	1c5a      	adds	r2, r3, #1
 800ebb4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ebb8:	612a      	str	r2, [r5, #16]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	615a      	str	r2, [r3, #20]
 800ebbe:	2f02      	cmp	r7, #2
 800ebc0:	f105 0214 	add.w	r2, r5, #20
 800ebc4:	d110      	bne.n	800ebe8 <__gethex+0x3fa>
 800ebc6:	f8d9 3000 	ldr.w	r3, [r9]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	429e      	cmp	r6, r3
 800ebce:	d126      	bne.n	800ec1e <__gethex+0x430>
 800ebd0:	1171      	asrs	r1, r6, #5
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	f006 061f 	and.w	r6, r6, #31
 800ebd8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ebdc:	40b3      	lsls	r3, r6
 800ebde:	4213      	tst	r3, r2
 800ebe0:	bf0c      	ite	eq
 800ebe2:	2702      	moveq	r7, #2
 800ebe4:	2701      	movne	r7, #1
 800ebe6:	e01a      	b.n	800ec1e <__gethex+0x430>
 800ebe8:	692b      	ldr	r3, [r5, #16]
 800ebea:	4553      	cmp	r3, sl
 800ebec:	dd0a      	ble.n	800ec04 <__gethex+0x416>
 800ebee:	4628      	mov	r0, r5
 800ebf0:	2101      	movs	r1, #1
 800ebf2:	f7ff fdb1 	bl	800e758 <rshift>
 800ebf6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ebfa:	3401      	adds	r4, #1
 800ebfc:	429c      	cmp	r4, r3
 800ebfe:	f73f af2f 	bgt.w	800ea60 <__gethex+0x272>
 800ec02:	e00b      	b.n	800ec1c <__gethex+0x42e>
 800ec04:	f016 061f 	ands.w	r6, r6, #31
 800ec08:	d008      	beq.n	800ec1c <__gethex+0x42e>
 800ec0a:	4490      	add	r8, r2
 800ec0c:	f1c6 0620 	rsb	r6, r6, #32
 800ec10:	f858 0c04 	ldr.w	r0, [r8, #-4]
 800ec14:	f000 f991 	bl	800ef3a <__hi0bits>
 800ec18:	42b0      	cmp	r0, r6
 800ec1a:	dbe8      	blt.n	800ebee <__gethex+0x400>
 800ec1c:	2701      	movs	r7, #1
 800ec1e:	f047 0720 	orr.w	r7, r7, #32
 800ec22:	e001      	b.n	800ec28 <__gethex+0x43a>
 800ec24:	f047 0710 	orr.w	r7, r7, #16
 800ec28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec2a:	601d      	str	r5, [r3, #0]
 800ec2c:	9b04      	ldr	r3, [sp, #16]
 800ec2e:	4638      	mov	r0, r7
 800ec30:	601c      	str	r4, [r3, #0]
 800ec32:	b009      	add	sp, #36	; 0x24
 800ec34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec38 <L_shift>:
 800ec38:	f1c2 0208 	rsb	r2, r2, #8
 800ec3c:	0092      	lsls	r2, r2, #2
 800ec3e:	b570      	push	{r4, r5, r6, lr}
 800ec40:	f1c2 0620 	rsb	r6, r2, #32
 800ec44:	6843      	ldr	r3, [r0, #4]
 800ec46:	6805      	ldr	r5, [r0, #0]
 800ec48:	fa03 f406 	lsl.w	r4, r3, r6
 800ec4c:	432c      	orrs	r4, r5
 800ec4e:	40d3      	lsrs	r3, r2
 800ec50:	6004      	str	r4, [r0, #0]
 800ec52:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec56:	4288      	cmp	r0, r1
 800ec58:	d3f4      	bcc.n	800ec44 <L_shift+0xc>
 800ec5a:	bd70      	pop	{r4, r5, r6, pc}

0800ec5c <__hexnan>:
 800ec5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec60:	680e      	ldr	r6, [r1, #0]
 800ec62:	f8d0 a000 	ldr.w	sl, [r0]
 800ec66:	1175      	asrs	r5, r6, #5
 800ec68:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800ec6c:	f016 031f 	ands.w	r3, r6, #31
 800ec70:	b085      	sub	sp, #20
 800ec72:	bf18      	it	ne
 800ec74:	3504      	addne	r5, #4
 800ec76:	f1a5 0904 	sub.w	r9, r5, #4
 800ec7a:	4617      	mov	r7, r2
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	4683      	mov	fp, r0
 800ec80:	9301      	str	r3, [sp, #4]
 800ec82:	f845 2c04 	str.w	r2, [r5, #-4]
 800ec86:	46c8      	mov	r8, r9
 800ec88:	464c      	mov	r4, r9
 800ec8a:	9200      	str	r2, [sp, #0]
 800ec8c:	4616      	mov	r6, r2
 800ec8e:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800ec92:	2900      	cmp	r1, #0
 800ec94:	d03a      	beq.n	800ed0c <__hexnan+0xb0>
 800ec96:	4608      	mov	r0, r1
 800ec98:	9203      	str	r2, [sp, #12]
 800ec9a:	9102      	str	r1, [sp, #8]
 800ec9c:	f7ff fd92 	bl	800e7c4 <__hexdig_fun>
 800eca0:	9902      	ldr	r1, [sp, #8]
 800eca2:	9a03      	ldr	r2, [sp, #12]
 800eca4:	b9e8      	cbnz	r0, 800ece2 <__hexnan+0x86>
 800eca6:	2920      	cmp	r1, #32
 800eca8:	d814      	bhi.n	800ecd4 <__hexnan+0x78>
 800ecaa:	9b00      	ldr	r3, [sp, #0]
 800ecac:	42b3      	cmp	r3, r6
 800ecae:	daee      	bge.n	800ec8e <__hexnan+0x32>
 800ecb0:	4544      	cmp	r4, r8
 800ecb2:	d205      	bcs.n	800ecc0 <__hexnan+0x64>
 800ecb4:	2a07      	cmp	r2, #7
 800ecb6:	dc03      	bgt.n	800ecc0 <__hexnan+0x64>
 800ecb8:	4620      	mov	r0, r4
 800ecba:	4641      	mov	r1, r8
 800ecbc:	f7ff ffbc 	bl	800ec38 <L_shift>
 800ecc0:	42bc      	cmp	r4, r7
 800ecc2:	d921      	bls.n	800ed08 <__hexnan+0xac>
 800ecc4:	f1a4 0804 	sub.w	r8, r4, #4
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f844 2c04 	str.w	r2, [r4, #-4]
 800ecce:	9600      	str	r6, [sp, #0]
 800ecd0:	4644      	mov	r4, r8
 800ecd2:	e7dc      	b.n	800ec8e <__hexnan+0x32>
 800ecd4:	2929      	cmp	r1, #41	; 0x29
 800ecd6:	d145      	bne.n	800ed64 <__hexnan+0x108>
 800ecd8:	f10a 0301 	add.w	r3, sl, #1
 800ecdc:	f8cb 3000 	str.w	r3, [fp]
 800ece0:	e014      	b.n	800ed0c <__hexnan+0xb0>
 800ece2:	3201      	adds	r2, #1
 800ece4:	2a08      	cmp	r2, #8
 800ece6:	f106 0601 	add.w	r6, r6, #1
 800ecea:	dd06      	ble.n	800ecfa <__hexnan+0x9e>
 800ecec:	42bc      	cmp	r4, r7
 800ecee:	d9ce      	bls.n	800ec8e <__hexnan+0x32>
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f844 2c04 	str.w	r2, [r4, #-4]
 800ecf6:	3c04      	subs	r4, #4
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	6821      	ldr	r1, [r4, #0]
 800ecfc:	f000 000f 	and.w	r0, r0, #15
 800ed00:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800ed04:	6020      	str	r0, [r4, #0]
 800ed06:	e7c2      	b.n	800ec8e <__hexnan+0x32>
 800ed08:	2208      	movs	r2, #8
 800ed0a:	e7c0      	b.n	800ec8e <__hexnan+0x32>
 800ed0c:	b356      	cbz	r6, 800ed64 <__hexnan+0x108>
 800ed0e:	4544      	cmp	r4, r8
 800ed10:	d205      	bcs.n	800ed1e <__hexnan+0xc2>
 800ed12:	2a07      	cmp	r2, #7
 800ed14:	dc03      	bgt.n	800ed1e <__hexnan+0xc2>
 800ed16:	4620      	mov	r0, r4
 800ed18:	4641      	mov	r1, r8
 800ed1a:	f7ff ff8d 	bl	800ec38 <L_shift>
 800ed1e:	42bc      	cmp	r4, r7
 800ed20:	d90c      	bls.n	800ed3c <__hexnan+0xe0>
 800ed22:	463b      	mov	r3, r7
 800ed24:	f854 2b04 	ldr.w	r2, [r4], #4
 800ed28:	f843 2b04 	str.w	r2, [r3], #4
 800ed2c:	454c      	cmp	r4, r9
 800ed2e:	d9f9      	bls.n	800ed24 <__hexnan+0xc8>
 800ed30:	2200      	movs	r2, #0
 800ed32:	f843 2b04 	str.w	r2, [r3], #4
 800ed36:	454b      	cmp	r3, r9
 800ed38:	d9fa      	bls.n	800ed30 <__hexnan+0xd4>
 800ed3a:	e00b      	b.n	800ed54 <__hexnan+0xf8>
 800ed3c:	9b01      	ldr	r3, [sp, #4]
 800ed3e:	b14b      	cbz	r3, 800ed54 <__hexnan+0xf8>
 800ed40:	f1c3 0620 	rsb	r6, r3, #32
 800ed44:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800ed48:	f04f 33ff 	mov.w	r3, #4294967295
 800ed4c:	40f3      	lsrs	r3, r6
 800ed4e:	4013      	ands	r3, r2
 800ed50:	f845 3c04 	str.w	r3, [r5, #-4]
 800ed54:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ed58:	b933      	cbnz	r3, 800ed68 <__hexnan+0x10c>
 800ed5a:	42bd      	cmp	r5, r7
 800ed5c:	d1fa      	bne.n	800ed54 <__hexnan+0xf8>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	602b      	str	r3, [r5, #0]
 800ed62:	e001      	b.n	800ed68 <__hexnan+0x10c>
 800ed64:	2004      	movs	r0, #4
 800ed66:	e000      	b.n	800ed6a <__hexnan+0x10e>
 800ed68:	2005      	movs	r0, #5
 800ed6a:	b005      	add	sp, #20
 800ed6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed70 <_localeconv_r>:
 800ed70:	4800      	ldr	r0, [pc, #0]	; (800ed74 <_localeconv_r+0x4>)
 800ed72:	4770      	bx	lr
 800ed74:	200001f8 	.word	0x200001f8

0800ed78 <malloc>:
 800ed78:	4b02      	ldr	r3, [pc, #8]	; (800ed84 <malloc+0xc>)
 800ed7a:	4601      	mov	r1, r0
 800ed7c:	6818      	ldr	r0, [r3, #0]
 800ed7e:	f000 bc5b 	b.w	800f638 <_malloc_r>
 800ed82:	bf00      	nop
 800ed84:	200001f0 	.word	0x200001f0

0800ed88 <memchr>:
 800ed88:	b510      	push	{r4, lr}
 800ed8a:	b2c9      	uxtb	r1, r1
 800ed8c:	4402      	add	r2, r0
 800ed8e:	4290      	cmp	r0, r2
 800ed90:	4603      	mov	r3, r0
 800ed92:	d006      	beq.n	800eda2 <memchr+0x1a>
 800ed94:	781c      	ldrb	r4, [r3, #0]
 800ed96:	428c      	cmp	r4, r1
 800ed98:	f100 0001 	add.w	r0, r0, #1
 800ed9c:	d1f7      	bne.n	800ed8e <memchr+0x6>
 800ed9e:	4618      	mov	r0, r3
 800eda0:	bd10      	pop	{r4, pc}
 800eda2:	2000      	movs	r0, #0
 800eda4:	bd10      	pop	{r4, pc}

0800eda6 <_Balloc>:
 800eda6:	b570      	push	{r4, r5, r6, lr}
 800eda8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800edaa:	4604      	mov	r4, r0
 800edac:	460e      	mov	r6, r1
 800edae:	b93d      	cbnz	r5, 800edc0 <_Balloc+0x1a>
 800edb0:	2010      	movs	r0, #16
 800edb2:	f7ff ffe1 	bl	800ed78 <malloc>
 800edb6:	6260      	str	r0, [r4, #36]	; 0x24
 800edb8:	6045      	str	r5, [r0, #4]
 800edba:	6085      	str	r5, [r0, #8]
 800edbc:	6005      	str	r5, [r0, #0]
 800edbe:	60c5      	str	r5, [r0, #12]
 800edc0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800edc2:	68eb      	ldr	r3, [r5, #12]
 800edc4:	b143      	cbz	r3, 800edd8 <_Balloc+0x32>
 800edc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800edce:	b178      	cbz	r0, 800edf0 <_Balloc+0x4a>
 800edd0:	6802      	ldr	r2, [r0, #0]
 800edd2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800edd6:	e017      	b.n	800ee08 <_Balloc+0x62>
 800edd8:	4620      	mov	r0, r4
 800edda:	2104      	movs	r1, #4
 800eddc:	2221      	movs	r2, #33	; 0x21
 800edde:	f000 fbd9 	bl	800f594 <_calloc_r>
 800ede2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ede4:	60e8      	str	r0, [r5, #12]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d1ec      	bne.n	800edc6 <_Balloc+0x20>
 800edec:	2000      	movs	r0, #0
 800edee:	bd70      	pop	{r4, r5, r6, pc}
 800edf0:	2101      	movs	r1, #1
 800edf2:	fa01 f506 	lsl.w	r5, r1, r6
 800edf6:	1d6a      	adds	r2, r5, #5
 800edf8:	4620      	mov	r0, r4
 800edfa:	0092      	lsls	r2, r2, #2
 800edfc:	f000 fbca 	bl	800f594 <_calloc_r>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d0f3      	beq.n	800edec <_Balloc+0x46>
 800ee04:	6046      	str	r6, [r0, #4]
 800ee06:	6085      	str	r5, [r0, #8]
 800ee08:	2300      	movs	r3, #0
 800ee0a:	6103      	str	r3, [r0, #16]
 800ee0c:	60c3      	str	r3, [r0, #12]
 800ee0e:	bd70      	pop	{r4, r5, r6, pc}

0800ee10 <_Bfree>:
 800ee10:	b570      	push	{r4, r5, r6, lr}
 800ee12:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ee14:	4606      	mov	r6, r0
 800ee16:	460d      	mov	r5, r1
 800ee18:	b93c      	cbnz	r4, 800ee2a <_Bfree+0x1a>
 800ee1a:	2010      	movs	r0, #16
 800ee1c:	f7ff ffac 	bl	800ed78 <malloc>
 800ee20:	6270      	str	r0, [r6, #36]	; 0x24
 800ee22:	6044      	str	r4, [r0, #4]
 800ee24:	6084      	str	r4, [r0, #8]
 800ee26:	6004      	str	r4, [r0, #0]
 800ee28:	60c4      	str	r4, [r0, #12]
 800ee2a:	b13d      	cbz	r5, 800ee3c <_Bfree+0x2c>
 800ee2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ee2e:	686a      	ldr	r2, [r5, #4]
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee36:	6029      	str	r1, [r5, #0]
 800ee38:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ee3c:	bd70      	pop	{r4, r5, r6, pc}

0800ee3e <__multadd>:
 800ee3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee42:	690f      	ldr	r7, [r1, #16]
 800ee44:	4698      	mov	r8, r3
 800ee46:	4606      	mov	r6, r0
 800ee48:	460c      	mov	r4, r1
 800ee4a:	f101 0e14 	add.w	lr, r1, #20
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f8de 0000 	ldr.w	r0, [lr]
 800ee54:	b285      	uxth	r5, r0
 800ee56:	0c01      	lsrs	r1, r0, #16
 800ee58:	fb02 8505 	mla	r5, r2, r5, r8
 800ee5c:	4351      	muls	r1, r2
 800ee5e:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 800ee62:	3301      	adds	r3, #1
 800ee64:	b2ad      	uxth	r5, r5
 800ee66:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800ee6a:	42bb      	cmp	r3, r7
 800ee6c:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 800ee70:	f84e 1b04 	str.w	r1, [lr], #4
 800ee74:	dbec      	blt.n	800ee50 <__multadd+0x12>
 800ee76:	f1b8 0f00 	cmp.w	r8, #0
 800ee7a:	d01b      	beq.n	800eeb4 <__multadd+0x76>
 800ee7c:	68a3      	ldr	r3, [r4, #8]
 800ee7e:	429f      	cmp	r7, r3
 800ee80:	db12      	blt.n	800eea8 <__multadd+0x6a>
 800ee82:	6861      	ldr	r1, [r4, #4]
 800ee84:	4630      	mov	r0, r6
 800ee86:	3101      	adds	r1, #1
 800ee88:	f7ff ff8d 	bl	800eda6 <_Balloc>
 800ee8c:	6922      	ldr	r2, [r4, #16]
 800ee8e:	3202      	adds	r2, #2
 800ee90:	f104 010c 	add.w	r1, r4, #12
 800ee94:	4605      	mov	r5, r0
 800ee96:	0092      	lsls	r2, r2, #2
 800ee98:	300c      	adds	r0, #12
 800ee9a:	f7fd f86d 	bl	800bf78 <memcpy>
 800ee9e:	4621      	mov	r1, r4
 800eea0:	4630      	mov	r0, r6
 800eea2:	f7ff ffb5 	bl	800ee10 <_Bfree>
 800eea6:	462c      	mov	r4, r5
 800eea8:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800eeac:	3701      	adds	r7, #1
 800eeae:	f8c3 8014 	str.w	r8, [r3, #20]
 800eeb2:	6127      	str	r7, [r4, #16]
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eeba <__s2b>:
 800eeba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eebe:	460c      	mov	r4, r1
 800eec0:	4615      	mov	r5, r2
 800eec2:	4698      	mov	r8, r3
 800eec4:	2209      	movs	r2, #9
 800eec6:	3308      	adds	r3, #8
 800eec8:	4607      	mov	r7, r0
 800eeca:	fb93 f2f2 	sdiv	r2, r3, r2
 800eece:	2100      	movs	r1, #0
 800eed0:	2301      	movs	r3, #1
 800eed2:	429a      	cmp	r2, r3
 800eed4:	dd02      	ble.n	800eedc <__s2b+0x22>
 800eed6:	005b      	lsls	r3, r3, #1
 800eed8:	3101      	adds	r1, #1
 800eeda:	e7fa      	b.n	800eed2 <__s2b+0x18>
 800eedc:	4638      	mov	r0, r7
 800eede:	f7ff ff62 	bl	800eda6 <_Balloc>
 800eee2:	9b08      	ldr	r3, [sp, #32]
 800eee4:	6143      	str	r3, [r0, #20]
 800eee6:	2d09      	cmp	r5, #9
 800eee8:	f04f 0301 	mov.w	r3, #1
 800eeec:	4601      	mov	r1, r0
 800eeee:	6103      	str	r3, [r0, #16]
 800eef0:	dd10      	ble.n	800ef14 <__s2b+0x5a>
 800eef2:	f104 0609 	add.w	r6, r4, #9
 800eef6:	46b1      	mov	r9, r6
 800eef8:	442c      	add	r4, r5
 800eefa:	f819 3b01 	ldrb.w	r3, [r9], #1
 800eefe:	4638      	mov	r0, r7
 800ef00:	220a      	movs	r2, #10
 800ef02:	3b30      	subs	r3, #48	; 0x30
 800ef04:	f7ff ff9b 	bl	800ee3e <__multadd>
 800ef08:	45a1      	cmp	r9, r4
 800ef0a:	4601      	mov	r1, r0
 800ef0c:	d1f5      	bne.n	800eefa <__s2b+0x40>
 800ef0e:	1974      	adds	r4, r6, r5
 800ef10:	3c08      	subs	r4, #8
 800ef12:	e001      	b.n	800ef18 <__s2b+0x5e>
 800ef14:	340a      	adds	r4, #10
 800ef16:	2509      	movs	r5, #9
 800ef18:	4626      	mov	r6, r4
 800ef1a:	1b2b      	subs	r3, r5, r4
 800ef1c:	4433      	add	r3, r6
 800ef1e:	4543      	cmp	r3, r8
 800ef20:	da08      	bge.n	800ef34 <__s2b+0x7a>
 800ef22:	f816 3b01 	ldrb.w	r3, [r6], #1
 800ef26:	4638      	mov	r0, r7
 800ef28:	220a      	movs	r2, #10
 800ef2a:	3b30      	subs	r3, #48	; 0x30
 800ef2c:	f7ff ff87 	bl	800ee3e <__multadd>
 800ef30:	4601      	mov	r1, r0
 800ef32:	e7f2      	b.n	800ef1a <__s2b+0x60>
 800ef34:	4608      	mov	r0, r1
 800ef36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ef3a <__hi0bits>:
 800ef3a:	0c03      	lsrs	r3, r0, #16
 800ef3c:	041b      	lsls	r3, r3, #16
 800ef3e:	b913      	cbnz	r3, 800ef46 <__hi0bits+0xc>
 800ef40:	0400      	lsls	r0, r0, #16
 800ef42:	2310      	movs	r3, #16
 800ef44:	e000      	b.n	800ef48 <__hi0bits+0xe>
 800ef46:	2300      	movs	r3, #0
 800ef48:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ef4c:	bf04      	itt	eq
 800ef4e:	0200      	lsleq	r0, r0, #8
 800ef50:	3308      	addeq	r3, #8
 800ef52:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ef56:	bf04      	itt	eq
 800ef58:	0100      	lsleq	r0, r0, #4
 800ef5a:	3304      	addeq	r3, #4
 800ef5c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ef60:	bf04      	itt	eq
 800ef62:	0080      	lsleq	r0, r0, #2
 800ef64:	3302      	addeq	r3, #2
 800ef66:	2800      	cmp	r0, #0
 800ef68:	db03      	blt.n	800ef72 <__hi0bits+0x38>
 800ef6a:	0042      	lsls	r2, r0, #1
 800ef6c:	d503      	bpl.n	800ef76 <__hi0bits+0x3c>
 800ef6e:	1c58      	adds	r0, r3, #1
 800ef70:	4770      	bx	lr
 800ef72:	4618      	mov	r0, r3
 800ef74:	4770      	bx	lr
 800ef76:	2020      	movs	r0, #32
 800ef78:	4770      	bx	lr

0800ef7a <__lo0bits>:
 800ef7a:	6803      	ldr	r3, [r0, #0]
 800ef7c:	f013 0207 	ands.w	r2, r3, #7
 800ef80:	d00b      	beq.n	800ef9a <__lo0bits+0x20>
 800ef82:	07d9      	lsls	r1, r3, #31
 800ef84:	d422      	bmi.n	800efcc <__lo0bits+0x52>
 800ef86:	079a      	lsls	r2, r3, #30
 800ef88:	bf4b      	itete	mi
 800ef8a:	085b      	lsrmi	r3, r3, #1
 800ef8c:	089b      	lsrpl	r3, r3, #2
 800ef8e:	6003      	strmi	r3, [r0, #0]
 800ef90:	6003      	strpl	r3, [r0, #0]
 800ef92:	bf4c      	ite	mi
 800ef94:	2001      	movmi	r0, #1
 800ef96:	2002      	movpl	r0, #2
 800ef98:	4770      	bx	lr
 800ef9a:	b299      	uxth	r1, r3
 800ef9c:	b909      	cbnz	r1, 800efa2 <__lo0bits+0x28>
 800ef9e:	0c1b      	lsrs	r3, r3, #16
 800efa0:	2210      	movs	r2, #16
 800efa2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800efa6:	bf04      	itt	eq
 800efa8:	0a1b      	lsreq	r3, r3, #8
 800efaa:	3208      	addeq	r2, #8
 800efac:	0719      	lsls	r1, r3, #28
 800efae:	bf04      	itt	eq
 800efb0:	091b      	lsreq	r3, r3, #4
 800efb2:	3204      	addeq	r2, #4
 800efb4:	0799      	lsls	r1, r3, #30
 800efb6:	bf04      	itt	eq
 800efb8:	089b      	lsreq	r3, r3, #2
 800efba:	3202      	addeq	r2, #2
 800efbc:	07d9      	lsls	r1, r3, #31
 800efbe:	d402      	bmi.n	800efc6 <__lo0bits+0x4c>
 800efc0:	085b      	lsrs	r3, r3, #1
 800efc2:	d005      	beq.n	800efd0 <__lo0bits+0x56>
 800efc4:	3201      	adds	r2, #1
 800efc6:	6003      	str	r3, [r0, #0]
 800efc8:	4610      	mov	r0, r2
 800efca:	4770      	bx	lr
 800efcc:	2000      	movs	r0, #0
 800efce:	4770      	bx	lr
 800efd0:	2020      	movs	r0, #32
 800efd2:	4770      	bx	lr

0800efd4 <__i2b>:
 800efd4:	b510      	push	{r4, lr}
 800efd6:	460c      	mov	r4, r1
 800efd8:	2101      	movs	r1, #1
 800efda:	f7ff fee4 	bl	800eda6 <_Balloc>
 800efde:	2201      	movs	r2, #1
 800efe0:	6144      	str	r4, [r0, #20]
 800efe2:	6102      	str	r2, [r0, #16]
 800efe4:	bd10      	pop	{r4, pc}

0800efe6 <__multiply>:
 800efe6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efea:	4614      	mov	r4, r2
 800efec:	690a      	ldr	r2, [r1, #16]
 800efee:	6923      	ldr	r3, [r4, #16]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	bfb8      	it	lt
 800eff4:	460b      	movlt	r3, r1
 800eff6:	4688      	mov	r8, r1
 800eff8:	bfbc      	itt	lt
 800effa:	46a0      	movlt	r8, r4
 800effc:	461c      	movlt	r4, r3
 800effe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f002:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f006:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f00a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f00e:	eb07 0609 	add.w	r6, r7, r9
 800f012:	429e      	cmp	r6, r3
 800f014:	bfc8      	it	gt
 800f016:	3101      	addgt	r1, #1
 800f018:	f7ff fec5 	bl	800eda6 <_Balloc>
 800f01c:	f100 0514 	add.w	r5, r0, #20
 800f020:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800f024:	462b      	mov	r3, r5
 800f026:	4563      	cmp	r3, ip
 800f028:	d203      	bcs.n	800f032 <__multiply+0x4c>
 800f02a:	2200      	movs	r2, #0
 800f02c:	f843 2b04 	str.w	r2, [r3], #4
 800f030:	e7f9      	b.n	800f026 <__multiply+0x40>
 800f032:	f104 0214 	add.w	r2, r4, #20
 800f036:	f108 0114 	add.w	r1, r8, #20
 800f03a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f03e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	9b00      	ldr	r3, [sp, #0]
 800f046:	9201      	str	r2, [sp, #4]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d257      	bcs.n	800f0fc <__multiply+0x116>
 800f04c:	f8b2 b000 	ldrh.w	fp, [r2]
 800f050:	f1bb 0f00 	cmp.w	fp, #0
 800f054:	d023      	beq.n	800f09e <__multiply+0xb8>
 800f056:	4689      	mov	r9, r1
 800f058:	46ae      	mov	lr, r5
 800f05a:	f04f 0800 	mov.w	r8, #0
 800f05e:	f859 4b04 	ldr.w	r4, [r9], #4
 800f062:	f8be a000 	ldrh.w	sl, [lr]
 800f066:	b2a3      	uxth	r3, r4
 800f068:	fb0b a303 	mla	r3, fp, r3, sl
 800f06c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f070:	f8de 4000 	ldr.w	r4, [lr]
 800f074:	4443      	add	r3, r8
 800f076:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f07a:	fb0b 840a 	mla	r4, fp, sl, r8
 800f07e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f082:	46f2      	mov	sl, lr
 800f084:	b29b      	uxth	r3, r3
 800f086:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f08a:	454f      	cmp	r7, r9
 800f08c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f090:	f84a 3b04 	str.w	r3, [sl], #4
 800f094:	d901      	bls.n	800f09a <__multiply+0xb4>
 800f096:	46d6      	mov	lr, sl
 800f098:	e7e1      	b.n	800f05e <__multiply+0x78>
 800f09a:	f8ce 8004 	str.w	r8, [lr, #4]
 800f09e:	9b01      	ldr	r3, [sp, #4]
 800f0a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f0a4:	3204      	adds	r2, #4
 800f0a6:	f1ba 0f00 	cmp.w	sl, #0
 800f0aa:	d021      	beq.n	800f0f0 <__multiply+0x10a>
 800f0ac:	682b      	ldr	r3, [r5, #0]
 800f0ae:	462c      	mov	r4, r5
 800f0b0:	4689      	mov	r9, r1
 800f0b2:	f04f 0800 	mov.w	r8, #0
 800f0b6:	f8b9 e000 	ldrh.w	lr, [r9]
 800f0ba:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800f0be:	fb0a be0e 	mla	lr, sl, lr, fp
 800f0c2:	44f0      	add	r8, lr
 800f0c4:	46a3      	mov	fp, r4
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800f0cc:	f84b 3b04 	str.w	r3, [fp], #4
 800f0d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f0d4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800f0d8:	0c1b      	lsrs	r3, r3, #16
 800f0da:	fb0a e303 	mla	r3, sl, r3, lr
 800f0de:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800f0e2:	45b9      	cmp	r9, r7
 800f0e4:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800f0e8:	d201      	bcs.n	800f0ee <__multiply+0x108>
 800f0ea:	465c      	mov	r4, fp
 800f0ec:	e7e3      	b.n	800f0b6 <__multiply+0xd0>
 800f0ee:	6063      	str	r3, [r4, #4]
 800f0f0:	3504      	adds	r5, #4
 800f0f2:	e7a7      	b.n	800f044 <__multiply+0x5e>
 800f0f4:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800f0f8:	b913      	cbnz	r3, 800f100 <__multiply+0x11a>
 800f0fa:	3e01      	subs	r6, #1
 800f0fc:	2e00      	cmp	r6, #0
 800f0fe:	dcf9      	bgt.n	800f0f4 <__multiply+0x10e>
 800f100:	6106      	str	r6, [r0, #16]
 800f102:	b003      	add	sp, #12
 800f104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f108 <__pow5mult>:
 800f108:	f012 0303 	ands.w	r3, r2, #3
 800f10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f110:	4606      	mov	r6, r0
 800f112:	460f      	mov	r7, r1
 800f114:	4615      	mov	r5, r2
 800f116:	d007      	beq.n	800f128 <__pow5mult+0x20>
 800f118:	3b01      	subs	r3, #1
 800f11a:	4a21      	ldr	r2, [pc, #132]	; (800f1a0 <__pow5mult+0x98>)
 800f11c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f120:	2300      	movs	r3, #0
 800f122:	f7ff fe8c 	bl	800ee3e <__multadd>
 800f126:	4607      	mov	r7, r0
 800f128:	10ad      	asrs	r5, r5, #2
 800f12a:	d035      	beq.n	800f198 <__pow5mult+0x90>
 800f12c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f12e:	b93c      	cbnz	r4, 800f140 <__pow5mult+0x38>
 800f130:	2010      	movs	r0, #16
 800f132:	f7ff fe21 	bl	800ed78 <malloc>
 800f136:	6270      	str	r0, [r6, #36]	; 0x24
 800f138:	6044      	str	r4, [r0, #4]
 800f13a:	6084      	str	r4, [r0, #8]
 800f13c:	6004      	str	r4, [r0, #0]
 800f13e:	60c4      	str	r4, [r0, #12]
 800f140:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f148:	b97c      	cbnz	r4, 800f16a <__pow5mult+0x62>
 800f14a:	4630      	mov	r0, r6
 800f14c:	f240 2171 	movw	r1, #625	; 0x271
 800f150:	f7ff ff40 	bl	800efd4 <__i2b>
 800f154:	2300      	movs	r3, #0
 800f156:	f8c8 0008 	str.w	r0, [r8, #8]
 800f15a:	4604      	mov	r4, r0
 800f15c:	6003      	str	r3, [r0, #0]
 800f15e:	e004      	b.n	800f16a <__pow5mult+0x62>
 800f160:	106d      	asrs	r5, r5, #1
 800f162:	d019      	beq.n	800f198 <__pow5mult+0x90>
 800f164:	6820      	ldr	r0, [r4, #0]
 800f166:	b170      	cbz	r0, 800f186 <__pow5mult+0x7e>
 800f168:	4604      	mov	r4, r0
 800f16a:	07eb      	lsls	r3, r5, #31
 800f16c:	d5f8      	bpl.n	800f160 <__pow5mult+0x58>
 800f16e:	4639      	mov	r1, r7
 800f170:	4622      	mov	r2, r4
 800f172:	4630      	mov	r0, r6
 800f174:	f7ff ff37 	bl	800efe6 <__multiply>
 800f178:	4639      	mov	r1, r7
 800f17a:	4680      	mov	r8, r0
 800f17c:	4630      	mov	r0, r6
 800f17e:	f7ff fe47 	bl	800ee10 <_Bfree>
 800f182:	4647      	mov	r7, r8
 800f184:	e7ec      	b.n	800f160 <__pow5mult+0x58>
 800f186:	4630      	mov	r0, r6
 800f188:	4621      	mov	r1, r4
 800f18a:	4622      	mov	r2, r4
 800f18c:	f7ff ff2b 	bl	800efe6 <__multiply>
 800f190:	2300      	movs	r3, #0
 800f192:	6020      	str	r0, [r4, #0]
 800f194:	6003      	str	r3, [r0, #0]
 800f196:	e7e7      	b.n	800f168 <__pow5mult+0x60>
 800f198:	4638      	mov	r0, r7
 800f19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f19e:	bf00      	nop
 800f1a0:	080106b0 	.word	0x080106b0

0800f1a4 <__lshift>:
 800f1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a8:	460c      	mov	r4, r1
 800f1aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f1ae:	6923      	ldr	r3, [r4, #16]
 800f1b0:	6849      	ldr	r1, [r1, #4]
 800f1b2:	eb0a 0903 	add.w	r9, sl, r3
 800f1b6:	68a3      	ldr	r3, [r4, #8]
 800f1b8:	4607      	mov	r7, r0
 800f1ba:	4616      	mov	r6, r2
 800f1bc:	f109 0501 	add.w	r5, r9, #1
 800f1c0:	429d      	cmp	r5, r3
 800f1c2:	dd02      	ble.n	800f1ca <__lshift+0x26>
 800f1c4:	3101      	adds	r1, #1
 800f1c6:	005b      	lsls	r3, r3, #1
 800f1c8:	e7fa      	b.n	800f1c0 <__lshift+0x1c>
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	f7ff fdeb 	bl	800eda6 <_Balloc>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	4680      	mov	r8, r0
 800f1d4:	f100 0114 	add.w	r1, r0, #20
 800f1d8:	4553      	cmp	r3, sl
 800f1da:	da04      	bge.n	800f1e6 <__lshift+0x42>
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	e7f8      	b.n	800f1d8 <__lshift+0x34>
 800f1e6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800f1ea:	6920      	ldr	r0, [r4, #16]
 800f1ec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f1f0:	f016 021f 	ands.w	r2, r6, #31
 800f1f4:	f104 0114 	add.w	r1, r4, #20
 800f1f8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800f1fc:	d014      	beq.n	800f228 <__lshift+0x84>
 800f1fe:	f1c2 0c20 	rsb	ip, r2, #32
 800f202:	2000      	movs	r0, #0
 800f204:	680e      	ldr	r6, [r1, #0]
 800f206:	4096      	lsls	r6, r2
 800f208:	4330      	orrs	r0, r6
 800f20a:	469a      	mov	sl, r3
 800f20c:	f843 0b04 	str.w	r0, [r3], #4
 800f210:	f851 0b04 	ldr.w	r0, [r1], #4
 800f214:	4571      	cmp	r1, lr
 800f216:	fa20 f00c 	lsr.w	r0, r0, ip
 800f21a:	d3f3      	bcc.n	800f204 <__lshift+0x60>
 800f21c:	f8ca 0004 	str.w	r0, [sl, #4]
 800f220:	b148      	cbz	r0, 800f236 <__lshift+0x92>
 800f222:	f109 0502 	add.w	r5, r9, #2
 800f226:	e006      	b.n	800f236 <__lshift+0x92>
 800f228:	3b04      	subs	r3, #4
 800f22a:	f851 2b04 	ldr.w	r2, [r1], #4
 800f22e:	f843 2f04 	str.w	r2, [r3, #4]!
 800f232:	4571      	cmp	r1, lr
 800f234:	d3f9      	bcc.n	800f22a <__lshift+0x86>
 800f236:	3d01      	subs	r5, #1
 800f238:	4638      	mov	r0, r7
 800f23a:	f8c8 5010 	str.w	r5, [r8, #16]
 800f23e:	4621      	mov	r1, r4
 800f240:	f7ff fde6 	bl	800ee10 <_Bfree>
 800f244:	4640      	mov	r0, r8
 800f246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f24a <__mcmp>:
 800f24a:	6903      	ldr	r3, [r0, #16]
 800f24c:	690a      	ldr	r2, [r1, #16]
 800f24e:	1a9b      	subs	r3, r3, r2
 800f250:	b510      	push	{r4, lr}
 800f252:	d111      	bne.n	800f278 <__mcmp+0x2e>
 800f254:	0092      	lsls	r2, r2, #2
 800f256:	3014      	adds	r0, #20
 800f258:	3114      	adds	r1, #20
 800f25a:	1883      	adds	r3, r0, r2
 800f25c:	440a      	add	r2, r1
 800f25e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800f262:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f266:	428c      	cmp	r4, r1
 800f268:	d002      	beq.n	800f270 <__mcmp+0x26>
 800f26a:	d307      	bcc.n	800f27c <__mcmp+0x32>
 800f26c:	2001      	movs	r0, #1
 800f26e:	bd10      	pop	{r4, pc}
 800f270:	4283      	cmp	r3, r0
 800f272:	d8f4      	bhi.n	800f25e <__mcmp+0x14>
 800f274:	2000      	movs	r0, #0
 800f276:	bd10      	pop	{r4, pc}
 800f278:	4618      	mov	r0, r3
 800f27a:	bd10      	pop	{r4, pc}
 800f27c:	f04f 30ff 	mov.w	r0, #4294967295
 800f280:	bd10      	pop	{r4, pc}

0800f282 <__mdiff>:
 800f282:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f286:	4607      	mov	r7, r0
 800f288:	460c      	mov	r4, r1
 800f28a:	4608      	mov	r0, r1
 800f28c:	4611      	mov	r1, r2
 800f28e:	4615      	mov	r5, r2
 800f290:	f7ff ffdb 	bl	800f24a <__mcmp>
 800f294:	1e06      	subs	r6, r0, #0
 800f296:	d108      	bne.n	800f2aa <__mdiff+0x28>
 800f298:	4638      	mov	r0, r7
 800f29a:	4631      	mov	r1, r6
 800f29c:	f7ff fd83 	bl	800eda6 <_Balloc>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	6103      	str	r3, [r0, #16]
 800f2a4:	6146      	str	r6, [r0, #20]
 800f2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2aa:	bfbc      	itt	lt
 800f2ac:	4623      	movlt	r3, r4
 800f2ae:	462c      	movlt	r4, r5
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	6861      	ldr	r1, [r4, #4]
 800f2b4:	bfba      	itte	lt
 800f2b6:	461d      	movlt	r5, r3
 800f2b8:	2601      	movlt	r6, #1
 800f2ba:	2600      	movge	r6, #0
 800f2bc:	f7ff fd73 	bl	800eda6 <_Balloc>
 800f2c0:	692b      	ldr	r3, [r5, #16]
 800f2c2:	60c6      	str	r6, [r0, #12]
 800f2c4:	6926      	ldr	r6, [r4, #16]
 800f2c6:	f105 0914 	add.w	r9, r5, #20
 800f2ca:	3414      	adds	r4, #20
 800f2cc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800f2d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f2d4:	f100 0514 	add.w	r5, r0, #20
 800f2d8:	f04f 0c00 	mov.w	ip, #0
 800f2dc:	f854 3b04 	ldr.w	r3, [r4], #4
 800f2e0:	f859 2b04 	ldr.w	r2, [r9], #4
 800f2e4:	fa1c f183 	uxtah	r1, ip, r3
 800f2e8:	fa1f fe82 	uxth.w	lr, r2
 800f2ec:	0c12      	lsrs	r2, r2, #16
 800f2ee:	ebce 0101 	rsb	r1, lr, r1
 800f2f2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800f2f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f2fa:	b289      	uxth	r1, r1
 800f2fc:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f300:	45c8      	cmp	r8, r9
 800f302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f306:	46a6      	mov	lr, r4
 800f308:	f845 3b04 	str.w	r3, [r5], #4
 800f30c:	d8e6      	bhi.n	800f2dc <__mdiff+0x5a>
 800f30e:	45be      	cmp	lr, r7
 800f310:	d20e      	bcs.n	800f330 <__mdiff+0xae>
 800f312:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f316:	fa1c f482 	uxtah	r4, ip, r2
 800f31a:	0c12      	lsrs	r2, r2, #16
 800f31c:	eb02 4224 	add.w	r2, r2, r4, asr #16
 800f320:	b2a4      	uxth	r4, r4
 800f322:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f326:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800f32a:	f845 2b04 	str.w	r2, [r5], #4
 800f32e:	e7ee      	b.n	800f30e <__mdiff+0x8c>
 800f330:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f334:	b90b      	cbnz	r3, 800f33a <__mdiff+0xb8>
 800f336:	3e01      	subs	r6, #1
 800f338:	e7fa      	b.n	800f330 <__mdiff+0xae>
 800f33a:	6106      	str	r6, [r0, #16]
 800f33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f340 <__ulp>:
 800f340:	4b10      	ldr	r3, [pc, #64]	; (800f384 <__ulp+0x44>)
 800f342:	400b      	ands	r3, r1
 800f344:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f348:	2b00      	cmp	r3, #0
 800f34a:	dd02      	ble.n	800f352 <__ulp+0x12>
 800f34c:	2000      	movs	r0, #0
 800f34e:	4619      	mov	r1, r3
 800f350:	4770      	bx	lr
 800f352:	425b      	negs	r3, r3
 800f354:	151b      	asrs	r3, r3, #20
 800f356:	2b13      	cmp	r3, #19
 800f358:	f04f 0000 	mov.w	r0, #0
 800f35c:	f04f 0100 	mov.w	r1, #0
 800f360:	dc04      	bgt.n	800f36c <__ulp+0x2c>
 800f362:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f366:	fa42 f103 	asr.w	r1, r2, r3
 800f36a:	4770      	bx	lr
 800f36c:	2b32      	cmp	r3, #50	; 0x32
 800f36e:	f04f 0201 	mov.w	r2, #1
 800f372:	bfda      	itte	le
 800f374:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 800f378:	fa02 f303 	lslle.w	r3, r2, r3
 800f37c:	4613      	movgt	r3, r2
 800f37e:	4618      	mov	r0, r3
 800f380:	4770      	bx	lr
 800f382:	bf00      	nop
 800f384:	7ff00000 	.word	0x7ff00000

0800f388 <__b2d>:
 800f388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f38c:	6905      	ldr	r5, [r0, #16]
 800f38e:	f100 0714 	add.w	r7, r0, #20
 800f392:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f396:	4688      	mov	r8, r1
 800f398:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f39c:	4620      	mov	r0, r4
 800f39e:	f7ff fdcc 	bl	800ef3a <__hi0bits>
 800f3a2:	f1c0 0320 	rsb	r3, r0, #32
 800f3a6:	280a      	cmp	r0, #10
 800f3a8:	f1a5 0604 	sub.w	r6, r5, #4
 800f3ac:	f8c8 3000 	str.w	r3, [r8]
 800f3b0:	dc11      	bgt.n	800f3d6 <__b2d+0x4e>
 800f3b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800f3b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800f3ba:	42be      	cmp	r6, r7
 800f3bc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800f3c0:	bf8c      	ite	hi
 800f3c2:	f855 1c08 	ldrhi.w	r1, [r5, #-8]
 800f3c6:	2100      	movls	r1, #0
 800f3c8:	3015      	adds	r0, #21
 800f3ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f3ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800f3d2:	4084      	lsls	r4, r0
 800f3d4:	e01b      	b.n	800f40e <__b2d+0x86>
 800f3d6:	42be      	cmp	r6, r7
 800f3d8:	bf86      	itte	hi
 800f3da:	f1a5 0608 	subhi.w	r6, r5, #8
 800f3de:	f855 1c08 	ldrhi.w	r1, [r5, #-8]
 800f3e2:	2100      	movls	r1, #0
 800f3e4:	f1b0 050b 	subs.w	r5, r0, #11
 800f3e8:	d014      	beq.n	800f414 <__b2d+0x8c>
 800f3ea:	40ac      	lsls	r4, r5
 800f3ec:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800f3f0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f3f4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f3f8:	fa21 fe00 	lsr.w	lr, r1, r0
 800f3fc:	42be      	cmp	r6, r7
 800f3fe:	ea44 030e 	orr.w	r3, r4, lr
 800f402:	bf8c      	ite	hi
 800f404:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f408:	2400      	movls	r4, #0
 800f40a:	40c4      	lsrs	r4, r0
 800f40c:	40a9      	lsls	r1, r5
 800f40e:	ea44 0201 	orr.w	r2, r4, r1
 800f412:	e004      	b.n	800f41e <__b2d+0x96>
 800f414:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f418:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f41c:	460a      	mov	r2, r1
 800f41e:	4610      	mov	r0, r2
 800f420:	4619      	mov	r1, r3
 800f422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f426 <__d2b>:
 800f426:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f42a:	2101      	movs	r1, #1
 800f42c:	461d      	mov	r5, r3
 800f42e:	9f08      	ldr	r7, [sp, #32]
 800f430:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f432:	4614      	mov	r4, r2
 800f434:	f7ff fcb7 	bl	800eda6 <_Balloc>
 800f438:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f43c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f440:	4680      	mov	r8, r0
 800f442:	b10d      	cbz	r5, 800f448 <__d2b+0x22>
 800f444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f448:	9301      	str	r3, [sp, #4]
 800f44a:	b1ec      	cbz	r4, 800f488 <__d2b+0x62>
 800f44c:	a802      	add	r0, sp, #8
 800f44e:	f840 4d08 	str.w	r4, [r0, #-8]!
 800f452:	f7ff fd92 	bl	800ef7a <__lo0bits>
 800f456:	9b00      	ldr	r3, [sp, #0]
 800f458:	b150      	cbz	r0, 800f470 <__d2b+0x4a>
 800f45a:	9a01      	ldr	r2, [sp, #4]
 800f45c:	f1c0 0120 	rsb	r1, r0, #32
 800f460:	fa02 f101 	lsl.w	r1, r2, r1
 800f464:	430b      	orrs	r3, r1
 800f466:	40c2      	lsrs	r2, r0
 800f468:	f8c8 3014 	str.w	r3, [r8, #20]
 800f46c:	9201      	str	r2, [sp, #4]
 800f46e:	e001      	b.n	800f474 <__d2b+0x4e>
 800f470:	f8c8 3014 	str.w	r3, [r8, #20]
 800f474:	9b01      	ldr	r3, [sp, #4]
 800f476:	f8c8 3018 	str.w	r3, [r8, #24]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	bf14      	ite	ne
 800f47e:	2402      	movne	r4, #2
 800f480:	2401      	moveq	r4, #1
 800f482:	f8c8 4010 	str.w	r4, [r8, #16]
 800f486:	e009      	b.n	800f49c <__d2b+0x76>
 800f488:	a801      	add	r0, sp, #4
 800f48a:	f7ff fd76 	bl	800ef7a <__lo0bits>
 800f48e:	2401      	movs	r4, #1
 800f490:	9b01      	ldr	r3, [sp, #4]
 800f492:	f8c8 3014 	str.w	r3, [r8, #20]
 800f496:	f8c8 4010 	str.w	r4, [r8, #16]
 800f49a:	3020      	adds	r0, #32
 800f49c:	b135      	cbz	r5, 800f4ac <__d2b+0x86>
 800f49e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f4a2:	4405      	add	r5, r0
 800f4a4:	603d      	str	r5, [r7, #0]
 800f4a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f4aa:	e009      	b.n	800f4c0 <__d2b+0x9a>
 800f4ac:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f4b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f4b4:	6038      	str	r0, [r7, #0]
 800f4b6:	6918      	ldr	r0, [r3, #16]
 800f4b8:	f7ff fd3f 	bl	800ef3a <__hi0bits>
 800f4bc:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800f4c0:	6030      	str	r0, [r6, #0]
 800f4c2:	4640      	mov	r0, r8
 800f4c4:	b002      	add	sp, #8
 800f4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f4ca <__ratio>:
 800f4ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4ce:	4688      	mov	r8, r1
 800f4d0:	4669      	mov	r1, sp
 800f4d2:	4681      	mov	r9, r0
 800f4d4:	f7ff ff58 	bl	800f388 <__b2d>
 800f4d8:	460f      	mov	r7, r1
 800f4da:	4606      	mov	r6, r0
 800f4dc:	a901      	add	r1, sp, #4
 800f4de:	4640      	mov	r0, r8
 800f4e0:	f7ff ff52 	bl	800f388 <__b2d>
 800f4e4:	9a01      	ldr	r2, [sp, #4]
 800f4e6:	9b00      	ldr	r3, [sp, #0]
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	1a9b      	subs	r3, r3, r2
 800f4ec:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f4f0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f4f4:	1a52      	subs	r2, r2, r1
 800f4f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	bfc8      	it	gt
 800f4fe:	eb07 5703 	addgt.w	r7, r7, r3, lsl #20
 800f502:	4604      	mov	r4, r0
 800f504:	bfd8      	it	le
 800f506:	eba5 5503 	suble.w	r5, r5, r3, lsl #20
 800f50a:	4630      	mov	r0, r6
 800f50c:	4639      	mov	r1, r7
 800f50e:	4622      	mov	r2, r4
 800f510:	462b      	mov	r3, r5
 800f512:	f7fc fbcd 	bl	800bcb0 <__aeabi_ddiv>
 800f516:	b003      	add	sp, #12
 800f518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f51c <__copybits>:
 800f51c:	3901      	subs	r1, #1
 800f51e:	b510      	push	{r4, lr}
 800f520:	1149      	asrs	r1, r1, #5
 800f522:	6914      	ldr	r4, [r2, #16]
 800f524:	3101      	adds	r1, #1
 800f526:	f102 0314 	add.w	r3, r2, #20
 800f52a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f52e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f532:	42a3      	cmp	r3, r4
 800f534:	4602      	mov	r2, r0
 800f536:	d204      	bcs.n	800f542 <__copybits+0x26>
 800f538:	f853 2b04 	ldr.w	r2, [r3], #4
 800f53c:	f840 2b04 	str.w	r2, [r0], #4
 800f540:	e7f7      	b.n	800f532 <__copybits+0x16>
 800f542:	428a      	cmp	r2, r1
 800f544:	d203      	bcs.n	800f54e <__copybits+0x32>
 800f546:	2300      	movs	r3, #0
 800f548:	f842 3b04 	str.w	r3, [r2], #4
 800f54c:	e7f9      	b.n	800f542 <__copybits+0x26>
 800f54e:	bd10      	pop	{r4, pc}

0800f550 <__any_on>:
 800f550:	f100 0214 	add.w	r2, r0, #20
 800f554:	6900      	ldr	r0, [r0, #16]
 800f556:	114b      	asrs	r3, r1, #5
 800f558:	4283      	cmp	r3, r0
 800f55a:	b510      	push	{r4, lr}
 800f55c:	dc0c      	bgt.n	800f578 <__any_on+0x28>
 800f55e:	da0c      	bge.n	800f57a <__any_on+0x2a>
 800f560:	f011 011f 	ands.w	r1, r1, #31
 800f564:	d009      	beq.n	800f57a <__any_on+0x2a>
 800f566:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f56a:	fa24 f001 	lsr.w	r0, r4, r1
 800f56e:	fa00 f101 	lsl.w	r1, r0, r1
 800f572:	42a1      	cmp	r1, r4
 800f574:	d10c      	bne.n	800f590 <__any_on+0x40>
 800f576:	e000      	b.n	800f57a <__any_on+0x2a>
 800f578:	4603      	mov	r3, r0
 800f57a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f57e:	4293      	cmp	r3, r2
 800f580:	d904      	bls.n	800f58c <__any_on+0x3c>
 800f582:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f586:	2900      	cmp	r1, #0
 800f588:	d0f9      	beq.n	800f57e <__any_on+0x2e>
 800f58a:	e001      	b.n	800f590 <__any_on+0x40>
 800f58c:	2000      	movs	r0, #0
 800f58e:	bd10      	pop	{r4, pc}
 800f590:	2001      	movs	r0, #1
 800f592:	bd10      	pop	{r4, pc}

0800f594 <_calloc_r>:
 800f594:	b538      	push	{r3, r4, r5, lr}
 800f596:	fb02 f401 	mul.w	r4, r2, r1
 800f59a:	4621      	mov	r1, r4
 800f59c:	f000 f84c 	bl	800f638 <_malloc_r>
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	b118      	cbz	r0, 800f5ac <_calloc_r+0x18>
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	4622      	mov	r2, r4
 800f5a8:	f7fc fcf1 	bl	800bf8e <memset>
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	bd38      	pop	{r3, r4, r5, pc}

0800f5b0 <_free_r>:
 800f5b0:	b530      	push	{r4, r5, lr}
 800f5b2:	2900      	cmp	r1, #0
 800f5b4:	d03d      	beq.n	800f632 <_free_r+0x82>
 800f5b6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800f5ba:	1f0b      	subs	r3, r1, #4
 800f5bc:	491d      	ldr	r1, [pc, #116]	; (800f634 <_free_r+0x84>)
 800f5be:	2a00      	cmp	r2, #0
 800f5c0:	bfb8      	it	lt
 800f5c2:	189b      	addlt	r3, r3, r2
 800f5c4:	680a      	ldr	r2, [r1, #0]
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	b912      	cbnz	r2, 800f5d0 <_free_r+0x20>
 800f5ca:	605a      	str	r2, [r3, #4]
 800f5cc:	600b      	str	r3, [r1, #0]
 800f5ce:	bd30      	pop	{r4, r5, pc}
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d20d      	bcs.n	800f5f0 <_free_r+0x40>
 800f5d4:	6819      	ldr	r1, [r3, #0]
 800f5d6:	1858      	adds	r0, r3, r1
 800f5d8:	4290      	cmp	r0, r2
 800f5da:	bf01      	itttt	eq
 800f5dc:	585a      	ldreq	r2, [r3, r1]
 800f5de:	1852      	addeq	r2, r2, r1
 800f5e0:	601a      	streq	r2, [r3, #0]
 800f5e2:	6842      	ldreq	r2, [r0, #4]
 800f5e4:	605a      	str	r2, [r3, #4]
 800f5e6:	6023      	str	r3, [r4, #0]
 800f5e8:	bd30      	pop	{r4, r5, pc}
 800f5ea:	4299      	cmp	r1, r3
 800f5ec:	d803      	bhi.n	800f5f6 <_free_r+0x46>
 800f5ee:	460a      	mov	r2, r1
 800f5f0:	6851      	ldr	r1, [r2, #4]
 800f5f2:	2900      	cmp	r1, #0
 800f5f4:	d1f9      	bne.n	800f5ea <_free_r+0x3a>
 800f5f6:	6814      	ldr	r4, [r2, #0]
 800f5f8:	1915      	adds	r5, r2, r4
 800f5fa:	429d      	cmp	r5, r3
 800f5fc:	d10a      	bne.n	800f614 <_free_r+0x64>
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4423      	add	r3, r4
 800f602:	18d0      	adds	r0, r2, r3
 800f604:	4288      	cmp	r0, r1
 800f606:	6013      	str	r3, [r2, #0]
 800f608:	d113      	bne.n	800f632 <_free_r+0x82>
 800f60a:	6808      	ldr	r0, [r1, #0]
 800f60c:	4403      	add	r3, r0
 800f60e:	6013      	str	r3, [r2, #0]
 800f610:	684b      	ldr	r3, [r1, #4]
 800f612:	e00d      	b.n	800f630 <_free_r+0x80>
 800f614:	d902      	bls.n	800f61c <_free_r+0x6c>
 800f616:	230c      	movs	r3, #12
 800f618:	6003      	str	r3, [r0, #0]
 800f61a:	bd30      	pop	{r4, r5, pc}
 800f61c:	681c      	ldr	r4, [r3, #0]
 800f61e:	1918      	adds	r0, r3, r4
 800f620:	4288      	cmp	r0, r1
 800f622:	bf04      	itt	eq
 800f624:	6808      	ldreq	r0, [r1, #0]
 800f626:	6849      	ldreq	r1, [r1, #4]
 800f628:	6059      	str	r1, [r3, #4]
 800f62a:	bf04      	itt	eq
 800f62c:	1900      	addeq	r0, r0, r4
 800f62e:	6018      	streq	r0, [r3, #0]
 800f630:	6053      	str	r3, [r2, #4]
 800f632:	bd30      	pop	{r4, r5, pc}
 800f634:	200004a4 	.word	0x200004a4

0800f638 <_malloc_r>:
 800f638:	b570      	push	{r4, r5, r6, lr}
 800f63a:	1ccc      	adds	r4, r1, #3
 800f63c:	f024 0403 	bic.w	r4, r4, #3
 800f640:	3408      	adds	r4, #8
 800f642:	2c0c      	cmp	r4, #12
 800f644:	bf38      	it	cc
 800f646:	240c      	movcc	r4, #12
 800f648:	2c00      	cmp	r4, #0
 800f64a:	4606      	mov	r6, r0
 800f64c:	da03      	bge.n	800f656 <_malloc_r+0x1e>
 800f64e:	230c      	movs	r3, #12
 800f650:	6033      	str	r3, [r6, #0]
 800f652:	2000      	movs	r0, #0
 800f654:	bd70      	pop	{r4, r5, r6, pc}
 800f656:	428c      	cmp	r4, r1
 800f658:	d3f9      	bcc.n	800f64e <_malloc_r+0x16>
 800f65a:	4a20      	ldr	r2, [pc, #128]	; (800f6dc <_malloc_r+0xa4>)
 800f65c:	6813      	ldr	r3, [r2, #0]
 800f65e:	4610      	mov	r0, r2
 800f660:	4619      	mov	r1, r3
 800f662:	b1a1      	cbz	r1, 800f68e <_malloc_r+0x56>
 800f664:	680a      	ldr	r2, [r1, #0]
 800f666:	1b12      	subs	r2, r2, r4
 800f668:	d40e      	bmi.n	800f688 <_malloc_r+0x50>
 800f66a:	2a0b      	cmp	r2, #11
 800f66c:	d903      	bls.n	800f676 <_malloc_r+0x3e>
 800f66e:	600a      	str	r2, [r1, #0]
 800f670:	188b      	adds	r3, r1, r2
 800f672:	508c      	str	r4, [r1, r2]
 800f674:	e01f      	b.n	800f6b6 <_malloc_r+0x7e>
 800f676:	428b      	cmp	r3, r1
 800f678:	bf0d      	iteet	eq
 800f67a:	685a      	ldreq	r2, [r3, #4]
 800f67c:	684a      	ldrne	r2, [r1, #4]
 800f67e:	605a      	strne	r2, [r3, #4]
 800f680:	6002      	streq	r2, [r0, #0]
 800f682:	bf18      	it	ne
 800f684:	460b      	movne	r3, r1
 800f686:	e016      	b.n	800f6b6 <_malloc_r+0x7e>
 800f688:	460b      	mov	r3, r1
 800f68a:	6849      	ldr	r1, [r1, #4]
 800f68c:	e7e9      	b.n	800f662 <_malloc_r+0x2a>
 800f68e:	4d14      	ldr	r5, [pc, #80]	; (800f6e0 <_malloc_r+0xa8>)
 800f690:	682b      	ldr	r3, [r5, #0]
 800f692:	b91b      	cbnz	r3, 800f69c <_malloc_r+0x64>
 800f694:	4630      	mov	r0, r6
 800f696:	f000 f971 	bl	800f97c <_sbrk_r>
 800f69a:	6028      	str	r0, [r5, #0]
 800f69c:	4630      	mov	r0, r6
 800f69e:	4621      	mov	r1, r4
 800f6a0:	f000 f96c 	bl	800f97c <_sbrk_r>
 800f6a4:	1c42      	adds	r2, r0, #1
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	d0d1      	beq.n	800f64e <_malloc_r+0x16>
 800f6aa:	1cc5      	adds	r5, r0, #3
 800f6ac:	f025 0503 	bic.w	r5, r5, #3
 800f6b0:	4285      	cmp	r5, r0
 800f6b2:	d10a      	bne.n	800f6ca <_malloc_r+0x92>
 800f6b4:	601c      	str	r4, [r3, #0]
 800f6b6:	f103 000b 	add.w	r0, r3, #11
 800f6ba:	1d1a      	adds	r2, r3, #4
 800f6bc:	f020 0007 	bic.w	r0, r0, #7
 800f6c0:	1a82      	subs	r2, r0, r2
 800f6c2:	d00a      	beq.n	800f6da <_malloc_r+0xa2>
 800f6c4:	4251      	negs	r1, r2
 800f6c6:	5099      	str	r1, [r3, r2]
 800f6c8:	bd70      	pop	{r4, r5, r6, pc}
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	1ae9      	subs	r1, r5, r3
 800f6ce:	f000 f955 	bl	800f97c <_sbrk_r>
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	d0bb      	beq.n	800f64e <_malloc_r+0x16>
 800f6d6:	462b      	mov	r3, r5
 800f6d8:	e7ec      	b.n	800f6b4 <_malloc_r+0x7c>
 800f6da:	bd70      	pop	{r4, r5, r6, pc}
 800f6dc:	200004a4 	.word	0x200004a4
 800f6e0:	200004a0 	.word	0x200004a0

0800f6e4 <__ssputs_r>:
 800f6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6e8:	688e      	ldr	r6, [r1, #8]
 800f6ea:	42b3      	cmp	r3, r6
 800f6ec:	4682      	mov	sl, r0
 800f6ee:	460c      	mov	r4, r1
 800f6f0:	4690      	mov	r8, r2
 800f6f2:	4699      	mov	r9, r3
 800f6f4:	d340      	bcc.n	800f778 <__ssputs_r+0x94>
 800f6f6:	898a      	ldrh	r2, [r1, #12]
 800f6f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f6fc:	d03a      	beq.n	800f774 <__ssputs_r+0x90>
 800f6fe:	6825      	ldr	r5, [r4, #0]
 800f700:	6909      	ldr	r1, [r1, #16]
 800f702:	1a6f      	subs	r7, r5, r1
 800f704:	6965      	ldr	r5, [r4, #20]
 800f706:	2302      	movs	r3, #2
 800f708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f70c:	fb95 f5f3 	sdiv	r5, r5, r3
 800f710:	1c7b      	adds	r3, r7, #1
 800f712:	444b      	add	r3, r9
 800f714:	429d      	cmp	r5, r3
 800f716:	bf38      	it	cc
 800f718:	461d      	movcc	r5, r3
 800f71a:	0553      	lsls	r3, r2, #21
 800f71c:	d50f      	bpl.n	800f73e <__ssputs_r+0x5a>
 800f71e:	4629      	mov	r1, r5
 800f720:	f7ff ff8a 	bl	800f638 <_malloc_r>
 800f724:	4606      	mov	r6, r0
 800f726:	b198      	cbz	r0, 800f750 <__ssputs_r+0x6c>
 800f728:	6921      	ldr	r1, [r4, #16]
 800f72a:	463a      	mov	r2, r7
 800f72c:	f7fc fc24 	bl	800bf78 <memcpy>
 800f730:	89a3      	ldrh	r3, [r4, #12]
 800f732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f73a:	81a3      	strh	r3, [r4, #12]
 800f73c:	e013      	b.n	800f766 <__ssputs_r+0x82>
 800f73e:	462a      	mov	r2, r5
 800f740:	f000 f961 	bl	800fa06 <_realloc_r>
 800f744:	4606      	mov	r6, r0
 800f746:	b970      	cbnz	r0, 800f766 <__ssputs_r+0x82>
 800f748:	4650      	mov	r0, sl
 800f74a:	6921      	ldr	r1, [r4, #16]
 800f74c:	f7ff ff30 	bl	800f5b0 <_free_r>
 800f750:	230c      	movs	r3, #12
 800f752:	f8ca 3000 	str.w	r3, [sl]
 800f756:	89a3      	ldrh	r3, [r4, #12]
 800f758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f75c:	81a3      	strh	r3, [r4, #12]
 800f75e:	f04f 30ff 	mov.w	r0, #4294967295
 800f762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f766:	6126      	str	r6, [r4, #16]
 800f768:	6165      	str	r5, [r4, #20]
 800f76a:	443e      	add	r6, r7
 800f76c:	1bed      	subs	r5, r5, r7
 800f76e:	6026      	str	r6, [r4, #0]
 800f770:	60a5      	str	r5, [r4, #8]
 800f772:	464e      	mov	r6, r9
 800f774:	45b1      	cmp	r9, r6
 800f776:	d200      	bcs.n	800f77a <__ssputs_r+0x96>
 800f778:	464e      	mov	r6, r9
 800f77a:	4632      	mov	r2, r6
 800f77c:	6820      	ldr	r0, [r4, #0]
 800f77e:	4641      	mov	r1, r8
 800f780:	f000 f926 	bl	800f9d0 <memmove>
 800f784:	68a3      	ldr	r3, [r4, #8]
 800f786:	1b9b      	subs	r3, r3, r6
 800f788:	60a3      	str	r3, [r4, #8]
 800f78a:	6823      	ldr	r3, [r4, #0]
 800f78c:	441e      	add	r6, r3
 800f78e:	6026      	str	r6, [r4, #0]
 800f790:	2000      	movs	r0, #0
 800f792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800f798 <_svfiprintf_r>:
 800f798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f79c:	b09d      	sub	sp, #116	; 0x74
 800f79e:	4606      	mov	r6, r0
 800f7a0:	9303      	str	r3, [sp, #12]
 800f7a2:	898b      	ldrh	r3, [r1, #12]
 800f7a4:	061c      	lsls	r4, r3, #24
 800f7a6:	460d      	mov	r5, r1
 800f7a8:	4690      	mov	r8, r2
 800f7aa:	d50c      	bpl.n	800f7c6 <_svfiprintf_r+0x2e>
 800f7ac:	690b      	ldr	r3, [r1, #16]
 800f7ae:	b953      	cbnz	r3, 800f7c6 <_svfiprintf_r+0x2e>
 800f7b0:	2140      	movs	r1, #64	; 0x40
 800f7b2:	f7ff ff41 	bl	800f638 <_malloc_r>
 800f7b6:	6028      	str	r0, [r5, #0]
 800f7b8:	6128      	str	r0, [r5, #16]
 800f7ba:	b910      	cbnz	r0, 800f7c2 <_svfiprintf_r+0x2a>
 800f7bc:	230c      	movs	r3, #12
 800f7be:	6033      	str	r3, [r6, #0]
 800f7c0:	e0cc      	b.n	800f95c <_svfiprintf_r+0x1c4>
 800f7c2:	2340      	movs	r3, #64	; 0x40
 800f7c4:	616b      	str	r3, [r5, #20]
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7ca:	2320      	movs	r3, #32
 800f7cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7d0:	2330      	movs	r3, #48	; 0x30
 800f7d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7d6:	4643      	mov	r3, r8
 800f7d8:	461c      	mov	r4, r3
 800f7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7de:	b91a      	cbnz	r2, 800f7e8 <_svfiprintf_r+0x50>
 800f7e0:	ebb4 0908 	subs.w	r9, r4, r8
 800f7e4:	d00f      	beq.n	800f806 <_svfiprintf_r+0x6e>
 800f7e6:	e002      	b.n	800f7ee <_svfiprintf_r+0x56>
 800f7e8:	2a25      	cmp	r2, #37	; 0x25
 800f7ea:	d1f5      	bne.n	800f7d8 <_svfiprintf_r+0x40>
 800f7ec:	e7f8      	b.n	800f7e0 <_svfiprintf_r+0x48>
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	4629      	mov	r1, r5
 800f7f2:	4642      	mov	r2, r8
 800f7f4:	464b      	mov	r3, r9
 800f7f6:	f7ff ff75 	bl	800f6e4 <__ssputs_r>
 800f7fa:	3001      	adds	r0, #1
 800f7fc:	f000 80a9 	beq.w	800f952 <_svfiprintf_r+0x1ba>
 800f800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f802:	444b      	add	r3, r9
 800f804:	9309      	str	r3, [sp, #36]	; 0x24
 800f806:	7823      	ldrb	r3, [r4, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	f000 80a2 	beq.w	800f952 <_svfiprintf_r+0x1ba>
 800f80e:	2300      	movs	r3, #0
 800f810:	f04f 32ff 	mov.w	r2, #4294967295
 800f814:	9304      	str	r3, [sp, #16]
 800f816:	9307      	str	r3, [sp, #28]
 800f818:	9205      	str	r2, [sp, #20]
 800f81a:	9306      	str	r3, [sp, #24]
 800f81c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f820:	931a      	str	r3, [sp, #104]	; 0x68
 800f822:	f104 0801 	add.w	r8, r4, #1
 800f826:	4644      	mov	r4, r8
 800f828:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800f974 <_svfiprintf_r+0x1dc>
 800f82c:	7821      	ldrb	r1, [r4, #0]
 800f82e:	4648      	mov	r0, r9
 800f830:	2205      	movs	r2, #5
 800f832:	f7ff faa9 	bl	800ed88 <memchr>
 800f836:	f108 0801 	add.w	r8, r8, #1
 800f83a:	9b04      	ldr	r3, [sp, #16]
 800f83c:	b130      	cbz	r0, 800f84c <_svfiprintf_r+0xb4>
 800f83e:	ebc9 0000 	rsb	r0, r9, r0
 800f842:	2201      	movs	r2, #1
 800f844:	4082      	lsls	r2, r0
 800f846:	4313      	orrs	r3, r2
 800f848:	9304      	str	r3, [sp, #16]
 800f84a:	e7ec      	b.n	800f826 <_svfiprintf_r+0x8e>
 800f84c:	06d8      	lsls	r0, r3, #27
 800f84e:	bf44      	itt	mi
 800f850:	2220      	movmi	r2, #32
 800f852:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f856:	0719      	lsls	r1, r3, #28
 800f858:	bf44      	itt	mi
 800f85a:	222b      	movmi	r2, #43	; 0x2b
 800f85c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f860:	7822      	ldrb	r2, [r4, #0]
 800f862:	2a2a      	cmp	r2, #42	; 0x2a
 800f864:	d002      	beq.n	800f86c <_svfiprintf_r+0xd4>
 800f866:	9907      	ldr	r1, [sp, #28]
 800f868:	4623      	mov	r3, r4
 800f86a:	e00e      	b.n	800f88a <_svfiprintf_r+0xf2>
 800f86c:	9a03      	ldr	r2, [sp, #12]
 800f86e:	1d11      	adds	r1, r2, #4
 800f870:	6812      	ldr	r2, [r2, #0]
 800f872:	9103      	str	r1, [sp, #12]
 800f874:	2a00      	cmp	r2, #0
 800f876:	bfbb      	ittet	lt
 800f878:	4252      	neglt	r2, r2
 800f87a:	f043 0302 	orrlt.w	r3, r3, #2
 800f87e:	9207      	strge	r2, [sp, #28]
 800f880:	9207      	strlt	r2, [sp, #28]
 800f882:	bfb8      	it	lt
 800f884:	9304      	strlt	r3, [sp, #16]
 800f886:	3401      	adds	r4, #1
 800f888:	e00a      	b.n	800f8a0 <_svfiprintf_r+0x108>
 800f88a:	461c      	mov	r4, r3
 800f88c:	3301      	adds	r3, #1
 800f88e:	7822      	ldrb	r2, [r4, #0]
 800f890:	3a30      	subs	r2, #48	; 0x30
 800f892:	2a09      	cmp	r2, #9
 800f894:	d803      	bhi.n	800f89e <_svfiprintf_r+0x106>
 800f896:	200a      	movs	r0, #10
 800f898:	fb00 2101 	mla	r1, r0, r1, r2
 800f89c:	e7f5      	b.n	800f88a <_svfiprintf_r+0xf2>
 800f89e:	9107      	str	r1, [sp, #28]
 800f8a0:	7823      	ldrb	r3, [r4, #0]
 800f8a2:	2b2e      	cmp	r3, #46	; 0x2e
 800f8a4:	d11a      	bne.n	800f8dc <_svfiprintf_r+0x144>
 800f8a6:	7863      	ldrb	r3, [r4, #1]
 800f8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800f8aa:	d10a      	bne.n	800f8c2 <_svfiprintf_r+0x12a>
 800f8ac:	9b03      	ldr	r3, [sp, #12]
 800f8ae:	1d1a      	adds	r2, r3, #4
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	9203      	str	r2, [sp, #12]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	bfb8      	it	lt
 800f8b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8bc:	3402      	adds	r4, #2
 800f8be:	9305      	str	r3, [sp, #20]
 800f8c0:	e00c      	b.n	800f8dc <_svfiprintf_r+0x144>
 800f8c2:	1c61      	adds	r1, r4, #1
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	3101      	adds	r1, #1
 800f8ca:	7823      	ldrb	r3, [r4, #0]
 800f8cc:	3b30      	subs	r3, #48	; 0x30
 800f8ce:	2b09      	cmp	r3, #9
 800f8d0:	d803      	bhi.n	800f8da <_svfiprintf_r+0x142>
 800f8d2:	200a      	movs	r0, #10
 800f8d4:	fb00 3202 	mla	r2, r0, r2, r3
 800f8d8:	e7f5      	b.n	800f8c6 <_svfiprintf_r+0x12e>
 800f8da:	9205      	str	r2, [sp, #20]
 800f8dc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800f978 <_svfiprintf_r+0x1e0>
 800f8e0:	7821      	ldrb	r1, [r4, #0]
 800f8e2:	4640      	mov	r0, r8
 800f8e4:	2203      	movs	r2, #3
 800f8e6:	f7ff fa4f 	bl	800ed88 <memchr>
 800f8ea:	b138      	cbz	r0, 800f8fc <_svfiprintf_r+0x164>
 800f8ec:	9a04      	ldr	r2, [sp, #16]
 800f8ee:	ebc8 0000 	rsb	r0, r8, r0
 800f8f2:	2340      	movs	r3, #64	; 0x40
 800f8f4:	4083      	lsls	r3, r0
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	9304      	str	r3, [sp, #16]
 800f8fa:	3401      	adds	r4, #1
 800f8fc:	7821      	ldrb	r1, [r4, #0]
 800f8fe:	481a      	ldr	r0, [pc, #104]	; (800f968 <_svfiprintf_r+0x1d0>)
 800f900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f904:	2206      	movs	r2, #6
 800f906:	f104 0801 	add.w	r8, r4, #1
 800f90a:	f7ff fa3d 	bl	800ed88 <memchr>
 800f90e:	b188      	cbz	r0, 800f934 <_svfiprintf_r+0x19c>
 800f910:	4b16      	ldr	r3, [pc, #88]	; (800f96c <_svfiprintf_r+0x1d4>)
 800f912:	b933      	cbnz	r3, 800f922 <_svfiprintf_r+0x18a>
 800f914:	9b03      	ldr	r3, [sp, #12]
 800f916:	3307      	adds	r3, #7
 800f918:	f023 0307 	bic.w	r3, r3, #7
 800f91c:	3308      	adds	r3, #8
 800f91e:	9303      	str	r3, [sp, #12]
 800f920:	e013      	b.n	800f94a <_svfiprintf_r+0x1b2>
 800f922:	ab03      	add	r3, sp, #12
 800f924:	9300      	str	r3, [sp, #0]
 800f926:	4630      	mov	r0, r6
 800f928:	a904      	add	r1, sp, #16
 800f92a:	462a      	mov	r2, r5
 800f92c:	4b10      	ldr	r3, [pc, #64]	; (800f970 <_svfiprintf_r+0x1d8>)
 800f92e:	f7fc fbc7 	bl	800c0c0 <_printf_float>
 800f932:	e007      	b.n	800f944 <_svfiprintf_r+0x1ac>
 800f934:	ab03      	add	r3, sp, #12
 800f936:	9300      	str	r3, [sp, #0]
 800f938:	4630      	mov	r0, r6
 800f93a:	a904      	add	r1, sp, #16
 800f93c:	462a      	mov	r2, r5
 800f93e:	4b0c      	ldr	r3, [pc, #48]	; (800f970 <_svfiprintf_r+0x1d8>)
 800f940:	f7fc fe78 	bl	800c634 <_printf_i>
 800f944:	1c42      	adds	r2, r0, #1
 800f946:	4607      	mov	r7, r0
 800f948:	d003      	beq.n	800f952 <_svfiprintf_r+0x1ba>
 800f94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f94c:	443b      	add	r3, r7
 800f94e:	9309      	str	r3, [sp, #36]	; 0x24
 800f950:	e741      	b.n	800f7d6 <_svfiprintf_r+0x3e>
 800f952:	89ab      	ldrh	r3, [r5, #12]
 800f954:	065b      	lsls	r3, r3, #25
 800f956:	d401      	bmi.n	800f95c <_svfiprintf_r+0x1c4>
 800f958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f95a:	e001      	b.n	800f960 <_svfiprintf_r+0x1c8>
 800f95c:	f04f 30ff 	mov.w	r0, #4294967295
 800f960:	b01d      	add	sp, #116	; 0x74
 800f962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f966:	bf00      	nop
 800f968:	080106c6 	.word	0x080106c6
 800f96c:	0800c0c1 	.word	0x0800c0c1
 800f970:	0800f6e5 	.word	0x0800f6e5
 800f974:	080106bc 	.word	0x080106bc
 800f978:	080106c2 	.word	0x080106c2

0800f97c <_sbrk_r>:
 800f97c:	b538      	push	{r3, r4, r5, lr}
 800f97e:	4c06      	ldr	r4, [pc, #24]	; (800f998 <_sbrk_r+0x1c>)
 800f980:	2300      	movs	r3, #0
 800f982:	4605      	mov	r5, r0
 800f984:	4608      	mov	r0, r1
 800f986:	6023      	str	r3, [r4, #0]
 800f988:	f7f2 fae6 	bl	8001f58 <_sbrk>
 800f98c:	1c43      	adds	r3, r0, #1
 800f98e:	d102      	bne.n	800f996 <_sbrk_r+0x1a>
 800f990:	6823      	ldr	r3, [r4, #0]
 800f992:	b103      	cbz	r3, 800f996 <_sbrk_r+0x1a>
 800f994:	602b      	str	r3, [r5, #0]
 800f996:	bd38      	pop	{r3, r4, r5, pc}
 800f998:	20000b74 	.word	0x20000b74

0800f99c <strncmp>:
 800f99c:	b570      	push	{r4, r5, r6, lr}
 800f99e:	b1aa      	cbz	r2, 800f9cc <strncmp+0x30>
 800f9a0:	1e45      	subs	r5, r0, #1
 800f9a2:	3901      	subs	r1, #1
 800f9a4:	786b      	ldrb	r3, [r5, #1]
 800f9a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f9aa:	42a3      	cmp	r3, r4
 800f9ac:	f105 0601 	add.w	r6, r5, #1
 800f9b0:	d106      	bne.n	800f9c0 <strncmp+0x24>
 800f9b2:	f06f 0401 	mvn.w	r4, #1
 800f9b6:	1b64      	subs	r4, r4, r5
 800f9b8:	4414      	add	r4, r2
 800f9ba:	42e0      	cmn	r0, r4
 800f9bc:	d102      	bne.n	800f9c4 <strncmp+0x28>
 800f9be:	461c      	mov	r4, r3
 800f9c0:	1b18      	subs	r0, r3, r4
 800f9c2:	bd70      	pop	{r4, r5, r6, pc}
 800f9c4:	4635      	mov	r5, r6
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d1ec      	bne.n	800f9a4 <strncmp+0x8>
 800f9ca:	e7f8      	b.n	800f9be <strncmp+0x22>
 800f9cc:	4610      	mov	r0, r2
 800f9ce:	bd70      	pop	{r4, r5, r6, pc}

0800f9d0 <memmove>:
 800f9d0:	4281      	cmp	r1, r0
 800f9d2:	b510      	push	{r4, lr}
 800f9d4:	eb01 0302 	add.w	r3, r1, r2
 800f9d8:	d301      	bcc.n	800f9de <memmove+0xe>
 800f9da:	1e42      	subs	r2, r0, #1
 800f9dc:	e00b      	b.n	800f9f6 <memmove+0x26>
 800f9de:	4298      	cmp	r0, r3
 800f9e0:	d2fb      	bcs.n	800f9da <memmove+0xa>
 800f9e2:	1881      	adds	r1, r0, r2
 800f9e4:	1ad2      	subs	r2, r2, r3
 800f9e6:	42d3      	cmn	r3, r2
 800f9e8:	d004      	beq.n	800f9f4 <memmove+0x24>
 800f9ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f9f2:	e7f8      	b.n	800f9e6 <memmove+0x16>
 800f9f4:	bd10      	pop	{r4, pc}
 800f9f6:	4299      	cmp	r1, r3
 800f9f8:	d004      	beq.n	800fa04 <memmove+0x34>
 800f9fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fa02:	e7f8      	b.n	800f9f6 <memmove+0x26>
 800fa04:	bd10      	pop	{r4, pc}

0800fa06 <_realloc_r>:
 800fa06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa08:	4607      	mov	r7, r0
 800fa0a:	4615      	mov	r5, r2
 800fa0c:	460e      	mov	r6, r1
 800fa0e:	b921      	cbnz	r1, 800fa1a <_realloc_r+0x14>
 800fa10:	4611      	mov	r1, r2
 800fa12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fa16:	f7ff be0f 	b.w	800f638 <_malloc_r>
 800fa1a:	b91a      	cbnz	r2, 800fa24 <_realloc_r+0x1e>
 800fa1c:	f7ff fdc8 	bl	800f5b0 <_free_r>
 800fa20:	4628      	mov	r0, r5
 800fa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa24:	f000 f815 	bl	800fa52 <_malloc_usable_size_r>
 800fa28:	42a8      	cmp	r0, r5
 800fa2a:	d20e      	bcs.n	800fa4a <_realloc_r+0x44>
 800fa2c:	4638      	mov	r0, r7
 800fa2e:	4629      	mov	r1, r5
 800fa30:	f7ff fe02 	bl	800f638 <_malloc_r>
 800fa34:	4604      	mov	r4, r0
 800fa36:	b150      	cbz	r0, 800fa4e <_realloc_r+0x48>
 800fa38:	4631      	mov	r1, r6
 800fa3a:	462a      	mov	r2, r5
 800fa3c:	f7fc fa9c 	bl	800bf78 <memcpy>
 800fa40:	4638      	mov	r0, r7
 800fa42:	4631      	mov	r1, r6
 800fa44:	f7ff fdb4 	bl	800f5b0 <_free_r>
 800fa48:	e001      	b.n	800fa4e <_realloc_r+0x48>
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa4e:	4620      	mov	r0, r4
 800fa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa52 <_malloc_usable_size_r>:
 800fa52:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800fa56:	2800      	cmp	r0, #0
 800fa58:	bfbe      	ittt	lt
 800fa5a:	1809      	addlt	r1, r1, r0
 800fa5c:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 800fa60:	18c0      	addlt	r0, r0, r3
 800fa62:	3804      	subs	r0, #4
 800fa64:	4770      	bx	lr
	...

0800fa68 <__gedf2>:
 800fa68:	f04f 3cff 	mov.w	ip, #4294967295
 800fa6c:	e006      	b.n	800fa7c <__cmpdf2+0x4>
 800fa6e:	bf00      	nop

0800fa70 <__ledf2>:
 800fa70:	f04f 0c01 	mov.w	ip, #1
 800fa74:	e002      	b.n	800fa7c <__cmpdf2+0x4>
 800fa76:	bf00      	nop

0800fa78 <__cmpdf2>:
 800fa78:	f04f 0c01 	mov.w	ip, #1
 800fa7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 800fa80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800fa84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800fa88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800fa8c:	bf18      	it	ne
 800fa8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800fa92:	d01b      	beq.n	800facc <__cmpdf2+0x54>
 800fa94:	b001      	add	sp, #4
 800fa96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800fa9a:	bf0c      	ite	eq
 800fa9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800faa0:	ea91 0f03 	teqne	r1, r3
 800faa4:	bf02      	ittt	eq
 800faa6:	ea90 0f02 	teqeq	r0, r2
 800faaa:	2000      	moveq	r0, #0
 800faac:	4770      	bxeq	lr
 800faae:	f110 0f00 	cmn.w	r0, #0
 800fab2:	ea91 0f03 	teq	r1, r3
 800fab6:	bf58      	it	pl
 800fab8:	4299      	cmppl	r1, r3
 800faba:	bf08      	it	eq
 800fabc:	4290      	cmpeq	r0, r2
 800fabe:	bf2c      	ite	cs
 800fac0:	17d8      	asrcs	r0, r3, #31
 800fac2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800fac6:	f040 0001 	orr.w	r0, r0, #1
 800faca:	4770      	bx	lr
 800facc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800fad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800fad4:	d102      	bne.n	800fadc <__cmpdf2+0x64>
 800fad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800fada:	d107      	bne.n	800faec <__cmpdf2+0x74>
 800fadc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800fae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800fae4:	d1d6      	bne.n	800fa94 <__cmpdf2+0x1c>
 800fae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800faea:	d0d3      	beq.n	800fa94 <__cmpdf2+0x1c>
 800faec:	f85d 0b04 	ldr.w	r0, [sp], #4
 800faf0:	4770      	bx	lr
 800faf2:	bf00      	nop

0800faf4 <__aeabi_cdrcmple>:
 800faf4:	4684      	mov	ip, r0
 800faf6:	4610      	mov	r0, r2
 800faf8:	4662      	mov	r2, ip
 800fafa:	468c      	mov	ip, r1
 800fafc:	4619      	mov	r1, r3
 800fafe:	4663      	mov	r3, ip
 800fb00:	e000      	b.n	800fb04 <__aeabi_cdcmpeq>
 800fb02:	bf00      	nop

0800fb04 <__aeabi_cdcmpeq>:
 800fb04:	b501      	push	{r0, lr}
 800fb06:	f7ff ffb7 	bl	800fa78 <__cmpdf2>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	bf48      	it	mi
 800fb0e:	f110 0f00 	cmnmi.w	r0, #0
 800fb12:	bd01      	pop	{r0, pc}

0800fb14 <__aeabi_dcmpeq>:
 800fb14:	f84d ed08 	str.w	lr, [sp, #-8]!
 800fb18:	f7ff fff4 	bl	800fb04 <__aeabi_cdcmpeq>
 800fb1c:	bf0c      	ite	eq
 800fb1e:	2001      	moveq	r0, #1
 800fb20:	2000      	movne	r0, #0
 800fb22:	f85d fb08 	ldr.w	pc, [sp], #8
 800fb26:	bf00      	nop

0800fb28 <__aeabi_dcmplt>:
 800fb28:	f84d ed08 	str.w	lr, [sp, #-8]!
 800fb2c:	f7ff ffea 	bl	800fb04 <__aeabi_cdcmpeq>
 800fb30:	bf34      	ite	cc
 800fb32:	2001      	movcc	r0, #1
 800fb34:	2000      	movcs	r0, #0
 800fb36:	f85d fb08 	ldr.w	pc, [sp], #8
 800fb3a:	bf00      	nop

0800fb3c <__aeabi_dcmple>:
 800fb3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800fb40:	f7ff ffe0 	bl	800fb04 <__aeabi_cdcmpeq>
 800fb44:	bf94      	ite	ls
 800fb46:	2001      	movls	r0, #1
 800fb48:	2000      	movhi	r0, #0
 800fb4a:	f85d fb08 	ldr.w	pc, [sp], #8
 800fb4e:	bf00      	nop

0800fb50 <__aeabi_dcmpge>:
 800fb50:	f84d ed08 	str.w	lr, [sp, #-8]!
 800fb54:	f7ff ffce 	bl	800faf4 <__aeabi_cdrcmple>
 800fb58:	bf94      	ite	ls
 800fb5a:	2001      	movls	r0, #1
 800fb5c:	2000      	movhi	r0, #0
 800fb5e:	f85d fb08 	ldr.w	pc, [sp], #8
 800fb62:	bf00      	nop

0800fb64 <__aeabi_dcmpgt>:
 800fb64:	f84d ed08 	str.w	lr, [sp, #-8]!
 800fb68:	f7ff ffc4 	bl	800faf4 <__aeabi_cdrcmple>
 800fb6c:	bf34      	ite	cc
 800fb6e:	2001      	movcc	r0, #1
 800fb70:	2000      	movcs	r0, #0
 800fb72:	f85d fb08 	ldr.w	pc, [sp], #8
 800fb76:	bf00      	nop

0800fb78 <__aeabi_d2iz>:
 800fb78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800fb7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800fb80:	d215      	bcs.n	800fbae <__aeabi_d2iz+0x36>
 800fb82:	d511      	bpl.n	800fba8 <__aeabi_d2iz+0x30>
 800fb84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800fb88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800fb8c:	d912      	bls.n	800fbb4 <__aeabi_d2iz+0x3c>
 800fb8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800fb92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800fb9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800fb9e:	fa23 f002 	lsr.w	r0, r3, r2
 800fba2:	bf18      	it	ne
 800fba4:	4240      	negne	r0, r0
 800fba6:	4770      	bx	lr
 800fba8:	f04f 0000 	mov.w	r0, #0
 800fbac:	4770      	bx	lr
 800fbae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800fbb2:	d105      	bne.n	800fbc0 <__aeabi_d2iz+0x48>
 800fbb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800fbb8:	bf08      	it	eq
 800fbba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800fbbe:	4770      	bx	lr
 800fbc0:	f04f 0000 	mov.w	r0, #0
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop

0800fbc8 <__aeabi_d2uiz>:
 800fbc8:	004a      	lsls	r2, r1, #1
 800fbca:	d211      	bcs.n	800fbf0 <__aeabi_d2uiz+0x28>
 800fbcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800fbd0:	d211      	bcs.n	800fbf6 <__aeabi_d2uiz+0x2e>
 800fbd2:	d50d      	bpl.n	800fbf0 <__aeabi_d2uiz+0x28>
 800fbd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800fbd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800fbdc:	d40e      	bmi.n	800fbfc <__aeabi_d2uiz+0x34>
 800fbde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800fbe2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fbe6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800fbea:	fa23 f002 	lsr.w	r0, r3, r2
 800fbee:	4770      	bx	lr
 800fbf0:	f04f 0000 	mov.w	r0, #0
 800fbf4:	4770      	bx	lr
 800fbf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800fbfa:	d102      	bne.n	800fc02 <__aeabi_d2uiz+0x3a>
 800fbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800fc00:	4770      	bx	lr
 800fc02:	f04f 0000 	mov.w	r0, #0
 800fc06:	4770      	bx	lr

0800fc08 <SDMMC_BLOCK_0_DATA_0_PIN_CONFIG>:
 800fc08:	0080 0000 0000 0001 0001 0000 0001 0000     ................

0800fc18 <SDMMC_BLOCK_0_DATA_1_PIN_CONFIG>:
 800fc18:	0080 0000 0000 0001 0001 0000 0001 0000     ................

0800fc28 <SDMMC_BLOCK_0_DATA_2_PIN_CONFIG>:
 800fc28:	0080 0000 0000 0001 0001 0000 0001 0000     ................

0800fc38 <SDMMC_BLOCK_0_DATA_3_PIN_CONFIG>:
 800fc38:	0080 0000 0000 0001 0001 0000 0001 0000     ................

0800fc48 <SDMMC_BLOCK_0_COMMAND_PIN_CONFIG>:
 800fc48:	0080 0000 0000 0001 0001 0000 0001 0000     ................

0800fc58 <SDMMC_BLOCK_0_CLK_PIN_CONFIG>:
 800fc58:	0080 0000 0000 0001 0001 0000 0001 0000     ................

0800fc68 <sdmmc_block_command>:
 800fc68:	0000 0209 031a 0400 063a 071b 081a 0909     ........:.......
 800fc78:	0a09 0c1b 0d1a 0f00 101a 113a 123a 183a     ..........:.:.:.
 800fc88:	193a 1b3a 1c1a 1d1a 1e3a 201a 211a 261b     :.:.....:.. .!.&
 800fc98:	2a3a 371a 383a 061a 0d3a 163a 171a 2902     :*.7:8..:.:....)
 800fca8:	2a1a 333a 0112 051b 061b 083a 231a 241a     .*:3......:..#.$
 800fcb8:	0000 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
 800fcc8:	0100 0000 0200 0000 0400 0000 0800 0000     ................
 800fcd8:	1000 0000 2000 0000                         ..... ..

0800fce0 <RTC_0_config>:
 800fce0:	0001 0000 0000 0000                         ........

0800fce8 <RTC_0_time_alarm_config>:
 800fce8:	0000 0000 0004 07b2 0100 0000 0000 07b2     ................
 800fcf8:	7fff 0000                                   ....

0800fcfc <INTERRUPT_TIMER>:
 800fcfc:	0239 0100                                   9...

0800fd00 <INTERRUPT_CAN_RX>:
 800fd00:	034c 0100                                   L...

0800fd04 <INTERRUPT_CAN_RX2>:
 800fd04:	054d 0100                                   M...

0800fd08 <I2C_LCD_sda_pin_config>:
 800fd08:	00d0 0000 0001 0000 0000 0000               ............

0800fd14 <I2C_LCD_scl_pin_config>:
 800fd14:	00d0 0000 0001 0000 0000 0000               ............

0800fd20 <I2C_LCD_channel_config>:
 800fd20:	86a0 0001 0000 0000                         ........

0800fd28 <I2C_LCD_config>:
 800fd28:	fd20 0800 6671 0800 664d 0800 662d 0800      ...qf..Mf..-f..
	...
 800fd4c:	0202 0000 ffff 0000                         ........

0800fd54 <LfnOfs>:
 800fd54:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0800fd64 <ExCvt>:
 800fd64:	5543 4145 4141 4341 4545 4945 4949 4141     CUEAAAACEEEIIIAA
 800fd74:	9245 4f92 4f4f 5555 4f59 4f55 4f9c 9f9e     E..OOOUUYOUO.O..
 800fd84:	4941 554f a5a5 a7a6 a9a8 abaa adac afae     AIOU............
 800fd94:	b1b0 b3b2 41b4 4141 b9b8 bbba bdbc bfbe     .....AAA........
 800fda4:	c1c0 c3c2 c5c4 4141 c9c8 cbca cdcc cfce     ......AA........
 800fdb4:	d1d1 4545 4945 4949 d949 dbda dddc df49     ..EEEIIII.....I.
 800fdc4:	e14f 4f4f 4f4f e8e6 55e8 5555 5959 efee     O.OOOO...UUUYY..
 800fdd4:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
 800fde4:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
 800fdf4:	5d5b 0000 4146 0054 4146 3354 0032 0000     []..FAT.FAT32...

0800fe04 <uc850>:
 800fe04:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
 800fe14:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
 800fe24:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
 800fe34:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
 800fe44:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
 800fe54:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
 800fe64:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
 800fe74:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
 800fe84:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
 800fe94:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
 800fea4:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
 800feb4:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
 800fec4:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
 800fed4:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
 800fee4:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
 800fef4:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0800ff04 <cvt1.4314>:
 800ff04:	0061 031a 00e0 0317 00f8 0307 00ff 0001     a...............
 800ff14:	0178 0100 0130 0132 0106 0139 0110 014a     x...0.2...9...J.
 800ff24:	012e 0179 0106 0180 004d 0243 0181 0182     ..y.....M.C.....
 800ff34:	0182 0184 0184 0186 0187 0187 0189 018a     ................
 800ff44:	018b 018b 018d 018e 018f 0190 0191 0191     ................
 800ff54:	0193 0194 01f6 0196 0197 0198 0198 023d     ..............=.
 800ff64:	019b 019c 019d 0220 019f 01a0 01a0 01a2     ...... .........
 800ff74:	01a2 01a4 01a4 01a6 01a7 01a7 01a9 01aa     ................
 800ff84:	01ab 01ac 01ac 01ae 01af 01af 01b1 01b2     ................
 800ff94:	01b3 01b3 01b5 01b5 01b7 01b8 01b8 01ba     ................
 800ffa4:	01bb 01bc 01bc 01be 01f7 01c0 01c1 01c2     ................
 800ffb4:	01c3 01c4 01c5 01c4 01c7 01c8 01c7 01ca     ................
 800ffc4:	01cb 01ca 01cd 0110 01dd 0001 018e 01de     ................
 800ffd4:	0112 01f3 0003 01f1 01f4 01f4 01f8 0128     ..............(.
 800ffe4:	0222 0112 023a 0009 2c65 023b 023b 023d     "...:...e,;.;.=.
 800fff4:	2c66 023f 0240 0241 0241 0246 010a 0253     f,?.@.A.A.F...S.
 8010004:	0040 0181 0186 0255 0189 018a 0258 018f     @.....U.....X...
 8010014:	025a 0190 025c 025d 025e 025f 0193 0261     Z...\.].^._...a.
 8010024:	0262 0194 0264 0265 0266 0267 0197 0196     b...d.e.f.g.....
 8010034:	026a 2c62 026c 026d 026e 019c 0270 0271     j.b,l.m.n...p.q.
 8010044:	019d 0273 0274 019f 0276 0277 0278 0279     ..s.t...v.w.x.y.
 8010054:	027a 027b 027c 2c64 027e 027f 01a6 0281     z.{.|.d,~.......
 8010064:	0282 01a9 0284 0285 0286 0287 01ae 0244     ..............D.
 8010074:	01b1 01b2 0245 028d 028e 028f 0290 0291     ....E...........
 8010084:	01b7 037b 0003 03fd 03fe 03ff 03ac 0004     ..{.............
 8010094:	0386 0388 0389 038a 03b1 0311 03c2 0002     ................
 80100a4:	03a3 03a3 03c4 0308 03cc 0003 038c 038e     ................
 80100b4:	038f 03d8 0118 03f2 000a 03f9 03f3 03f4     ................
 80100c4:	03f5 03f6 03f7 03f7 03f9 03fa 03fa 0430     ..............0.
 80100d4:	0320 0450 0710 0460 0122 048a 0136 04c1      .P...`."...6...
 80100e4:	010e 04cf 0001 04c0 04d0 0144 0561 0426     ..........D.a.&.
 80100f4:	0000 0000                                   ....

080100f8 <cvt2.4315>:
 80100f8:	1d7d 0001 2c63 1e00 0196 1ea0 015a 1f00     }...c,......Z...
 8010108:	0608 1f10 0606 1f20 0608 1f30 0608 1f40     ...... ...0...@.
 8010118:	0606 1f51 0007 1f59 1f52 1f5b 1f54 1f5d     ..Q...Y.R.[.T.].
 8010128:	1f56 1f5f 1f60 0608 1f70 000e 1fba 1fbb     V._.`...p.......
 8010138:	1fc8 1fc9 1fca 1fcb 1fda 1fdb 1ff8 1ff9     ................
 8010148:	1fea 1feb 1ffa 1ffb 1f80 0608 1f90 0608     ................
 8010158:	1fa0 0608 1fb0 0004 1fb8 1fb9 1fb2 1fbc     ................
 8010168:	1fcc 0001 1fc3 1fd0 0602 1fe0 0602 1fe5     ................
 8010178:	0001 1fec 1ff3 0001 1ffc 214e 0001 2132     ..........N!..2!
 8010188:	2170 0210 2184 0001 2183 24d0 051a 2c30     p!...!...!.$..0,
 8010198:	042f 2c60 0102 2c67 0106 2c75 0102 2c80     /.`,..g,..u,...,
 80101a8:	0164 2d00 0826 ff41 031a 0000               d..-&.A.....

080101b4 <sdmmc_block>:
 80101b4:	0090 2000 0250 0104 0000 0101 8000 0000     ... P...........
 80101c4:	0000 0001 0101 0101                         ........

080101cc <CAN_OBDII_gpio_out>:
 80101cc:	8100 4802 0005 0000                         ...H....

080101d4 <CAN_OBDII_gpio_out_config>:
 80101d4:	0088 0000 0001 0000 0002 0000               ............

080101e0 <CAN_OBDII_gpio_in>:
 80101e0:	8100 4802 0004 0000                         ...H....

080101e8 <CAN_OBDII_gpio_in_config>:
	...

080101f4 <CAN_OBDII_sr>:
 80101f4:	0000 0000                                   ....

080101f8 <CAN_OBDII_LMO_01_Config>:
 80101f8:	0108 2000 0021 0000 0000 0000               ... !.......

08010204 <CAN_OBDII_LMO_02_Config>:
 8010204:	0128 2000 0022 0000 0001 0000               (.. ".......

08010210 <CAN_OBDII_LMO_03_Config>:
 8010210:	0148 2000 0023 0001 0001 0000               H.. #.......

0801021c <CAN_OBDII>:
 801021c:	00c8 2000 4300 4801 00fc 2000 01f8 0801     ... .C.H... ....
 801022c:	0204 0801 0210 0801 0000 0000 0000 0000     ................
	...
 80102a8:	01f4 0801 01cc 0801 01d4 0801 01e0 0801     ................
 80102b8:	01e8 0801 0103 0003 0000 0000 0000 0000     ................
 80102c8:	3025 6433 2056 3025 6433 2041 3025 6433     %03dV %03dA %03d
 80102d8:	6d6b 682f 0000 0000 3025 6434 2520 3430     km/h....%04d %04
 80102e8:	2064 3025 6434 2520 3230 312e 0066 0000     d %04d %02.1f...
 80102f8:	3025 6434 2520 3430 2064 3025 6434 2520     %04d %04d %04d %
 8010308:	3530 0064 3025 6434 2520 3230 2064 3025     05d.%04d %02d %0
 8010318:	6432 0000 3025 6432 2520 3230 2064 3025     2d..%02d %02d %0
 8010328:	6432 253a 3530 3a64 0000 0000 7325 645f     2d:%05d:....%s_d
 8010338:	7461 5f61 7265 6168 2e6e 7874 0074 0000     ata_erhan.txt...
 8010348:	3025 2e33 6632 253a 3330 322e 3a66 3025     %03.2f:%03.2f:%0
 8010358:	6433 253a 3330 322e 0a66 0000 7325 745f     3d:%03.2f...%s_t
 8010368:	6d65 5f70 7265 6168 2e6e 7874 0074 0000     emp_erhan.txt...
 8010378:	3025 2e33 6632 003a 3025 2e33 6632 0000     %03.2f:.%03.2f..
 8010388:	000a 0000 3025 6434 252f 3230 2f64 3025     ....%04d/%02d/%0
 8010398:	6432 2520 3230 3a64 3025 6432 253a 3230     2d %02d:%02d:%02
 80103a8:	0064 0000 1c1f 1e1f 1e1f 1f1f 1f1e 1f1e     d...............
 80103b8:	6e49 7469 6169 696c 697a 676e 2e2e 002e     Initializing....
 80103c8:	6e49 7469 6169 696c 657a 2e64 2e2e 0000     Initialized.....
 80103d8:	7265 6168 2e6e 7874 0074 0000 6966 7372     erhan.txt...firs
 80103e8:	2074 666f 6120 6c6c 5320 6570 6963 6c61     t of all Special
 80103f8:	7420 6168 6b6e 2073 6f74 4520 6872 6e61      thanks to Erhan
 8010408:	5920 4c49 414d 215a 2121 0a0d 0000 0000      YILMAZ!!!......
 8010418:	0043 4e49 0046 6e69 0066 414e 004e 616e     C.INF.inf.NAN.na
 8010428:	006e 0030 3130 3332 3534 3736 3938 4241     n.0.0123456789AB
 8010438:	4443 4645 3000 3231 3433 3635 3837 6139     CDEF.0123456789a
 8010448:	6362 6564 0066 2565 646c 0000               bcdef.e%ld..

08010454 <fpi.5242>:
 8010454:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8010464:	0000 0000                                   ....

08010468 <tinytens>:
 8010468:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8010478:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8010488:	6f43 64ac 0628 1168                         Co.d(.h.

08010490 <fpinan.5278>:
 8010490:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80104a0:	0000 0000                                   ....

080104a4 <_ctype_>:
 80104a4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80104b4:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80104c4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80104d4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80104e4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80104f4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8010504:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8010514:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8010524:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80105a4:	4900 666e 6e69 7469 0079 614e 004e 4f50     .Infinity.NaN.PO
 80105b4:	4953 0058 002e 0000 0000 0000               SIX.........

080105c0 <__mprec_tens>:
 80105c0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80105d0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80105e0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80105f0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8010600:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8010610:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8010620:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8010630:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8010640:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8010650:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8010660:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8010670:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8010680:	9db4 79d9 7843 44ea                         ...yCx.D

08010688 <__mprec_bigtens>:
 8010688:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8010698:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80106a8:	bf3c 7f73 4fdd 7515                         <.s..O.u

080106b0 <p05.5277>:
 80106b0:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
 80106c0:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....
